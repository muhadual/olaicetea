function _0x39ec() {
    var _0x4d2fc3 = ['prefab/ui/PanelNew', 'WALL', 'node_showlistmain', 'rat', 'PropertyGoldOfflineDict', 'hideBossTips', 'undefined', 'player', "error during creating layer:", 'getPower', 'todayArmsSubTryCount', 'sequence', 'Enum_Net_MsgId', 'fadeOut', 'openId', '_speed', 'goldDelta', 'passNode', '_updateMap', 'PlayerDWFireComponent', 'click', 'btn_lvup', 'SerializableCipher', 'getMapBossCircleData', 'floor', 'try_video', 'btn_sys_arms1', 'node_screen', 'vomitEnemys', 'enemyFireScale', 'checkAreaEnemy', 'refresh_listsub', '_color', 'mapStop', 'collisionWalls', 'isSlowDown', 'shadowNode', 'loadEnemy', 'speed_rotate_in', 'playSound', 'attackTail', 'btnSureNode', 'pauseEnemyFinish', 'Develop', 'apply', 'updateCount', 'adjustDir', 'atlas_ui', '7b64aFT0CZD77qSgyBBysC2', 'pickupAllKnives', 'durationDict', 'callFunc', 'initGameAgainAction', 'len_webtexture', 'knivesCmpIn', 'node_cost', 'hasLog', 'startGame', 'CKnifeParentCtrl', 'CHRotate', 'changeSpeedRate', 'dic_skel_item_shine', 'create', 'setRotate', 'list_stage', 'curDirTag', 'dic_follow_min', 'curDtRatio', 'onHpCAnimFinished', 'node_ui', 'config/boss', 'entity', 'cab3cIFP/BMN6LZLuEPeD/X', 'PlayerDWIceComponent', 'isMore', 'getCurSubIndex', 'adShow', 'TOUCH_MOVE', 'entityEnemy', 'list_release_res_atlas', '00:', 'is_request', 'strong', 'bossFireBomb', 'landNode', '_isMusicOn', 'set_official_enter', '_bossTipOver', 'xMax', 'enemyNode', '_append', 'repeatForever', 'gameUINode', 'CNodeCollider', 'ConfigMapBossData', 'attackCall', 'catch', 'isClickedOver', 'TData', 'changeSkin', '372a6I+XxBB9LzvgTm+z2q4', '2e1a25hXA1P6LvFsrwgqYzu', 'getAdCount', 'startIndex', 'rtHLaser', 'levelData', '_knifeLightCom', 'firstRevive', 'emitEvent', 'onClickBtnGiftGold', 'ItemProperty', 'BLACK', 'isStop', 'mapWall', 'EVENT_HIDE', 'getListDWLasterTarget', 'tip_font_lvfull', 'UserInfo_D', 'removeChildByName', 'tintTo', "lingjing refreshsdk", 'checkGoldPropAnim', 'addMapBossCircleData', 'onClickBtnStart', 'trackArr', 'shareid', 'showFingerGuide', 'checkGameOver', 'decode', 'color_effect', 'sp_main_icon', 'fingerNode', 'message', 'pf_guideUI', 'favlist', 'bf_head_', '_dyDirty', 'stopAll', 'itv', 'stopCall', 'easeIn', 'list_follow_max', 'getEnemyOutData', 'speed', 'skinNode', 'isWx', 'enemyHurting', 'hep', 'effect_die', 'dic_sysBtnShow', 'list_name', 'pop', 'MapData', 'https://picconfig.chiji-h5.com/h5_pic/square_img_20190116164520.jpg', 'RegisterTime', 'uiCom', 'addShareData', 'addBossKnife', 'AS_Gold', 'curDestVec', 'stopAllEffects', 'addEnemys', 'WeiXin', 'list_angle', 'uiNode', 'off', 'changePlayerSkin', 'checkGoldOffline', 'MapManager', 'stopParentRotate', 'setGoldDelta', 'addBossFireEnemys', 'node_hand', 'resetRadius', 'eleFrameAnim', 'node_power', 'StreamCipher', 'HeroAttackIn', 'visible_gift_power', "Btns length:", 'addProgram_enter', 'CommonSdk', 'e3432xeHY1OmqGbLwryiMQg', 'com_gold_offline', 'icon_goldkill', 'refreshDir', 'shadow', "lingjing init", 'playerInSpeed', 'SubTryStage', 'dic_item_com_effect', 'totalGold', '0a8d0TZWBpKfIcYwAJ0zxjD', '分享成功!', 'name_LastData', '_countDownTime', 'readSettingData', '_touchMoveEvent', 'totalDistance', 'Electr', 'addListCollider', 'isCanPropertyArmsSubLvupCurFun', 'schedule', '623a4bTZ6FNf7mpCOEFjb+c', 'preLoadOver', 'danceIndex', 'drn', 'node_collider', 'callback_loadres_success', 'preLoadDropKnifeCount', '分享数据找不到:', 'onDpAnimFinished', 'Root_Canvas', 'initAction', 'add', 'gameRuleSystem', 'pf_panelOffline', 'getRadiusChangePosition', 'conEnemyArr', 'cur_index_enemy', 'getPosDis', 'compute', 'setMaxPassStage', 'PlayerAnimComponent', 'destFindCount', 'pos_gun_in', 'knifeColliderNodeCtrl', 'knivesFinalPos', 'numberDiffAbs', 'Enter', 'getTimestrDouble', 'showFeedBack', 'pf_panelGold', 'fillType', 'setParam', 'Launch', 'logicTargetInfo', '_moveFixCom', 'MapDict', 'audioEngine', 'moveCom', 'isInSreen', 'Enum_Loading', 'enemyIconWarn', 'vomitTime', 'NetUp', 'MainSceneLoad', 'addKnifeBossData', 'aaaa-关闭', 'CHeroCollisionHandleSystem', 'removeProp', 'dwCom', 'GbData', 'node_player', 'getRangeEnemys', '_dropType', 'setPlayerVisible', 'vomitCount', 'CBC', 'BlockCipherMode', 'position', 'EnemyAttrComponent', 'https://popstar.gameley02.cn/popStar12', "can't get pool of type:", 'EnemyConDict', 'register', 'ahl_', 'knifeGold', 'sy2', 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=', 'onExit', 'Version_Num', 'check_guide_level', 'ENEMY', 'sucPowerNum', 'changeKnifeAttackGroup', 'dic_unfollow_min', 'is_move', 'onRevive', 'wallLeave', 'pTail', 'CHeroKnifeCollisionWallListener', 'index', 'isCollisionWall', 'len_pf', 'pf_enemy_effect', '_sem_diffY', 'OnlineTime', 'AIMoveState', 'mapBg', 'btn_stage_cur', 'list_guide', '1437496IMHdhB', 'AS_Over', 'sound', 'finished', 'l_content', 'ConfigMapEnemyAreaData', 'loadRes', 'getIntervalByCount', '_gameOverFunc', 'title', 'GuideDict', 'effect_main_lvup', '2220540iqfjex', 'offlineGoldPre', 'febc9albJxHpKGeWceWoX3+', 'dic_sysBtnPosDiff', 'hbtn1', 'visible_gift_gold', 'uiDelay', 'setShareTime', 'setRotateSpeed', 'checkGuide', 'setScale', 'addPropertyArmsMainData', 'BladeMaster_loading', '_addEntityPlayer', 'changeMain', 'decrypt', 'updateGameLogic', '206166QdwdLH', 'Power', 'KnifeRivalEffect', 'bossDiscarded', 'dic_node', 'create_snake', 'PropSlow', '星期六', 'owner', 'getRadiusByKnifeCount', 'shareTime', 'addNode', '_cipher', 'getRadiusByKnifeInCount', 'buffCom', 'awakePos', 'EnemyOffset', 'knifePool', '_showCall', 'adjust_follow', 'spd', 'encryptBlock', 'm_gameScale', 'checkBoss', 'failParam', 'a820612P/FEWITaDjrYO1g4', 'checkCity', 'PasswordBasedCipher', 'getNumK', 'AS_Offline', 'initAnim', 'onBtnClicked', 'playHurtAnim', 'NetBase', 'CMoveWithOwnerNode', 'n_btn_cancle', 'list_res_pf', 'spr_vibrate', 'deb42zu4BtLxr0/c4qGBmk1', 'pauseDis', 'DDSDKUI', '21bd0k1MAlEeYrOZ07uKOO/', 'getOfflineGoldValue', 'Game', 'WHITE', 'finalPos', 'color', '_initSpeed', 'sucFontNode', '_createDropKnife', 'setState', '_timeNum', 'getFunByIndex', 'DropType', 'list_unfollow_max', 'hideFingerGuide', 'revive', 'name_UserId', 'PfNum', 'enemyRemoveLaser', 'anchorY', 'cleanUp', 'skinColor', 'curDir', 'refresh_sublv', 'getFarthestEnemys', '_mapPauseAble', 'showPropProgress', 'diffY_sys', 'MapAreaEnemyDict', 'propDurationArr', 'getHandColliderNode', '_pauseEnemyIndex', 'setRadius', 'frozenDuration', '06-00-', 'lastRotation', 'loginCallback', 'scrollView', 'len_json', 'MapScale', 'addPanelNew', 'checkMapPause', 'Collider', 'Enum_Reward', 'goldCount', 'playerOutUI', 'propMgr', 'curDistance', 'shareId', 'addBoss', 'btn_sys_gold', 'isStart', 'createPrefab', 'getDWKnife', '分享次数--', 'delayTime', 'BossKnifeDict', "Can not get constructor of ", 'loadConfigKnifeBoss', 'addChild', 'faildNode', '保存数据出错了--', 'Weapon', 'calculateMoveDis', 'thronRadius', 'onHlpCAnimFinished', 'dec3bC7fZJPwoE601SMPgf0', 'CKnifeMoveCtrl', 'dir', 'getShareCount', 'active', 'start_dir', 'musicOn', 'enabled', '43a79rAvnVCJpxVREEN1Kmf', 'PanelRevive', 'AS_Menu', 'sp_get', 'set_follow_time', 'doctorFrameAnim', 'uiScale', '星期三', 'node_listmain', 'numNode', 'die', 'spr_type', 'btn_get', 'GoldTime', 'getFollowEnemy', 'sendVideoShow', 'per', 'scrollToOffset', 'onNodeMoveBy', 'number', 'getCurSubFun', 'Finger', '_bloodPos', '553e5cG2EJLD4Stpk8G1EWG', 'el_bed_l', 'e_202', 'Property', 'lmt', '9c0b5yXgrdFHKPViwX+prJj', '_curActTag', 'show_sys_arms1', 'end', 'btn_stage_finish', 'StageStart', 'KnifeDropCollisionWallListener', 'playGameAgainAction', 'knives', 'enemyOutArr', 'EnemyUIComponent', 'levelInput', '_deputyWeaponCollisionEvent', 'vertical', 'dic_hp', 'anim', 'english_', '_anchor', 'icon_sys_arms2', 'var', 'toString', 'sp_line_gray', 'removeFromParent', '10iPsfIc', 'dw2_1_0', 'HmacMD5', 'dic_skel_item_ball', 'addPlayer', 'list_sub', 'lightUIList', 'head_body', 'ebb5eN+fX1I/KPc+6WbuJwZ', 'node_hand_r', 'refresh_official', 'GiftGoldStage', 'hidePlayer', 'onPickUpKnife', 'playGetPropAnim', 'MapPauseData', 'openURL', 'releaseRotation', 'EntityAddSys', '4ccd3hXjJZII60GCIMzLC3+', 'skel_sub_lvup', 'unschedule', '_pickRadius', 'sendOnline', 'se_5_2', 'btn_close', 'distance', 'collisionWall', 'isCollideWallTimesEnd', 'pf_gameUI', 'getOfflineGold', '2db2dus7VdMRZWlgtK2OUJ1', 'aec_', 'localStorage', 'head_p_parent', 'E_GuideId', 'bind', 'getDate', "IPHONE X", 'saveRegisterTime', 'AS_Revive', "Can not get component of ", 'iterations', 'Atlas_Enemy', 'dic_item_launch', 'curSpeedRatio', 'frameList', 'macro', 'blockSize', 'in_pos', 'popup_panelLevelGuide', 'collider_p', 'addGbData', 'playGameOverAction', 'config/boss_electr', 'stopKeepTime', 'node', 'BossKnivesComponent', 'main_shine_2', 'Pkcs7', '9bc09NYkAhMGIop8So085JW', 'performance_dt', 'node_offline_font_get', "lingjing showsdk", 'rotation', 'onClickGuide', '_blinking', '05-01-', 'onClickBtnAudioOn', 'role_shine', 'pos_edge_gun', 'getPropertyData_GoldOffline', 'playHurtLightAnim', 'ClickBtnSysSub', 'PLAYER_MAIN_FOLLOW', 'DeputyWeaponCollisionHandleSys', 'Boss_Parent', 'd6303H9DhNEb4vu2nQ7MneH', 'setSettingShake', 'kgd', 'node_logo', 'Screen', 'PlayerStateComponent', 'DYTools', 'Enum_BFState', '6c74feV+mpMnZzilID2YtAH', 'getNextDest', '_type', 'dic_shine_node', 'knifeCollisionSoundCtrl', "checkArea = ", 'getPropertyGoldOfflineData', 'ad_count', 'clear', 'text', 'EnemyBuff', 'noticeWallLeave', 'execute', 'atlas_homeui', 'data', 'TOUCH_END', 'create_hands', '_createHelper', '_xformMode', 'loadMapBossCircle', 'BladeMaster_main_weapon', 'getHours', 'load_force', 'mapMgr', 'list_release_res_spine', 'name', 'moreGame', 'landKnives', 'node_op', 'list_res_atlas', 'canChangeDir', 'players', '_bossData', 'selectsub_index', 'font_collect', 'getMapBossFireData', 'dic_main_icon', 'noticeOwnerLeave', 'getUserID', 'onClickBtnLvup', 'slowDownTime', '场景加载失败', 'trackEvent', 'd023aKWGopEU4czfvXISmG6', 'playGoldFlyEffect', 'arrContains', 'atkRadius', 'Hasher', 'checkOfficial', 'com_arms1', 'BladeMaster_stage_win', 'Enum_Num', 'shareProbDict', 'Decryptor', '_checkCol', 'EnemyBaseComponent', 'e5795XAfoVFNrxziqzw43vG', 'Connect', 'mandible', 'block', 'spv', 'ZERO', 'node_shield', 'skel_electr_ball', 'Electricity', 'CEntityKnife', 'curGuideAudioId', 'initVomitUI', 'bossElectrGun', 'gameId', 'GameOverGold', 'isDefence', 'EnemySpeedUpMoveComponent', 'skel_btn_shine_3', '_bloodNum', 'sucRewardNode', 'Normal', 'setHurtRatio', 'is_checkmark', 'refreshGold', 'CKnifeStateComponent', 'loadEnemyOut', '661859ICNPmU', 'getG', 'getComponent', 'eye', 'knifeImage', 'getPosition', 'scheduleOnce', 'attackNode', 'theme', '_nDataBytes', 'e_101_0', " error:", 'getCurTime', 'getListNewSub', '_bossConfigData', 'sub', 'blood', '_bossPos', 'curRotateSpeed', 'getClassByName', 'add_diffY', '&imageId=', 'preloadMaps', 'isTargetIn', 'PowerTime', 'xuliCall', 'onreadystatechange', 'spawn', 'a8989C9zk9P9JNgq676fScF', 'SettingData', 'Atlas_Test', 'getMonth', 'node_main_lv', 'btn_2', 'stopMoveTime', 'Flash', '2664a8OYHZJb6dfN9xI9O6t', 'node_num', 'dic_dline_shadow', 'addCollisionEffect', 'share_total_count', 'reduceKnife', 'cidCode', 'eleLineFrameAnim', 'putProp', 'config/advershare', 'PanelBase', 'StageFail', 'StrongTime', 'loadResWebTexture', 'createEnemyShadow', 'PlayerDWElectricityComponent', 'getHasGiftPower', 'goldPNode', 'f_check_topbar', 'dieLight', 'Doctor', '不能重复领取奖励', 'defineProperty', 'move_speed', 'effectNode', 'fromCharCode', 'setTargetIn', '_mapPauseEnemyAble', '_isVideo', 'targetRollRotation', '_collisionEventMgr', 'action_hands', 'reset', '05-00-', 'Atlas_Wall', 'enemyFont', 'endUiINAction', 'timeshare', 'atlasTest', 'MapBossData', 'node_bottom', 'play', 'hurt', 'node_count_gold', 'refreshOfflineAnim', '_animList', '_process', 'com_attacked_effect', 'proSpr', '星期四', 'kData', " stage unlock", 'removeEnemy', 'type:', 'changeMainWeaponSkin', 'passStage', 'offset', 'CEntityBossElectr', 'getShareData', 'CEntityBoss', 'EnemyStateComponent', 'EnemyBuffComponent', 'OfflineGoldTime', 'words', 'ConfigMapBossFireData', '_dwId', '_mode', 'frozenTime', 'hpCFrameAnim', 'SkeletonData', 'mapSpeed', 'Share', 'adCountDict', 'Node', 'key', 'updateCall', 'f_deal_msg', 'PanelModal', 'Sprite', 'removeCollisionEvent', 'LastData', 'pos_launch_in', 'show_op', 'skel_stone', 'enemyArr', 'ConfigKnifeBossData', 'EVENT_SHOW', 'send', 'se_5_1', 'setTimeOfflineGold', 'ConfigEnemyConData', 'ADShareData', 'setGuideStep', 'mapOver', 'setTouching', 'bossShake', 'posDelta', 'initAttack', 'dro', 'pf_db', 'getUnGetArmsSubList', 'rtDiff', 'clamp', 'enemyColorBlood', 'loadJson', "no Collider To Change Tag", 'click_unfinish', '_isFree', '37635a1125M6YWgZsaOPX9R', 'refreshOfflineRecover', '_recoverType', '_bossTipCall', 'BladeMaster_sub_weapon', 'goldPropState', 'getSoundNum', 'addGuideData', 'getComponentsInChildren', 'n_btn_sure', 'sub_diffY', 'reload_count_cur', 'dic_item_edge', 'setUrlFrame', 'keySize', 'changeParent', 'animDieCom', 'stopMove', 'b1866SEE5FPZ6ID4UpkRhjl', 'DicBossEnemy', '_isAdverReady', 'd45ddCbLd9LepNMKYljTzNp', 'ScrollView', 'laserHurt', 'EnemyData', 'dic_skel_item_smoke', 'invincible', 'signAngle', 'targetIn_pos', 'png', 'loadGuide', 'EnemyAttrBaseCom', 'rewardAdOver', 'EntityDWKnife', '_minViewY', 'getChildByName', 'font_goldoffline', 'changeSysEffectPlayer', 'join', 'dw2_1_1', 'htm', 'be1affDQMtL55AvBHAk4LwI', 'speed_move_in', 'CollisionEventManager', '_collisionWalls', 'pos_enemy', 'performance_count', 'anchorX', 'refreshDuration', 'followWeapon', 'wallCollider', '8b9c9QBhRVFJ5u3nhn9BRgi', 'channel', 'enemyFirePos', 'list_time', 'ThemeId', 'goldInput', 'initPowerRecover', 'addSelf', 'getTodayGiftGoldCount', 'setItem', 'playShowThronAct', 'createBlock', 'change_arms1bg', 'danceTime', 'playRewardAd', '1111', 'successNode', 'initProperty', 'main_shine_line', 'btn_3', 'weaponNode', 'HurtNormal', 'ArmsSub', 'init_listsub', 'lightNode', 'lineRect', 'PropGold', 'node_offline_font_full', 'ShareShowTime', 'open', '_enemyWaveCount', 'thronShadow', 'LevelDict', 'addDWKnife', 'isIPhoneX', 'PropType', 'setAccount', 'skinId', 'SpriteFrame', 'level', 'dic_item_hp_com', 'addGold', 'LaserComponent', 'addPersistRootNode', 'Awaking', 'isNewPlayer', 'dic_item_gun_shine', 'e094dh6ixBDL7k8tiHuTD42', 'preLoadAdver', '_dxDirty', 'callbackEnd', 'btn_stage_boss', 'addEntitySys', 'createPauseEnemy', 'refreshSkinSpr', 'Firing', 'atkNode', 'list_request', 'mdy8155zs2619lfm', 'getLevelData', 'list_gold', 'getID', 'changeArmsSubEnd', 'EnemyBase', 'localHeroCollision', '8f7571kDeNEy7VNB5voKqxj', 'Idle', '入场属性错误', 'times3Node', 'initLevelPass', 'pf_num', 'setMoveDir', 'emit', 'preloadScene', 'refresh_gift_gold', 'frameshare', 'EnemyDict', 'getTryBtn', 'playEffect', 'change_eyeshine_color', 'getTimeSecondStr', 'lhands', 'hurt1', 'Component', 'firingHurt', '443904UXkpXQ', 'lingjingArea', 'teamID', '5c5d84laBhGPL636pDjDBU3', 'pos_item_die', 'ClickBtnSysMain', 'curIndex_tr', 'fixPositionByWall', 'colEnemyCom', 'ConfigPropertyArmsSubData', 'Launcher', 'PropMoveFix', 'initCommonValue', 'isDieOver', '_hash', '隔天刷新', 'isAdjust', 'curAcc_time', 'overGoldChange', 'bfb61BOTZ9NPLn2vbxubs0+', 'changeShadowImage', 'curAtkHurt', '_entity', 'soundIdDict', 'dropGold', 'changeDirTimes', 'goldEyeNum', 'CommonFunc', 'targetIn_time', 'Ele', 'getMapBossElectrData', 'node_arms2', 'performance_level', 'callback_progress_change', 'colingWalls', 'MapWayData', '9998-', 'firstTouchId', 'bossEntity', 'collisionBlocks', 'stringToPoint', 'slowSpr', 'showLoading', '_diffX', 'arms2', '_closeCall', 'sigBytes', 'isHaveAd', 'hit', '_screenOutRect', 'CGameRuleSystem', 'official_enter', 'f8143EsQ8ZDkLEmvJuGuuy5', 'atkEnemys', 'enemyEntity', 'GuideUI', 'BossType', '36400VwPKBN1KtXaITWwcdd', 'updateFunc', '67b47b46eNLl7U+/+a1h6pM', 'isPlayerCollide', 'list_release_res_image', 'isRectInterectLine', 'ADShareManager', 'initMoveSpeed', 'PACM00', 'attack_time', '_minX', 'addNewKnife', 'prefabPath', 'refreshSkinColor', 'groupIndex', 'adjust_shadow', 'EntityWorld', 'colliderNode', 'getLocation', 'movedownPlayer', 'onClickBtnOffline', 'StageUI', 'set_mouth_state', 'icon_gold', 'com_gold', '_key', 'sp_icon', 'sh_', 'knifeColIndex', 'getKnivesCount', 'speedSlowParam', 'Init', 'json', 'enemyHurt', 'changeKnifeEnemyParentToUI', 'openBtnSys', 'config/main', 'fixPositionByScreen', 'playIdleAnim', '_radius', 'resetSysIconAction', '_cancelCall', 'advershare', 'rotate', 'vomitDuration', 'getPropertyArmsSubData', 'flyGold', 'list_res_webtexture', 'isp', 'f2fe65HvD5EZKnPLQak7TzD', 'targetRotate', 'WeaponCount', '_shareTotalCount', 'processBlock', '6796dtRwYlMpLSzVZMRalAn', 'https://play.google.com/store/apps/details?id=com.gameley.blademaster.spinning.en', 'destPos', 'setTail', 'curConOut', 'GNet', 'loadResPf', 'MapBlockData', '_ENC_XFORM_MODE', 'show_sys_arms1_shadow', 'AndroidManager', 'd9c14RYuhJLBr/g6saZwAAu', 'scaleX', 'setPosition', 'list_follow_min', 'radiusIn', '_pickKnifeCollisionEvent', 'knifeMoveCtrl', 'Track', '082c76TU+BBP4zaOTAZ7EwQ', 'dic_listsub_scale', 'dic_line', '0101744DgVDm7OR7EYttilr', 'updateMap', '_addContinueEnemys', 'OpenCustomerServices', 'Dic_Sub_Level', 'checkEnemyOut', 'SubLv', 'initPower', 'Enemys', 'EnemyOffsetDegree', 'colWallAble', 'skel_boss_fire_effect', 'getRender', 'vomit', 'EnemyOutDict', 'shareCountDict', 'checkVersion', 'mas', 'logicTargetPos', 'skel_main_lvup_circle', 'addGoldCount', '_bossCount', 'Free', 'shareSwitch', 'animCom', 'config/sub', 'levelNode', 'PanelOffline', '_minY', 'die_effect', 'guideStep', 'addComponent', 'EnemyMoveFix', 'logicPlayer', 'normalShadow', 'dpFrameAnim', 'ektail_1001', 'aef_', 'getFinalPosition', 'releasePosition', 'EnemyAttrThronCom', 'initData', 'Release', 'getPlayerDWFollow', 'addEnemy', 'poolMgr', '_knifeCollisionEvent', 'com_cost', 'checkHurtDelta', 'initPropertySys', 'gold', 'list_collider', 'backToFront', 'isFire', 'warn', 'CPoolMgr', 'changeGroup', 'ShareData', 'ConfigEnemyData', 'btn_clear', 'Form_D', 'shareGame', 'len_atlas', 'updateRotate', 'change_Sublogo', 'propSpr', 'btnClickAble', 'hbtn2', 'normalTime', 'CommonValue', 'setFirstRevive', 'skel_electr_die', 'showSDKUI', 'start_radius', 'function', 'bulScreen', 'ViewCenter', 'setCurSubFun', 'curRSpeed', '5d9533tMMxDpodb2AieMT7h', 'tryGamme', 'director', 'isLoading', 'bossElectrDie', 'setShareCount', 'e0b84QOPeRNW6X17JuUaNdW', 'btnGetNode', 'refreshPowerRecover', "从\"我的小程序\"进入后领取", 'EnemyAnim', 'hideAdLoading', 'loadData', 'startChangeToDefence', 'fadeIn', '_mapPauseData', 'dic_item_hp', 'snake_head', 'create_show', 'changeKnifeEnemyParentToMap', 'sdk', 'onClickBtnGiftPower', 'fickEnemys', 'Tools', "lingjing show", 'rtHNormal', '_dropCom', 'energyInput', 'speed_rotate_max', 'strongDW', '91e32+TSPFLJaDp+tZFynAo', 'addAdShareData', 'BladeMaster_guide', 'getKnife', 'ArmsSub_TryWill', 'knifeStateComp', 'EntityDWBase', '_titleStr', 'EnemyType', 'needCheckCollision', 'SeparatorIII', 'danceKnifeArr', 'ConfigMapBossElectrData', 'hideLoading', '_touchStartEvent', 'Device_Model_Ready', '_lvData', '没有方向', 'die3', 'com_stage', 'sub_board', 'yIn', 'heroRotate', 'dic_attack_enemys', 'isIn', 'PlayerDWNormalBase', 'moveType', 'onClickBtnSetting', 'btnGet3Node', 'createLvNum', 'laserAtkTail', 'getRadioByCount', 'list_res_image', 'propertys', 'adjustDuration', 'error_code', 'getItem', 'getGoldOfflineCurTime', '_bgNode', 'getPropertyLv_Sub', 'onStopMovingByKeyboard', '_uiNode', 'preLoadEnemyCount', 'get_speedXY_by_rotate', 'PLAYER', 'lightPool', 'Enum_Channel', 'ZeroPadding', 'e_5_line', '_collider', '_stopTime', 'create_parent', 'getPropertyArmsMainData', 'list_release_res_pf', '_moveCom', 'b78dbE/KJ5Kj6f2O5Zk4z/f', 'cos', 'actionAble', 'stopRotate', '98e86jEdVND6o/ukHanEV3G', 'COUNT', 'lineId', 'EnemyCollisionBlockListener', 'willPlayHurt', 'CEntityBossCircle', 'touchAble', 'hurtSpeed', 'moveupPlayer', 'roleSpr', 'goldFont', '4099eJXeE5FeIRnOYMIGFJE', 'MapImageData', 'config/guide', '_DEC_XFORM_MODE', 'VersionCode', '_wayCount', 'dic_listsub_pos', 'tryArmsSub', 'AdverType', 'el_gun', '5d0e8Mmah1Iga4LHBP15tvq', 'EntityEnemy', 'mulSelf', '_target', 'CBaseCollisionHandleSystem', '_minBufferSize', 'onMoveBy', 'num_time', 'giftGold', 'arrow_lvup', 'https://docs.google.com/document/d/e/2PACX-1vSe03ILolzBI5Zro4dqOoqtsML8374TRd0gOzSTUWlgl8oqD1NQIDhipLh_8A14GdoxPB7CSJJyfmcL/pub', 'pf_itemProperty', 'pos_hand_r', 'Attack', 'mode', 'showShareMenu', 'ael_9_', 'val', 'skel', 'kil', 'pauseArr', 'OpenSSL', 'followPlayerIn', 'moveStart', 'strongSpr', 'offlineGoldMax', 'pause', 'enemyFontShadow', "{}.constructor(\"return this\")( )", 'goldNode', 'set_click', 'doRecover', 'bot', 'list_snake', 'setNum', 'Enum_AfType', 'propArr', '_skinSpr', 'imageId', 'Vec2', 'extend', 'timeout', 'checkMoveDest', '_goldNum', 'getEnemyRandomDir', 'd289eNVq2ZG05YmefwXRT3d', 'fillCenter', 'dropArr1', 'removeSelf', 'getPropertyData_Main', 'radius_p', 'scaleTo', 'setSpeed', 'TILED', 'get_official_time', 'el_el_shadow', 'heroMoveStart', 'attrMgr', 'getLimitStr', 'diffX_sys', '_time', 'gameSdk', 'Strong', 'getB', 'uiClickDelay', 'needCheckStay', 'updateLogic', '_knifeLightNode', 'removeDataDicBossEnemy', 'can_attack', 'get_item_nodeShine', 'Local', 'end_pos', 'bf_hand_', '_dir', 'addAttrData', '0789dvC569Nr7Pb5b3AFpoE', 'node_eyes', 'isPersistRootNode', 'as_list_time', 'setAfStatus', 'frameImage', 'push', 'playXuliAnim', 'list_attack_time_dis', 'DeviceList_TopBar', 'knifeColliderListener', 'atlasGuide', 'getTimeOfflineGoldGet', 'attrCom', 'isRotating', 'Level_FailCount', 'addMapBossData', 'CircleCollider', 'fontNode', '44ba4hQ4QRP0YvJwj3DwuOm', 'zIndex', 'tail_die', 'SlowRatio', 'goldLess', 'node_circle', 'error', 'loadResAtlas', 'BufferedBlockAlgorithm', 'PlayerDeputyWeaponBase', 'e9ebcQZYe9O2JmmEtyXJoMu', 'radiansToDegrees', 'misc', 'Vomit', 'node_label_tip', 'pickupCom', 'sendSaveDataErr', 'sendGameErr', 'stateCom', 'newsub', 'BlockCipher', 'Integer', 'EnemyAttr', 'ConfigPropertyGoldOfflineData', 'shareFailCall', 'mainWeaponSkinId', 'finalPosition', 'isGameOver', 'GiftPowerFallDown', 'setGoldEyeShow', 'changeSpeed', 'setSettingMusic', 'bossFireAttack', '_2_', 'ontimeout', 'isSnake', 'AndroidMgr', 'arrRemove', 'moveArrowdown', 'not_checkmark', 'startVec2', '_blockList', 'line', 'showPlayer', 'getR', 'dic_unfollow_max', 'lingjingSwitch', 'update', 'skel_changesub_', 'PowerRecoverTime', 'TOUCH_CANCEL', 'Base64', 'setMapStop', 'playGoldEffect', 'node_power_num', 'change_color', 'addMapBossSnakeData', '_recoverTime', '0343fQCg/hPs71gEHTHfyCN', 'targetPos', 'rival', 'enterStrong', 'sendVideoFinish', 'OfflineGoldOnceRecoverTime', 'bossFireIn', 'e_5_1', '__esModule', 'state', '_curResetTime', 'SnakeEnemys', 'node_gold', 'parent', "PanelCheat copy", 'sendMsg', 'setTimeOfflineGoldGet', '37ca7ZWhddNk6jaeJLp6j2K', 'reportId', '6cdecMfaktBKq/LyqOitKeS', 'DWK', 'frameTime', 'prototype', 'addBossSnake', 'prefab/common/PfTip', 'kdf', 'PlayerSlowRatio', 'e_5_0', 'node_lvNum', 'playGoldEnemyDie', 'name_guideStep', 'setHasGiftGold', 'PlayerCollisionEnemyComponent', 'isPowerFull', 'height_factor', 'initOfflineGoldRecover', 'setString', 'startNode', 'wayVec', 'onFireAnimStop', 'skel_gold_lvup', 'PanelSetting', 'tryShow', 'adjustMoreSpeed', 'bodyNode', 'create_item', 'loadMapBoss', 'updatePosition', '_doFinalize', 'ah_', 'overWGold', 'startChangeToAttack', 'list_hand_collider', 'stoneBombShake', 'followEntity', 'loadMapPause', 'getTimePower', '$super', 'mixIn', 'node_shadow_close', '2fea4JpduRHe4yF3vKci+nn', 'isRelease', 'getPropertyGoldKillData', 'sendShareOut', 'clearListNewSub', 'dropParam2', 'setMainScrollPos', 'rewradSpr', 'font_goldkill', 'registerTime', 'stringify', 'atlas_property', 'noticeWallCollision', 'Action', 'Enum_Gb', 'curRotation', 'CPickKnifeCollisionHandleSystem', 'tip', '92aa6TZwVpIjopIUiUXhlgj', 'getGbData', 'acceleration', 'skel3Light', 'height', 'endIndex', 'Gold', 'com_lv', '_pauseEnemyTime', 'adCountTime', 'isAfStatus', 'overFailed', 'saveCid', 'GFunc', 'showUI', '_entityEnemy', 'Server_Report', 'start_pos', 's_time', 'PanelGold', 'NetDown', 'GoldKill', 'sendData', 'reloadResTip', 'addPanelOver', 'frameCount', 'mapEndStone', 'getNeareastEnemysForMap', 'dealParam', 'addMyProgram', 'getCollEffect', 'dic_radius', 'bossElectrIn', 'ar_list_time', 'node_show_arms1', 'showAction', 'dw2_0', 'updatePos', '公众奖励', "Cannot find module '", 'initEnemysData', 'panelLoading', 'getCanPropertyArmsSubLvupFun', 'E_SnakeAI', 'aed_', 'factor', 'normalFrame', '_dropMoveFix', 'preLoadCall', '0.1.9', 'ciphertext', 'rankCall', 'setCloseCB', '_collisionBlocks', 'addBossElectr', 'lib', 'addPropertyArmsSubData', 'target_pos', 'GAudio', 'init_listmain', 'skel_electr_shine', 'normalDuration', 'mon', 'oId', 'Enum_PropertySys', 'EnemyMoveBaseComponent', "lingjing city = ", 'shakeTimes', '6cb0b/u0CJDUaACCMQIwm9Q', 'sp_3', '_stateCom', 'sp_2', 'animation', '033afruUTpCb4Ub3bnsH0XE', 'tag', 'SlowTime', 'config/gold1', 'hlpFrameAnim', 'lvup_open_close', 'adjustLessSpeed', 'Level', 'Die', 'subLvup', 'horizontal', 'trydlg', 'HKReport', 'showReloginUI', 'snake_line', 'Gun', 'updatePlayerSlowRatio', '4da6bFgfDZB0bvc4zbsgY1+', '_btnAble', 'Charge', 'get_item_nodeSp', 'firingDuration', 'node_mouth_close', 'todayGiftPowerCount', 'doctorEffectNode', 'node_collision', 'readLastData', 'ChangeStage', 'skel/', 'find', 'now', 'setAnimation', 'list_newsub', 'getScheduler', '_loadDDSDK', 'ConfigPropertyArmsMainData', 'setStage', 'getBlockVertex', 'a8cfef4AVRLk53b1u4Z4+JA', 'list_enemys_last', 'dwId', '_animDieCom', 'btn_start_layer', 'action_sub', 'ConfigMapEnemyData', 'change', 'mid', '4d498XoBn5Ok5Bx39HXKowN', 'tips', 'call', 'maxRadius', 'duration', 'CEntityBossFire', 'dic_follow_max', 'trigger_launch', 'checkPauseEnemyEmpty', 'bf_body_', 'actState', 'scaleY', 'clearDeputyWeaponEvent', 'knifeCount', 'NodePool', 'main_shine_1', 'canvas', 'icon_sys_gold', 'EnemyMoveType', 'attackEnemy', 'fun', 'mov', 'laserAtk', 'PlayerDWKnifeComponent', 'isDead', 'name_adCount', 'node_arms1', 'cur_guideData', "showShareMenu fail", 'hasGiftPower', 'bgm_boss', '_recoverDuration', 'GSDK', 'Intersection', 'are', 'utd', '_startPos', 'isMoving', 'splice', 'blockCollision', 'getPositionForMap', 'skel_electr_line', 'Split', 'playHideAction', 'enemyDropNumber', 'adShare', " +1", 'node_addprogram', 'rewardBgNode', 'refreshDistance', 'CKnifeSkinCtrl', 'bkShow', 'Slow', 'rotateTo', 'GameData', 'ShareAppMessage', 'dieByKnife', 'CKnifeColliderNodeCtrl', 'sendInfor', 'ConfigData', 'Prop', 'getNode', 'power', '0be014Q8BJOLYJkjSh9j3Ie', 'goldIcon', 'bossElectrLaunch', '星期一', 'thronFrame', 'node_btn', 'btn_setting', 'isFullBlood', 'charAt', 'EnemyHurtState', 'prop', 'se_line_', 'numberToString', 'EnemyAttrEnterCom', 'POST', 'clickOver', 'LoadingData', 'video', 'music', 'angle', 'bossData', 'audio/', 'addMapBossFireData', 'select', 'btn_audio_off', 'node_p_shadow', 'version', '23-', 'EnemyActionMoveComponent', 'changeTime', 'BossDropKnife', 'attack', 'getTime', 'adjust_item', 'setHasGiftPower', 'show_sys_arms2', 'onShareIn', 'KnifeState', 'getTodayArmsSubTryCount', 'inBack', 'throwKnife', 'mapSpeedH', 'thronDuration', 'moveTo', 'setRotation', 'killCount', 'finishReward', 'getRandomUserId', 'name_shareTotalCount', 'curLevNum', 'sendStageFail', '_curTime', 'pf_wall', 'arrContain', 'gameUI', 'clipDict', 'len_spine', 'Score_D', 'mag', 'setAnchorPoint', 'scrollView_offset', 'subStrByCharacter', 'refresh_gift_power', 'eb1d5aBkBRAmrBJg9D5I7Vs', 'pos', 'deputyWeaponColSys', 'subScreen', 'arrContainPos', 'startRadius', 'touchFalseTime', 'repeat', 'PanelNew', 'isOut', '6ec4cAezphIXakTEIo8j3pD', 'zd2', '{id:', 'isLocal', '_bossTimeAble', 'sp_btn_lvup', 'atlas', 'rewardPower', 'hasAttribution', '88228/4UKxA6pBu/TgmC6A1', '_reviveFunc', '3ad8eBlxwBPorhi25IBoyS4', '难度系数错误', 'initBlood', 'reducePowerAction', 'EventType', 'CEntityWall', 'removeAnimAct', 'usePower', '.wlxocalIGhostL;IV.gNEamzedVistprizxQpEbuzYqWtion.cMozmVCKEZyQZATPyTGqzNyAHkULVKqqzFYUFLMWIVRJ', 'skel_revive', 'setPropertyLv', 'ufl', 'EnemyAttrSplitCom', 'favGame', 'handMoveTime', 'Publish', 'time_offlineGold', 'close', ", city = ", 'Prefab', 'dwi', 'Boss_SnakeTail', 'shineId', 'ConfigAttrData', 'adjustUI', 'DW_KNIFE', 'refreshGoldNumDisplay', 'onStopMoving', 'callback_close', 'atlas_gameui', 'Color', 'lights', 'node_p_head', 'charCodeAt', 'logEvent', '_shareProbCountDict', 'curDWAtk', 'bf_mouth_close', 'comArr', 'out', '_btnTime', 'setTag', 'firingHurtTime', '属性错误', 'instantiate', 'l_title', '_actionCom', 'enemyGoldEyePos', 'config/share', 'destroy', 'MapCircleWallData', '{level:', 'blockLeave', 'mainLvup', 'FILLED', 'curAttack', 'uep', 'head_parent', 'playMapEndStoneBlink', 'saveLastData', '_maxX', 'handDelay', 'speed_rotate', 'curBlood', 'AdverSuccess', 'image', 'type3Spr', '03-', 'hpFrameAnim', 'ddSdkNode', 'getRandomVec2', 'btn_shake_off', 'progNode', 'reload_count_total', 'isKnife', 'Atlas_Game', 'touchCall', 'playOutMapAct', 'newDW', 'cur_speed_rotate', 'getBossCom', 'knifes', 'attack_index', 'callback_bossDie', 'die_item', 'cur_time_unfollow', 'curCity', 'Ice', 'radiusReduce', '9a6903aJsBIP5llj0AIsrzV', 'hlpPlaying', 'list_release_res_webtexture', 'goldLessPopupPanelGold', 'way0:error', "Video is not available, please try again later.", 'createPrefabByName', '_collisionFix', 'getEnemy', 'dic_rotate', 'f19cfKdPxdNZZNDqiIu/Z9M', 'guideUINode', 'changeNodeGroup', '_finishCall', '{value:', 'addListSub', 'beginCall', 'dic_shine_pfnum', 'MainUp', 'sub_box_select', 'split', 'getAdShare', 'fin', 'sendSubLvup', 'font', 'preLoadMap', 'getOwnerPos', 'HeroRotateSpeed', 'wallCCollider', 'shareID=', 'stringToSize', 'CryptoJS', 'CKnifeFixByWallCtrl', 'src', 'PanelOver', 'cebd78+sVxCr7xXywebUU97', 'firingTime', 'dic_listsub_node', 'doEnterAction', 'speed_move', 'shine', 'CPlayerKnivesComponent', '_path', 'PoolType', 'adCountChange', '_moveByPos', 'Boss_ElectrHead', 'mapTop', 'sendWeaponLev', '3JlNCUo', 'setTimePower', 'prop_f_', 'AttrDict', 'sprWall', 'img', 'color_normal', "return (function() ", 'enemy', 'node_load', 'danceRollAdd', 'getPropertyData_Sub', 'getAfStatus', 'playerFly', 'isLvup', 'CEntityFollowPlayer', 'hpCPlaying', 'cur_name_shine', 'node_snake', 'propNode', 'setShadow', 'board_btn', 'eye_101', 'hurtType', '06-02-', 'value', 'addCollisionStayEvent', 'dPos', 'dieCall', 'normalRadius', 'gift_power', 'pFinish', 'node_p_circle', 'getMapBossData', 'isPlaying', 'sys', 'EnemyAction', ',level:', 'ReviveAtk', 'b3366s1mlhOIIl7c1NWQ7T3', 'bgShield', 'resetDirty', 'addLevelData', 'stoneBomb', "Can not watch ads!", 'isBoss', 'childrenCount', 'goldNum', 'collisionBlock', 'PropManager', 'loadMapBossElectr', 'playHideThronAct', 'dit', 'bloodChange', 'atkHurt', 'get_factor', 'time_offlineGoldGet', 'getActualAdShare', 'gift_gold', 'isCallbackEnd', 'EnemySkinDict', 'Server_Local', 'playerEnterGameAct', 'setCollisionAble', 'knifeCol', 'changeSubEffect', 'soundOn', 'lastPosition', 'playProgressShowAct', 'node_show_gold_kill', 'onClickBtnSysArmsMain', 'parse', 'pos_node_max', 'dic_angle', 'knifeColSys', 'leaveBlock', 'EnemyCollisionWallListener', 'initSetting', 'touchShield', 'node_shadow_open', 'PauseSlowRatio', 'Test', '_maxViewX', 'ahh_', 'snake_', 'levelNum', 'isAbsNumDiffRange', '_bodyPos', 'Enemy', 'Y85A', 'PanelLoading', 'time', 'loadShare', 'getMainProgress', 'FirstGetSub', 'hpPlaying', 'firstInScreen', 'fadeTo', 'nextLoad', 'curAcc_index', 'danceRoll', 'reb', 'd395fhLhd9LCquOkgxWxKnL', 'aei_', 'sort', 'reward_gold', 'CircleEnemys', 'stopAllActions', 'setGold', 'radiusChange', 'overSuccess', 'Types', '4d9e5isKMxKCZZOO7pjfINQ', 'AS_Power', 'setOfflineGold', 'EntityTag', 'encode', 'xuliFrameAnim', '113f4EatRFGB5803VZ8Lrwo', 'GValue', 'checkEnemyHurtSound', 'CEnemyEffect', 'PlayerPosV', 'MapBossElectrDict', 'isNumberDiffRange', 'adjustScreen', 'followCtrl', 'finalRotation', 'heroColSys', 'toL_listsub', 'rewardAdResultCall', ",## ", 'Size_View', 'isCircle', 'btn_unfinish', 'collider', 'EnemyAttrVomitCom', 'f_deal_error', 'len_image', 'CommonUI', 'getSkinColor', 'timedat', 'openUrl', 'playBgm', 'Boss_FireHand', 'fingerCall', 'can_popup_panelGold', 'bossFireDie', 'arms_sub_', 'isReviveAble', 'onClickBtnSysGold', 'Circle', 'createDecryptor', '_invKeySchedule', 'playLaserHurtAct', 'removeKnife', 'algo', 'setTimeScale', 'changePlayerTheme', 'typ', '20-', 'btn_sys_arms2', 'PowerMax', 'moveBy', 'AS_TrySub', 'dic_item_shadow_gun', 'createPrefabCom', 'removeDropUI', 'GNetUp', 'runAction', 'sud', '_loadStart', 'skel/skel_boss_fire_die/skel_boss_fire_die', 'warning', 'setRewardCB', 'setPower', 'target_in', 'tre', 'MD5', 'distance_in', 'pos_world', 'rotate_speed', 'durationList', 'beginFunc', 'stop', 'list1', '进入后台', 'share', 'aeh_', 'Knife', 'refreshVibrate', 'playEleAct', 'attack_finish', 'cur_state', 'ADShareMgr', '_wallList', '_lightDWCom', 'get_rotate_by_xy', 'rtSpeed', 'Rank_D', '地图区域怪无该配置:', 'get_item_nodeLine', 'dic_item_launch_shine', 'isRevive', 's9mnbdk1giu2e3wn', 'name_cid', 'dieByEnemy', 'sdkLoaded', 'Elastic', 'configData', 'loginSuccess', 'abs', 'Enum_PropertyId', 'getPropertyData_GoldKill', 'bossFireStep', 'se_', 'KnifeThrowCtrl', 'ConfigEnemyOutData', '_hideCall', 'maxSpeed', 'getAttrParam', 'initKnives', 'idle', 'gameStart', 'GoldCount', '_okCall', 'ew1', 'hand_parent', 'encrypt', 'gameNode', 'moveTo_target', 'name_RegisterTime', 'name_version', 'a598cuOxyBGXYdenTvrBVUP', 'CommonEnum', 'lvIconList', 'uiEnd', 'Rect', 'Sleep', 'downY_propertySys', 'Has_TopBar', 'PropCollisionWallListener', 'showAd', 'onHpAnimFinished', 'enemys', 'atlas_game', 'initRole', 'hmtm', 'mapSpeedV', 'sdkWaitTime', 'tip_font_offline', 'target', 'handelCollisionEvent', 'node_rect', 'dropKCount', 'showStoneDrop', 'getIntersectBlocks', 'SplitMin', 'dw5_0', 'type', 'Thron', 'city', '0dac6S0gLpKUIreAWsR7x7r', '_width', 'getSpriteFrame', 'setThronShow', 'node_stage', 'sendUserInfo', 'atkCount', 'init', 'addBossCircle', 'sqrt', 'rep', 'PlayerTouching', 'SubUp', 'addPauseData', 'dic_item_hp_node', 'willMove', 'list_res_spine', 'el_bed', 'content', 'posHNormal', 'getCurMainChange', 'node_right', 'getCollisionManager', 'adjust_dline', 'btn_start', 'checkPowerRecover', 'node_gold_icon', 'GNetDown', 'dic_skel_item_line', 'imageUrl', 'colCollider', '64babaGnm5HiqktaHkNIM1m', '_atlas', 'com_value', 'environment', 'init_data', 'com_num', 'getRangeEnemysForMap', 'Defence', 'CKnifeColliderListener', 'node_listsub', 'bossDie', 'PlayerSlowRatioCount', 'resetAttr', 'isFirstRevive', 'e6ef5Eos+hCv69dkrg9skzn', 'propTimeArr', 'createEncryptor', '_1_', 'layer', 'curRotateAcc_time', 'Fire', 'prefab/ui/PanelSetting', 'EnemyAnimComponent', 'xMin', '06896l8ao9JqKzAu1GwxMzd', 'reviveCount', 'initRadius', '_nRounds', 'clearRivalKnifeEvent', 'addScript', 'sendGuide', 'getMapBossSnakeData', 'PlayerPosH', 'snake_body', 'log', 'enemyDropPropNumber', 'degreesToRadians', 'loadResImage', 'setSettingSound', 'bloodNum', 'yMin', '411aa3RdH5M+r1AF5qxLrw5', 'com', 'curTime', 'entityPlayer', 'treatCount', 'getConstructor', '_lightDWNode', 'bgm_main', 'refreshSkinSprFrame', 'hide_op', 'hasProp', 'MapBossCircleDict', 'ClickBtnLvupMain', 'Label', 'loadResSuccess', 'dust', 'config/boss_fire', 'as_list_acc', 'playEnemyHurtSound', 'followPlayerOut', 'ce4f1QuY2pBDa6FM1CzqdWa', 'play1', 'formatter', 'isCheat', 'pf_homeUI', 'PlayerDWLaserComponent', 'node_level_main', 'try', 'checkMapPauseEnemy', 'cur_sysBtn', 'skel_electr_smoke', 'endGuide', 'isGuideTrigger', '_doCryptBlock', 'ConfigLevelData', '_wallNode', '_localPlayer', 'hasPlayBgm', '_shareCountDict', 'replace', 'node_popup', 'skel_die', 'name_FirstRevive', 'getDelta', 'substring', 'Props', 'FOLLOW_ENEMY', 'stopResetPos', 'List_Main_Change', '751d19ad+pCmagfNRGT+4GK', '_hasCollision', 'playMoveAct', 'FirstMain', '_updateEnemys', '_bloodNode', 'magSqr', 'setSkinColor', 'getCurTimestamp', 'show_model', '87b69BbcOJHWrmv2PBeY5F5', '地图区域怪表错误:', 'SeparatorI', 'addBuff', 'PropertyArmsSubDict', 'getRegisterTime', 'getNumString', 'playLevelShowAct', 'isPlayerDie', 'show', 'shareCallback', '进入前台', 'bgm', 'destFindMaxCount', 'concat', 'Snake', 'dwParam', 'sprNode', 'loadGb', 'string', 'arms_sub_lock', 'initGold', 'HomeUI', 'pad-zeropadding', '_sureCall', 'node_show_gold_offline', 'checkArea--timeout', 'skel/skel_boss_fire_effect/skel_boss_fire_effect', 'prefab/ui/PanelOver', 'Frozen', 'refresh_addprogram', 'isFiring', 'loadEnemyCon', 'stopSoundByName', 'spriteFrame', 'areaArr', 'getEnemyData', 'StrongRT', 'e1dcb72YI1MtoV1KFX48q9v', 'backNode', 'changeStage', 'list_enemy', 'CKnifeCountComponent', 'ReviveFree', 'shareBackGame', 'knifeDropCtrl', 'moveSpeed', 'getParticleColor', 'Follow', 'PlayerMainPos', 'yMax', 'mapNode', 'Server_Param', "离线收益类型 = ", 'changePlayerParentToMap', 'PanelCheat', 'rotate_enter', 'max', 'userName_login', 'https://manage.dadagem.xyz/report', '_prevBlock', 'fillRange', 'canClose', 'sp_offline_full', 'removeComponent', 'ArmsSub_TryFinish', 'freeTime', 'stopActionByTag', 'comDict', 'pf_block', 'getInstance', '领取成功', 'SpriteAtlas', 'WeaponReport', 'icon_power', 'fixPositionByBlock', 'ad_count_time', 'Toggle', 'sendReport', 'saveSettingData', 'dieCount', 'GuideData', '_totalJsonNum', 'com_offline_num', 'onMoveByKeyboard', 'posConvert', 'CEntityBase', 'inGuide', 'instance', 'knifeEntity', 'knife', 'hasOwnProperty', 'PanelAddProgram', 'premultipliedAlpha', '_allDead', 'node_arm1_arrowdown', 'Atlas_Boss', 'touchNode', '_offset', '764eckNWxhIA7JZKF0dlakg', 'pointLineDistance', 'dic_item_gun', 'setShadowOpacity', 'eDie', 'getFavAD', 'CHeroCollisionWallListener', 'addCollisionEvent', 'releaseRes', 'propertys_sub', 'pass', 'close_keyBoard', 'maxX', 'pf_anim', 'sendStageTime', 'refreshSound', 'CEntityWorld', 'addKnifeIn', 'par2', 'effect_player', 'dbNode', 'btn_shake_on', 'skel_snake_hit_shine', 'wpo', '轨迹移动点缺少', 'prm', 'curSpeed', 'rotate_in', 'size', 'loginTime', 'set_addProgram_hasGet', '_curCollisionWall', 'updateMoveState', 'config/showupspot', 'getHKData', 'config/gold2', 'popup_panelGold', 'getEnemyConData', 'showMain', 'set_addProgram_enter', 'getVisibleSize', 'favShow', 'stringToNumber', 'getKnifeBossData', 'createAdver', 'onGameOver', 'addEnemyData', 'center_parent', 'node_close', 'handStart', 'save_ad_count', 'onDocAnimStop', 'destDis', 'showBanner', 'REPEAT_FOREVER', 'CLogicPlayer', 'com_gold_kill', 'substr', 'startDance', 'http://62.234.166.105:80/bladeX', '__require', 'actLightList', 'com_power', 'setShareTotalCount', 'exports', 'pos_edge_launch', 'guide', '_maxViewY', 'el_enemy_shadow', 'prefab/ui/PanelRevive', "'s static var prefabPath", 'skinSpr', 'sleep1', 'skeletonData', 'isDirty', 'endVec2', 'FailRatio', 'adImage', 'areaEnemyArr', 'thronTime', 'updateOwner', 'knivesAcce', 'Enum_EnvironmentType', 'HMAC', 'StageOver', 'game', 'setTodayGiftPowerCount', 'GConfig', 'check_shine', 'getEnemyType', 'overLevelChange', '37116DMqHpJXo8LPnp6q7V/', 'getGameScreenTopOffsetY', 'slice', 'getStringCharacterLength', '获取节点或者精灵失败', 'curEnemyOut', '701530XuwlJCIYu+6wNqqLw', 'node_arrow', 'getListSub', 'par1', '_mapPauseCount', 'isInTarget', 'knivesCmp', 'start', 'btn_sys_l', 'hasher', 'Canvas/share', 'pf_wallS', 'subTryLv', 'getTimeOfflineGold', 'createAreaEnemys', 'setPropertyLv_Sub', 'addEntityNode', 'Enum_Banner', 'emitAllKnivesCountChange', 'captureSpeed', 'landRect', 'Latin1', 'arrow_try', 'nodeCollider', '_followNode', 'refresh_gifts', 'rotateBy', '_pickRadiusSqr', 'init_parent', '_updateGameLogic', 'deputyWeapon', 'spr_knife', 'mul', 'getArmsMainChange', 'pf_property', 'scale_value', 'createMap', 'Launcherr', 'tip_font_power', 'getConfigBossDatas', "uabc = ", 'config/boss_ice', 'children', 'sendMainLvup', 'node_show_arms2', 'arms_sub_new', 'interval', 'isDevelop', '星期五', 'playHurtParticle', 'min', 'Class', 'pickKnife', '21-', 'vars', 'isLineLine', 'clear_click', 'EnemyColorBloodPercent', 'knifeParentCtrl', 'unlock_syssub', 'readyState', 'stoneBombCall', 'node_power_recover', 'Atlas_Guide', 'onAnimCompleted', 'isMove', '45qZezBq', 'initParam', 'curDirSpeed', 'PropertyUI', 'E_GuideUIType', 'endCall', 'refresh', 'getPropertyLv', 'performance_time', 'laserAttack', 'startorder', 'UserID', 'shadow_diffPos', 'updateRotation', 'sendAdverCount', 'set_rotate_speed', 'refreshKillCountDisplay', 'loadAdShare', 'cost', 'dieEff', 'showBossCome', 'finalize', 'change_state', 'official_timestamp', 'awake', 'userInfoCallback', 'refreshDisplay', 'xmgame', 'laserNode', 'initEnterMapAct', 'onClickBtnShakeOff', 'atkDuration', '地图方向错误', 'refreshBloodDisplay', 'tpe', 'getMaxPassStage', 'Skeleton', 'ui_action', '32e2f8arjtENpfgT3bLt+Lx', 'MapPipeData', 'sendShareIn', 'None', '_shadow', 'hurtLightNode', 'Animation', 'touchDirty', 'icon_sys_arms1', 'node_max', 'raduis', 'stopAllSound', 'node_mouth_open', 'Boss_SnakeHead', 'object', 'BoxCollider', 'arms_sub_try', 'getMapAreaEnemyData', 'com_arms2', 'getTodayGiftPowerCount', 'updateState', 'bgW', '_RF', 'dic_enemys', 'PropStrong', 'fireFrameAnim', 'shareMaxCount', 'radius', 'getAdShareData', 'a7314Yi/D1Hrrk3IgD2XfpV', '06-01-', '6196bQplX1LK46feHnNB0te', 'e_line_', 'enemyColorParam', 'RanDir', 'play_skel', 'followEnemy', 'dic_shine', "----------------lingjing sdk onLoaded--------------", 'maxY', 'CommonAudio', 'loadMapBossSnake', 'poolArray', 'setContentSize', 'BiReport', '_startReset', 'jsonOver', 'cData', 'top', 'bloodTime', 'curMoveSpeed', 'wallCollision', 'removeAnim', 'param', 'Url_Login', 'effect_sub_lvup', 'prefab/Panel/Modal/PanelLoading', 'MAX_ZINDEX', 'enemyGoldEyeScale', 'userId', 'resetSub', 'normalize', '_animCom', 'node_head', 'pad', 'checkShareAble', 'rotate_diff', 'new', 'isHurted', 'hide', 'actionFrameTime', 'create_skel', 'StageFailFinish', 'rollRotation', 'getXMLHttpRequest', 'firingHurtDuration', 'list_release_res_json', 'goldEyeArr', 'close_keyboard', '_rivalKnifeCollisionEvent', 'pos_item_out', 'EntityProp', 'StageFailCount', 'CHMove', 'list_effect', 'strongNode', 'callback', 'edl', 'node_content', 'addKillCount', 'getData', 'get_normal', '星期日', 'atlasGame', 'frameNum', 'rotateAble', 'random', 'iceFrameAnim', 'skel_btn_shine_get', 'pos_item_in', 'node_tail', 'moveSpeedRate', 'playDieAnim', 'Laser', 'isNew', 'GameUI', 'ddsdk_ui', 'checkContinuumEnemy', 'load', 'view', 'saveUserID', 'enemyId', 'dropParam1', 'maxlen_snake', 'tip_font_gold', 'clearPickKnifeEvent', 'addListShineNode', 'ShareType', 'sendDate', 'stage', 'rotateKnife', 'onIceAnimStop', 'easeOut', 'addMapBossElectrData', 'StrongAtk', 'config/boss_knife', 'EnemyAttrTrackCom', 'initialCol', 'sin', 'setWeapon', 'a0733kOmJ1CwpcKgqe0BpB6', 'initEnemySkinDict', 'msgId', 'fixByBlock', 'bgId', 'addEnemyOutData', 'bgS', 'sph', 'node_official', 'AdShareSwitch', '_wallCollisionCount', 'is_rotate', 'sp_icon_gold', 'HurtLaser', 'CKnifeInit', '_wayFinishCount', 'cur_time_enemy', 'node_clickShield', 'initDWAtk', '...', 'Enum_AdShareType', 'isItem', 'PAAM00', 'allWaitTime', '_doReset', 'EFFECT', 'pos_hand_l', 'format', 'ver', 'minX', 'sdw_', 'bId', 'checkEnemy', 'checkOtherBoss', 'addSleepEnemys', 'eleCallback', 'HRotateSpeedIn', 'get_real_rotate', 'loadMapBossFire', 'changeBtnSys', 'loadResSprite', 'lvup_arms', 'dance', 'addPropertyGoldOfflineData', 'node_out', 'knifeLightCom', 'destroyAllChildren', 'dieBySnake', '_maxY', 'convertToWorldSpaceAR', 'setWillMove', 'Treat', 'Enum', 'place', 'setCurDir', '4d4a8O1JWhA1oRVfKiCRHPy', 'show_sys_gold', 'addDataDicBossEnemy', 'Capture', 'boss', 'show_player', 'KaOdboutw:NblyKanSkJORGmFEUTVJNwWAJjiL', 'lightList', '_owner', 'atkTime', 'sendLogin', 'scaleBy', 'bgH', 'adjust_dt', 'speed_rotate_min', 'addProgress', 'CKnifeOwnerComponent', 'colTotalCount', 'bf_mouth_open', 'moveFixCom', 'slowDownDuration', '_mapData', 'shareCountTime', 'count', 'otherKnife', 'MapEnemyOutData', 'trigger_gun', 'index_head', 'removeAllChildren', 'getDlg', 'url', 'ar_list_acc', 'touching', 'color_cur', 'reLoad', 'getNeareastEnemys', 'node_value', 'equals', 'WordArray', '8aacdOuWG9Fs5PLbrBahmZb', 'SeparatorII', 'awakeRect', 'get_official_enter', 'mapBottom', '46c57uf1hpMMYtQpBQPAoRl', 'isVec2DiffRange', 'node_gold_num', 'salt', 'convertToNodeSpace', '&otherId=', 'toFixed', 'BladeMaster_video_finish', 'touchAvaliable', '[wxIGLIVNEzVpzxQpEzYqWMzVCKEZyQZATPyTGqzNyAHkULVKqqzFYUFLMWIVRJ]', '_eventListName', 'ConfigMapBossSnakeData', 'changeDir', '_minViewX', 'sp_offline_recover_full', 'dic_dline_angle', 'PropMgr', 'getDay', 'load_number_total', '_firstStart', 'm_gameOver', 'Base', 'limitTime', 'padding', 'cfg', 'DDSDK', 'getFullYear', 'click_get', 'SlowDown', 'tail', '_addEntityCollisionEffect', 'ownerNode', '3ca41+W735MV5OMXy3BEcfT', 'bossFireCharge', 'sendVideoPlay', 'colorArr', '_addSys', 'noticeBlockCollision', 'bossTips', 'CLoginEnemy', 'label_tip', 'resetGameNode', 'version_compare', 'height_body', 'removeBuff', 'layerNode', 'node_showlistsub', 'changeAtlasSprite', 'cur_sub', 'gbd', 'color_cost', 'node_label', '_bossTime', 'getStage', 'Encryptor', 'initDrop', 'loader', 'slowNode', 'PfTip', 'save_share_count', 'name_shareCountTime', 'in_time', 'rewardNode', 'dic_gold', 'pos_gun_out', 'getProp', 'change_arms1', 'createDWShadow', 'Hawkeye', 'PROP', 'dieSprArr', 'click_addprogram', 'PauseDict', 'GUI', '_adCountTime', 'hasBuff', 'officialOn', 'node_property', 'get_addProgram_enter', 'pf_addprogram', 'addEnemyConData', "wall error", "showShareMenu complete-------", 'Utf8', 'get_listmainData', 'Enum_Audio', 'icon_share', 'changeColliderTag', '0e8daAO3ZlM6rV800Je0EOy', 'uiType', 'editArr', '&&&', 'trybtn', 'dic_item_shadow_launch', 'HeroRaduis', 'StrongIII', 'isCapture', 'propertyId', 'bld', 'SpinMaster_LastData', 'skel_btn_shine_2', 'lvList', 'head_follow', 'shieldNode', 'refreshPower', 'loadResJson', 'curGoldCount', 'CMoveFix', 'goldPSpr', 'initUI', 'offlineGold', 'getBtns', 'ivSize', 'name_shareCount', 'resetCall', 'onClickBtnSysArmsSub', '8dc70ZYH1RJXKl9/hlkFsQL', 'get_addProgram_hasGet', '换图失败，获取的节点为空', 'list_radius', 'playerKnifeColKniveEffect', 'DWType', 'checkInitDir', '_removeEntityEnemy', 'load_number_cur', 'changeTag', 'then', 'completeorder', 'lvuptip', 'refresh_sys_lvuptip', 'logicEnemy', 'hasGiftGold', '_height', "lingjing error", 'playAttackLight', 'randomDirTime', 'tim', 'rhands', 'prefabArray', 'time_power', 'releaseSpeed', 'loadMapEnemy', 'resetTime', 'posHLaser', 'canPropertyLvup', 'color_value', 'addAnimAct', '_resend', 'HeroRaduisIn', 'invincibleTime', '_conEnemyArr', 'selfUpdate', 'ArmsMain', 'isFrozen', 'addBossFire', 'ConfigPropertyGoldKillData', 'CHMoveFix', 'Enum_ADShare', '71b596aP6ZD0KhJuzDq8LGi', 'adShareSwitch', '_knife', 'getConfigBossData', 'put', 'f0237SkKexEF49lP5PU2Da7', 'MapWallData', 'dic_pos', 'reward_power', '_waitResetTime', 'play_audio_lvup', 'updateShadow', 'EntityPlayerDeputyFollow', 'length', '_createHmacHelper', 'list_unfollow_min', 'get_item_com_effect', 'set_action_btn', 'startPos', 'setBossBegin', 'onTapBtn', '22-', '_player', 'usc', 'addPropertyGoldKillData', 'get', 'btn_no', 'playerNode', 'errorMsg', 'bossTipNode', 'label_font', 'snake_tail', 'pdata', 'skel_main_lvup_shine', 'dic_attack_time_last', 'node_level', '_add_after', 'sp_font', 'main_line_white', 'cur_time_follow', 'm_gameStart', 'mpr', '04-01-', 'bf_eye', 'c98b1YXMwhBbKIOggW393ZL', 'enemyDie', '_addEntityEnemy', 'com_property', 'CKnifeCollisionHandleSystem', 'shareCount', 'skel_gold_up', 'node_p_item', 'CommonConfig', 'addMapAreaEnemyData', 'el_arm', 'indexOf', 'loadAtlas', 'areaEnemyAwakeArr', 'skel_finger', 'frozenAnim', 'getContentSize', '_shareCountTime', 'fixByWall', 'addKnife', 'addProp', 'playLaserHurtParticle', 'dd71b0rrYVFv4uGPSaPXa4O', 'sdkType', 'isChangeSys', 'getGuideData', '_curBlood', 'BossKnivesDropCtrl', 'shineDead', 'refreshAnim', 'setCompleteListener', 'node_die', 'initOffline', 'shadowNormal', 'node_shine', 'light', 'saveData', 'rivalNode', 'knifeCountComp', 'curMoveDir', 'refreshBtns', '641436UeWKIX', 'rotateSpeed', 'knifePickCollider', 'shake', 'utp', 'pauseEnemys', 'list_res_json', 'list_enemys_time', 'dic_main_lv', 'HORIZONTAL', 'node_tips', 'mapReady', 'gameNodePos', 'rtVideo', 'newDayRefresh', 'black', 'moveDistance', 'atlasBoss', 'curRotateAcc_index', 'playGameStartAct', 'set_success_resource', 'Atlas_Shadow', 'goldPropFrameAnim', 'node_hand_l', 'blockRectArr', 'enemyPool', 'successCall', 'getProgress', 'font_attack', 'changePlayerParentToUI', 'ContinueEnemyData', 'initRSpeed', 'topNode', 'CMoveByTouch', '_goldList', 'dropOver', 'emitAllKnivesChangeSkin', 'moveState', 'stopSound', 'acceleratedSpeed', 'aniad', 'dic_item', 'touchEndEvent', 'rewarded', 'aedoc_', 'pf_panelCheat', 'Boss_ElectrLine', 'E_CTag', 'addProgram_hasGet', 'todayGiftGoldCount', 'EvpKDF', 'PlayerPickupComponent', 'convertToNodeSpaceAR', 'random_int', 'isLaterDay', 'ceil', '游戏错误--', '_iv', '_bossArr', 'maxCount', 'imageArr', 'getPauseData', 'easing', '_heroCollisionEvent', 'dic_diff_index', '3462bqx6xBFZochOiyuN9cS', 'playerFly_1', 'clearShareProbCount', '955b2fpZBdOoId49j0bd/yx', 'sdkMgr', 'opacity', 'treatLight', 'dict', 'Cipher', 'enemyColor', 'changePlayerMainWeapon', 'node_offline', 'sendRank', 'knifeOwnerComp', 'initAdShare', "please assign ", 'enterCall', 'config/global', 'Enum_GuideStep', 'rect', 'ActionState', 'TOUCH_START', 'EntityFollowEnemy', 'ConfigMapBossCircleData', 'atan', 'color_times', 'playMusic', 'EnemyAttrDoctorCom', 'dic_enemy', 'dic_listsub_sp', '_moveType', 'throwKnifeStart', 'AddEnemy', 'setTodayArmsSubTryCount', 'propId', '难度降低:', 'knifeSkinCtrl', 'loadConfig', 'Blood', 'shadowVomit', 'list_dline', 'mapShield', 'width', 'Type', '_data', 'AES', 'curLevel', 'thronShow', 'initReward', '08c6aY1vmRDi5MSsBRzVg21', 'getAttrData', 'dic_dline_node', 'OfflineTimes', 'getGold', 'OS_IOS', 'sleep2', 'getAdTotalCount', '_hurtLightNode', 'list_hp', 'isGuideFinish', 'symbol', 'dropArr2', 'setShadowState', 'list2', 'btn_audio_on', 'curRadius', 'addCircleCollider', '87190XkaThPTrgCStEmIQXY', 'refreshOffline', '190ZOwvZL', 'dropKParam', 'blackNode', 'bossPause', 'timeList', 'playElectricityAct', 'addListShinePfnum', 'group', 'Mask', 'dic_dline', '_pauseArr', '_value', 'pos_node_min', 'refreshCount', 'knifeLightNode', 'playSoundWithClip', 'moveAble', 'animNode', 'clearData', 'animEnd', 'setFollow', 'icon_gold_gray', 'attrData', "GValue.Has_TopBar = ", 'charArr', 'handEnd', 'contains', 'color_attack', 'getLineBlocks', 'getIPInfo', 'virbrate', 'pos_launch_out', 'bossNode', 'curBgm', 'can_popup_panelPower', 'play_audio', 'asp', 'node_in', 'enemyBg', 'MaxLevel', 'pf_sdk', 'icon_goldoffline', 'EditBox', 'node_count_power', '_shine', 'Boss_Circle', 'initStage', 'mouth', 'status', 'MapBossFireDict', 'e1236Nm8NtJKIViO7vZ7TXQ', 'spr_sound', 'Player', 'BossKnivesCtrl', 'initDropUI', 'homeUINode', 'ShadowOwnerComponent', 'pos_shadow', 'getGuideStep', 'endPos', 'HWeaponCountIn', 'MapBossDict', 'change_sub_', 'minWaitTime', 'name_adCountTime', 'itemNode', 'shareCountChange', '_jsonCount', 'isChecked', 'node_time', 'Server_Test', 'Google', 'shareDict', 'Boss_Fire', "Malformed UTF-8 data===", 'showFloatTips', 'default', '_recoverAble', 'stopEffect', 'continue', 'm_signOffsetY', 'FireEnemys', 'CEntitySnake', 'moveTouch', 'KNIFE', 'playBlackHideAct', 'setAdTime', 'landKnife', 'rotateTime', 'config/skill', 'PropertyArmsMainDict', '_isSoundOn', 'responseText', 'SpeedUp', 'loadPropertyArmsMain', 'constructor', '6ceb3nNRjVPxK5j18pjVXUm', 'arrow_newsub', 'AddKnife', 'EnemyDropComponent', 'showFavGame', 'scale', 'WorldRect', 'handShow', 'getEnemyDropAble', 'GoldOffline', 'requestId', '102289BDjYTJ', 'closeBtnSys', 'aes', 'smoothDamp', 'global', 'ratio', 'playerSpr', 'skel_light', 'preLoad', 'aiType', 'MapBossSnakeDict', 'blockArr', 'PanelPower', 'adShareDict', '我知道了', 'clone', 'setIsInTarget', 'enc', 'e_5_2', 'loadPropertyGoldKill', 'hurtDuration', 'getKnives', 'dic_shadow', 'atk', 'effect_gold_lvup', 'cid', 'move_targetIn', 'refreshDisPro', '_callBack', 'landKnifes', 'skel_levelguide', '28468P/9VFBwJmXXgpb82DS', 'PfFrameAnim', 'attackLight', 'flitIndex', 'setSysBtnShowScale', 'dic_item_rotate', 'PropertyGoldKillDict', 'PanelLevelGuide', 'shakeSlight', 'randomTrySub', 'CEntityPlayer', 'leaveWall', 'HeroState', 'sw_', 'node_body', 'refresh_count', 'loadTime', 'playPassLevelAct', 'node_btn_max', 'clearHeroEvent', 'onClickLayerGray', '5b318bCPX9LL7MLlm+4kQAm', '_adCountDict', 'loadScene', 'lvupAction', 'MapAreaEnemyData', 'attr', 'col', 'btn_normal', 'showVideo', 'atlas_offline', '_addEntityKnife', 'node_gray'];
    _0x39ec = function () {
      return _0x4d2fc3;
    };
    return _0x39ec();
  }
  (function (_0x44872e, _0x4b0023) {
    var _0x44ad82 = _0x44872e();
    while (true) {
      try {
        var _0x495ead = -parseInt(_0x30fc(2823, 0xdf9)) / 0x1 + -parseInt(_0x30fc(3208, 0x12e6)) / 0x2 + -parseInt(_0x30fc(1417, 0xa17)) / 0x3 * (parseInt(_0x30fc(3179, 0xfd2)) / 0x4) + -parseInt(_0x30fc(12, 0x759)) / 0x5 * (-parseInt(_0x30fc(2582, 0xcb4)) / 0x6) + -parseInt(_0x30fc(3191, 0x11f2)) / 0x7 + -parseInt(_0x30fc(459, 0x97a)) / 0x8 * (parseInt(_0x30fc(2072, 0xa06)) / 0x9) + parseInt(_0x30fc(2716, 0xbfd)) / 0xa * (parseInt(_0x30fc(179, -0x372)) / 0xb);
        if (_0x495ead === _0x4b0023) {
          break;
        } else {
          _0x44ad82.push(_0x44ad82.shift());
        }
      } catch (_0x4cb20e) {
        _0x44ad82.push(_0x44ad82.shift());
      }
    }
  })(_0x39ec, 0x303f1);
  function _0x1ee9c9(_0x228bb1, _0x2f2af2) {
    return _0x30fc(_0x228bb1 - 0x1bf, _0x2f2af2);
  }
  function _0x30fc(_0x22574a, _0xe5aed5) {
    var _0x529788 = _0x39ec();
    _0x30fc = function (_0x10281e, _0x28d982) {
      _0x10281e = _0x10281e - 0x0;
      var _0xbb07c9 = _0x529788[_0x10281e];
      return _0xbb07c9;
    };
    return _0x30fc(_0x22574a, _0xe5aed5);
  }
  window.__require = function t(_0x58b2f0, _0x1b656e, _0x4cf48f) {
    var _0x2ebb98 = function () {
      var _0x5ab0db = true;
      return function (_0x37cb33, _0x272f7a) {
        var _0x51317a = _0x5ab0db ? function () {
          if (_0x272f7a) {
            var _0x468979 = _0x272f7a.apply(_0x37cb33, arguments);
            _0x272f7a = null;
            return _0x468979;
          }
        } : function () {};
        _0x5ab0db = false;
        return _0x51317a;
      };
    }();
    function _0xd4bf92(_0x244095, _0x2843f2) {
      var _0x2df335 = _0x2ebb98(this, function () {
        var _0x1f2629 = function () {
          var _0x100121;
          try {
            _0x100121 = Function("return (function() {}.constructor(\"return this\")( ));")();
          } catch (_0x3271ad) {
            _0x100121 = window;
          }
          return _0x100121;
        };
        var _0x5842cf = _0x1f2629();
        var _0x14c47a = new RegExp("[wxIGLIVNEzVpzxQpEzYqWMzVCKEZyQZATPyTGqzNyAHkULVKqqzFYUFLMWIVRJ]", 'g');
        var _0x4bc236 = ".wlxocalIGhostL;IV.gNEamzedVistprizxQpEbuzYqWtion.cMozmVCKEZyQZATPyTGqzNyAHkULVKqqzFYUFLMWIVRJ".replace(_0x14c47a, '').split(';');
        var _0x41c28d;
        var _0x2b72c0;
        var _0x4f938e;
        var _0xac2f3d;
        var _0x4a31db = function (_0x3010aa, _0x23bc4a, _0xf75d48) {
          if (_0x3010aa.length != _0x23bc4a) {
            return false;
          }
          for (var _0x38ef13 = 0x0; _0x38ef13 < _0x23bc4a; _0x38ef13++) {
            for (var _0x54e870 = 0x0; _0x54e870 < _0xf75d48.length; _0x54e870 += 0x2) {
              if (_0x38ef13 == _0xf75d48[_0x54e870] && _0x3010aa.charCodeAt(_0x38ef13) != _0xf75d48[_0x54e870 + 0x1]) {
                return false;
              }
            }
          }
          return true;
        };
        for (var _0x33969d in _0x5842cf) {
          if (_0x4a31db(_0x33969d, 0x8, [0x7, 0x74, 0x5, 0x65, 0x3, 0x75, 0x0, 0x64])) {
            _0x41c28d = _0x33969d;
            break;
          }
        }
        for (var _0x571695 in _0x5842cf[_0x41c28d]) {
          if (_0x4a31db(_0x571695, 0x6, [0x5, 0x6e, 0x0, 0x64])) {
            _0x2b72c0 = _0x571695;
            break;
          }
        }
        for (var _0x938254 in _0x5842cf[_0x41c28d]) {
          if (_0x4a31db(_0x938254, 0x8, [0x7, 0x6e, 0x0, 0x6c])) {
            _0x4f938e = _0x938254;
            break;
          }
        }
        if (!('~' > _0x2b72c0)) {
          for (var _0x5b9138 in _0x5842cf[_0x41c28d][_0x4f938e]) {
            if (_0x4a31db(_0x5b9138, 0x8, [0x7, 0x65, 0x0, 0x68])) {
              _0xac2f3d = _0x5b9138;
              break;
            }
          }
        }
        if (!_0x41c28d || !_0x5842cf[_0x41c28d]) {
          return;
        }
        var _0xb8f82 = _0x5842cf[_0x41c28d][_0x2b72c0];
        var _0x5b4003 = !!_0x5842cf[_0x41c28d][_0x4f938e] && _0x5842cf[_0x41c28d][_0x4f938e][_0xac2f3d];
        var _0x3b3714 = _0xb8f82 || _0x5b4003;
        if (!_0x3b3714) {
          return;
        }
        var _0xf0dea6 = false;
        for (var _0x327b21 = 0x0; _0x327b21 < _0x4bc236.length; _0x327b21++) {
          var _0x2b72c0 = _0x4bc236[_0x327b21];
          var _0x59cb07 = _0x2b72c0[0x0] === String.fromCharCode(0x2e) ? _0x2b72c0.slice(0x1) : _0x2b72c0;
          var _0x50c7c6 = _0x3b3714.length - _0x59cb07.length;
          var _0x55bea0 = _0x3b3714.indexOf(_0x59cb07, _0x50c7c6);
          var _0x449820 = _0x55bea0 !== -0x1 && _0x55bea0 === _0x50c7c6;
          if (_0x449820) {
            if (_0x3b3714.length == _0x2b72c0.length || _0x2b72c0.indexOf('.') === 0x0) {
              _0xf0dea6 = true;
            }
          }
        }
        // if (!_0xf0dea6) {
        //   var _0x2b4ed9 = new RegExp('[KOdwNyKSJORGmFEUTVJNwWAJjiL]', 'g');
        //   var _0x23a451 = "KaOdboutw:NblyKanSkJORGmFEUTVJNwWAJjiL".replace(_0x2b4ed9, '');
        //   _0x5842cf[_0x41c28d][_0x4f938e] = _0x23a451;
        // }
      });
      _0x2df335();
      if (!_0x1b656e[_0x244095]) {
        if (!_0x58b2f0[_0x244095]) {
          var _0x4ff86f = _0x244095.split('/');
          _0x4ff86f = _0x4ff86f[_0x4ff86f.length - 0x1];
          if (!_0x58b2f0[_0x4ff86f]) {
            var _0x1a960c = 'function' == typeof __require && __require;
            if (!_0x2843f2 && _0x1a960c) {
              return _0x1a960c(_0x4ff86f, true);
            }
            if (_0x9e98a6) {
              return _0x9e98a6(_0x4ff86f, true);
            }
            throw new Error("Cannot find module '" + _0x244095 + "'");
          }
        }
        var _0x1030c0 = _0x1b656e[_0x244095] = {
          'exports': {}
        };
        _0x58b2f0[_0x244095][0x0].call(_0x1030c0.exports, function (_0x4ca443) {
          return _0xd4bf92(_0x58b2f0[_0x244095][0x1][_0x4ca443] || _0x4ca443);
        }, _0x1030c0, _0x1030c0.exports, t, _0x58b2f0, _0x1b656e, _0x4cf48f);
      }
      return _0x1b656e[_0x244095].exports;
    }
    var _0x9e98a6 = "function" == typeof __require && __require;
    for (var _0x4107c8 = 0x0; _0x4107c8 < _0x4cf48f.length; _0x4107c8++) {
      _0xd4bf92(_0x4cf48f[_0x4107c8]);
    }
    return _0xd4bf92;
  }({
    'ADShareManager': [function (_0x369384, _0x367f23, _0x72d350) {
      'use strict';
  
      cc._RF.push(_0x367f23, "28468P/9VFBwJmXXgpb82DS", "ADShareManager");
      var _0x34be67 = _0x367f23.exports;
      var _0x5ab70c = _0x369384("Tools");
      var _0x5500a0 = _0x369384("CommonEnum");
      var _0x39fda2 = _0x369384("CommonValue");
      var _0x1def16 = _0x369384('CommonSdk');
      var _0x3a741c = _0x369384("CommonConfig");
      var _0x4b7325 = _0x369384('CommonFunc');
      var _0x3492a3 = _0x369384("GameData");
      var _0x26a506 = function () {
        function _0x500934() {
          this.adShareDict = {};
          this.shareDict = {};
          this._adCountDict = {};
          this._shareCountDict = {};
          this._shareTotalCount = 0x0;
          this._adCountTime = 0x0;
          this._shareCountTime = 0x0;
          this.name_adCount = "ad_count";
          this.name_shareCount = 'share_count';
          this.name_adCountTime = "ad_count_time";
          this.name_shareCountTime = 'share_count_time';
          this.name_shareTotalCount = "share_total_count";
          this.shareMaxCount = 0x0;
          this.shareTime = 0x0;
          this.shareProbDict = {};
          this._shareProbCountDict = {};
          this.shareId = 0x0;
          this.shareCallback = null;
          this.shareFailCall = null;
          this.ShareShowTime = 0x0;
        }
        _0x500934.prototype.addAdShareData = function (_0xf5f9c3) {
          this.adShareDict[_0xf5f9c3.id] = _0xf5f9c3;
        };
        _0x500934.prototype.getAdShareData = function (_0x3563d5) {
          return this.adShareDict[_0x3563d5];
        };
        _0x500934.prototype.addShareData = function (_0x472da1) {
          this.shareDict[_0x472da1.id] = _0x472da1;
        };
        _0x500934.prototype.initAdShare = function () {
          this.initParam();
          this.initAdShareCount();
        };
        _0x500934.prototype.initParam = function () {
          this.shareTime = Number(_0x3a741c.GConfig.getGbData(_0x5500a0.Enum_Gb.shareTime));
          this.shareMaxCount = Number(_0x3a741c.GConfig.getGbData(_0x5500a0.Enum_Gb.shareCount));
          var _0x152f8b = _0x3a741c.GConfig.getGbData(_0x5500a0.Enum_Gb.shareProb).split('#');
          for (var _0x4f7665 = 0x0; _0x4f7665 < _0x152f8b.length; _0x4f7665++) {
            var _0x42c155 = _0x5ab70c.DYTools.stringToPoint(_0x152f8b[_0x4f7665], '*');
            this.shareProbDict[_0x42c155.x] = _0x42c155.y;
          }
        };
        _0x500934.prototype.clearData = function () {
          this._shareCountDict = {};
          this._shareCountTime = _0x4b7325.GFunc.getCurTime();
          this._shareTotalCount = 0x0;
          this.save_share_count();
          this._adCountDict = {};
          this._adCountTime = _0x4b7325.GFunc.getCurTime();
          this.save_ad_count();
        };
        _0x500934.prototype.getData = function (_0x5ebcf8) {
          return cc.sys.localStorage.getItem(_0x5ebcf8);
        };
        _0x500934.prototype.saveData = function (_0x28c026, _0x11e470) {
          if ("number" == typeof _0x11e470) {
            _0x11e470 = _0x11e470.toString();
          }
          try {
            cc.sys.localStorage.setItem(_0x28c026, _0x11e470);
          } catch (_0x3ffa58) {
            _0x1def16.GSDK.saveData(_0x28c026, _0x11e470);
            _0x5ab70c.DYTools.error("保存数据出错了--" + _0x3ffa58, _0x28c026, _0x11e470);
            _0x1def16.GSDK.sendSaveDataErr(_0x28c026);
          }
        };
        _0x500934.prototype.initAdShareCount = function () {
          var _0x2a2126 = this.getData(this.name_shareCountTime);
          if (_0x2a2126 && '' != _0x2a2126) {
            this._shareCountTime = Number(_0x2a2126);
          }
          if ((_0x2a2126 = this.getData(this.name_adCountTime)) && '' != _0x2a2126) {
            this._adCountTime = Number(_0x2a2126);
          }
          if ((_0x2a2126 = this.getData(this.name_adCount)) && '' != _0x2a2126) {
            this._adCountDict = JSON.parse(_0x2a2126);
          }
          if ((_0x2a2126 = this.getData(this.name_shareCount)) && '' != _0x2a2126) {
            this._shareCountDict = JSON.parse(_0x2a2126);
          }
          if ((_0x2a2126 = this.getData(this.name_shareTotalCount)) && '' != _0x2a2126) {
            this._shareTotalCount = Number(_0x2a2126);
          }
          if (_0x5ab70c.DYTools.isLaterDay(0x3e8 * this._adCountTime)) {
            for (var _0x58f1de in this._adCountDict) this._adCountDict[_0x58f1de] = 0x0;
            this._adCountTime = _0x4b7325.GFunc.getCurTime();
            this.save_ad_count();
          }
          if (_0x5ab70c.DYTools.isLaterDay(0x3e8 * this._shareCountTime)) {
            for (var _0x58f1de in this._shareCountDict) this._shareCountDict[_0x58f1de] = 0x0;
            this._shareCountTime = _0x4b7325.GFunc.getCurTime();
            this._shareTotalCount = 0x0;
            this.save_share_count();
          }
          _0x5ab70c.DYTools.warn("&&&" + JSON.stringify(this._adCountDict) + ",## " + JSON.stringify(this._shareCountDict) + ",** " + this._shareTotalCount);
        };
        _0x500934.prototype.save_ad_count = function () {
          this.saveData(this.name_adCount, JSON.stringify(this._adCountDict));
          this.saveData(this.name_adCountTime, this._adCountTime);
        };
        _0x500934.prototype.save_share_count = function () {
          this.saveData(this.name_shareCount, JSON.stringify(this._shareCountDict));
          this.saveData(this.name_shareCountTime, this._shareCountTime);
          this.saveData(this.name_shareTotalCount, this._shareTotalCount);
        };
        _0x500934.prototype.setAdCount = function (_0x3c3e26) {
          if (!(this.getData(this.name_adCountTime) || '' == _0x3c3e26)) {
            this.adCountDict = JSON.parse(_0x3c3e26);
          }
        };
        _0x500934.prototype.setAdTime = function (_0x3bc06c) {
          if (!(this.getData(this.name_adCountTime) || '' == _0x3bc06c)) {
            this.adCountTime = Number(_0x3bc06c);
          }
        };
        _0x500934.prototype.setShareCount = function (_0xaa4c6e) {
          if (!(this.getData(this.name_shareCountTime) || '' == _0xaa4c6e)) {
            this.shareCountDict = JSON.parse(_0xaa4c6e);
          }
        };
        _0x500934.prototype.setShareTime = function (_0xfde387) {
          if (!(this.getData(this.name_shareCountTime) || '' == _0xfde387)) {
            this.shareCountTime = Number(_0xfde387);
          }
        };
        _0x500934.prototype.setShareTotalCount = function (_0x272ab6) {
          if (!(this.getData(this.name_shareCountTime) || '' == _0x272ab6)) {
            this._shareTotalCount = parseInt(_0x272ab6);
          }
        };
        _0x500934.prototype.shareCountChange = function (_0x5d8019, _0x24a2a1) {
          var _0xd71d3f = this._shareCountDict[_0x5d8019];
          if (!(undefined != _0xd71d3f && null != _0xd71d3f)) {
            _0xd71d3f = 0x0;
          }
          this._shareCountDict[_0x5d8019] = _0xd71d3f + _0x24a2a1;
          this._shareTotalCount += _0x24a2a1;
          this.save_share_count();
          _0x5ab70c.DYTools.warn("分享次数--" + _0x5d8019 + " = " + this._shareCountDict[_0x5d8019]);
        };
        _0x500934.prototype.getShareCount = function (_0x49fa7d) {
          var _0x55ca4 = this._shareCountDict[_0x49fa7d];
          if (!(undefined != _0x55ca4 && null != _0x55ca4)) {
            _0x55ca4 = 0x0;
            this._shareCountDict[_0x49fa7d] = 0x0;
          }
          return _0x55ca4;
        };
        Object.defineProperty(_0x500934.prototype, "shareCountDict", {
          'get': function () {
            return this._shareCountDict;
          },
          'set': function (_0x78dd14) {
            this._shareCountDict = _0x78dd14;
          },
          'enumerable': true,
          'configurable': true
        });
        Object.defineProperty(_0x500934.prototype, 'shareCountTime', {
          'get': function () {
            return this._shareCountTime;
          },
          'set': function (_0x3e57b5) {
            this._shareCountTime = _0x3e57b5;
          },
          'enumerable': true,
          'configurable': true
        });
        _0x500934.prototype.getAdTotalCount = function () {
          var _0x46807b = 0x0;
          for (var _0x2dd41e in this._adCountDict) {
            var _0x457768 = this._adCountDict[_0x2dd41e];
            if (_0x457768) {
              _0x46807b += _0x457768;
            }
          }
          return _0x46807b;
        };
        _0x500934.prototype.adCountChange = function (_0x5f2dc6, _0x2d4819) {
          var _0x5b2b92 = this._adCountDict[_0x5f2dc6];
          if (!(undefined != _0x5b2b92 && null != _0x5b2b92)) {
            _0x5b2b92 = 0x0;
          }
          this._adCountDict[_0x5f2dc6] = _0x5b2b92 + _0x2d4819;
          this.save_ad_count();
          _0x5ab70c.DYTools.warn('广告次数--' + _0x5f2dc6 + " = " + this._adCountDict[_0x5f2dc6]);
        };
        _0x500934.prototype.getAdCount = function (_0x9644d2) {
          var _0x155f31 = this._adCountDict[_0x9644d2];
          if (!(undefined != _0x155f31 && null != _0x155f31)) {
            _0x155f31 = 0x0;
            this._adCountDict[_0x9644d2] = 0x0;
          }
          return _0x155f31;
        };
        Object.defineProperty(_0x500934.prototype, "adCountDict", {
          'get': function () {
            return this._adCountDict;
          },
          'set': function (_0x3ed3f7) {
            this._adCountDict = _0x3ed3f7;
          },
          'enumerable': true,
          'configurable': true
        });
        Object.defineProperty(_0x500934.prototype, "adCountTime", {
          'get': function () {
            return this._adCountTime;
          },
          'set': function (_0x12d7fc) {
            this._adCountTime = _0x12d7fc;
          },
          'enumerable': true,
          'configurable': true
        });
        _0x500934.prototype.adShare = function (_0x400000, _0x56b0d5, _0x56fd8c, _0x47f090, _0x19fbdc, _0x4aeda9) {
          if (undefined === _0x47f090) {
            _0x47f090 = null;
          }
          if (undefined === _0x19fbdc) {
            _0x19fbdc = null;
          }
          if (undefined === _0x4aeda9) {
            _0x4aeda9 = null;
          }
          console.log('adShare....');
        //   window.xmgame.showVideo(function () {
        //     if (_0x56b0d5) {
        //       _0x56b0d5();
        //     }
        //   }, function () {
        //     if (_0x19fbdc) {
        //       _0x19fbdc();
        //     }
        //     _0x4b7325.GFunc.showFloatTips("Can not watch ads!");
        //   });
        cc.game.pause()
        wop.trigger("rewarded",{
          callback:()=>{
            cc.game.resume()
            _0x56b0d5();
          }
        })
    };
        _0x500934.prototype.preLoadAdver = function (_0x3496b1) {};
        _0x500934.prototype.createAdver = function (_0x1dc873, _0x26fec8, _0x44733e, _0x3e80e0, _0x5b4d01, _0x6b3416) {};
        _0x500934.prototype.clearShareProbCount = function (_0x3b4e9b) {
          this._shareProbCountDict[_0x3b4e9b] = 0x0;
        };
        _0x500934.prototype.shareGame = function (_0x44383f, _0x53bcf1, _0x3a42ea) {
          if (undefined === _0x53bcf1) {
            _0x53bcf1 = null;
          }
          if (undefined === _0x3a42ea) {
            _0x3a42ea = null;
          }
          if (_0x44383f != _0x5500a0.Enum_ADShare.AS_Menu) {
            if (_0x3a741c.GConfig.isDevelop) {
              this.shareCountChange(_0x44383f, 0x1);
              _0x4b7325.GFunc.showFloatTips("分享成功!");
              if (_0x53bcf1) {
                _0x53bcf1();
              }
            } else {
              var _0x2e1ed1 = this.getShareData(_0x44383f);
              if (_0x2e1ed1) {
                _0x2e1ed1.imageUrl;
                switch (_0x3a741c.GConfig.channel) {
                  case _0x5500a0.Enum_Channel.WeiXin:
                    "shareID=" + _0x44383f + "&imageId=" + _0x2e1ed1.id + '&otherId=' + _0x3492a3.TData.getUserID();
                }
                this.ShareShowTime = _0x5ab70c.DYTools.getCurTimestamp();
                this.shareId = _0x44383f;
                this.shareCallback = _0x53bcf1;
                this.shareFailCall = _0x3a42ea;
              } else {
                _0x5ab70c.DYTools.error("分享数据找不到:" + _0x44383f);
              }
            }
          } else if (_0x53bcf1) {
            _0x53bcf1();
          }
        };
        _0x500934.prototype.getShareData = function (_0x4a7eb4) {
          var _0xc7669f = null;
          var _0x54240d = this.getAdShareData(_0x4a7eb4);
          if (_0x54240d) {
            var _0x44af8e = _0x54240d.shareId;
            var _0x29c2d7 = _0x5ab70c.DYTools.random_int(0x0, _0x44af8e.length - 0x1);
            _0xc7669f = this.shareDict[_0x44af8e[_0x29c2d7]];
          }
          if (!_0xc7669f) {
            _0x5ab70c.DYTools.error('没有对应的分享数据:' + _0x4a7eb4);
            var _0x456547 = 0x0;
            for (var _0xb96006 in this.shareDict) _0x456547++;
            var _0x135b3a = _0x5ab70c.DYTools.random_int(0x0, _0x456547 - 0x1);
            _0xc7669f = this.shareDict[_0x135b3a];
          }
          return _0xc7669f;
        };
        _0x500934.prototype.onShareIn = function () {};
        _0x500934.prototype.shareBackGame = function () {
          var _0x1f481c = false;
          if (this.shareId != _0x5500a0.Enum_ADShare.AS_Menu) {
            var _0xcdfd2c = this;
            var _0x1f8ee2 = _0x5ab70c.DYTools.getCurTimestamp();
            if (Math.floor((_0x1f8ee2 - this.ShareShowTime) / 0x3e8) < Number(this.shareTime)) {
              _0x1def16.GSDK.show_model('提示', '分享失败，请分享到不同群', function () {
                _0xcdfd2c.shareGame(_0xcdfd2c.shareId, _0xcdfd2c.shareCallback, _0xcdfd2c.shareFailCall);
              }, function () {
                if (_0xcdfd2c.shareFailCall) {
                  _0xcdfd2c.shareFailCall();
                }
              }, '我知道了');
            } else {
              var _0x4a7ef3 = this._shareProbCountDict[this.shareId];
              if (!_0x4a7ef3) {
                _0x4a7ef3 = 0x0;
                this._shareProbCountDict[this.shareId] = 0x0;
              }
              this._shareProbCountDict[this.shareId] += 0x1;
              _0x4a7ef3 = this._shareProbCountDict[this.shareId];
              var _0x1c2233 = true;
              var _0xf568f1 = this.shareProbDict[_0x4a7ef3];
              if (!_0xf568f1) {
                _0xf568f1 = 0x64;
              }
              if (_0x5ab70c.DYTools.random_int(0x0, 0x63) >= _0xf568f1) {
                _0x1c2233 = false;
              }
              if (_0x1c2233) {
                _0x1f481c = true;
              } else {
                _0x1def16.GSDK.show_model('提示', '分享失败，请分享到不同群', function () {
                  _0xcdfd2c.shareGame(_0xcdfd2c.shareId, _0xcdfd2c.shareCallback, _0xcdfd2c.shareFailCall);
                }, function () {
                  if (_0xcdfd2c.shareFailCall) {
                    _0xcdfd2c.shareFailCall();
                  }
                }, "我知道了");
              }
            }
            if (_0x1f481c) {
              this._shareProbCountDict[this.shareId] = 0x0;
              if (this.shareCallback) {
                this.shareCallback();
                this.shareCountChange(this.shareId, 0x1);
              }
              this.shareCallback = null;
              this.shareId = -0x1;
              this.shareFailCall = null;
            }
          }
        };
        _0x500934.prototype.getAdShare = function (_0x5ed2c7) {
          var _0x2b64a7 = 0x0;
          var _0x5c4704 = this.getAdShareData(_0x5ed2c7);
          var _0x3539a1 = this.getAdCount(_0x5ed2c7);
          var _0x4d096c = this.getShareCount(_0x5ed2c7);
          var _0x47c850 = this._shareTotalCount < this.shareMaxCount;
          if (_0x5c4704) {
            switch (_0x5c4704.type) {
              case 0x1:
                if (_0x3539a1 + _0x4d096c < _0x5c4704.value.length) {
                  var _0x57c849 = 0x0;
                  var _0x52a049 = 0x0;
                  for (var _0x846411 = 0x0; _0x846411 < _0x5c4704.value.length; _0x846411++) {
                    if (0x1 == _0x5c4704.value[_0x846411]) {
                      if (++_0x57c849 > _0x3539a1) {
                        _0x2b64a7 = 0x1;
                        break;
                      }
                    } else {
                      if (_0x47c850 && ++_0x52a049 > _0x4d096c) {
                        _0x2b64a7 = 0x2;
                        break;
                      }
                    }
                  }
                }
            }
          }
          return _0x2b64a7;
        };
        _0x500934.prototype.getActualAdShare = function (_0x53dae4) {
          return _0x39fda2.GValue.AdShareSwitch ? this.getAdShare(_0x53dae4) : 0x0;
        };
        _0x500934.prototype.checkShareAble = function (_0x3b86ba) {
          if (this._shareTotalCount >= this.shareMaxCount) {
            return false;
          }
          var _0xa92d53 = false;
          var _0x523e0f = this.getAdShareData(_0x3b86ba);
          var _0x6b3fc9 = this.getShareCount(_0x3b86ba);
          if (_0x523e0f) {
            switch (_0x523e0f.type) {
              case 0x1:
                var _0x45055d = 0x0;
                for (var _0x1bc60f = 0x0; _0x1bc60f < _0x523e0f.value.length; _0x1bc60f++) {
                  if (0x2 == _0x523e0f.value[_0x1bc60f]) {
                    _0x45055d++;
                  }
                }
                _0xa92d53 = _0x45055d > _0x6b3fc9;
            }
          }
          return _0xa92d53;
        };
        _0x500934.instance = new _0x500934();
        return _0x500934;
      }();
      _0x34be67.ADShareManager = _0x26a506;
      _0x34be67.ADShareMgr = _0x26a506.instance;
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'CommonEnum': "CommonEnum",
      'CommonFunc': "CommonFunc",
      'CommonSdk': "CommonSdk",
      'CommonValue': "CommonValue",
      'GameData': "GameData",
      'Tools': "Tools"
    }],
    'AndroidManager': [function (_0x2491d4, _0x1ca6e0, _0xaeb1e9) {
      'use strict';
  
      cc._RF.push(_0x1ca6e0, "f0237SkKexEF49lP5PU2Da7", "AndroidManager");
      var _0x155f25 = _0x1ca6e0.exports;
      var _0x4a5468 = _0x2491d4("CommonEnum");
      var _0x58b2e4 = _0x2491d4('CommonFunc');
      var _0x27cb50 = function () {
        function _0x5caae5() {
          this.isAfStatus = -0x1;
          this.callbackEnd = false;
          this.rewardAdResultCall = null;
        }
        _0x5caae5.prototype.initAfStatus = function (_0x5e5879) {
          var _0x173870 = this;
          setTimeout(function () {
            _0x173870.isAfStatus = _0x5e5879;
            _0x173870.callbackEnd = true;
          }, 0x32);
        };
        _0x5caae5.prototype.setAfStatus = function (_0x1ada58) {
          this.isAfStatus = _0x1ada58;
        };
        _0x5caae5.prototype.getAfStatus = function () {
          return this.isAfStatus;
        };
        _0x5caae5.prototype.virbrate = function (_0x34038e) {};
        _0x5caae5.prototype.trackEvent = function (_0xe29cc0, _0x20b657) {};
        _0x5caae5.prototype.playRewardAd = function (_0x48465b, _0x25330e) {};
        _0x5caae5.prototype.rewardAdOver = function (_0x5ed476) {
          setTimeout(function () {
            console.log("aaaa-关闭");
            if (_0x155f25.AndroidMgr.rewardAdResultCall) {
              _0x155f25.AndroidMgr.rewardAdResultCall(_0x5ed476);
              _0x155f25.AndroidMgr.rewardAdResultCall = null;
            }
          }, 0x64);
        };
        _0x5caae5.prototype.playInterstitialAd = function (_0x21c151) {};
        _0x5caae5.prototype.isHaveAd = function () {};
        _0x5caae5.prototype.showLoading = function (_0x357e3f) {
          setTimeout(function () {
            if (_0x357e3f) {
              _0x58b2e4.GFunc.showLoading();
            } else {
              _0x58b2e4.GFunc.hideLoading();
            }
          }, 0x64);
        };
        _0x5caae5.prototype.hideAdLoading = function () {
          _0x58b2e4.GFunc.showFloatTips("Video is not available, please try again later.");
          this.rewardAdOver(false);
        };
        _0x5caae5.prototype.isCallbackEnd = function () {
          return this.callbackEnd;
        };
        _0x5caae5.prototype.sendDate = function (_0x24b902, _0x152ee2) {};
        _0x5caae5.prototype.sendInfor = function (_0x1d5afd, _0x17b3b7, _0x4b210b) {
          if (undefined === _0x4b210b) {
            _0x4b210b = '';
          }
          switch (_0x1d5afd) {
            case _0x4a5468.Enum_AfType.load:
              this.sendDate("BladeMaster_loading", "{value:" + _0x17b3b7 + '}');
              break;
            case _0x4a5468.Enum_AfType.guide:
              this.sendDate("BladeMaster_guide", "{value:" + _0x17b3b7 + '}');
              break;
            case _0x4a5468.Enum_AfType.stageWin:
              this.sendDate("BladeMaster_stage_win", "{value:" + _0x17b3b7 + '}');
              break;
            case _0x4a5468.Enum_AfType.video_finish:
              this.sendDate("BladeMaster_video_finish", "{value:" + _0x17b3b7 + '}');
              break;
            case _0x4a5468.Enum_AfType.mainLvup:
              this.sendDate("BladeMaster_main_weapon", "{level:" + _0x17b3b7 + '}');
              break;
            case _0x4a5468.Enum_AfType.subLvup:
              this.sendDate("BladeMaster_sub_weapon", "{id:" + _0x17b3b7 + ",level:" + _0x4b210b + '}');
          }
        };
        _0x5caae5.instance = new _0x5caae5();
        return _0x5caae5;
      }();
      _0x155f25.AndroidManager = _0x27cb50;
      window.AndroidMgr = _0x27cb50.instance;
      _0x155f25.AndroidMgr = _0x27cb50.instance;
      cc._RF.pop();
    }, {
      'CommonEnum': "CommonEnum",
      'CommonFunc': "CommonFunc"
    }],
    'BossKnivesComponent': [function (_0xc238e4, _0x4e711d, _0x4fb2be) {
      'use strict';
  
      cc._RF.push(_0x4e711d, "4d9e5isKMxKCZZOO7pjfINQ", "BossKnivesComponent");
      var _0x41bb63 = _0xc238e4("Tools");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.enemyEntity = null;
          this.knives = [];
          this.lights = [];
          this.isDirty = false;
          this.startGame = false;
        },
        'init': function (_0x269b05) {
          this.enemyEntity = _0x269b05;
          this.node.on("reduceKnife", this.reduceKnife, this);
          this.node.on('resetDirty', this.resetDirty, this);
        },
        'update': function (_0x1a9fa2) {
          for (var _0xfa171a = 0x0; _0xfa171a < this.knives.length; _0xfa171a++) {
            var _0x31e579 = this.knives[_0xfa171a];
            if (_0x31e579) {
              _0x31e579.emit("startChangeToAttack");
            }
          }
        },
        'resetDirty': function () {
          this.isDirty = false;
        },
        'reduceKnife': function (_0x58917e) {
          _0x41bb63.DYTools.arrRemove(this.knives, _0x58917e);
          this.isDirty = true;
        },
        'emitAllKnivesCountChange': function () {
          var _0x2b8281 = this.knives.length;
          for (var _0x15017a = 0x0; _0x15017a < _0x2b8281; _0x15017a++) {
            this.knives[_0x15017a].emit('updateCount', [_0x15017a, _0x2b8281]);
          }
          return _0x2b8281;
        },
        'addKnife': function (_0xa45e3d) {
          if (!_0x41bb63.DYTools.arrContains(this.knives, _0xa45e3d)) {
            this.knives.push(_0xa45e3d);
            _0xa45e3d.emit("updateOwner", this);
            this.isDirty = true;
          }
        }
      });
      cc._RF.pop();
    }, {
      'Tools': 'Tools'
    }],
    'BossKnivesCtrl': [function (_0x12fc2c, _0x360d23, _0x42f97c) {
      'use strict';
  
      cc._RF.push(_0x360d23, "553e5cG2EJLD4Stpk8G1EWG", "BossKnivesCtrl");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.enemy = null;
          this.followEnemy = null;
        },
        'init': function (_0xa26ebf, _0x5a14c8) {
          this.enemy = _0xa26ebf;
          this.followEnemy = _0x5a14c8;
        },
        'addKnife': function (_0x236fbd) {
          this.followEnemy.knivesCmp.addKnife(_0x236fbd);
        },
        'getKnives': function () {
          return this.followEnemy.knivesCmp.knives;
        }
      });
      cc._RF.pop();
    }, {}],
    'BossKnivesDropCtrl': [function (_0x5901e7, _0x3b3b0b, _0xb35ff8) {
      'use strict';
  
      cc._RF.push(_0x3b3b0b, "8dc70ZYH1RJXKl9/hlkFsQL", 'BossKnivesDropCtrl');
      var _0x5a753f = _0x5901e7('CommonConfig');
      var _0x17cc83 = _0x5901e7("Tools");
      var _0x3044fe = _0x5901e7("Types");
      var _0x10b30d = _0x5901e7("CEntityKnife");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.bossEntity = null;
          this.initBlood = 0x0;
          this.dropArr1 = [];
          this.dropArr2 = [];
        },
        'init': function (_0x1990fd) {
          this.bossEntity = _0x1990fd;
          this.initBlood = this.bossEntity.data.blood;
          var _0xd7a1db = this.bossEntity.data.kData;
          var _0x1c12c2 = _0xd7a1db.dropParam1.split(_0x5a753f.GConfig.SeparatorI);
          for (var _0x34c8fc = 0x0; _0x34c8fc < _0x1c12c2.length; _0x34c8fc++) {
            (_0x40cd6b = _0x17cc83.DYTools.stringToNumber(_0x1c12c2[_0x34c8fc], _0x5a753f.GConfig.SeparatorII))[0x0] = _0x40cd6b[0x0] / 0x64;
            this.dropArr1.push(_0x40cd6b);
          }
          _0x1c12c2 = _0xd7a1db.dropParam2.split(_0x5a753f.GConfig.SeparatorI);
          for (_0x34c8fc = 0x0; _0x34c8fc < _0x1c12c2.length; _0x34c8fc++) {
            var _0x40cd6b;
            var _0x3fd4ea = ((_0x40cd6b = _0x17cc83.DYTools.stringToNumber(_0x1c12c2[_0x34c8fc], _0x5a753f.GConfig.SeparatorII))[0x0] - _0x40cd6b[0x1]) / (_0x40cd6b[0x2] + 0x1);
            var _0x38ff18 = [];
            for (var _0x3e2005 = 0x0; _0x3e2005 < _0x40cd6b[0x3]; _0x3e2005++) {
              for (var _0x593c1a = _0x17cc83.DYTools.random_int(0x1, _0x40cd6b[0x2]); _0x17cc83.DYTools.arrContain(_0x38ff18, _0x593c1a);) {
                _0x593c1a = _0x17cc83.DYTools.random_int(0x1, _0x40cd6b[0x2]);
              }
              _0x38ff18.push(_0x593c1a);
            }
            for (_0x3e2005 = 0x1; _0x3e2005 <= _0x40cd6b[0x2]; _0x3e2005++) {
              var _0x2407ff = _0x40cd6b[0x0] - _0x3fd4ea * _0x3e2005;
              _0x2407ff += _0x17cc83.DYTools.random_int(-0x2, 0x2);
              var _0x2dcda6 = [];
              _0x2dcda6.push(_0x2407ff / 0x64);
              if (_0x17cc83.DYTools.arrContain(_0x38ff18, _0x3e2005)) {
                _0x2dcda6.push(0x1);
              } else {
                _0x2dcda6.push(0x0);
              }
              this.dropArr2.push(_0x2dcda6);
            }
          }
        },
        'bloodChange': function (_0x44de6b) {
          var _0x4955ed;
          var _0x3b9385;
          var _0x717b8 = _0x44de6b / this.initBlood;
          if (this.dropArr1.length > 0x0 && _0x717b8 <= (_0x4955ed = this.dropArr1[0x0])[0x0]) {
            var _0x4b1967 = this.bossEntity.followCtrl.getKnives();
            for (var _0x17047f = 0x0; _0x17047f < _0x4955ed[0x2]; _0x17047f++) {
              (_0x4e2887 = _0x4b1967[_0x17cc83.DYTools.random_int(0x0, _0x4b1967.length - 0x1)]).emit('throwKnife', -_0x3044fe.EntityTag.Enemy);
              if (_0x3b9385 = _0x4e2887.getChildByName('tail')) {
                _0x3b9385.opacity = 0x0;
              }
            }
            var _0xaf23db = _0x4955ed[0x1] - _0x4955ed[0x2];
            if (_0xaf23db >= _0x4b1967.length) {
              for (_0x17047f = _0x4b1967.length - 0x1; _0x17047f >= 0x0; _0x17047f--) {
                (_0x4e2887 = _0x4b1967[_0x17047f]).getComponent(_0x10b30d).bossDiscarded = true;
                _0x4e2887.emit("throwKnife", -_0x3044fe.EntityTag.Enemy);
                if (_0x3b9385 = _0x4e2887.getChildByName('tail')) {
                  _0x3b9385.opacity = 0x0;
                }
              }
            } else {
              var _0x4a6dd9 = [];
              for (_0x17047f = 0x0; _0x17047f < _0xaf23db; _0x17047f++) {
                for (var _0x4e2887 = _0x4b1967[_0x17cc83.DYTools.random_int(0x0, _0x4b1967.length - 0x1)]; _0x17cc83.DYTools.arrContain(_0x4a6dd9, _0x4e2887);) {
                  _0x4e2887 = _0x4b1967[_0x17cc83.DYTools.random_int(0x0, _0x4b1967.length - 0x1)];
                }
                _0x4a6dd9.push(_0x4e2887);
                _0x4e2887.getComponent(_0x10b30d).bossDiscarded = true;
                if (_0x3b9385 = _0x4e2887.getChildByName("tail")) {
                  _0x3b9385.opacity = 0x0;
                }
              }
              for (var _0x34f09f = 0x0; _0x34f09f < _0x4a6dd9.length; _0x34f09f++) {
                _0x4e2887 = _0x4a6dd9[_0x34f09f];
                if (_0x4b1967.indexOf(_0x4e2887) >= 0x0) {
                  _0x4e2887.emit("throwKnife", -_0x3044fe.EntityTag.Enemy);
                  if (_0x3b9385 = _0x4e2887.getChildByName("tail")) {
                    _0x3b9385.opacity = 0x0;
                  }
                }
              }
              _0x4a6dd9.splice(0x0);
            }
            this.dropArr1.splice(0x0, 0x1);
          }
          if (this.dropArr2.length > 0x0) {
            if (_0x717b8 < (_0x4955ed = this.dropArr2[0x0])[0x0]) {
              if (_0x3b9385 = (_0x4e2887 = (_0x4b1967 = this.bossEntity.followCtrl.getKnives())[_0x17cc83.DYTools.random_int(0x0, _0x4b1967.length - 0x1)]).getChildByName("tail")) {
                _0x3b9385.opacity = 0x0;
              }
              if (0x1 == _0x4955ed[0x1]) {
                _0x4e2887.emit("throwKnife", -_0x3044fe.EntityTag.Enemy);
              } else {
                _0x4e2887.getComponent(_0x10b30d).bossDiscarded = true;
                _0x4e2887.emit("throwKnife", -_0x3044fe.EntityTag.Enemy);
              }
              this.dropArr2.splice(0x0, 0x1);
            }
          }
        }
      });
      cc._RF.pop();
    }, {
      'CEntityKnife': "CEntityKnife",
      'CommonConfig': "CommonConfig",
      'Tools': "Tools",
      'Types': 'Types'
    }],
    'CBaseCollisionHandleSystem': [function (_0xf68d86, _0x4e38c3, _0x5380ed) {
      'use strict';
  
      cc._RF.push(_0x4e38c3, "0a8d0TZWBpKfIcYwAJ0zxjD", "CBaseCollisionHandleSystem");
      var _0x30e080 = _0xf68d86("CollisionEventManager");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this._eventListName = '';
          this._collisionEventMgr = null;
        },
        'onLoad': function () {
          this._collisionEventMgr = _0x30e080.CollisionEventManager.getInstance();
        },
        'updateGameLogic': function (_0x1ad4fa) {
          if (this._collisionEventMgr[this._eventListName]) {
            var _0x5ba547 = 0x0;
            for (var _0x494abb = this._collisionEventMgr[this._eventListName]; _0x5ba547 < _0x494abb.length; _0x5ba547++) {
              var _0x23d9ac = _0x494abb[_0x5ba547];
              this.handelCollisionEvent(_0x23d9ac);
            }
          }
        },
        'handelCollisionEvent': function (_0x4b35a0) {}
      });
      cc._RF.pop();
    }, {
      'CollisionEventManager': 'CollisionEventManager'
    }],
    'CEnemyEffect': [function (_0x1b4051, _0x3a19b1, _0x2e0d34) {
      'use strict';
  
      cc._RF.push(_0x3a19b1, "e9ebcQZYe9O2JmmEtyXJoMu", "CEnemyEffect");
      var _0x41705b = _0x1b4051("CommonConfig");
      var _0x897129 = _0x1b4051("Tools");
      var _0x3c61ba = _0x1b4051("CommonValue");
      var _0x134725 = _0x1b4051("PfFrameAnim");
      var _0x5abd92 = _0x1b4051("Types");
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'dbNode': cc.Node,
          'pf_db': cc.Prefab,
          'node_die': cc.Node,
          'hurtLightNode': cc.Node,
          'knifeLightNode': cc.Node,
          'hitNode': cc.Node,
          'skel_snake_hit_shine': sp.Skeleton
        },
        'ctor': function () {
          this.hpPlaying = false;
          this.hlpPlaying = false;
          this._particleList = [];
        },
        'init': function (_0x1258dd) {
          this._entity = _0x1258dd;
          this.animDieCom = this.node_die.getComponent(cc.Animation);
          this.knifeLightCom = this.knifeLightNode.getComponent(cc.Animation);
          var _0x530ad7;
          var _0x5354c5 = this;
          (_0x530ad7 = cc.instantiate(_0x3c61ba.GValue.pf_anim)).scale = 1.8;
          this.hpFrameAnim = _0x530ad7.getComponent(_0x134725);
          this.hpFrameAnim.init(_0x3c61ba.GValue.Atlas_Enemy, "ah_", 0x5, _0x41705b.GConfig.actionFrameTime, function () {
            _0x5354c5.onHpAnimFinished();
          });
          this.hpFrameAnim.selfUpdate = true;
          this.node.addChild(_0x530ad7);
          (_0x530ad7 = cc.instantiate(_0x3c61ba.GValue.pf_anim)).scale = 0x3;
          _0x530ad7.anchorY = 0x1;
          this.hlpFrameAnim = _0x530ad7.getComponent(_0x134725);
          this.hlpFrameAnim.init(_0x3c61ba.GValue.Atlas_Enemy, "ahl_", 0x9, 0.02, function () {
            _0x5354c5.onHlpCAnimFinished();
          });
          this.dbNode.addChild(_0x530ad7);
          (_0x530ad7 = cc.instantiate(_0x3c61ba.GValue.pf_anim)).scale = 0x2;
          this.dpFrameAnim = _0x530ad7.getComponent(_0x134725);
          this.dpFrameAnim.init(_0x3c61ba.GValue.Atlas_Enemy, "aed_", 0x17, _0x41705b.GConfig.actionFrameTime, function () {
            _0x5354c5.onDpAnimFinished();
          });
          this.dpFrameAnim.selfUpdate = true;
          this.node.addChild(_0x530ad7);
          (_0x530ad7 = cc.instantiate(_0x3c61ba.GValue.pf_anim)).scale = 1.3;
          this.iceFrameAnim = _0x530ad7.getComponent(_0x134725);
          this.iceFrameAnim.init(_0x3c61ba.GValue.Atlas_Enemy, "aei_", 0x8, 1.3 * _0x41705b.GConfig.actionFrameTime, null, function () {
            _0x5354c5.onIceAnimStop();
          });
          this.node.addChild(_0x530ad7, -0x1);
          (_0x530ad7 = cc.instantiate(_0x3c61ba.GValue.pf_anim)).scale = 1.5;
          this.fireFrameAnim = _0x530ad7.getComponent(_0x134725);
          this.fireFrameAnim.init(_0x3c61ba.GValue.Atlas_Enemy, 'aef_', 0x7, 1.3 * _0x41705b.GConfig.actionFrameTime, null, function () {
            _0x5354c5.onFireAnimStop();
          });
          this.node.addChild(_0x530ad7);
        },
        'updateGameLogic': function (_0x7d61e7) {
          if (!this._entity.isDead && this._entity.buffCom.isDirty) {
            if (this._entity.hasBuff(_0x5abd92.EnemyBuff.Frozen)) {
              if (!this.iceFrameAnim.isPlaying()) {
                this.iceFrameAnim.reset();
              }
            } else if (this._entity.hasBuff(_0x5abd92.EnemyBuff.Firing)) {
              if (!this.fireFrameAnim.isPlaying()) {
                this.fireFrameAnim.reset();
              }
            } else {
              if (this.iceFrameAnim.isPlaying()) {
                this.iceFrameAnim.stop();
              }
              if (this.fireFrameAnim.isPlaying()) {
                this.fireFrameAnim.stop(true);
              }
            }
            this._entity.buffCom.isDirty = false;
          }
        },
        'onHpAnimFinished': function () {
          this.hpPlaying = false;
          this.hpFrameAnim.stop();
        },
        'onHlpCAnimFinished': function () {
          this.hlpPlaying = false;
          this.hlpFrameAnim.stop();
        },
        'onDpAnimFinished': function () {
          this.dpFrameAnim.stop();
          this.hpFrameAnim.stop();
          this.hpPlaying = false;
          if (this.dieCall) {
            this.dieCall();
          }
        },
        'onIceAnimStop': function () {},
        'onFireAnimStop': function () {},
        'hurt': function (_0x1748bc, _0x5de6da) {
          this.playHurtLightAnim(_0x1748bc);
          this.playHurtParticle(_0x1748bc, _0x5de6da);
        },
        'playHurtLightAnim': function (_0x485ce1) {
          var _0x3067b3 = this;
          var _0x40cacf = 0.7 * _0x41705b.GConfig.actionFrameTime;
          this.hurtLightNode.opacity = 0xff;
          this.hurtLightNode.scale = 0x1;
          var _0x357b4a = _0x897129.DYTools.random_int(0x0, 0x28) - 0x14;
          this.hurtLightNode.position = _0x485ce1.add(cc.v2(_0x357b4a, 0.5 * Math.abs(_0x357b4a)));
          var _0x26c53c = cc.fadeTo(0x3 * _0x40cacf, 0xb2);
          var _0x4f8157 = cc.scaleTo(0x3 * _0x40cacf, 1.46);
          this.hurtLightNode.runAction(cc.sequence(cc.spawn(_0x26c53c, _0x4f8157), cc.callFunc(function () {
            _0x3067b3.hurtLightNode.opacity = 0x0;
          })));
          this.knifeLightNode.opacity = 0xff;
          this.knifeLightNode.position = _0x485ce1.add(cc.v2(_0x897129.DYTools.random_int(0x0, 0x3c) - 0x1e, _0x897129.DYTools.random_int(0x0, 0x14) - 0xa));
          this.knifeLightCom.play();
        },
        'playHurtParticle': function (_0x155435, _0x269110) {
          if (!this.hpPlaying) {
            this.hpPlaying = true;
            this.hpFrameAnim.reset();
            this.hpFrameAnim.node.position = _0x155435;
            this.hpFrameAnim.node.color = _0x269110;
          }
        },
        'hit': function (_0x4b247d, _0x2b6ebb, _0x2697d2) {
          if (!this.skel_snake_hit_shine.node.active) {
            var _0x3960b3 = this;
            this.skel_snake_hit_shine.node.active = true;
            this.skel_snake_hit_shine.node.setPosition(_0x4b247d);
            this.skel_snake_hit_shine.node.angle = -_0x2b6ebb;
            this.skel_snake_hit_shine.node.angle = -_0x2697d2;
            this.skel_snake_hit_shine.setAnimation(0x0, "play", false);
            this.skel_snake_hit_shine.setCompleteListener(function (_0x3db25e, _0x67efb8) {
              if ('play' == (_0x3db25e.animation ? _0x3db25e.animation.name : '')) {
                _0x3960b3.skel_snake_hit_shine.node.active = false;
              }
            });
          }
        },
        'laserHurt': function (_0xaf6100, _0x4e1528, _0x1d236f) {
          this.playLaserHurtParticle(_0xaf6100, _0x4e1528, _0x1d236f);
        },
        'playLaserHurtParticle': function (_0xd4361, _0x1ea328, _0x2eca9a) {
          if (!this.hlpPlaying) {
            this.hlpFrameAnim.reset();
            this.hlpFrameAnim.node.position = _0xd4361;
            this.hlpFrameAnim.node.angle = -_0x1ea328;
            this.hlpFrameAnim.node.color = _0x2eca9a;
          }
        },
        'die': function (_0x47634d, _0x1e2247, _0x1031c6, _0x543262) {
          var _0x1d20bc = this;
          if (undefined === _0x543262) {
            _0x543262 = true;
          }
          this.dieCall = _0x1031c6;
          if (_0x543262) {
            this.animDieCom.node.opacity = 0xff;
            this.animDieCom.play('die');
          }
          this.dpFrameAnim.reset();
          this.dpFrameAnim.node.color = _0x1e2247;
          if (_0x47634d && _0x47634d > 0x0) {
            _0x3c61ba.GValue.EntityWorld.gameUI.playGoldEnemyDie(this.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0)), _0x47634d);
          }
          var _0x3946bd = _0x41705b.GConfig.actionFrameTime;
          this.scheduleOnce(function () {
            var _0x3bb132 = new cc.Node();
            _0x1d20bc.dbNode.addChild(_0x3bb132);
            _0x3bb132.addComponent(cc.Sprite).spriteFrame = _0x3c61ba.GValue.Atlas_Enemy.getSpriteFrame("edl");
            _0x3bb132.scale = 1.55;
            _0x3bb132.runAction(cc.sequence(cc.scaleTo(0x3 * _0x3946bd, 0.56), cc.removeSelf()));
          }, _0x3946bd);
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'CommonValue': "CommonValue",
      'PfFrameAnim': "PfFrameAnim",
      'Tools': "Tools",
      'Types': "Types"
    }],
    'CEntityBase': [function (_0x1ac230, _0x41898c, _0x3f2bc3) {
      'use strict';
  
      cc._RF.push(_0x41898c, "e094dh6ixBDL7k8tiHuTD42", "CEntityBase");
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'teamID': cc.Integer
        },
        'updateGameLogic': function (_0x91ed00) {}
      });
      cc._RF.pop();
    }, {}],
    'CEntityBossCircle': [function (_0x45fde0, _0x5be6b6, _0x4e6679) {
      'use strict';
  
      cc._RF.push(_0x5be6b6, "d9c14RYuhJLBr/g6saZwAAu", "CEntityBossCircle");
      var _0x30ce05 = _0x45fde0("ConfigData");
      var _0xf5939d = _0x45fde0('CommonFunc');
      var _0x2ccda7 = _0x45fde0("CommonValue");
      var _0x39bb2c = _0x45fde0("Tools");
      var _0x529e98 = _0x45fde0("Types");
      var _0x3053ba = _0x45fde0("CommonConfig");
      var _0x437f60 = _0x45fde0("EntityEnemy");
      var _0x495830 = _0x45fde0('CommonEnum');
      var _0x35da8d = _0x45fde0("EnemyBase");
      cc.Class({
        'extends': _0x35da8d,
        'properties': {},
        'ctor': function () {
          this.data = null;
          this.parent = null;
          this.collider_p = null;
          this.list_name = [];
          this.dic_node = {};
          this.dic_shine = {};
          this.dic_enemy = {};
          this.dic_angle = {};
          this.dic_dline_node = {};
          this.dic_dline_angle = {};
          this.dic_dline_shadow = {};
          this.dic_dline = {};
          this.startRadius = 0x0;
          this.curRadius = 0x0;
          this.curTime = 0x0;
          this.curIndex_tr = 0x0;
          this.curTime_tr = 0x0;
          this.curMoveDir = cc.v2(-0x1, -0x1);
          this.curSpeed = 0x0;
          this.curAcc_index = 0x0;
          this.curAcc_time = 0x0;
          this.curRotateSpeed = 0x0;
          this.curRotateAcc_index = 0x0;
          this.curRotateAcc_time = 0x0;
          this.stateCom = null;
          this.moveCom = null;
          this.moveFixCom = null;
          this.isTargetIn = false;
          this.isStop = false;
          this.isDead = false;
          this.enterCall = null;
          this.cur_name_shine = '';
        },
        'init': function (_0x5c3402, _0x43bb32) {
          if (undefined === _0x43bb32) {
            _0x43bb32 = null;
          }
          this.type = _0x529e98.EnemyType.Circle;
          var _0x2ce5ec = this;
          this.data = _0x5c3402;
          this.curMoveDir = _0x5c3402.start_dir.normalize();
          this.enterCall = _0x43bb32;
          this.curSpeed = this.data.move_speed;
          this.curRotateSpeed = this.data.rotate_speed;
          this.init_data();
          this.create_parent();
          this.create_show();
          this.move_targetIn();
          this.scheduleOnce(function () {
            _0x2ce5ec.check_shine();
          }, 0.5);
        },
        'init_data': function () {
          this.startRadius = this.data.start_radius;
          this.curRadius = this.data.start_radius;
          var _0x2168b3 = this.data.list_enemy.length;
          for (var _0x59e321 = 0x0; _0x59e321 < _0x2168b3; _0x59e321++) {
            this.list_name.push(_0x59e321);
            this.dic_enemy[_0x59e321] = this.data.list_enemy[_0x59e321];
            this.dic_angle[_0x59e321] = this.data.list_angle[_0x59e321];
            this.dic_dline[_0x59e321] = this.data.list_dline[_0x59e321];
          }
          for (var _0x3f4a14 in this.data.dic_line) this.dic_dline_angle[_0x3f4a14] = this.data.dic_line[_0x3f4a14];
        },
        'create_parent': function () {
          this.parent = new cc.Node();
          this.parent.group = "enemy";
          this.node.addChild(this.parent);
          this.collider_p = this.parent.addComponent(cc.CircleCollider);
          this.collider_p.radius = this.curRadius;
          this.collider_p.tag = _0x495830.E_CTag.Boss_Circle;
          this.stateCom = _0x39bb2c.DYTools.addScript(this.parent, "EnemyStateComponent");
          this.stateCom.init(null);
          this.moveCom = _0x39bb2c.DYTools.addScript(this.parent, "EnemyActionMoveComponent");
          this.moveFixCom = _0x39bb2c.DYTools.addScript(this.parent.parent, "EnemyMoveFix");
          this.moveFixCom.initByMoveType(_0x529e98.EnemyMoveType.Elastic, this.parent);
          _0x39bb2c.DYTools.addScript(this.collider_p.node, "EnemyCollisionWallListener");
        },
        'create_show': function () {
          var _0x4b6176 = this;
          var _0x2c10d5 = "e_line_" + this.data.lineId;
          var _0x25237b = "se_line_" + this.data.lineId;
          for (var _0x3a5a4f in this.dic_dline_angle) {
            var _0x57f10b = new cc.Node();
            this.parent.addChild(_0x57f10b);
            var _0x5e60ba = _0x57f10b.addComponent(cc.Sprite);
            _0xf5939d.GFunc.changeAtlasSprite(_0x2ccda7.GValue.Atlas_Shadow, _0x5e60ba, _0x25237b);
            this.dic_dline_shadow[_0x3a5a4f] = _0x57f10b;
            var _0x271922 = new cc.Node();
            _0x271922.parent = this.parent;
            this.dic_dline_node[_0x3a5a4f] = _0x271922;
            var _0x4fca39 = new cc.Node();
            _0x271922.addChild(_0x4fca39);
            var _0x3199c1 = _0x4fca39.addComponent(cc.Sprite);
            _0xf5939d.GFunc.changeAtlasSprite(_0x2ccda7.GValue.Atlas_Enemy, _0x3199c1, _0x2c10d5);
            this.adjust_dline(parseInt(_0x3a5a4f));
          }
          var _0x4266f4 = function (_0x3a0d84) {
            var _0x5e6dd1 = _0x4607d8.list_name[_0x3a0d84];
            var _0x5872f4 = _0x4607d8.dic_enemy[_0x5e6dd1];
            var _0x407473 = _0x3053ba.GConfig.getEnemyData(_0x5872f4);
            if (_0x407473) {
              var _0x579a80 = new _0x30ce05.EnemyData();
              _0x579a80.id = _0x407473.id;
              _0x579a80.blood = _0x39bb2c.DYTools.random_int(_0x407473.blood.x, _0x407473.blood.y);
              _0x579a80.moveSpeed = _0x39bb2c.DYTools.random_int(_0x407473.speed.x, _0x407473.speed.y);
              _0x579a80.scale = _0x39bb2c.DYTools.random_int(_0x407473.size.x, _0x407473.size.y) / 0x64;
              _0x579a80.adjustDuration = _0x39bb2c.DYTools.random_int(_0x407473.adjustDuration.x, _0x407473.adjustDuration.y) / 0xa;
              _0x579a80.cData = _0x407473;
              var _0x156b6f = _0x2ccda7.GValue.EntityWorld.addEntitySys._addEntityEnemy(_0x579a80, cc.Vec2.ZERO, 0x4);
              _0x156b6f.node.parent = _0x4607d8.parent;
              _0x156b6f.callback_bossDie = function () {
                _0x4b6176.die_item(_0x5e6dd1);
              };
              _0x156b6f.isItem = true;
              _0x156b6f.node.name = _0x5e6dd1.toString();
              _0x4607d8.dic_node[_0x5e6dd1] = _0x156b6f.node;
              _0x156b6f.node.angle = 0x0;
              if (_0x156b6f.uiNode) {
                var _0x925e58 = _0x156b6f.uiNode.getChildByName("role_shine");
                if (_0x925e58) {
                  var _0xd96a4d = new cc.Node();
                  var _0x4c9681 = _0xd96a4d.addComponent(cc.Sprite);
                  _0xf5939d.GFunc.changeAtlasSprite(_0x2ccda7.GValue.Atlas_Enemy, _0x4c9681, "e_202");
                  _0xd96a4d.setAnchorPoint(0.5, 0.5);
                  _0x925e58.addChild(_0xd96a4d);
                  _0xd96a4d.opacity = 0x0;
                  _0x4607d8.dic_shine[_0x5e6dd1] = _0xd96a4d;
                }
              }
              _0x4607d8.adjust_item(_0x5e6dd1.toString());
            }
          };
          var _0x4607d8 = this;
          for (var _0x4b7794 = 0x0; _0x4b7794 < this.list_name.length; _0x4b7794++) {
            _0x4266f4(_0x4b7794);
          }
        },
        'check_shine': function () {
          var _0x335e59 = '';
          var _0x1903e3 = -0x1;
          for (var _0x3bde7a in this.dic_node) {
            var _0x2e04fc = this.dic_node[_0x3bde7a];
            if (_0x2e04fc) {
              var _0x2f60f6 = _0x2e04fc.getComponent(_0x437f60);
              if (_0x2f60f6) {
                var _0x16de3e = _0x2f60f6._curBlood;
                if (-0x1 == _0x1903e3) {
                  _0x1903e3 = _0x16de3e;
                  _0x335e59 = _0x3bde7a;
                } else if (_0x16de3e < _0x1903e3) {
                  _0x1903e3 = _0x16de3e;
                  _0x335e59 = _0x3bde7a;
                }
              }
            }
          }
          var _0x325ff4;
          var _0x4ff754 = false;
          if (this.cur_name_shine.length > 0x0) {
            if (!(this.cur_name_shine == _0x335e59)) {
              if (_0x325ff4 = this.dic_shine[this.cur_name_shine]) {
                _0x325ff4.stopAllActions();
                _0x325ff4.opacity = 0x0;
              }
              _0x4ff754 = true;
            }
          } else {
            _0x4ff754 = true;
          }
          if (_0x4ff754 && _0x335e59.length > 0x0 && (_0x325ff4 = this.dic_shine[_0x335e59])) {
            var _0x228753 = _0x3053ba.GConfig.actionFrameTime;
            var _0x323e50 = cc.fadeTo(0x2 * _0x228753, 0xff);
            var _0x9825bd = cc.delayTime(0x2 * _0x228753);
            var _0x3276d5 = cc.fadeTo(0x0 * _0x228753, 0x0);
            var _0x354460 = cc.delayTime(0x2 * _0x228753);
            var _0x54dd46 = cc.sequence(_0x323e50, _0x9825bd, _0x3276d5, _0x354460);
            var _0x4e0cd4 = cc.repeatForever(_0x54dd46);
            _0x325ff4.runAction(_0x4e0cd4);
            this.cur_name_shine = _0x335e59;
          }
        },
        'adjust_dline': function (_0x1d976d) {
          var _0x323ab7 = this.dic_dline_node[_0x1d976d];
          if (_0x323ab7) {
            var _0x3165ab = this.dic_dline_angle[_0x1d976d];
            var _0x465e5a = this.get_speedXY_by_rotate(_0x3165ab, this.curRadius);
            _0x323ab7.setPosition(_0x465e5a);
            _0x323ab7.angle = -_0x3165ab;
            var _0x1db1b9 = this.dic_dline_shadow[_0x1d976d];
            _0x1db1b9.setPosition(_0x465e5a.add(cc.v2(0x14, -0x14)));
            _0x1db1b9.angle = -_0x3165ab;
          }
        },
        'adjust_item': function (_0x1e12f6) {
          var _0x47652b = this.dic_node[_0x1e12f6];
          if (_0x47652b) {
            var _0x15a9e8 = this.dic_angle[_0x1e12f6];
            var _0x21ae99 = this.get_speedXY_by_rotate(_0x15a9e8, this.curRadius);
            _0x47652b.setPosition(_0x21ae99);
          }
        },
        'die_item': function (_0x174335) {
          if (!this.isDead) {
            var _0x4e39b5 = this;
            for (var _0x5a6b71 = 0x0; _0x5a6b71 < this.list_name.length; _0x5a6b71++) {
              if (_0x174335 == this.list_name[_0x5a6b71]) {
                this.list_name.splice(_0x5a6b71, 0x1);
                delete this.dic_node[_0x174335];
                var _0xa9c231 = this.dic_shine[_0x174335];
                if (_0xa9c231) {
                  _0xa9c231.destroy();
                  delete this.dic_shine[_0x174335];
                }
                var _0x6be68f = this.dic_dline[_0x174335];
                for (var _0x2edb2e = 0x0; _0x2edb2e < _0x6be68f.length; _0x2edb2e++) {
                  var _0xe325d7 = _0x6be68f[_0x2edb2e];
                  var _0xa6d0a9 = this.dic_dline_node[_0xe325d7];
                  if (_0xa6d0a9) {
                    _0xa6d0a9.destroy();
                    delete this.dic_dline_node[_0xe325d7];
                  }
                  var _0x460630 = this.dic_dline_shadow[_0xe325d7];
                  if (_0x460630) {
                    _0x460630.destroy();
                    delete this.dic_dline_shadow[_0xe325d7];
                  }
                }
                break;
              }
            }
            if (this.list_name.length <= 0x0) {
              this.isDead = true;
              _0x2ccda7.GValue.EntityWorld.bossDie(this.node);
              delete _0x2ccda7.GValue.EntityWorld.CircleEnemys[this.data.id];
              if (this.data.gold > 0x0) {
                _0x2ccda7.GValue.EntityWorld.playGoldFlyEffect(0x1, this.data.gold, this.parent.convertToWorldSpaceAR(cc.v2(0x0, 0x0)));
              }
              this.scheduleOnce(function () {
                _0x4e39b5.node.destroy();
              }, 0x1);
            }
          }
        },
        'adjust_dt': function () {
          for (var _0x523733 in this.dic_node) this.adjust_item(_0x523733.toString());
          for (var _0x45748c in this.dic_dline_angle) this.adjust_dline(parseInt(_0x45748c));
        },
        'get_real_rotate': function (_0x18dc0a) {
          for (var _0x11810d = _0x18dc0a; _0x11810d > 0x168;) {
            _0x11810d -= 0x168;
          }
          for (; _0x11810d < 0x0;) {
            _0x11810d += 0x168;
          }
          return _0x11810d;
        },
        'get_speedXY_by_rotate': function (_0x31f971, _0x2d2df9) {
          var _0xf3e735 = cc.v2(0x0, 0x0);
          if (0x0 == _0x31f971 || 0x168 == _0x31f971) {
            _0xf3e735 = cc.v2(0x0, -_0x2d2df9);
          } else {
            if (0x5a == _0x31f971) {
              _0xf3e735 = cc.v2(-_0x2d2df9, 0x0);
            } else {
              if (0xb4 == _0x31f971) {
                _0xf3e735 = cc.v2(0x0, _0x2d2df9);
              } else {
                if (0x10e == _0x31f971) {
                  _0xf3e735 = cc.v2(_0x2d2df9, 0x0);
                } else {
                  if (_0x31f971 > 0xb4 && _0x31f971 < 0x10e) {
                    var _0x246ece = (_0x31f971 - 0xb4) / 0xb4 * Math.PI;
                    _0xf3e735 = cc.v2(_0x2d2df9 * Math.sin(_0x246ece), _0x2d2df9 * Math.cos(_0x246ece));
                  } else if (_0x31f971 > 0x5a && _0x31f971 < 0xb4) {
                    _0x246ece = (_0x31f971 - 0x5a) / 0xb4 * Math.PI;
                    _0xf3e735 = cc.v2(-_0x2d2df9 * Math.cos(_0x246ece), _0x2d2df9 * Math.sin(_0x246ece));
                  } else if (_0x31f971 > 0x0 && _0x31f971 < 0x5a) {
                    _0x246ece = _0x31f971 / 0xb4 * Math.PI;
                    _0xf3e735 = cc.v2(-_0x2d2df9 * Math.sin(_0x246ece), -_0x2d2df9 * Math.cos(_0x246ece));
                  } else if (_0x31f971 > 0x10e && _0x31f971 < 0x168) {
                    _0x246ece = (_0x31f971 - 0x10e) / 0xb4 * Math.PI;
                    _0xf3e735 = cc.v2(_0x2d2df9 * Math.cos(_0x246ece), -_0x2d2df9 * Math.sin(_0x246ece));
                  }
                }
              }
            }
          }
          return _0xf3e735;
        },
        'updateRotate': function (_0x4cda4a) {
          this.curRotateAcc_index = this.curRotateAcc_index < this.data.ar_list_time.length ? this.curRotateAcc_index : 0x0;
          var _0x483582 = this.data.ar_list_acc[this.curRotateAcc_index];
          this.curRotateAcc_time += _0x4cda4a;
          if (this.curRotateAcc_time >= this.data.ar_list_time[this.curRotateAcc_index]) {
            this.curRotateAcc_time = 0x0;
            this.curRotateAcc_index++;
          }
          this.curRotateSpeed += _0x483582 * _0x4cda4a;
          for (var _0x2971b1 in this.dic_node) {
            var _0xd43346 = this.dic_angle[_0x2971b1];
            _0xd43346 += this.curRotateSpeed * _0x4cda4a;
            this.dic_angle[_0x2971b1] = this.get_real_rotate(_0xd43346);
          }
          for (var _0x351289 in this.dic_dline_angle) {
            _0xd43346 = this.dic_dline_angle[_0x351289];
            _0xd43346 += this.curRotateSpeed * _0x4cda4a;
            this.dic_dline_angle[_0x351289] = this.get_real_rotate(_0xd43346);
          }
        },
        'updatePos': function (_0x5a67d9) {
          if (_0x2ccda7.GValue.PropMgr.hasProp(_0x529e98.PropType.Slow)) {
            _0x5a67d9 *= _0x2ccda7.GValue.SlowRatio;
          }
          this.curAcc_index = this.curAcc_index < this.data.as_list_time.length ? this.curAcc_index : 0x0;
          var _0x35cf0a = this.data.as_list_acc[this.curAcc_index];
          this.curAcc_time += _0x5a67d9;
          if (this.curAcc_time >= this.data.as_list_time[this.curAcc_index]) {
            this.curAcc_time = 0x0;
            this.curAcc_index++;
          }
          this.curSpeed += _0x35cf0a * _0x5a67d9;
          var _0xb519d0 = cc.v2(this.curMoveDir.x * this.curSpeed, this.curMoveDir.y * this.curSpeed);
          var _0x3cc4cb = cc.v2(_0xb519d0.x * _0x5a67d9, _0xb519d0.y * _0x5a67d9);
          this.node.setPosition(this.node.position.add(_0x3cc4cb));
          this.moveFixCom.resetRadius();
          this.moveFixCom.fixPositionByWall();
          this.moveFixCom.fixPositionByScreen();
          if (this.moveFixCom._dxDirty) {
            var _0x317243 = this.data.rv.x + (this.data.rv.y - this.data.rv.x) * Math.random();
            this.curMoveDir.x = this.curMoveDir.x > 0x0 ? 0x1 : -0x1;
            this.curMoveDir.y = this.curMoveDir.y > 0x0 ? 0x1 : -0x1;
            this.curMoveDir.x *= _0x317243;
            this.curMoveDir = this.curMoveDir.normalize();
            this.moveFixCom._dxDirty = false;
          }
          if (this.moveFixCom._dyDirty) {
            _0x317243 = this.data.rv.x + (this.data.rv.y - this.data.rv.x) * Math.random();
            this.curMoveDir.x = this.curMoveDir.x > 0x0 ? 0x1 : -0x1;
            this.curMoveDir.y = this.curMoveDir.y > 0x0 ? 0x1 : -0x1;
            this.curMoveDir.y *= _0x317243;
            this.curMoveDir = this.curMoveDir.normalize();
            this.moveFixCom._dyDirty = false;
          }
        },
        'move_targetIn': function () {
          var _0x392213 = this;
          var _0x533f0f = cc.moveBy(this.data.targetIn_time, this.data.targetIn_pos);
          var _0x384da9 = cc.callFunc(function () {
            if (_0x392213.enterCall) {
              _0x392213.enterCall(_0x392213);
            }
            _0x392213.isStop = true;
            if (!_0x392213.data.isIn) {
              _0x392213.setTargetIn(true);
            }
          });
          var _0x39898e = cc.sequence(_0x533f0f, _0x384da9);
          this.node.runAction(_0x39898e);
        },
        'setTargetIn': function (_0x26e5d0) {
          this.isTargetIn = _0x26e5d0;
          if (_0x26e5d0) {
            this.isStop = false;
          }
        },
        'updateGameLogic': function (_0x5a5153) {
          if (!this.isDead && !this.isStop) {
            if (this.data.list_time.length > 0x0) {
              if (this.curIndex_tr >= this.data.list_time.length) {
                this.curIndex_tr = 0x0;
              }
              var _0x4ee2dd = this.data.list_time[this.curIndex_tr];
              var _0x3e6ef5 = this.data.list_radius[this.curIndex_tr];
              this.curTime += _0x5a5153;
              this.curRadius = this.startRadius + (_0x3e6ef5 - this.startRadius) * (this.curTime / _0x4ee2dd);
              this.collider_p.radius = this.curRadius;
              if (this.curTime >= _0x4ee2dd) {
                this.curIndex_tr++;
                this.curTime = 0x0;
                this.startRadius = this.curRadius;
              }
            }
            this.adjust_dt();
            if (this.isTargetIn) {
              this.updateRotate(_0x5a5153);
              this.updatePos(_0x5a5153);
            }
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'CommonEnum': "CommonEnum",
      'CommonFunc': 'CommonFunc',
      'CommonValue': "CommonValue",
      'ConfigData': 'ConfigData',
      'EnemyBase': 'EnemyBase',
      'EntityEnemy': "EntityEnemy",
      'Tools': "Tools",
      'Types': 'Types'
    }],
    'CEntityBossElectr': [function (_0x354ba2, _0x5f45b3, _0xd3d1be) {
      'use strict';
  
      cc._RF.push(_0x5f45b3, '86ba6b4qKpNVIgi6v0Mrk35', 'CEntityBossElectr');
      var _0x4277fe = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (_0x223493) {
        return typeof _0x223493;
      } : function (_0x2388e8) {
        return _0x2388e8 && "function" == typeof Symbol && _0x2388e8.constructor === Symbol && _0x2388e8 !== Symbol.prototype ? "symbol" : typeof _0x2388e8;
      };
      var _0x4b6401 = _0x354ba2("CEntityBoss");
      var _0x142525 = _0x354ba2("CommonFunc");
      var _0x14c1d8 = _0x354ba2("CommonValue");
      var _0x33ac69 = _0x354ba2("CommonConfig");
      var _0x2eea21 = _0x354ba2('CommonEnum');
      var _0x6ed946 = _0x354ba2("PfNum");
      var _0x1724c9 = _0x354ba2("CommonAudio");
      var _0x50e010 = _0x354ba2("CEnemyEffect");
      var _0x204c47 = _0x354ba2('Tools');
      var _0x7dfe7b = _0x354ba2('Types');
      cc.Class({
        'extends': _0x4b6401,
        'properties': {},
        'ctor': function () {
          cc.Enum({
            'None': 0x0,
            'Launch': 0x1,
            'Gun': 0x2,
            'Idle': 0x3
          });
          this.data = null;
          this.node_p_shadow = null;
          this.node_p_circle = null;
          this.node_circle = null;
          this.node_p_item = null;
          this.node_p_head = null;
          this.node_head = null;
          this.skel_die = null;
          this.color_effect = cc.color(0x82, 0x1e, 0x9b);
          this.dic_item_hp = {};
          this.dic_item_rotate = {};
          this.dic_item = {};
          this.dic_item_edge = {};
          this.dic_item_launch = {};
          this.dic_item_launch_shine = {};
          this.dic_item_gun = {};
          this.dic_item_gun_shine = {};
          this.dic_skel_item_smoke = {};
          this.dic_skel_item_ball = {};
          this.dic_skel_item_shine = {};
          this.dic_skel_item_line = {};
          this.dic_item_hp_node = {};
          this.dic_item_hp_com = {};
          this.dic_item_com_effect = {};
          this.dic_item_shadow_launch = {};
          this.dic_item_shadow_gun = {};
          this.pos_item_out = cc.v2(0x0, 0x1e);
          this.pos_item_in = cc.v2(0x0, 0x3c);
          this.pos_item_die = cc.v2(0x0, 0x64);
          this.pos_edge_launch = cc.v2(0x0, 0x0);
          this.pos_edge_gun = cc.v2(0x0, -0x28);
          this.pos_launch_out = cc.v2(0x0, 0x5);
          this.pos_launch_in = cc.v2(0x0, 0x32);
          this.pos_gun_out = cc.v2(0x0, 0x7);
          this.pos_gun_in = cc.v2(0x0, 0x32);
          this.pos_shadow = cc.v2(0x14, -0x14);
          this.cur_state = _.None;
          this.attack_index = 0x0;
          this.attack_time = 0x0;
          this.attack_finish = false;
          this.list_attack_time_dis = [];
          this.dic_attack_time_last = {};
          this.dic_attack_enemys = {};
          this.is_rotate = false;
          this.is_move = false;
          this.stateCom = null;
          this.moveCom = null;
          this.moveFixCom = null;
          this.curMoveDir = cc.v2(-0x1, -0x1);
          this.curSpeed = 0x0;
          this.rv = cc.v2(-0x2, -0x1);
        },
        'init': function (_0x38b9fc, _0x11295e) {
          var _0x1c4475 = this;
          this.data = _0x38b9fc;
          this.init_parent(_0x38b9fc, _0x11295e, this.beginFunc, this.updateFunc, this.attackFunc);
          this.init_data(_0x38b9fc);
          this.create_show();
          this.moveTo_target();
          this.schedule(function () {
            if (!_0x1c4475.isDead) {
              for (var _0x128ccb in _0x1c4475.dic_skel_item_shine) {
                var _0x19854c = _0x1c4475.dic_skel_item_shine[_0x128ccb];
                _0x1c4475.play_skel(_0x19854c, "show");
              }
              _0x1724c9.GAudio.playSound(_0x1724c9.Enum_Audio.bossElectrIn);
            }
          }, 0x3, cc.macro.REPEAT_FOREVER);
          this.stateCom = _0x204c47.DYTools.addScript(this.node, "EnemyStateComponent");
          this.stateCom.init(null);
          this.moveCom = _0x204c47.DYTools.addScript(this.node, "EnemyActionMoveComponent");
          this.moveFixCom = _0x204c47.DYTools.addScript(this.node, 'EnemyMoveFix');
          this.moveFixCom.initByMoveType(_0x7dfe7b.EnemyMoveType.Elastic, this.target);
          _0x204c47.DYTools.addScript(this.collider_p.node, "EnemyCollisionWallListener");
        },
        'init_data': function (_0x5d0f84) {
          var _0x37209c = _0x5d0f84.enemys;
          for (var _0x3993c8 = 0x0; _0x3993c8 < _0x37209c.length; _0x3993c8++) {
            if (0x2 == (_0x469270 = _0x37209c[_0x3993c8].split('*')).length) {
              var _0x26adbb = _0x3993c8 + 0x1;
              this.dic_item_rotate[_0x26adbb] = parseFloat(_0x469270[0x0]);
              this.dic_item_hp[_0x26adbb] = parseInt(_0x469270[0x1]);
            }
          }
          this.dic_item_hp[0x0] = this.data.hp;
          var _0x56fca8 = _0x5d0f84.attack;
          for (_0x3993c8 = 0x0; _0x3993c8 < _0x56fca8.length; _0x3993c8++) {
            var _0x469270;
            if ((_0x469270 = _0x56fca8[_0x3993c8].split('=')).length >= 0x1) {
              var _0x56d2f1 = _0x469270[0x0].split('*');
              if (0x2 == _0x56d2f1.length && (_0x26adbb = this.list_attack_time_dis.length, this.list_attack_time_dis.push(parseFloat(_0x56d2f1[0x0])), this.dic_attack_time_last[_0x26adbb] = parseFloat(_0x56d2f1[0x1]), _0x469270.length >= 0x2)) {
                var _0x167c8a = _0x469270[0x1].split('&');
                this.dic_attack_enemys[_0x26adbb] = _0x167c8a;
              }
            }
          }
        },
        'create_show': function () {
          this.node_p_shadow = new cc.Node();
          this.node_p_shadow.setPosition(this.pos_shadow);
          this.show.addChild(this.node_p_shadow);
          this.node_p_circle = new cc.Node();
          this.show.addChild(this.node_p_circle);
          this.node_p_item = new cc.Node();
          this.show.addChild(this.node_p_item);
          this.node_p_head = new cc.Node();
          this.show.addChild(this.node_p_head);
          var _0x60df2e = new cc.Node();
          this.node_p_shadow.addChild(_0x60df2e);
          var _0x2ad5b9 = _0x60df2e.addComponent(cc.Sprite);
          _0x142525.GFunc.changeAtlasSprite(_0x14c1d8.GValue.Atlas_Boss, _0x2ad5b9, 'el_circle_shadow');
          this.node_circle = new cc.Node();
          this.node_p_circle.addChild(this.node_circle);
          var _0x191c26 = this.node_circle.addComponent(cc.Sprite);
          _0x142525.GFunc.changeAtlasSprite(_0x14c1d8.GValue.Atlas_Boss, _0x191c26, 'el_circle');
          this.radius_p = 0.5 * this.node_circle.width;
          this.collider_p.radius = this.radius_p;
          this.addListShineNode(0x0, this.node_circle);
          var _0x14a4e9 = function (_0x10defe) {
            var _0x55bb80 = parseInt(_0x10defe);
            var _0x4c2fac = _0x5d03f0.dic_item_rotate[_0x10defe];
            var _0x48e074 = _0x5d03f0.dic_item_hp[_0x10defe];
            var _0x105e3d = new cc.Node();
            _0x5d03f0.node_p_item.addChild(_0x105e3d);
            _0x105e3d.angle = -_0x4c2fac;
            var _0x907441 = new cc.Node();
            _0x105e3d.addChild(_0x907441);
            _0x907441.setPosition(_0x5d03f0.pos_item_out);
            _0x5d03f0.dic_item[_0x10defe] = _0x907441;
            var _0x3c7005 = new cc.Node();
            _0x907441.addChild(_0x3c7005);
            var _0x1dd606 = _0x3c7005.addComponent(cc.Sprite);
            _0x142525.GFunc.changeAtlasSprite(_0x14c1d8.GValue.Atlas_Boss, _0x1dd606, "el_arm");
            _0x3c7005.setAnchorPoint(0.5, 0x1);
            var _0x5dd205 = _0x3c7005.height;
            _0x5d03f0.addListShineNode(_0x55bb80, _0x3c7005);
            var _0x55cabf = new cc.Node();
            _0x907441.addChild(_0x55cabf);
            _0x55cabf.setPosition(0x0, -_0x5dd205 - 0x32);
            var _0x543f8f = new cc.Node();
            _0x543f8f.setAnchorPoint(0.5, 0x0);
            _0x5d03f0.node_p_shadow.addChild(_0x543f8f);
            var _0x5dfce7 = _0x543f8f.addComponent(cc.Sprite);
            _0x142525.GFunc.changeAtlasSprite(_0x14c1d8.GValue.Atlas_Boss, _0x5dfce7, "el_el_shadow");
            _0x543f8f.angle = -_0x4c2fac;
            _0x5d03f0.dic_item_shadow_launch[_0x10defe] = _0x543f8f;
            var _0x325f67 = new cc.Node();
            _0x325f67.setAnchorPoint(0.5, 0x0);
            _0x5d03f0.node_p_shadow.addChild(_0x325f67);
            var _0x4e00a6 = _0x325f67.addComponent(cc.Sprite);
            _0x142525.GFunc.changeAtlasSprite(_0x14c1d8.GValue.Atlas_Boss, _0x4e00a6, "el_enemy_shadow");
            _0x325f67.angle = -_0x4c2fac;
            _0x5d03f0.dic_item_shadow_gun[_0x10defe] = _0x325f67;
            var _0x27ce56 = _0x55cabf.convertToWorldSpaceAR(cc.v2(0x0, -0x1e));
            var _0x5d4fff = _0x5d03f0.node_p_item.convertToNodeSpace(_0x27ce56);
            _0x543f8f.setPosition(_0x5d4fff);
            _0x325f67.setPosition(_0x5d4fff);
            var _0x3b4a1b = new cc.Node();
            _0x55cabf.addChild(_0x3b4a1b, 0x1);
            var _0x2d0807 = _0x3b4a1b.addComponent(cc.Sprite);
            _0x142525.GFunc.changeAtlasSprite(_0x14c1d8.GValue.Atlas_Boss, _0x2d0807, "el_bed");
            _0x3b4a1b.setAnchorPoint(0.5, 0x0);
            _0x5d03f0.addListShineNode(_0x55bb80, _0x3b4a1b);
            _0x3b4a1b.group = "enemy";
            var _0x4de1b1 = _0x3b4a1b.addComponent(cc.CircleCollider);
            _0x4de1b1.offset = cc.v2(0x0, 0.5 * _0x3b4a1b.height);
            _0x4de1b1.radius = 0.5 * _0x3b4a1b.width;
            _0x4de1b1.tag = _0x2eea21.E_CTag.Boss_ElectrHead + parseInt(_0x10defe);
            _0x4de1b1.name = _0x5d03f0.data.id.toString();
            _0x5d03f0.addListCollider(_0x4de1b1);
            var _0x37b289 = new cc.Node();
            _0x37b289.setPosition(_0x5d03f0.pos_edge_launch);
            _0x55cabf.addChild(_0x37b289, 0x2);
            _0x5d03f0.dic_item_edge[_0x10defe] = _0x37b289;
            var _0xb4bfc5 = new cc.Node();
            _0x37b289.addChild(_0xb4bfc5);
            var _0x5b9323 = _0xb4bfc5.addComponent(cc.Sprite);
            _0x142525.GFunc.changeAtlasSprite(_0x14c1d8.GValue.Atlas_Boss, _0x5b9323, "el_bed_l");
            _0xb4bfc5.setAnchorPoint(0x1, 0x0);
            _0xb4bfc5.setPosition(-0x19, 0x0);
            _0x5d03f0.addListShineNode(_0x55bb80, _0xb4bfc5);
            var _0x3917f8 = new cc.Node();
            _0x37b289.addChild(_0x3917f8);
            var _0x137efc = _0x3917f8.addComponent(cc.Sprite);
            _0x142525.GFunc.changeAtlasSprite(_0x14c1d8.GValue.Atlas_Boss, _0x137efc, "el_bed_l");
            _0x3917f8.setAnchorPoint(0x1, 0x0);
            _0x3917f8.setPosition(0x19, 0x0);
            _0x3917f8.scaleX = -0x1;
            _0x5d03f0.addListShineNode(_0x55bb80, _0x3917f8);
            var _0x13734a = cc.instantiate(_0x14c1d8.GValue.pf_num);
            _0x13734a.setPosition(cc.v2(0x0, 0.35 * _0x3b4a1b.height));
            _0x55cabf.addChild(_0x13734a, 0x3);
            var _0x52e210 = _0x13734a.getComponent(_0x6ed946['default']);
            _0x52e210.setParam(_0x2eea21.Enum_Num.Blood, cc.v2(0.5, 0.5), 0x2, _0x14c1d8.GValue.Atlas_Game);
            _0x52e210.setString(_0x142525.GFunc.getNumK(Math.ceil(_0x48e074)));
            _0x13734a.scale = 0.4;
            _0x5d03f0.dic_item_hp_node[_0x10defe] = _0x13734a;
            _0x5d03f0.dic_item_hp_com[_0x10defe] = _0x52e210;
            _0x5d03f0.addListShinePfnum(_0x55bb80, _0x52e210);
            var _0x18dcc8 = new cc.Node();
            _0x18dcc8.setPosition(_0x5d03f0.pos_launch_out);
            _0x55cabf.addChild(_0x18dcc8);
            _0x5d03f0.dic_item_launch[_0x10defe] = _0x18dcc8;
            var _0x13df04 = new cc.Node();
            _0x18dcc8.addChild(_0x13df04);
            var _0x36535b = _0x13df04.addComponent(cc.Sprite);
            _0x142525.GFunc.changeAtlasSprite(_0x14c1d8.GValue.Atlas_Boss, _0x36535b, 'el_launch');
            _0x13df04.setAnchorPoint(0.5, 0x1);
            _0x5d03f0.addListShineNode(_0x55bb80, _0x13df04);
            var _0x1abe16 = new cc.Node();
            _0x18dcc8.addChild(_0x1abe16);
            var _0x2106ab = _0x1abe16.addComponent(cc.Sprite);
            _0x142525.GFunc.changeAtlasSprite(_0x14c1d8.GValue.Atlas_Boss, _0x2106ab, 'el_launch_shine');
            _0x1abe16.setAnchorPoint(0.5, 0x1);
            _0x1abe16.setPosition(0x0, 0xa);
            _0x5d03f0.dic_item_launch_shine[_0x10defe] = _0x1abe16;
            _0x1abe16.opacity = 0x0;
            var _0x57ca8e = new cc.Node();
            _0x57ca8e.setPosition(_0x5d03f0.pos_gun_in);
            _0x55cabf.addChild(_0x57ca8e);
            _0x5d03f0.dic_item_gun[_0x10defe] = _0x57ca8e;
            var _0x283af8 = new cc.Node();
            _0x57ca8e.addChild(_0x283af8);
            var _0x1fe1cb = _0x283af8.addComponent(cc.Sprite);
            _0x142525.GFunc.changeAtlasSprite(_0x14c1d8.GValue.Atlas_Boss, _0x1fe1cb, "el_gun");
            _0x283af8.setAnchorPoint(0.5, 0x1);
            var _0x2dc71a = _0x283af8.height;
            _0x5d03f0.addListShineNode(_0x55bb80, _0x283af8);
            var _0x43f5f8 = new cc.Node();
            _0x57ca8e.addChild(_0x43f5f8);
            var _0x2d7be7 = _0x43f5f8.addComponent(cc.Sprite);
            _0x142525.GFunc.changeAtlasSprite(_0x14c1d8.GValue.Atlas_Boss, _0x2d7be7, 'el_gun_shine');
            _0x43f5f8.setAnchorPoint(0.5, 0x0);
            _0x43f5f8.setPosition(0x0, -_0x2dc71a - 0x5);
            _0x5d03f0.dic_item_gun_shine[_0x10defe] = _0x43f5f8;
            _0x43f5f8.opacity = 0x0;
            var _0x5c3b53 = new cc.Node();
            _0x105e3d.addChild(_0x5c3b53);
            _0x5c3b53.setPosition(0x0, 0.5 * -_0x5dd205);
            var _0x2bd640 = _0x5d03f0.create_skel(_0x5c3b53, "skel_electr_smoke", "hide");
            _0x5d03f0.dic_skel_item_smoke[_0x10defe] = _0x2bd640;
            var _0x379ef1 = new cc.Node();
            _0x55cabf.addChild(_0x379ef1, 0xa);
            _0x379ef1.setPosition(0x0, 0x32);
            var _0x26806a = _0x5d03f0.create_skel(_0x379ef1, 'skel_electr_shine', 'hide');
            _0x5d03f0.dic_skel_item_shine[_0x10defe] = _0x26806a;
            var _0x18d95d = new cc.Node();
            _0x55cabf.addChild(_0x18d95d, 0xa);
            _0x18d95d.setPosition(0x0, -0x14);
            var _0x29f06c = _0x5d03f0.create_skel(_0x18d95d, "skel_electr_ball", "hide");
            _0x5d03f0.dic_skel_item_ball[_0x10defe] = _0x29f06c;
            _0x29f06c.setCompleteListener(function (_0x3603fb, _0x366e83) {
              if ("show" == (_0x3603fb.animation ? _0x3603fb.animation.name : '')) {
                _0x29f06c.setAnimation(0x0, "idle", true);
              }
            });
            var _0x1e6312 = new cc.Node();
            _0x55cabf.addChild(_0x1e6312, 0xa);
            _0x1e6312.setPosition(0x0, -0x14);
            var _0xc3da1c = _0x5d03f0.create_skel(_0x1e6312, "skel_electr_line", "hide");
            _0x5d03f0.dic_skel_item_line[_0x10defe] = _0xc3da1c;
            _0x1e6312.scaleY = 0x0;
            var _0x251a6c = new cc.Node();
            _0x251a6c.group = "otherKnife";
            _0x1e6312.addChild(_0x251a6c);
            var _0x428505 = _0x251a6c.addComponent(cc.BoxCollider);
            var _0x23f7f7 = cc.size(0x14, 0xdc);
            _0x428505.size = _0x23f7f7;
            _0x428505.offset = cc.v2(0x0, 0.5 * -_0x23f7f7.height);
            _0x428505.tag = _0x2eea21.E_CTag.Boss_ElectrLine;
            var _0x1558da = cc.instantiate(_0x14c1d8.GValue.pf_enemy_effect);
            _0x1558da.setPosition(0x0, 0.8 * -_0x5dd205);
            _0x105e3d.addChild(_0x1558da, 0xb);
            var _0x5bb6da = _0x1558da.getComponent(_0x50e010.CEnemyEffect);
            _0x5bb6da.init(_0x5d03f0);
            _0x5d03f0.dic_item_com_effect[_0x10defe] = _0x5bb6da;
            _0x1558da.scale = 0.7;
          };
          var _0x5d03f0 = this;
          for (var _0x48c610 in this.dic_item_rotate) _0x14a4e9(_0x48c610);
          this.node_head = new cc.Node();
          this.node_p_head.addChild(this.node_head);
          var _0x353a62 = this.node_head.addComponent(cc.Sprite);
          _0x142525.GFunc.changeAtlasSprite(_0x14c1d8.GValue.Atlas_Boss, _0x353a62, 'el_head');
          this.addListShineNode(0x0, this.node_head);
          this.node_head.group = "enemy";
          var _0x25bfe0 = this.node_head.addComponent(cc.CircleCollider);
          _0x25bfe0.radius = 0.5 * this.node_head.width;
          _0x25bfe0.tag = _0x2eea21.E_CTag.Boss_ElectrHead;
          _0x25bfe0.name = this.data.id.toString();
          this.addListCollider(_0x25bfe0);
          var _0x387799 = cc.instantiate(_0x14c1d8.GValue.pf_num);
          _0x387799.setPosition(cc.v2(0x0, -0xa));
          this.node_head.addChild(_0x387799);
          var _0x5a0000 = _0x387799.getComponent(_0x6ed946["default"]);
          _0x5a0000.setParam(_0x2eea21.Enum_Num.Blood, cc.v2(0.5, 0.5), 0x2, _0x14c1d8.GValue.Atlas_Game);
          _0x5a0000.setString(_0x142525.GFunc.getNumK(Math.ceil(this.data.hp)));
          _0x387799.scale = 0.6;
          this.dic_item_hp_node[0x0] = _0x387799;
          this.dic_item_hp_com[0x0] = _0x5a0000;
          this.addListShinePfnum(0x0, _0x5a0000);
          var _0x25d0d8 = new cc.Node();
          this.node_head.addChild(_0x25d0d8, 0xa);
          _0x25d0d8.setPosition(0x0, 0x0);
          var _0x3f9a83 = this.create_skel(_0x25d0d8, "skel_electr_shine", 'hide');
          this.dic_skel_item_shine[0x0] = _0x3f9a83;
          _0x25d0d8.scale = 1.5;
          var _0x6fa897 = cc.instantiate(_0x14c1d8.GValue.pf_enemy_effect);
          _0x6fa897.setPosition(0x0, 0x0);
          this.node_head.addChild(_0x6fa897);
          var _0x1ae64b = _0x6fa897.getComponent(_0x50e010.CEnemyEffect);
          _0x1ae64b.init(this);
          this.dic_item_com_effect[0x0] = _0x1ae64b;
          _0x6fa897.scale = 0x1;
          var _0x3cb60c = new cc.Node();
          this.parent.addChild(_0x3cb60c);
          this.skel_die = this.create_skel(_0x3cb60c, "skel_electr_die", 'hide');
          this.setShadowState(true);
        },
        'create_skel': function (_0x3f44b5, _0x556f90, _0x434391) {
          var _0x4b61df = _0x3f44b5.addComponent(sp.Skeleton);
          var _0x345864 = "skel/" + _0x556f90 + '/' + _0x556f90;
          cc.loader.loadRes(_0x345864, sp.SkeletonData, function (_0x4cc780, _0x159e78) {
            if (!_0x4cc780) {
              _0x4b61df.skeletonData = _0x159e78;
              _0x4b61df.premultipliedAlpha = false;
              _0x4b61df.setAnimation(0x0, _0x434391, false);
            }
          });
          return _0x4b61df;
        },
        'play_skel': function (_0x54a511, _0x464097) {
          if (_0x54a511 && _0x54a511.skeletonData) {
            _0x54a511.setAnimation(0x0, _0x464097, false);
          }
        },
        'change_state': function (_0x1ed251, _0x5e1b42) {
          if (_0x1ed251 != this.cur_state) {
            this.cur_state = _0x1ed251;
            var _0x77c313 = this;
            var _0x185cb6 = _0x33ac69.GConfig.actionFrameTime;
            for (var _0x5cf860 in this.dic_item) {
              var _0xc3d1c6 = this.dic_item[_0x5cf860];
              _0xc3d1c6.stopAllActions();
              var _0x244fc9 = this.dic_item_launch[_0x5cf860];
              _0x244fc9.stopAllActions();
              var _0x5c9875 = this.dic_item_gun[_0x5cf860];
              _0x5c9875.stopAllActions();
              var _0x13fb24 = this.dic_item_edge[_0x5cf860];
              _0x13fb24.stopAllActions();
              var _0x4087ef = this.dic_skel_item_smoke[_0x5cf860];
              if (!this.isDead) {
                switch (_0x1ed251) {
                  case _.Idle:
                    var _0x45ac53 = cc.moveTo(0x4 * _0x185cb6, this.pos_item_out);
                    _0xc3d1c6.runAction(_0x45ac53);
                    this.play_skel(_0x4087ef, "show");
                    break;
                  case _.Launch:
                    this.is_rotate = false;
                    this.is_move = false;
                    _0x45ac53 = cc.moveTo(0x4 * _0x185cb6, this.pos_item_out);
                    _0xc3d1c6.runAction(_0x45ac53);
                    var _0x23ad56 = cc.moveTo(0x4 * _0x185cb6, this.pos_gun_in);
                    _0x5c9875.runAction(_0x23ad56);
                    var _0x5ae1ef = cc.delayTime(0x9 * _0x185cb6);
                    var _0x532e1e = cc.moveTo(0x5 * _0x185cb6, this.pos_launch_out);
                    var _0x4aa06a = cc.callFunc(function () {
                      _0x77c313.cur_state = _.None;
                      _0x77c313.trigger_launch(_0x5e1b42);
                      _0x77c313.setShadowState(true);
                    });
                    var _0x229c7c = cc.sequence(_0x5ae1ef, _0x532e1e, _0x4aa06a);
                    _0x244fc9.runAction(_0x229c7c);
                    var _0x3c8f13 = cc.delayTime(0xe * _0x185cb6);
                    var _0x2e39d1 = cc.moveTo(0x5 * _0x185cb6, this.pos_edge_launch);
                    var _0x45c216 = cc.sequence(_0x3c8f13, _0x2e39d1);
                    _0x13fb24.runAction(_0x45c216);
                    break;
                  case _.Gun:
                    this.is_rotate = false;
                    this.is_move = false;
                    _0x45ac53 = cc.moveTo(0x4 * _0x185cb6, this.pos_item_out);
                    _0xc3d1c6.runAction(_0x45ac53);
                    var _0xe26ad5 = cc.moveTo(0x4 * _0x185cb6, this.pos_launch_in);
                    _0x244fc9.runAction(_0xe26ad5);
                    var _0x4cbea4 = cc.delayTime(0x9 * _0x185cb6);
                    var _0x413d2c = cc.moveTo(0x5 * _0x185cb6, this.pos_gun_out);
                    var _0x375c5d = cc.callFunc(function () {
                      _0x77c313.cur_state = _.None;
                      _0x77c313.trigger_gun(_0x5e1b42);
                      _0x77c313.setShadowState(false);
                    });
                    var _0x6c9728 = cc.sequence(_0x4cbea4, _0x413d2c, _0x375c5d);
                    _0x5c9875.runAction(_0x6c9728);
                    _0x3c8f13 = cc.delayTime(0xe * _0x185cb6);
                    _0x2e39d1 = cc.moveTo(0x5 * _0x185cb6, this.pos_edge_gun);
                    _0x45c216 = cc.sequence(_0x3c8f13, _0x2e39d1);
                    _0x13fb24.runAction(_0x45c216);
                }
              }
            }
          }
        },
        'trigger_launch': function (_0x2d6088) {
          var _0xb422c3 = this;
          _0x1724c9.GAudio.playSound(_0x1724c9.Enum_Audio.bossElectrLaunch);
          var _0x85c7f4 = this.dic_attack_time_last[_0x2d6088];
          var _0xbc159b = _0x33ac69.GConfig.actionFrameTime;
          var _0x1cac66 = function (_0x26fe59) {
            var _0x151688 = _0x108daa.dic_item[_0x26fe59];
            _0x151688.stopAllActions();
            var _0x1e1c61 = _0x108daa.dic_item_launch_shine[_0x26fe59];
            _0x1e1c61.stopAllActions();
            var _0xa5c931 = _0x108daa.dic_skel_item_ball[_0x26fe59];
            var _0x1208da = _0x108daa.dic_skel_item_line[_0x26fe59];
            if (!_0x1208da.node) {
              return {
                'value': undefined
              };
            }
            _0x1208da.node.stopAllActions();
            _0x1208da.node.scaleY = 0x0;
            if (_0x108daa.isDead) {
              return "continue";
            }
            var _0x3d2e42 = cc.moveTo(0x6 * _0xbc159b, _0x108daa.pos_item_in);
            _0x151688.runAction(_0x3d2e42);
            var _0x5ee846 = cc.delayTime(0x6 * _0xbc159b);
            var _0x2519df = cc.callFunc(function () {
              _0xb422c3.play_skel(_0xa5c931, "show");
              _0xb422c3.play_skel(_0x1208da, 'show');
            });
            var _0x349db5 = cc.fadeTo(0x0 * _0xbc159b, 0xff);
            var _0x456226 = cc.sequence(_0x5ee846, _0x2519df, _0x349db5);
            _0x1e1c61.runAction(_0x456226);
            var _0x52cd7d = cc.delayTime(0x1);
            var _0x58be34 = cc.callFunc(function () {
              _0xb422c3.play_skel(_0xa5c931, "hide");
            });
            var _0x441685 = cc.scaleTo(0x4 * _0xbc159b, 0x1, 0xa);
            var _0x26d7cf = cc.callFunc(function () {
              _0xb422c3.is_rotate = true;
            });
            var _0x2d7d8e = cc.delayTime(_0x85c7f4);
            var _0x4544dd = cc.scaleTo(0x1 * _0xbc159b, 0x1, 0x0);
            var _0x8d0b19 = cc.callFunc(function () {
              _0x1e1c61.opacity = 0x0;
              _0xb422c3.change_state(_.Idle, -0x1);
              _0xb422c3.is_move = true;
            });
            var _0x5a8839 = cc.sequence(_0x52cd7d, _0x58be34, _0x441685, _0x26d7cf, _0x2d7d8e, _0x4544dd, _0x8d0b19);
            _0x1208da.node.runAction(_0x5a8839);
          };
          var _0x108daa = this;
          for (var _0x3a374c in this.dic_item) {
            var _0x28eccd = _0x1cac66(_0x3a374c);
            if ("object" == (undefined === _0x28eccd ? "undefined" : _0x4277fe(_0x28eccd))) {
              return _0x28eccd.value;
            }
          }
        },
        'trigger_gun': function (_0xb3d3a1) {
          var _0x5480fb = this;
          var _0x3076e3 = this;
          _0x1724c9.GAudio.playSound(_0x1724c9.Enum_Audio.bossElectrGun);
          var _0x273db4 = this.dic_attack_time_last[_0xb3d3a1];
          var _0x2d2096 = this.dic_attack_enemys[_0xb3d3a1];
          var _0x153bbc = _0x33ac69.GConfig.actionFrameTime;
          var _0x106e6c = function (_0x14670e) {
            var _0x193287 = _0x22e94e.dic_item[_0x14670e];
            _0x193287.stopAllActions();
            var _0x1ca98a = _0x22e94e.dic_item_gun_shine[_0x14670e];
            _0x1ca98a.stopAllActions();
            if (_0x22e94e.isDead) {
              return "continue";
            }
            var _0x101404 = cc.moveTo(0x6 * _0x153bbc, _0x22e94e.pos_item_in);
            _0x193287.runAction(_0x101404);
            var _0x3b96cb = cc.fadeTo(0x6 * _0x153bbc, 0xff);
            var _0x70d067 = cc.delayTime(0x0);
            var _0x2c2f0b = cc.callFunc(function () {
              var _0x2824b = _0x1ca98a.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
              var _0x21db3d = _0x5480fb.node.convertToNodeSpaceAR(_0x2824b);
              var _0x5883aa = _0x5480fb.node.position.add(_0x21db3d);
              var _0x50e1d0 = _0x5480fb.node_p_circle.angle + _0x5480fb.dic_item_rotate[_0x14670e];
              _0x3076e3.addEnemys(_0x5883aa, _0x50e1d0, _0x2d2096);
            });
            var _0x52a6a4 = cc.delayTime(_0x273db4);
            var _0x41b8cf = cc.callFunc(function () {
              _0x1ca98a.opacity = 0x0;
              _0x3076e3.change_state(_.Idle, -0x1);
              _0x3076e3.is_rotate = true;
              _0x3076e3.is_move = true;
            });
            var _0x142f2f = cc.sequence(_0x3b96cb, _0x70d067, _0x2c2f0b, _0x52a6a4, _0x41b8cf);
            _0x1ca98a.runAction(_0x142f2f);
          };
          var _0x22e94e = this;
          for (var _0x130f10 in this.dic_item) _0x106e6c(_0x130f10);
        },
        'addEnemys': function (_0x59f2c3, _0x355b56, _0x13236a) {
          var _0x732578 = this;
          var _0x55d361 = cc.v2(0x0, -0x1).rotate(cc.misc.degreesToRadians(-_0x355b56));
          var _0x599188 = function (_0x24dccf) {
            var _0x2f1c1c = _0x13236a[_0x24dccf].split('*');
            if (0x2 == _0x2f1c1c.length) {
              var _0x2f48a9 = parseInt(_0x2f1c1c[0x0]);
              var _0x543917 = parseFloat(_0x2f1c1c[0x1]);
              _0x543917 = _0x543917 < 0x0 ? 0x0 : _0x543917;
              _0x31af26.scheduleOnce(function () {
                if (!_0x732578.isDead) {
                  _0x14c1d8.GValue.EntityWorld.addEntitySys.addBossFireEnemys(_0x2f48a9, _0x55d361, _0x59f2c3);
                }
              }, _0x543917);
            }
          };
          var _0x31af26 = this;
          for (var _0x100c82 = 0x0; _0x100c82 < _0x13236a.length; _0x100c82++) {
            _0x599188(_0x100c82);
          }
        },
        'setShadowState': function (_0x53ae92) {
          for (var _0x525ace in this.dic_item_shadow_launch) {
            var _0xde2961 = this.dic_item_shadow_launch[_0x525ace];
            var _0x570a8c = this.dic_item_shadow_gun[_0x525ace];
            if (_0xde2961) {
              _0xde2961.opacity = _0x53ae92 ? 0xff : 0x0;
            }
            if (_0x570a8c) {
              _0x570a8c.opacity = _0x53ae92 ? 0x0 : 0xff;
            }
          }
        },
        'attackFunc': function (_0x510ee5, _0x3d9528, _0x347213) {
          var _0x1ffec7 = _0x347213 - _0x2eea21.E_CTag.Boss_ElectrHead;
          var _0x4f52d5 = this.dic_item_hp[_0x1ffec7];
          _0x4f52d5 = (_0x4f52d5 -= _0x3d9528) < 0x0 ? 0x0 : _0x4f52d5;
          this.dic_item_hp[_0x1ffec7] = _0x4f52d5;
          var _0x3f5afc = this.dic_item_hp_com[_0x1ffec7];
          if (_0x3f5afc) {
            _0x3f5afc.setString(_0x142525.GFunc.getNumK(Math.ceil(_0x4f52d5)));
            if (_0x4f52d5 <= 0x0) {
              _0x3f5afc.node.opacity = 0x0;
            }
          }
          var _0x235206 = this.dic_item_com_effect[_0x1ffec7];
          if (_0x235206) {
            var _0x10784b = cc.v2(0x0, 0x0);
            var _0x5e6dba = _0x14c1d8.GValue.EntityWorld.player.radius;
            var _0x83d240 = _0x14c1d8.GValue.EntityWorld.player.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
            var _0x1253db = _0x235206.node.convertToNodeSpaceAR(_0x83d240);
            var _0x2bdcef = _0x1253db.mag();
            if (_0x2bdcef > 0x0) {
              var _0x7da115 = (_0x2bdcef - _0x5e6dba) / _0x2bdcef;
              _0x10784b = cc.v2(_0x1253db.x * _0x7da115, _0x1253db.y * _0x7da115);
            }
            _0x235206.hit(_0x10784b, 0x0, 0x1);
            _0x235206.hurt(cc.v2(0x0, 0x0), this.color_effect);
          }
          if (_0x4f52d5 <= 0x0) {
            if (0x0 == _0x1ffec7) {
              this.isDead = true;
              _0x14c1d8.GValue.EntityWorld.bossDie(this.node);
              this.die_effect();
              for (var _0x414a6a in this.dic_item_shadow_launch) {
                var _0x5d0a7a = this.dic_item_shadow_launch[_0x414a6a];
                var _0x360f35 = this.dic_item_shadow_gun[_0x414a6a];
                if (_0x5d0a7a) {
                  _0x5d0a7a.destroy();
                }
                if (_0x360f35) {
                  _0x360f35.destroy();
                }
              }
              for (var _0x1cc04c in this.dic_skel_item_line) if ((_0x1d4f58 = this.dic_skel_item_line[_0x1cc04c]) && _0x1d4f58.node) {
                _0x1d4f58.node.destroy();
              }
              for (var _0x465201 in this.dic_skel_item_ball) if ((_0x205a27 = this.dic_skel_item_ball[_0x465201]) && _0x205a27.node) {
                _0x205a27.node.destroy();
              }
            } else {
              var _0xee1f00 = this.dic_item[_0x1ffec7];
              _0x5d0a7a = this.dic_item_shadow_launch[_0x1ffec7];
              _0x360f35 = this.dic_item_shadow_gun[_0x1ffec7];
              if (_0xee1f00) {
                var _0x1d4f58;
                var _0x205a27;
                delete this.dic_item[_0x1ffec7];
                delete this.dic_item_shadow_launch[_0x1ffec7];
                delete this.dic_item_shadow_gun[_0x1ffec7];
                if (_0x235206) {
                  _0x235206.die(0x0, this.color_effect, null, true);
                  if ((_0x1d4f58 = this.dic_skel_item_line[_0x1ffec7]) && _0x1d4f58.node) {
                    _0x1d4f58.node.destroy();
                  }
                  if ((_0x205a27 = this.dic_skel_item_ball[_0x1ffec7]) && _0x205a27.node) {
                    _0x205a27.node.destroy();
                  }
                }
                var _0x3dfe7e = _0xee1f00.parent;
                _0xee1f00.destroy();
                if (_0x5d0a7a) {
                  _0x5d0a7a.destroy();
                }
                if (_0x360f35) {
                  _0x360f35.destroy();
                }
                this.scheduleOnce(function () {
                  _0x3dfe7e.destroy();
                }, 0x1);
              }
              var _0x30dfea = true;
              for (var _0x36f04c in this.dic_item_hp) if (parseInt(_0x36f04c) > 0x0 && this.dic_item_hp[_0x36f04c] > 0x0) {
                _0x30dfea = false;
                break;
              }
              if (_0x30dfea) {
                this.is_rotate = true;
                this.is_move = true;
              }
            }
          }
        },
        'die_effect': function () {
          var _0x210155 = this;
          var _0x4dc457 = this;
          var _0x325ac2 = _0x33ac69.GConfig.actionFrameTime;
          if (this.data.gold > 0x0) {
            this.addGold(this.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0)), this.data.gold);
          }
          _0x1724c9.GAudio.playSound(_0x1724c9.Enum_Audio.bossElectrDie);
          _0x14c1d8.GValue.EntityWorld.setTouching(true);
          _0x14c1d8.GValue.EntityWorld.touchAvaliable = false;
          for (var _0x415cee in this.dic_item) {
            var _0x8f4f4d = this.dic_item[_0x415cee];
            _0x8f4f4d.stopAllActions();
            var _0x5602b6 = cc.moveTo(0xa * _0x325ac2, this.pos_item_die);
            var _0x2dfabe = cc.fadeTo(0xa * _0x325ac2, 0x0);
            var _0x40a3c0 = cc.spawn(_0x5602b6, _0x2dfabe);
            _0x8f4f4d.runAction(_0x40a3c0);
          }
          var _0x2e0292 = this.data.speed_rotate > 0x0 ? 0x5a : -0x5a;
          this.node_p_circle.stopAllActions();
          this.node_p_item.stopAllActions();
          var _0x461ba5 = cc.rotateBy(0xa * _0x325ac2, _0x2e0292);
          this.node_p_circle.runAction(_0x461ba5);
          this.node_p_item.runAction(_0x461ba5.clone());
          this.node_p_shadow.runAction(_0x461ba5.clone());
          this.show.stopAllActions();
          var _0x5ab416 = cc.scaleTo(0xa * _0x325ac2, 1.15);
          var _0x3e1112 = cc.sequence(cc.delayTime(0x5 * _0x325ac2), cc.callFunc(function () {
            _0x4dc457.play_skel(_0x4dc457.skel_die, "show");
          }));
          var _0x381504 = cc.spawn(_0x5ab416, _0x3e1112);
          var _0x5db157 = cc.callFunc(function () {
            _0x4dc457.shineDead = true;
          });
          var _0x1fe733 = cc.scaleTo(0x2 * _0x325ac2, 1.18);
          var _0x3a2f19 = cc.moveBy(0x2 * _0x325ac2, cc.v2(0x3, -0x5));
          var _0x27cfe2 = cc.spawn(_0x1fe733, _0x3a2f19);
          var _0x278918 = cc.scaleTo(0x2 * _0x325ac2, 1.15);
          var _0x48528a = cc.moveBy(0x2 * _0x325ac2, cc.v2(-0x3, 0x5));
          var _0x16c3af = cc.spawn(_0x278918, _0x48528a);
          var _0x16cb79 = cc.sequence(_0x27cfe2, _0x16c3af);
          var _0x2265aa = cc.repeat(_0x16cb79, 0xa);
          var _0x393724 = cc.callFunc(function () {
            var _0x2b7014 = [cc.v2(-0x32, 0x32), cc.v2(0x0, 0x0)];
            var _0x400063 = [0.7, 1.2];
            var _0x1a0f4d = [0x0, 0.1];
            var _0x476ede = _0x2b7014.length;
            var _0x122e6e = function (_0x4cc745) {
              var _0xcc70df = cc.instantiate(_0x14c1d8.GValue.pf_enemy_effect);
              _0xcc70df.scale = _0x400063[_0x4cc745];
              _0xcc70df.setPosition(_0x2b7014[_0x4cc745]);
              _0x210155.parent.addChild(_0xcc70df);
              var _0x52c156 = _0xcc70df.getComponent(_0x50e010.CEnemyEffect);
              _0x52c156.init(_0x210155);
              _0x4dc457.scheduleOnce(function () {
                _0x52c156.die(0x0, _0x4dc457.color_effect, null, _0x4cc745 == _0x476ede - 0x1);
              }, _0x1a0f4d[_0x4cc745]);
            };
            for (var _0x3f0fa0 = 0x0; _0x3f0fa0 < _0x476ede; _0x3f0fa0++) {
              _0x122e6e(_0x3f0fa0);
            }
            _0x4dc457.scheduleOnce(function () {
              _0x4dc457.node.destroy();
              _0x4dc457.removeDataDicBossEnemy();
            }, 0x1);
          });
          var _0x49e404 = cc.fadeTo(0x5 * _0x325ac2, 0x0);
          var _0x1bfc0b = cc.sequence(_0x381504, _0x5db157, _0x2265aa, _0x393724, _0x49e404);
          this.show.runAction(_0x1bfc0b);
        },
        'beginFunc': function () {
          this.is_rotate = true;
          this.is_move = true;
        },
        'updateFunc': function (_0x394274) {
          if (_0x14c1d8.GValue.PropMgr.hasProp(_0x7dfe7b.PropType.Slow)) {
            _0x394274 *= _0x14c1d8.GValue.SlowRatio;
          }
          if (this.is_rotate) {
            var _0x22afd0 = -this.node_p_circle.angle;
            _0x22afd0 += this.data.speed_rotate * _0x394274;
            this.node_p_circle.angle = _0x22afd0;
            this.node_p_item.angle = _0x22afd0;
            this.node_p_shadow.angle = _0x22afd0;
          }
          if (this.is_move) {
            this.updatePos(_0x394274);
          }
          if (this.is_move && this.list_attack_time_dis.length > 0x0) {
            this.attack_time += _0x394274;
            var _0x18e576 = this.list_attack_time_dis[this.attack_index];
            var _0x343127 = this.dic_attack_time_last[this.attack_index];
            if (!this.attack_finish && this.attack_time > _0x18e576) {
              var _0x40a29f = this.dic_attack_enemys[this.attack_index];
              if (_0x40a29f && _0x40a29f.length > 0x0) {
                this.change_state(_.Gun, this.attack_index);
              } else {
                this.change_state(_.Launch, this.attack_index);
              }
              this.attack_finish = true;
            }
            if (this.attack_time > _0x18e576 + _0x343127 + 0x1) {
              this.attack_time = 0x0;
              this.attack_index++;
              this.attack_finish = false;
              if (this.attack_index >= this.list_attack_time_dis.length) {
                this.attack_index = 0x0;
              }
            }
          }
        },
        'updatePos': function (_0x3abb43) {
          this.curSpeed = this.data.speed_move;
          this.moveFixCom.curDir = this.curMoveDir;
          var _0x2dc5e9 = cc.v2(this.curMoveDir.x * this.curSpeed, this.curMoveDir.y * this.curSpeed);
          var _0x4af1f3 = cc.v2(_0x2dc5e9.x * _0x3abb43, _0x2dc5e9.y * _0x3abb43);
          this.node.setPosition(this.node.position.add(_0x4af1f3));
          this.moveFixCom.resetRadius();
          this.moveFixCom.fixPositionByWall();
          this.moveFixCom.fixPositionByScreen();
          if (this.moveFixCom._dxDirty) {
            var _0x1b7292 = this.rv.x + (this.rv.y - this.rv.x) * Math.random();
            this.curMoveDir.x = this.curMoveDir.x > 0x0 ? 0x1 : -0x1;
            this.curMoveDir.y = this.curMoveDir.y > 0x0 ? 0x1 : -0x1;
            this.curMoveDir.x *= _0x1b7292;
            this.curMoveDir = this.curMoveDir.normalize();
            this.moveFixCom._dxDirty = false;
          }
          if (this.moveFixCom._dyDirty) {
            _0x1b7292 = this.rv.x + (this.rv.y - this.rv.x) * Math.random();
            this.curMoveDir.x = this.curMoveDir.x > 0x0 ? 0x1 : -0x1;
            this.curMoveDir.y = this.curMoveDir.y > 0x0 ? 0x1 : -0x1;
            this.curMoveDir.y *= _0x1b7292;
            this.curMoveDir = this.curMoveDir.normalize();
            this.moveFixCom._dyDirty = false;
          }
        }
      });
      cc._RF.pop();
    }, {
      'CEnemyEffect': 'CEnemyEffect',
      'CEntityBoss': "CEntityBoss",
      'CommonAudio': 'CommonAudio',
      'CommonConfig': "CommonConfig",
      'CommonEnum': "CommonEnum",
      'CommonFunc': "CommonFunc",
      'CommonValue': "CommonValue",
      'PfNum': "PfNum",
      'Tools': "Tools",
      'Types': 'Types'
    }],
    'CEntityBossFire': [function (_0x154418, _0x12bd19, _0x51f716) {
      'use strict';
  
      cc._RF.push(_0x12bd19, "e0b84QOPeRNW6X17JuUaNdW", "CEntityBossFire");
      var _0x36e37c = _0x154418("CommonFunc");
      var _0x3e51f2 = _0x154418("CommonValue");
      var _0x48c435 = _0x154418("CommonConfig");
      var _0x13b487 = _0x154418('PfNum');
      var _0x15185a = _0x154418("CommonEnum");
      var _0x39cdd9 = _0x154418("CommonAudio");
      var _0x225481 = _0x154418('CEnemyEffect');
      var _0x184779 = _0x154418("EnemyBase");
      var _0x52ec46 = _0x154418("ConfigData");
      var _0x515493 = _0x154418('Types');
      cc.Class({
        'extends': _0x184779,
        'properties': {},
        'ctor': function () {
          this.data = null;
          this.isDead = false;
          this.shineDead = false;
          this.parent = null;
          this.center_parent = null;
          this.hand_parent = null;
          this.head_follow = null;
          this.head_p_parent = null;
          this.head_parent = null;
          this.head_body = null;
          this.node_head = null;
          this.node_body = null;
          this.node_eyes = null;
          this.node_mouth_close = null;
          this.node_mouth_open = null;
          this.skel_boss_fire_effect = null;
          this.node_collider = null;
          this.node_shadow_close = null;
          this.node_shadow_open = null;
          this.node_hand_l = null;
          this.node_hand_r = null;
          this.list_hand_collider = [];
          this.bloodNum = null;
          this._bloodNum = null;
          this.curBlood = 0x0;
          this.radius = 0x0;
          this.height_body = 0x0;
          this.height_factor = 0x1;
          this.cur_state = _0x52ec46.Enum_BFState.None;
          this.can_attack = false;
          this.com_attacked_effect = null;
          this.color_effect = cc.color(0xb9, 0x2a, 0x2a);
          this.pos_enemy = cc.v2(0x0, 0x0);
          this.list_enemys_time = [];
          this.list_enemys_last = [];
          this.dic_enemys = {};
          this.cur_index_enemy = 0x0;
          this.cur_time_enemy = 0x0;
          this.enterCall = null;
          this.pos_hand_l = cc.v2(-0x15e, -0x1c2);
          this.pos_hand_r = cc.v2(0x15e, -0x1e0);
          this.color_normal = cc.color(0xff, 0xff, 0xff);
          this.color_attack = cc.color(0xec, 0x80, 0x25);
          this.color_cur = cc.color(0xff, 0xff, 0xff);
          this.color_times = 0x0;
        },
        'onLoad': function () {
          this.type = _0x515493.EnemyType.Fire;
        },
        'update': function () {},
        'init': function (_0x2471a3, _0x565aa6, _0x47304a) {
          if (undefined === _0x565aa6) {
            _0x565aa6 = null;
          }
          if (undefined === _0x47304a) {
            _0x47304a = null;
          }
          var _0x5ad837 = this;
          this.enterCall = _0x565aa6;
          this.data = _0x2471a3;
          this.isDead = false;
          this.curBlood = _0x2471a3.hp;
          this.initEnemysData();
          this.create_parent();
          this.create_show();
          this.schedule(function () {
            _0x5ad837.set_color();
          }, 0.1, cc.macro.REPEAT_FOREVER);
        },
        'initEnemysData': function () {
          var _0x4a5ae1 = this.data.enemys;
          for (var _0x38cfb1 = 0x0; _0x38cfb1 < _0x4a5ae1.length; _0x38cfb1++) {
            var _0x199597 = _0x4a5ae1[_0x38cfb1].split('=');
            if (0x3 == _0x199597.length) {
              var _0x31636f = parseFloat(_0x199597[0x0]);
              var _0x39d782 = parseFloat(_0x199597[0x1]);
              var _0x3b6446 = _0x199597[0x2].split('&');
              this.list_enemys_time.push(_0x31636f);
              this.list_enemys_last.push(_0x39d782);
              this.dic_enemys[_0x38cfb1] = _0x3b6446;
            }
          }
          this.cur_index_enemy = 0x0;
          this.cur_time_enemy = 0x270f;
        },
        'create_parent': function () {
          this.parent = new cc.Node();
          this.node.addChild(this.parent);
          this.hand_parent = new cc.Node();
          this.node.addChild(this.hand_parent);
          this.hand_parent.setPosition(0x0, 0x0);
          this.center_parent = new cc.Node();
          this.node.addChild(this.center_parent);
          this.center_parent.setPosition(0x0, 0x320);
        },
        'create_show': function () {
          _0x48c435.GConfig.actionFrameTime;
          this.node_shadow_close = new cc.Node();
          this.center_parent.addChild(this.node_shadow_close);
          var _0x432eb2 = this.node_shadow_close.addComponent(cc.Sprite);
          _0x36e37c.GFunc.changeAtlasSprite(_0x3e51f2.GValue.Atlas_Test, _0x432eb2, 'bf_shadow_close');
          this.node_shadow_close.anchorY = 0x0;
          this.node_shadow_close.scale = 1.6;
          this.node_shadow_open = new cc.Node();
          this.center_parent.addChild(this.node_shadow_open);
          var _0x4955a8 = this.node_shadow_open.addComponent(cc.Sprite);
          _0x36e37c.GFunc.changeAtlasSprite(_0x3e51f2.GValue.Atlas_Test, _0x4955a8, 'bf_shadow_open');
          this.node_shadow_open.anchorY = 0x0;
          this.node_shadow_open.scale = 1.6;
          this.head_body = new cc.Node();
          this.center_parent.addChild(this.head_body);
          this.node_body = new cc.Node();
          this.head_body.addChild(this.node_body);
          var _0x1512ff = this.node_body.addComponent(cc.Sprite);
          _0x36e37c.GFunc.changeAtlasSprite(_0x3e51f2.GValue.Atlas_Test, _0x1512ff, "bf_body_" + this.data.image);
          this.node_body.anchorY = 0x1;
          this.height_body = this.node_body.height;
          this.create_hands(this.hand_parent);
          this.head_follow = new cc.Node();
          this.center_parent.addChild(this.head_follow);
          this.head_p_parent = new cc.Node();
          this.head_follow.addChild(this.head_p_parent);
          this.head_parent = new cc.Node();
          this.head_p_parent.addChild(this.head_parent);
          this.node_mouth_open = new cc.Node();
          this.head_parent.addChild(this.node_mouth_open);
          var _0x517c79 = this.node_mouth_open.addComponent(cc.Sprite);
          _0x36e37c.GFunc.changeAtlasSprite(_0x3e51f2.GValue.Atlas_Test, _0x517c79, "bf_mouth_open");
          this.node_mouth_open.anchorY = 0x1;
          var _0xe8af7e = new cc.Node();
          this.head_parent.addChild(_0xe8af7e);
          this.create_effect(_0xe8af7e);
          this.node_head = new cc.Node();
          this.head_parent.addChild(this.node_head);
          var _0x2997f6 = this.node_head.addComponent(cc.Sprite);
          _0x36e37c.GFunc.changeAtlasSprite(_0x3e51f2.GValue.Atlas_Test, _0x2997f6, "bf_head_" + this.data.image);
          var _0x5dbbc7 = this.node_head.height;
          this.node_head.anchorY = 0x1;
          this.head_parent.color = cc.color(0xff, 0x61, 0x25);
          this.node_eyes = new cc.Node();
          this.node_head.addChild(this.node_eyes);
          this.node_eyes.opacity = 0x0;
          this.node_eyes.y = -0x13b;
          var _0xe1ffaf = new cc.Node();
          _0xe1ffaf.setPosition(-0x41, 0x0);
          this.node_eyes.addChild(_0xe1ffaf);
          var _0x1a7bdb = _0xe1ffaf.addComponent(cc.Sprite);
          _0x36e37c.GFunc.changeAtlasSprite(_0x3e51f2.GValue.Atlas_Test, _0x1a7bdb, "bf_eye");
          _0xe1ffaf.scaleX = 0.8;
          _0xe1ffaf.scaleY = 0.8;
          var _0x1e2511 = new cc.Node();
          _0x1e2511.setPosition(0x41, 0x0);
          this.node_eyes.addChild(_0x1e2511);
          var _0x4ccb79 = _0x1e2511.addComponent(cc.Sprite);
          _0x36e37c.GFunc.changeAtlasSprite(_0x3e51f2.GValue.Atlas_Test, _0x4ccb79, "bf_eye");
          _0x1e2511.scaleX = -0.8;
          _0x1e2511.scaleY = 0.8;
          this.node_mouth_close = new cc.Node();
          this.head_parent.addChild(this.node_mouth_close);
          var _0x3a4702 = this.node_mouth_close.addComponent(cc.Sprite);
          _0x36e37c.GFunc.changeAtlasSprite(_0x3e51f2.GValue.Atlas_Test, _0x3a4702, "bf_mouth_close");
          this.node_mouth_close.anchorY = 0x1;
          if (this.bloodNum) {
            this.bloodNum.destroy();
          }
          this.bloodNum = cc.instantiate(_0x3e51f2.GValue.pf_num);
          this.node_head.addChild(this.bloodNum);
          this._bloodNum = this.bloodNum.getComponent(_0x13b487);
          this._bloodNum.setParam(_0x15185a.Enum_Num.Blood, cc.v2(0.5, 0.5), 0x0, _0x3e51f2.GValue.Atlas_Game);
          this._bloodNum.setString(_0x36e37c.GFunc.getNumK(Math.ceil(this.curBlood)));
          this.bloodNum.scale = 1.5;
          var _0x444c83 = cc.instantiate(_0x3e51f2.GValue.pf_enemy_effect);
          this.head_follow.addChild(_0x444c83);
          this.com_attacked_effect = _0x444c83.getComponent(_0x225481);
          this.com_attacked_effect.init(this);
          this.node_mouth_close.setPosition(cc.v2(0x0, 0xaa - _0x5dbbc7));
          this.node_mouth_open.setPosition(cc.v2(0x0, 0xaa - _0x5dbbc7));
          _0xe8af7e.setPosition(cc.v2(0x0, 0x32 - _0x5dbbc7));
          this.bloodNum.setPosition(cc.v2(0x0, 0x8c - _0x5dbbc7));
          _0x444c83.setPosition(cc.v2(0x0, 0x8c - _0x5dbbc7));
          this.adjust_follow();
          this.change_state(_0x52ec46.Enum_BFState.In);
          this.radius = 0.5 * this.node_head.width;
          this.node_collider = new cc.Node();
          this.node_collider.y = 0.5 * -this.node_head.height;
          this.node_head.addChild(this.node_collider);
          var _0x569910 = this.node_collider.addComponent(cc.CircleCollider);
          _0x569910.radius = this.radius;
          _0x569910.tag = _0x15185a.E_CTag.Boss_Fire;
          _0x569910.node.group = "enemy";
          _0x569910.name = this.data.id.toString();
        },
        'create_hands': function (_0x47833e) {
          this.node_hand_l = new cc.Node();
          _0x47833e.addChild(this.node_hand_l);
          var _0x5c8e33 = this.node_hand_l.addComponent(cc.Sprite);
          _0x36e37c.GFunc.changeAtlasSprite(_0x3e51f2.GValue.Atlas_Test, _0x5c8e33, "bf_hand_" + this.data.image);
          this.node_hand_l.anchorY = 0x0;
          this.node_hand_l.setPosition(this.pos_hand_l.add(cc.v2(0x0, 0x320)));
          for (var _0x106017 = 0x0; _0x106017 < 0x2; _0x106017++) {
            var _0x47adbe = this.getHandColliderNode(0x64);
            _0x47adbe.setPosition(0x0, 0x64 * (_0x106017 + 0.5) * 0x2);
            this.node_hand_l.addChild(_0x47adbe);
          }
          this.node_hand_r = new cc.Node();
          _0x47833e.addChild(this.node_hand_r);
          var _0x3305fa = this.node_hand_r.addComponent(cc.Sprite);
          _0x36e37c.GFunc.changeAtlasSprite(_0x3e51f2.GValue.Atlas_Test, _0x3305fa, "bf_hand_" + this.data.image);
          this.node_hand_r.anchorY = 0x0;
          this.node_hand_r.scaleX = -this.node_hand_r.scaleX;
          this.node_hand_r.setPosition(this.pos_hand_r.add(cc.v2(0x0, 0x320)));
          for (_0x106017 = 0x0; _0x106017 < 0x2; _0x106017++) {
            var _0x21d2ee = this.getHandColliderNode(0x64);
            _0x21d2ee.setPosition(0x0, 0x64 * (_0x106017 + 0.5) * 0x2);
            this.node_hand_r.addChild(_0x21d2ee);
          }
        },
        'getHandColliderNode': function (_0x347610) {
          var _0x75c6da = new cc.Node();
          var _0x3cce8a = _0x75c6da.addComponent(cc.CircleCollider);
          _0x3cce8a.radius = _0x347610;
          _0x3cce8a.tag = _0x15185a.E_CTag.Boss_FireHand;
          _0x3cce8a.node.group = "enemy";
          _0x3cce8a.name = this.data.id.toString();
          this.list_hand_collider.push(_0x75c6da);
          return _0x75c6da;
        },
        'action_hands': function (_0x388269, _0x48151c, _0x160427, _0xd713ee) {
          _0x48151c.stopAllActions();
          _0x48151c.setPosition(_0x160427);
          if (!this.isDead) {
            var _0x233322 = this;
            var _0x53d78e = _0x48c435.GConfig.actionFrameTime;
            var _0x2e4497 = _0x48151c.scaleX;
            var _0x4b6273 = _0x48151c.scaleY;
            var _0x26b7c2 = [];
            _0x26b7c2.push(cc.delayTime(0x0));
            for (var _0x35baea = 0x0; _0x35baea < _0x388269.length; _0x35baea++) {
              var _0x5f1819 = _0x388269[_0x35baea].split('*');
              if (0x6 == _0x5f1819.length) {
                var _0x273b12 = parseFloat(_0x5f1819[0x0]);
                var _0x2b6663 = parseFloat(_0x5f1819[0x1]);
                var _0x47f259 = parseFloat(_0x5f1819[0x2]);
                var _0x50573e = parseFloat(_0x5f1819[0x3]);
                var _0x358923 = parseFloat(_0x5f1819[0x4]);
                var _0x475d9d = parseFloat(_0x5f1819[0x5]);
                var _0x18c1cc = cc.delayTime(_0x273b12);
                var _0xbd52dd = cc.callFunc(function () {
                  _0x39cdd9.GAudio.playSound(_0x39cdd9.Enum_Audio.bossFireStep);
                  var _0x3d5cb5 = 0x4 * _0x53d78e;
                  var _0x15b6de = 0xd * _0x53d78e;
                  var _0x7755e8 = 0x15 * _0x53d78e;
                  var _0x429212 = 0xa * _0x53d78e;
                  _0x233322.head_p_parent.stopAllActions();
                  var _0x567c74 = cc.delayTime(_0x3d5cb5);
                  var _0x46d6cd = cc.moveTo(_0x15b6de, cc.v2(0x28 * _0xd713ee, -0xa));
                  var _0x3aa212 = cc.rotateTo(_0x15b6de, -0x5 * _0xd713ee);
                  var _0x1b7686 = cc.spawn(_0x46d6cd, _0x3aa212);
                  var _0x1fe06f = cc.moveTo(_0x7755e8, cc.v2(-0x19 * _0xd713ee, -0x14));
                  var _0x262633 = cc.rotateTo(_0x7755e8, 0x2 * _0xd713ee);
                  var _0x5a8d8b = cc.spawn(_0x1fe06f, _0x262633);
                  var _0x3c76a8 = cc.moveTo(_0x429212, cc.v2(0x0, 0x0));
                  var _0xeaaf2d = cc.rotateTo(_0x429212, 0x0);
                  var _0x1449a1 = cc.spawn(_0x3c76a8, _0xeaaf2d);
                  var _0x4222ba = cc.sequence(_0x567c74, _0x1b7686, _0x5a8d8b, _0x1449a1);
                  _0x233322.head_p_parent.runAction(_0x4222ba);
                });
                var _0x52871b = cc.moveTo(_0x2b6663, _0x160427.add(cc.v2(_0x358923, _0x475d9d)));
                var _0x4ee3e9 = cc.scaleTo(_0x2b6663, 1.28 * _0x2e4497, 1.28 * _0x4b6273);
                var _0x3003b5 = cc.spawn(_0x52871b, _0x4ee3e9);
                var _0xafa1b8 = cc.delayTime(_0x47f259);
                var _0xbcdcd4 = cc.moveTo(_0x50573e, _0x160427);
                var _0x1cfceb = cc.scaleTo(_0x50573e, _0x2e4497, _0x4b6273);
                var _0x3e3b56 = cc.spawn(_0xbcdcd4, _0x1cfceb);
                var _0x226ba4 = cc.sequence(_0x18c1cc, _0xbd52dd, _0x3003b5, _0xafa1b8, _0x3e3b56);
                _0x26b7c2.push(_0x226ba4);
              }
            }
            if (_0x26b7c2.length > 0x0) {
              var _0xcdae1d = cc.spawn(_0x26b7c2);
              _0x48151c.runAction(_0xcdae1d);
            }
          }
        },
        'create_effect': function (_0x339986) {
          var _0xf1244a = this;
          this.skel_boss_fire_effect = _0x339986.addComponent(sp.Skeleton);
          cc.loader.loadRes("skel/skel_boss_fire_effect/skel_boss_fire_effect", sp.SkeletonData, function (_0xd2f5b5, _0x4e3bcd) {
            if (!_0xd2f5b5) {
              _0xf1244a.skel_boss_fire_effect.skeletonData = _0x4e3bcd;
              _0xf1244a.skel_boss_fire_effect.premultipliedAlpha = false;
              _0xf1244a.skel_boss_fire_effect.setAnimation(0x0, 'idle', false);
            }
          });
        },
        'create_die_effect': function (_0xb6e7f1, _0x2c8587) {
          var _0x45b8e9 = _0xb6e7f1.addComponent(sp.Skeleton);
          cc.loader.loadRes("skel/skel_boss_fire_die/skel_boss_fire_die", sp.SkeletonData, function (_0x32f4d0, _0x371e69) {
            if (!_0x32f4d0) {
              _0x45b8e9.skeletonData = _0x371e69;
              _0x45b8e9.premultipliedAlpha = false;
              _0x45b8e9.setAnimation(0x0, "show", false);
              _0x45b8e9.setCompleteListener(function (_0x8c1b3a, _0x4cd777) {
                if ("show" == (_0x8c1b3a.animation ? _0x8c1b3a.animation.name : '')) {
                  _0xb6e7f1.destroy();
                  if (_0x2c8587) {
                    _0x2c8587();
                  }
                }
              });
              _0x39cdd9.GAudio.playSound(_0x39cdd9.Enum_Audio.bossFireBomb);
            }
          });
        },
        'adjust_follow': function () {
          if (this.head_follow) {
            this.head_follow.setPosition(0x0, -(this.height_body - 0.5 * this.node_head.height + 0x14) * this.height_factor);
          }
        },
        'adjust_shadow': function () {
          if (!this.isDead) {
            var _0x2349dd = this.head_follow.getPosition();
            var _0x55ff0f = this.head_p_parent.getPosition();
            var _0x3401b6 = this.head_parent.getPosition();
            var _0x321952 = this.node_head.getPosition();
            var _0xa12791 = cc.v2(0x0, -this.node_head.height);
            var _0x537cd6 = _0x2349dd.add(_0x55ff0f).add(_0x3401b6).add(_0x321952).add(_0xa12791);
            if (this.node_shadow_close) {
              var _0x41f6db = _0x537cd6.add(cc.v2(0x14, -0x50));
              this.node_shadow_close.setPosition(_0x41f6db);
              this.node_shadow_close.angle = this.head_p_parent.angle;
            }
            if (this.node_shadow_open) {
              var _0x4e7591 = _0x537cd6.add(cc.v2(0x14, -0x8c));
              this.node_shadow_open.setPosition(_0x4e7591);
              this.node_shadow_open.angle = this.head_p_parent.angle;
            }
          }
        },
        'set_mouth_state': function (_0x2c53fa, _0x2ea61b, _0x43d23b) {
          if (undefined === _0x43d23b) {
            _0x43d23b = true;
          }
          if (_0x43d23b) {
            this.node_mouth_open.stopAllActions();
            this.node_mouth_close.stopAllActions();
          }
          var _0x541418 = _0x2c53fa ? 0xff : 0x0;
          var _0x2d9006 = _0x2c53fa ? 0x0 : 0xff;
          this.node_mouth_close.opacity = _0x2d9006;
          this.node_mouth_open.opacity = _0x541418;
          this.node_mouth_open.scaleY = _0x2ea61b;
          this.node_shadow_open.opacity = _0x541418;
          this.node_shadow_close.opacity = _0x2d9006;
        },
        'change_state': function (_0x38d140, _0x2dc2c8) {
          var _0xf3ae3b = this;
          if (undefined === _0x2dc2c8) {
            _0x2dc2c8 = null;
          }
          if (!this.isDead && this.cur_state != _0x38d140) {
            var _0x38403f = this;
            this.cur_state = _0x38d140;
            var _0x4f6bec = _0x48c435.GConfig.actionFrameTime;
            switch (_0x38d140) {
              case _0x52ec46.Enum_BFState.None:
                break;
              case _0x52ec46.Enum_BFState.In:
                this.set_mouth_state(false, 0x1);
                var _0x1a05f4 = [this.node_hand_l, this.node_hand_r, this.center_parent];
                var _0xfc6b3f = [this.pos_hand_l, this.pos_hand_r, cc.v2(0x0, 0x0)];
                var _0x2ed88f = [this.data.il, this.data.ir, this.data.ih];
                var _0x1a0b55 = [false, false, true];
                for (var _0x2f9c01 = 0x0; _0x2f9c01 < _0x1a05f4.length; _0x2f9c01++) {
                  var _0x12cb8f = [];
                  var _0x2aa2c5 = cc.delayTime(_0x2ed88f[_0x2f9c01]);
                  _0x12cb8f.push(_0x2aa2c5);
                  var _0x1971bf = cc.moveTo(0x15 * _0x4f6bec, _0xfc6b3f[_0x2f9c01].add(cc.v2(0x0, -0x8)));
                  _0x12cb8f.push(_0x1971bf);
                  var _0x3bd744 = cc.moveTo(0x9 * _0x4f6bec, _0xfc6b3f[_0x2f9c01]);
                  _0x12cb8f.push(_0x3bd744);
                  if (_0x1a0b55[_0x2f9c01]) {
                    this.scheduleOnce(function () {
                      _0x39cdd9.GAudio.playSound(_0x39cdd9.Enum_Audio.bossFireIn);
                    }, _0x2ed88f[_0x2f9c01]);
                    var _0x2b2867 = cc.callFunc(function () {
                      if (_0x38403f.enterCall) {
                        _0x38403f.enterCall(_0x38403f);
                      }
                      _0x38403f.change_state(_0x52ec46.Enum_BFState.Normal);
                    });
                    _0x12cb8f.push(_0x2b2867);
                  }
                  var _0x33c44b = cc.sequence(_0x12cb8f);
                  _0x1a05f4[_0x2f9c01].runAction(_0x33c44b);
                }
                break;
              case _0x52ec46.Enum_BFState.Normal:
                this.node_eyes.stopAllActions();
                this.node_eyes.opacity = 0x0;
                this.set_mouth_state(false, 0x1);
                this.node_body.stopAllActions();
                var _0x4f3a51 = cc.scaleTo(0x12 * _0x4f6bec, 0x1, 1.2);
                var _0x4a27fa = cc.scaleTo(0x1f * _0x4f6bec, 0x1, 0x1);
                _0x33c44b = cc.sequence(_0x4f3a51, _0x4a27fa);
                var _0x360f64 = cc.repeatForever(_0x33c44b);
                this.node_body.runAction(_0x360f64);
                this.skel_boss_fire_effect.setAnimation(0x0, "idle", false);
                break;
              case _0x52ec46.Enum_BFState.Charge:
                _0x39cdd9.GAudio.playSound(_0x39cdd9.Enum_Audio.bossFireCharge);
                this.node_eyes.stopAllActions();
                var _0x440d4f = cc.fadeTo(0x5 * _0x4f6bec, 0x50);
                var _0x530069 = cc.fadeTo(0xb * _0x4f6bec, 0xff);
                var _0x318763 = cc.sequence(_0x440d4f, _0x530069);
                var _0x90ca63 = cc.repeatForever(_0x318763);
                this.node_eyes.runAction(_0x90ca63);
                this.set_mouth_state(true, 0.92);
                this.node_mouth_open.stopAllActions();
                var _0x2acdc4 = cc.scaleTo(0x3 * _0x4f6bec, 0x1, 1.04);
                this.node_mouth_open.runAction(_0x2acdc4);
                this.node_mouth_close.stopAllActions();
                var _0x44204f = cc.delayTime(0x1a * _0x4f6bec);
                var _0x202c11 = cc.callFunc(function () {
                  _0x38403f.set_mouth_state(false, 0x1, false);
                  _0x38403f.skel_boss_fire_effect.setAnimation(0x0, "idle", false);
                });
                var _0x329d6c = cc.sequence(_0x44204f, _0x202c11);
                this.node_mouth_close.runAction(_0x329d6c);
                var _0x3f8e3a = 0x20 * _0x4f6bec;
                this.head_parent.stopAllActions();
                var _0x5bd951 = cc.scaleTo(_0x3f8e3a, 1.04, 0x1);
                var _0x43e245 = cc.moveTo(_0x3f8e3a, cc.v2(0x0, this.height_body));
                var _0x292eda = cc.spawn(_0x5bd951, _0x43e245);
                this.head_parent.runAction(_0x292eda);
                this.node_body.stopAllActions();
                _0x4f3a51 = cc.scaleTo(_0x3f8e3a, 0x1, 0x1);
                _0x2b2867 = cc.callFunc(function () {
                  _0x38403f.change_state(_0x52ec46.Enum_BFState.Attack, _0x2dc2c8);
                });
                _0x33c44b = cc.sequence(_0x4f3a51, _0x2b2867);
                this.node_body.runAction(_0x33c44b);
                this.skel_boss_fire_effect.setAnimation(0x0, "play1", true);
                break;
              case _0x52ec46.Enum_BFState.Attack:
                this.set_mouth_state(false, 0x1);
                var _0x35ea48 = cc.delayTime(0x6 * _0x4f6bec);
                var _0xd8ec47 = cc.callFunc(function () {
                  _0xf3ae3b.set_mouth_state(true, 0.92, false);
                  _0x39cdd9.GAudio.playSound(_0x39cdd9.Enum_Audio.bossFireAttack);
                  _0xf3ae3b.skel_boss_fire_effect.setAnimation(0x0, 'play2', false);
                  _0xf3ae3b.addEnemys(_0x2dc2c8);
                });
                var _0x4bd742 = cc.scaleTo(0x7 * _0x4f6bec, 0x1, 1.04);
                var _0x197998 = cc.scaleTo(0xa * _0x4f6bec, 0x1, 0x1);
                var _0x35c985 = cc.scaleTo(0x10 * _0x4f6bec, 0x1, 1.04);
                var _0x5e3677 = cc.delayTime(0x3 * _0x4f6bec);
                var _0x1c5bd2 = _0x2dc2c8 < this.list_enemys_last.length ? this.list_enemys_last[_0x2dc2c8] : 0x0;
                var _0x60f38d = cc.delayTime(_0x1c5bd2);
                var _0x3ec776 = cc.callFunc(function () {
                  _0x38403f.set_mouth_state(false, 0x1, false);
                  _0x38403f.skel_boss_fire_effect.setAnimation(0x0, "idle", false);
                  _0x38403f.action_hands(_0x38403f.data.lhands, _0x38403f.node_hand_l, _0x38403f.pos_hand_l, 0x1);
                  _0x38403f.action_hands(_0x38403f.data.rhands, _0x38403f.node_hand_r, _0x38403f.pos_hand_r, -0x1);
                });
                var _0x4611d0 = cc.sequence(_0x35ea48, _0xd8ec47, _0x4bd742, _0x197998, _0x35c985, _0x5e3677, _0x60f38d, _0x3ec776);
                this.node_mouth_open.runAction(_0x4611d0);
                this.head_parent.stopAllActions();
                _0x5bd951 = cc.scaleTo(0x6 * _0x4f6bec, 1.04, 0x1);
                _0x43e245 = cc.moveTo(0x6 * _0x4f6bec, cc.v2(0x0, -0x4));
                _0x292eda = cc.spawn(_0x5bd951, _0x43e245);
                var _0x4ef487 = cc.scaleTo(0x5 * _0x4f6bec, 0x1, 0x1);
                var _0x3ee694 = cc.moveTo(0x5 * _0x4f6bec, cc.v2(-0x6, -0x19));
                var _0x5064b5 = cc.spawn(_0x4ef487, _0x3ee694);
                var _0x212314 = cc.scaleTo(0x18 * _0x4f6bec, 0x1, 0x1);
                var _0x90afe0 = cc.moveTo(0x18 * _0x4f6bec, cc.v2(-0x15, -0x11));
                var _0x588a9d = cc.spawn(_0x212314, _0x90afe0);
                var _0x3e5b71 = cc.scaleTo(0xf * _0x4f6bec, 0x1, 0x1);
                var _0x5b4477 = cc.moveTo(0xf * _0x4f6bec, cc.v2(0x0, 0x19));
                var _0x46c4c6 = cc.spawn(_0x3e5b71, _0x5b4477);
                var _0x2dd067 = cc.scaleTo(0xd * _0x4f6bec, 0x1, 0x1);
                var _0x23a63c = cc.moveTo(0xd * _0x4f6bec, cc.v2(0x0, 0x0));
                var _0x58acd9 = cc.spawn(_0x2dd067, _0x23a63c);
                _0x2b2867 = cc.callFunc(function () {
                  _0x38403f.change_state(_0x52ec46.Enum_BFState.Normal);
                });
                var _0x5db91e = cc.sequence(_0x292eda, _0x5064b5, _0x588a9d, _0x46c4c6, _0x58acd9, _0x2b2867);
                this.head_parent.runAction(_0x5db91e);
                this.node_body.stopAllActions();
                _0x4f3a51 = cc.scaleTo(0xb * _0x4f6bec, 0x1, 1.2);
                _0x4a27fa = cc.scaleTo(0x34 * _0x4f6bec, 0x1, 0x1);
                _0x33c44b = cc.sequence(_0x4f3a51, _0x4a27fa);
                this.node_body.runAction(_0x33c44b);
            }
          }
        },
        'addEnemys': function (_0xf01ee4) {
          var _0x5618e7 = this;
          var _0x2d6753 = this.dic_enemys[_0xf01ee4];
          var _0x241694 = this.node_head.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
          this.pos_enemy = this.node.convertToNodeSpaceAR(_0x241694).add(cc.v2(0x0, -this.node_head.height - 0xc8));
          var _0x3e8c8c = this.node.position.add(this.pos_enemy);
          var _0x362ef7 = function (_0xd8e74c) {
            var _0x3b8b13 = _0x2d6753[_0xd8e74c].split('*');
            if (0x4 == _0x3b8b13.length) {
              var _0x3c19e6 = parseInt(_0x3b8b13[0x0]);
              var _0x1d9a8d = parseFloat(_0x3b8b13[0x1]);
              var _0x378cb2 = parseFloat(_0x3b8b13[0x2]);
              var _0x53899b = parseFloat(_0x3b8b13[0x3]);
              _0x53899b = _0x53899b < 0x0 ? 0x0 : _0x53899b;
              _0x4089ef.scheduleOnce(function () {
                if (!_0x5618e7.isDead) {
                  _0x3e51f2.GValue.EntityWorld.addEntitySys.addBossFireEnemys(_0x3c19e6, cc.v2(_0x1d9a8d, _0x378cb2), _0x3e8c8c);
                }
              }, _0x53899b);
            }
          };
          var _0x4089ef = this;
          for (var _0x57e09d = 0x0; _0x57e09d < _0x2d6753.length; _0x57e09d++) {
            _0x362ef7(_0x57e09d);
          }
        },
        'setCanAttack': function (_0xaff20f) {
          this.can_attack = _0xaff20f;
        },
        'updateGameLogic': function (_0x31858c) {
          if (this.node_body) {
            this.height_factor = this.node_body.scaleY;
            this.adjust_follow();
          }
          this.adjust_shadow();
          if (this.can_attack) {
            if (this.cur_index_enemy >= this.list_enemys_time.length) {
              this.cur_index_enemy = 0x0;
            }
            var _0xbf918c = this.list_enemys_time[this.cur_index_enemy];
            this.cur_time_enemy += _0x31858c;
            if (this.cur_time_enemy >= _0xbf918c) {
              this.change_state(_0x52ec46.Enum_BFState.Charge, this.cur_index_enemy);
              this.cur_time_enemy = 0x0;
              this.cur_index_enemy++;
            }
          }
        },
        'set_color': function () {
          if (this.can_attack) {
            if (this.shineDead) {
              this.color_cur = this.color_attack;
            }
            var _0x1a912a = this.color_normal;
            this.color_times = this.color_times % 0x2;
            if (0x0 != this.color_times) {
              _0x1a912a = this.color_cur;
              this.color_cur = this.color_normal;
            }
            this.color_times++;
            this.change_color(_0x1a912a);
          }
        },
        'change_color': function (_0xaa47a9) {
          this.node_head.color = _0xaa47a9;
          this.node_body.color = _0xaa47a9;
          this.node_mouth_close.color = _0xaa47a9;
          this.node_mouth_open.color = _0xaa47a9;
          this.node_hand_l.color = _0xaa47a9;
          this.node_hand_r.color = _0xaa47a9;
          if (this.bloodNum) {
            this._bloodNum.color = _0xaa47a9;
          }
        },
        'change_eyeshine_color': function (_0x1002cf) {
          for (var _0x352ac9 = 0x0; _0x352ac9 < this.node_eyes.children.length; _0x352ac9++) {
            this.node_eyes.children[_0x352ac9].color = _0x1002cf;
          }
        },
        'attack': function (_0x29ed02, _0x184852) {
          _0x39cdd9.GAudio.playEnemyHurtSound();
          this.bloodChange(-_0x184852);
          if (this.com_attacked_effect) {
            var _0x145391 = cc.v2(0x0, 0x0);
            var _0xa82e08 = _0x3e51f2.GValue.EntityWorld.player.radius;
            var _0x3ae96d = _0x3e51f2.GValue.EntityWorld.player.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
            var _0x3cc450 = this.com_attacked_effect.node.convertToNodeSpaceAR(_0x3ae96d);
            var _0x178832 = _0x3cc450.mag();
            if (_0x178832 > 0x0) {
              var _0x42a89c = (_0x178832 - _0xa82e08) / _0x178832;
              _0x145391 = cc.v2(_0x3cc450.x * _0x42a89c, _0x3cc450.y * _0x42a89c);
            }
            this.com_attacked_effect.hit(_0x145391, 0x0, 0x1);
            this.com_attacked_effect.hurt(cc.v2(0x0, 0x0), this.color_effect);
          }
          this.color_cur = this.color_attack;
        },
        'laserAttack': function (_0x3adfb4, _0x28a143) {
          this.bloodChange(-_0x3adfb4);
          if (this.com_attacked_effect) {
            this.com_attacked_effect.laserHurt(cc.v2(0x0, 0x0), _0x28a143, this.color_effect);
          }
        },
        'bloodChange': function (_0x3798fc) {
          this.curBlood += _0x3798fc;
          if (this.curBlood <= 0x0) {
            this.curBlood = 0x0;
            this.die();
          }
          if (this._bloodNum) {
            this._bloodNum.setString(_0x36e37c.GFunc.getNumK(Math.ceil(this.curBlood)));
          }
        },
        'die': function () {
          if (!this.isDead) {
            this.isDead = true;
            _0x3e51f2.GValue.EntityWorld.bossDie(this.node);
            this.bloodNum.destroy();
            this.bloodNum = null;
            _0x39cdd9.GAudio.playSound(_0x39cdd9.Enum_Audio.bossFireDie);
            this.node_shadow_close.destroy();
            this.node_shadow_open.destroy();
            this.effect_die();
          }
        },
        'effect_die': function () {
          var _0x407743 = this;
          var _0x397c29 = this;
          var _0x2b6c0d = _0x48c435.GConfig.actionFrameTime;
          var _0x30dd4c = 0x6 * _0x2b6c0d;
          this.shineDead = true;
          if (this.data.gold > 0x0) {
            _0x3e51f2.GValue.EntityWorld.playGoldFlyEffect(0x1, this.data.gold, this.node_head.convertToWorldSpaceAR(cc.v2(0x0, 0x0)));
          }
          _0x3e51f2.GValue.EntityWorld.setTouching(true);
          _0x3e51f2.GValue.EntityWorld.touchAvaliable = false;
          this.skel_boss_fire_effect.node.destroy();
          _0x3e51f2.GValue.GameUI.showStoneDrop();
          this.scheduleOnce(function () {
            _0x3e51f2.GValue.GameUI.showStoneDrop();
          }, 0.5);
          _0x3e51f2.GValue.EntityWorld.shakeTimes(0x1e);
          this.head_parent.stopAllActions();
          var _0x1a56b4 = cc.scaleTo(_0x30dd4c, 0x1, 0x1);
          var _0x5f0370 = cc.moveTo(_0x30dd4c, cc.v2(0x0, 0x0));
          var _0x2a1106 = cc.spawn(_0x1a56b4, _0x5f0370);
          var _0x4ef3c6 = cc.callFunc(function () {
            _0x397c29.head_parent.stopAllActions();
            var _0x1982c5 = cc.moveTo(0xe * _0x2b6c0d, cc.v2(-0x46, 0x6));
            var _0x44754e = cc.rotateTo(0xe * _0x2b6c0d, 0x7);
            var _0x3c90d3 = cc.spawn(_0x1982c5, _0x44754e);
            var _0x1a70f3 = cc.moveTo(0x12 * _0x2b6c0d, cc.v2(0x16, 0x5b));
            var _0x572fcd = cc.scaleTo(0x12 * _0x2b6c0d, 1.2);
            var _0x4c963e = cc.rotateTo(0x12 * _0x2b6c0d, 0x0);
            var _0x267254 = cc.spawn(_0x1a70f3, _0x572fcd, _0x4c963e);
            var _0x3b70d5 = cc.moveTo(0xd * _0x2b6c0d, cc.v2(0xf, 0x47));
            var _0x23191b = cc.scaleTo(0xd * _0x2b6c0d, 0x1);
            var _0x13354d = cc.rotateTo(0xd * _0x2b6c0d, -0x2);
            var _0x357ad1 = cc.spawn(_0x3b70d5, _0x23191b, _0x13354d);
            var _0x2f0ac5 = cc.callFunc(function () {
              _0x397c29.shineDead = false;
              _0x397c29.node_eyes.stopAllActions();
              _0x397c29.change_eyeshine_color(cc.Color.BLACK);
              _0x3e51f2.GValue.EntityWorld.shakeTimes(0xc);
            });
            var _0x53b2bc = cc.moveTo(0x4 * _0x2b6c0d, cc.v2(0x27, 0x27));
            var _0x364fb4 = cc.scaleTo(0x4 * _0x2b6c0d, 0.78);
            var _0x260e61 = cc.rotateTo(0x4 * _0x2b6c0d, 0x0);
            var _0x1c5b60 = cc.spawn(_0x53b2bc, _0x364fb4, _0x260e61);
            var _0x2e3dae = cc.moveTo(0x4 * _0x2b6c0d, cc.v2(0x18, 0x20));
            var _0x27fe25 = cc.scaleTo(0x4 * _0x2b6c0d, 0.85);
            var _0x34ad95 = cc.rotateTo(0x4 * _0x2b6c0d, 2.8);
            var _0x53a0c0 = cc.spawn(_0x2e3dae, _0x27fe25, _0x34ad95);
            var _0x9cd132 = cc.callFunc(function () {
              var _0x496257 = cc.color(0x96, 0x96, 0x96, 0x96);
              _0x407743.color_normal = _0x496257;
              _0x397c29.change_color(_0x496257);
              _0x397c29.change_eyeshine_color(cc.Color.BLACK);
              _0x397c29.set_mouth_state(true, 0.92);
            });
            var _0x12b5fa = cc.delayTime(0x3 * _0x2b6c0d);
            var _0x29f97f = cc.callFunc(function () {
              var _0x37d08c = new cc.Node();
              _0x37d08c.setPosition(0x0, -0x12c);
              _0x397c29.node_head.addChild(_0x37d08c);
              _0x397c29.create_die_effect(_0x37d08c, function () {
                var _0xfe3ce = _0x407743.com_attacked_effect.node.getPosition();
                var _0x26109d = [cc.v2(-0x32, 0x32), cc.v2(0x32, -0x32), cc.v2(0x0, 0x0)];
                var _0x3ed71c = [0x1, 0.5, 1.2];
                var _0x353aba = [0x0, 0.1, 0.4];
                var _0x366e1c = _0x26109d.length;
                var _0x33cc42 = function (_0x45b5dd) {
                  var _0x3e983c = cc.instantiate(_0x3e51f2.GValue.pf_enemy_effect);
                  _0x3e983c.scale = _0x3ed71c[_0x45b5dd];
                  _0x3e983c.setPosition(_0xfe3ce.add(_0x26109d[_0x45b5dd]));
                  _0x407743.head_follow.addChild(_0x3e983c);
                  var _0x27e3ba = _0x3e983c.getComponent(_0x225481);
                  _0x27e3ba.init(_0x407743);
                  _0x397c29.scheduleOnce(function () {
                    _0x27e3ba.die(0x0, cc.color(0xe6, 0x46, 0x32), null, _0x45b5dd == _0x366e1c - 0x1);
                  }, _0x353aba[_0x45b5dd]);
                };
                for (var _0x27807d = 0x0; _0x27807d < _0x366e1c; _0x27807d++) {
                  _0x33cc42(_0x27807d);
                }
                var _0x4633a6 = cc.fadeTo(0x14 * _0x2b6c0d, 0x0);
                _0x397c29.head_parent.runAction(_0x4633a6);
                _0x397c29.node_body.runAction(_0x4633a6.clone());
                _0x397c29.node_hand_l.runAction(_0x4633a6.clone());
                _0x397c29.node_hand_r.runAction(_0x4633a6.clone());
                _0x397c29.scheduleOnce(function () {
                  _0x397c29.node.destroy();
                  delete _0x3e51f2.GValue.EntityWorld.FireEnemys[_0x397c29.data.id];
                }, 0x1);
              });
            });
            var _0x1f0ba0 = cc.sequence(_0x3c90d3, _0x267254, _0x357ad1, _0x2f0ac5, _0x1c5b60, _0x53a0c0, _0x9cd132, _0x12b5fa, _0x29f97f);
            _0x397c29.head_parent.runAction(_0x1f0ba0);
          });
          var _0x532b98 = cc.sequence(_0x2a1106, _0x4ef3c6);
          this.head_parent.runAction(_0x532b98);
          _0x397c29.set_mouth_state(true, 0x1);
          this.node_mouth_open.stopAllActions();
          var _0x4fa8b4 = cc.scaleTo(0x7 * _0x2b6c0d, 0x1, 1.04);
          var _0x2d39d1 = cc.scaleTo(0xa * _0x2b6c0d, 0x1, 0x1);
          var _0x4afe94 = cc.sequence(_0x4fa8b4, _0x2d39d1);
          var _0x3fac0e = cc.repeat(_0x4afe94, 0x4);
          this.node_mouth_open.runAction(_0x3fac0e);
          this.node_body.stopAllActions();
          var _0x225644 = cc.scaleTo(_0x30dd4c, 0x1, 1.2);
          this.node_body.runAction(_0x225644);
          this.node_hand_l.stopAllActions();
          var _0x180f24 = cc.scaleTo(0x6 * _0x2b6c0d, 0x1, 0x1);
          var _0x3a239b = cc.moveTo(0x6 * _0x2b6c0d, this.pos_hand_l);
          var _0x3cbb9b = cc.spawn(_0x180f24, _0x3a239b);
          this.node_hand_l.runAction(_0x3cbb9b);
          this.node_hand_r.stopAllActions();
          var _0x2f6a71 = cc.scaleTo(0x6 * _0x2b6c0d, -0x1, 0x1);
          var _0x571fcb = cc.moveTo(0x6 * _0x2b6c0d, this.pos_hand_r);
          var _0xddb8d3 = cc.spawn(_0x2f6a71, _0x571fcb);
          this.node_hand_r.runAction(_0xddb8d3);
        }
      });
      cc._RF.pop();
    }, {
      'CEnemyEffect': "CEnemyEffect",
      'CommonAudio': "CommonAudio",
      'CommonConfig': 'CommonConfig',
      'CommonEnum': "CommonEnum",
      'CommonFunc': "CommonFunc",
      'CommonValue': 'CommonValue',
      'EnemyBase': 'EnemyBase',
      'PfNum': "PfNum",
      'Types': "Types"
    }],
    'CEntityBoss': [function (_0x10e5a4, _0x4569a8, _0x568dc0) {
      'use strict';
  
      cc._RF.push(_0x4569a8, "e5795XAfoVFNrxziqzw43vG", 'CEntityBoss');
      var _0x1bdf55 = _0x10e5a4('CommonEnum');
      var _0x2ff0e8 = _0x10e5a4("CommonValue");
      var _0x8380d0 = _0x10e5a4("CommonAudio");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.pdata = null;
          this.target = null;
          this.parent = null;
          this.show = null;
          this.collider_p = null;
          this.radius_p = 0x0;
          this.isInTarget = true;
          this.isDead = false;
          this.enterCall = null;
          this.updateCall = null;
          this.beginCall = null;
          this.attackCall = null;
          this.list_collider = [];
          this.shineDead = false;
          this.shineId = -0x1;
          this.dic_shine_node = {};
          this.dic_shine_pfnum = {};
          this.color_normal = cc.color(0xff, 0xff, 0xff);
          this.color_attack = cc.color(0xec, 0x80, 0x25);
          this.color_cur = cc.color(0xff, 0xff, 0xff);
          this.color_times = 0x0;
        },
        'init_parent': function (_0x4dae0c, _0x45dc70, _0x4550c0, _0x3f8ff1, _0x5f07c1) {
          this.pdata = _0x4dae0c;
          this.enterCall = _0x45dc70;
          this.beginCall = _0x4550c0;
          this.updateCall = _0x3f8ff1;
          this.attackCall = _0x5f07c1;
          this.create_parent();
          this.addDataDicBossEnemy(this);
        },
        'create_parent': function () {
          this.target = new cc.Node();
          this.target.group = 'enemy';
          this.node.addChild(this.target);
          this.collider_p = this.target.addComponent(cc.CircleCollider);
          this.collider_p.radius = this.radius_p;
          this.collider_p.tag = _0x1bdf55.E_CTag.Boss_Parent;
          this.parent = new cc.Node();
          this.target.addChild(this.parent);
          this.parent.setPosition(this.pdata.in_pos);
          this.show = new cc.Node();
          this.parent.addChild(this.show);
        },
        'moveTo_target': function () {
          var _0x3541ce = this;
          var _0x45bf56 = cc.moveTo(this.pdata.in_time, cc.v2(0x0, 0x0));
          var _0x460c1f = cc.callFunc(function () {
            if (_0x3541ce.enterCall) {
              _0x3541ce.enterCall(_0x3541ce);
            }
          });
          var _0x26319d = cc.sequence(_0x45bf56, _0x460c1f);
          this.parent.runAction(_0x26319d);
        },
        'setIsInTarget': function (_0xbae7bf) {
          this.isInTarget = _0xbae7bf;
        },
        'setBossBegin': function () {
          var _0x28b328 = this;
          this.setIsInTarget(false);
          if (this.beginCall) {
            this.beginCall();
          }
          this.schedule(function () {
            _0x28b328.set_color();
          }, 0.1, cc.macro.REPEAT_FOREVER);
        },
        'updateGameLogic': function (_0x5a5e32) {
          if (!(this.isDead || this.isInTarget)) {
            if (this.updateCall) {
              this.updateCall(_0x5a5e32);
            }
          }
        },
        'addListShineNode': function (_0x50526e, _0x49daff) {
          var _0x2558d4 = this.dic_shine_node[_0x50526e];
          if (_0x2558d4) {
            _0x2558d4.push(_0x49daff);
          } else {
            _0x2558d4 = [_0x49daff];
            this.dic_shine_node[_0x50526e] = _0x2558d4;
          }
        },
        'addListShinePfnum': function (_0x5f2805, _0x46d20e) {
          var _0x43a21b = this.dic_shine_pfnum[_0x5f2805];
          if (_0x43a21b) {
            _0x43a21b.push(_0x46d20e);
          } else {
            _0x43a21b = [_0x46d20e];
            this.dic_shine_pfnum[_0x5f2805] = _0x43a21b;
          }
        },
        'setShineId': function (_0x1a0882) {
          this.shineId = _0x1a0882;
        },
        'set_color': function () {
          if (this.shineDead) {
            this.color_cur = this.color_attack;
          }
          var _0x562cb8 = this.color_normal;
          this.color_times = this.color_times % 0x2;
          if (0x0 != this.color_times) {
            _0x562cb8 = this.color_cur;
            this.color_cur = this.color_normal;
          }
          this.color_times++;
          this.change_color(_0x562cb8);
        },
        'change_color': function (_0x2c4eed) {
          for (var _0x1f93b4 in this.dic_shine_node) {
            var _0x115b82 = parseInt(_0x1f93b4);
            if (-0x1 == this.shineId || this.shineId == _0x115b82) {
              var _0x2fb8f7 = this.dic_shine_node[_0x1f93b4];
              for (var _0x91ab57 = 0x0; _0x91ab57 < _0x2fb8f7.length; _0x91ab57++) {
                var _0x201e67 = _0x2fb8f7[_0x91ab57];
                if (_0x201e67 && '' != _0x201e67.name) {
                  _0x201e67.color = _0x2c4eed;
                }
              }
            }
          }
          for (var _0x1f93b4 in this.dic_shine_pfnum) {
            _0x115b82 = parseInt(_0x1f93b4);
            if (-0x1 == this.shineId || this.shineId == _0x115b82) {
              _0x2fb8f7 = this.dic_shine_pfnum[_0x1f93b4];
              for (_0x91ab57 = 0x0; _0x91ab57 < _0x2fb8f7.length; _0x91ab57++) {
                var _0x17b935 = _0x2fb8f7[_0x91ab57];
                if (_0x17b935 && _0x17b935.color) {
                  _0x17b935.color = _0x2c4eed;
                }
              }
            }
          }
        },
        'attack': function (_0x2f7d98, _0x990776, _0x178816) {
          if (!this.isDead && this.attackCall) {
            _0x8380d0.GAudio.playEnemyHurtSound();
            this.attackCall(_0x2f7d98, _0x990776, _0x178816);
            this.color_cur = this.color_attack;
          }
        },
        'getListDWLasterTarget': function () {
          this.isDead;
          return [];
        },
        'addGold': function (_0x559c1b, _0x34fab5) {
          _0x2ff0e8.GValue.EntityWorld.playGoldFlyEffect(0x2, _0x34fab5, _0x559c1b);
        },
        'isPlayerDie': function (_0x4aa56f, _0x51fd19, _0x3d6455) {
          var _0x5f3a3c = false;
          if (this.isDead) {
            return _0x5f3a3c;
          }
          if (!this.list_collider) {
            return _0x5f3a3c;
          }
          for (var _0x3e7654 = 0x0; _0x3e7654 < this.list_collider.length; _0x3e7654++) {
            var _0x1ddebf = this.list_collider[_0x3e7654];
            if (this.isPlayerCollide(_0x1ddebf, _0x4aa56f, _0x51fd19, _0x3d6455)) {
              _0x5f3a3c = true;
              break;
            }
          }
          return _0x5f3a3c;
        },
        'isPlayerCollide': function (_0x1ebdbc, _0x2c9e69, _0x2d5321, _0x4ba23d) {
          var _0x9811a5 = false;
          if (_0x1ebdbc.node) {
            var _0x13d5b8 = _0x1ebdbc.radius + _0x4ba23d;
            var _0x24d7f4 = cc.rect(_0x2d5321.x - _0x13d5b8, _0x2d5321.y - _0x13d5b8, 0x2 * _0x13d5b8, 0x2 * _0x13d5b8);
            var _0x11b91e = _0x1ebdbc.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
            _0x11b91e = _0x2c9e69.convertToNodeSpaceAR(_0x11b91e);
            if (_0x24d7f4.contains(_0x11b91e) && _0x2d5321.sub(_0x11b91e).mag() <= _0x13d5b8) {
              _0x9811a5 = true;
            }
          }
          return _0x9811a5;
        },
        'addListCollider': function (_0x28d85b) {
          var _0x293c04 = false;
          for (var _0xbb4efb = 0x0; _0xbb4efb < this.list_collider.length; _0xbb4efb++) {
            if (_0x28d85b == this.list_collider[_0xbb4efb]) {
              _0x293c04 = true;
              break;
            }
          }
          if (!_0x293c04) {
            this.list_collider.push(_0x28d85b);
          }
        },
        'removeListCollider': function (_0x43e868) {
          for (var _0x75b41d = 0x0; _0x75b41d < this.list_collider.length; _0x75b41d++) {
            if (_0x43e868 == this.list_collider[_0x75b41d]) {
              this.list_collider.splice(_0x75b41d, 0x1);
              break;
            }
          }
        },
        'addDataDicBossEnemy': function (_0x1c21d2) {
          var _0x5d4350 = this.pdata.type;
          var _0x2055ea = this.pdata.id;
          if (!_0x2ff0e8.GValue.DicBossEnemy[_0x5d4350]) {
            _0x2ff0e8.GValue.DicBossEnemy[_0x5d4350] = {};
          }
          _0x2ff0e8.GValue.DicBossEnemy[_0x5d4350][_0x2055ea] = _0x1c21d2;
        },
        'removeDataDicBossEnemy': function () {
          var _0x1c12e6 = this.pdata.type;
          var _0x383345 = this.pdata.id;
          if (_0x2ff0e8.GValue.DicBossEnemy[_0x1c12e6]) {
            delete _0x2ff0e8.GValue.DicBossEnemy[_0x1c12e6][_0x383345];
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonAudio': 'CommonAudio',
      'CommonEnum': 'CommonEnum',
      'CommonValue': 'CommonValue'
    }],
    'CEntityFollowPlayer': [function (_0x4b0843, _0x4c6bef, _0x3f284b) {
      'use strict';
  
      cc._RF.push(_0x4c6bef, "6ceb3nNRjVPxK5j18pjVXUm", "CEntityFollowPlayer");
      var _0x1851a5 = _0x4b0843('CEntityBase');
      var _0x9b13c7 = _0x4b0843("Tools");
      var _0x488ee2 = _0x4b0843("CEntityKnife");
      var _0x4c25bd = _0x4b0843("CommonConfig");
      cc.Class({
        'extends': _0x1851a5,
        'properties': {},
        'ctor': function () {
          this.player = null;
          this.knivesCmp = null;
          this.knifeCollisionSoundCtrl = null;
          this.heroRotate = null;
        },
        'init': function (_0x1efaa5, _0x5af814) {
          if (undefined === _0x5af814) {
            _0x5af814 = true;
          }
          this.player = _0x1efaa5;
          _0x9b13c7.DYTools.addScript(this.node, "CMoveWithOwnerNode").init(this.node.parent, this, this.player);
          this.knivesCmp = _0x9b13c7.DYTools.addScript(this.node, "CPlayerKnivesComponent");
          this.knivesCmp.init(_0x1efaa5, _0x5af814);
          this.heroRotate = _0x9b13c7.DYTools.addScript(this.node, "CHRotate");
        },
        'die': function () {
          this.node.active = false;
          var _0x3807cd = 0x0;
          for (var _0x4c8c62 = this.knivesCmp.knives; _0x3807cd < _0x4c8c62.length; _0x3807cd++) {
            _0x4c8c62[_0x3807cd].getComponent(_0x488ee2).shadow.active = false;
          }
        },
        'revive': function () {
          this.node.active = true;
          var _0x39e615 = 0x0;
          for (var _0x279899 = this.knivesCmp.knives; _0x39e615 < _0x279899.length; _0x39e615++) {
            _0x279899[_0x39e615].getComponent(_0x488ee2).shadow.active = true;
          }
          this.node.scale = 0.6;
          var _0x24b40f = cc.scaleTo(0x4 * _0x4c25bd.GConfig.actionFrameTime, 1.2);
          var _0x310207 = cc.scaleTo(0x9 * _0x4c25bd.GConfig.actionFrameTime, 0x1);
          this.node.runAction(cc.sequence(_0x24b40f, _0x310207));
        },
        'setShadowOpacity': function (_0x8deebe) {
          var _0xd856de = 0x0;
          for (var _0x1efed1 = this.knivesCmp.knives; _0xd856de < _0x1efed1.length; _0xd856de++) {
            _0x1efed1[_0xd856de].getComponent(_0x488ee2).shadow.opacity = _0x8deebe;
          }
        },
        'updateGameLogic': function (_0x78d252) {
          this.heroRotate.updateGameLogic(_0x78d252);
        }
      });
      cc._RF.pop();
    }, {
      'CEntityBase': "CEntityBase",
      'CEntityKnife': "CEntityKnife",
      'CommonConfig': "CommonConfig",
      'Tools': 'Tools'
    }],
    'CEntityKnife': [function (_0x3ea04c, _0x7e5f1, _0x3ed788) {
      'use strict';
  
      cc._RF.push(_0x7e5f1, "2664a8OYHZJb6dfN9xI9O6t", "CEntityKnife");
      var _0x1c0623 = _0x3ea04c('CEntityBase');
      var _0x42d522 = _0x3ea04c("Tools");
      var _0x28ec22 = _0x3ea04c("Types");
      var _0x5b0c5d = _0x3ea04c("CommonValue");
      var _0xc52616 = _0x3ea04c("KnifeDropCollisionWallListener");
      var _0x1e3a66 = _0x3ea04c("KnifeThrowCtrl");
      var _0x184fec = _0x3ea04c("CommonConfig");
      cc.Class({
        'extends': _0x1c0623,
        'properties': {
          'attackNode': cc.Node,
          'landNode': cc.Node,
          'rivalNode': cc.Node,
          'skinNode': cc.Node
        },
        'ctor': function () {
          this.itemNode = null;
          this.nodeCollider = null;
          this.knifeColliderListener = null;
          this.knifeMoveCtrl = null;
          this.knifeParentCtrl = null;
          this.knifeColliderNodeCtrl = null;
          this.knifeSkinCtrl = null;
          this.knifePickCollider = null;
          this.knifeStateComp = null;
          this.shadow = null;
          this.bossDiscarded = false;
          this._dropMoveFix = null;
          this._dropType = 0x0;
        },
        'init': function (_0x50020a, _0x1a388d, _0x136af7) {
          if (undefined === _0x136af7) {
            _0x136af7 = true;
          }
          this.itemNode = _0x1a388d;
          this.teamID = _0x50020a;
          this.bossDiscarded = false;
          if (!_0x136af7) {
            this.skinNode.scaleX = -0x1;
          }
          this.nodeCollider = _0x42d522.DYTools.addScript(this.attackNode, 'CNodeCollider');
          this.nodeCollider.init(this.node, true, true);
          _0x42d522.DYTools.addScript(this.landNode, "CNodeCollider").init(this.node, true);
          _0x42d522.DYTools.addScript(this.rivalNode, "CNodeCollider").init(this.node, true);
          this.node.on("changeTag", this.changeColliderTag, this);
          this.node.on('changeKnifeAttackGroup', this.changeKnifeAttackGroup, this);
          this.node.on("attackLight", this.playAttackLight, this);
          this.addComponent();
          this.knifeColliderListener = _0x42d522.DYTools.addScript(this.node, "CKnifeColliderListener");
          this.knifeMoveCtrl = _0x42d522.DYTools.addScript(this.node, "CKnifeMoveCtrl");
          this.knifeMoveCtrl.init(this, _0x136af7);
          this.knifeParentCtrl = _0x42d522.DYTools.addScript(this.node, "CKnifeParentCtrl");
          this.knifeParentCtrl.init(this, this.itemNode);
          this.knifeColliderNodeCtrl = _0x42d522.DYTools.addScript(this.node, "CKnifeColliderNodeCtrl");
          this.knifeColliderNodeCtrl.init(this.attackNode, this.rivalNode, _0x136af7);
          this.knifeSkinCtrl = _0x42d522.DYTools.addScript(this.skinNode, "CKnifeSkinCtrl");
          this.knifeSkinCtrl.init();
          this.changeColliderTag(_0x50020a);
        },
        'setShadow': function (_0x28175d) {
          this.shadow = _0x28175d;
        },
        'changeShadowImage': function (_0x5e7cb0) {
          if (this.shadow) {
            this.shadow.addComponent(cc.Sprite).spriteFrame = _0x5b0c5d.GValue.Atlas_Shadow.getSpriteFrame(_0x5e7cb0);
          }
        },
        'addComponent': function () {
          _0x42d522.DYTools.addScript(this.node, "CKnifeCountComponent");
          this.knifeStateComp = _0x42d522.DYTools.addScript(this.node, 'CKnifeStateComponent');
          _0x42d522.DYTools.addScript(this.node, 'CKnifeOwnerComponent');
        },
        'changeSkin': function (_0x31c76b) {
          this.skinNode.getComponent(cc.Sprite).spriteFrame = _0x5b0c5d.GValue.Atlas_Game.getSpriteFrame(_0x31c76b);
        },
        'changeColliderTag': function (_0x3073b1) {
          this.teamID = _0x3073b1;
          var _0x2e69c3 = 0x0;
          for (var _0x18a816 = this.node.getComponentsInChildren(cc.Collider); _0x2e69c3 < _0x18a816.length; _0x2e69c3++) {
            _0x18a816[_0x2e69c3].tag = _0x3073b1;
          }
        },
        'changeKnifeAttackGroup': function (_0xad9c0e) {
          this.nodeCollider.changeNodeGroup(_0xad9c0e);
        },
        'playAttackLight': function () {},
        'updateGameLogic': function (_0x23c43f) {
          if (this._dropMoveFix) {
            this._dropMoveFix.updateGameLogic(_0x23c43f);
          } else {
            this.knifeParentCtrl.updateLogic(_0x23c43f);
            this.knifeMoveCtrl.updateLogic(_0x23c43f);
            this.knifeColliderNodeCtrl.updateLogic(_0x23c43f);
            this.knifeSkinCtrl.updateLogic(_0x23c43f);
            this.node.emit('resetDirty');
          }
        },
        'initDrop': function (_0x526603, _0x4d392d, _0x34ae81, _0x28c481) {
          if (undefined === _0x4d392d) {
            _0x4d392d = 0x0;
          }
          if (undefined === _0x34ae81) {
            _0x34ae81 = 0x320;
          }
          if (undefined === _0x28c481) {
            _0x28c481 = true;
          }
          this._dropType = _0x4d392d;
          if (_0x28c481) {
            _0x42d522.DYTools.addScript(this.landNode, "KnifeDropCollisionWallListener");
          }
          this._dropMoveFix = _0x42d522.DYTools.addScript(this.node, 'KnifeThrowCtrl');
          this._dropMoveFix.init(this, _0x34ae81, _0x526603, _0x28c481);
          this.initDropUI();
          this.node.on("dropOver", this.dropOver, this);
        },
        'dropOver': function () {
          if (this.teamID == -_0x28ec22.EntityTag.Player) {
            this.addNewKnife();
          } else {
            if (this.teamID == -_0x28ec22.EntityTag.Enemy) {
              if (0x0 == this._dropType) {
                this.addNewKnife();
              } else {
                if (0x1 == this._dropType && !this.bossDiscarded) {
                  var _0x4bca8c = 0x0;
                  for (var _0x147afe = _0x5b0c5d.GValue.EntityWorld.addEntitySys.addDWKnife(0x1, _0x28ec22.DWType.Knife); _0x4bca8c < _0x147afe.length; _0x4bca8c++) {
                    var _0x1695ff = _0x147afe[_0x4bca8c];
                    _0x1695ff.node.position = this.node.position;
                    _0x1695ff.node.angle = this.node.angle + 0x5a;
                    _0x5b0c5d.GValue.EntityWorld.addKnife(_0x1695ff);
                    _0x1695ff.node.parent = this.itemNode;
                    _0x5b0c5d.GValue.EntityWorld.player.addKnifeIn(_0x1695ff.node);
                  }
                }
              }
            } else {
              this.addNewKnife();
            }
          }
          this.removeSelf();
        },
        'addNewKnife': function () {
          var _0x30a21c = 0x0;
          for (var _0x26e6f3 = _0x5b0c5d.GValue.EntityWorld.addEntitySys.AddKnife(0x1, 0x0); _0x30a21c < _0x26e6f3.length; _0x30a21c++) {
            var _0x1b62ad = _0x26e6f3[_0x30a21c];
            _0x1b62ad.initDropUI();
            _0x5b0c5d.GValue.EntityWorld.addKnife(_0x1b62ad);
            _0x5b0c5d.GValue.EntityWorld.landKnifes.push(_0x1b62ad);
            _0x1b62ad.node.emit("changeKnifeAttackGroup", "landKnife");
            _0x1b62ad.node.position = this.node.position;
            _0x1b62ad.node.angle = this.node.angle;
            _0x1b62ad.skinNode.emit("changeSkin", _0x5b0c5d.GValue.EntityWorld.player.knifeImage);
          }
        },
        'removeSelf': function () {
          _0x5b0c5d.GValue.EntityWorld.removeKnife(this);
          this.node.removeFromParent();
          if (this.shadow) {
            this.shadow.removeFromParent();
          }
        },
        'initDropUI': function (_0xa31b69) {
          if (undefined === _0xa31b69) {
            _0xa31b69 = true;
          }
          var _0x1f8557 = _0x184fec.GConfig.getPropertyData_Main().imageId;
          var _0x2e2911 = new cc.Node();
          _0x2e2911.name = "light";
          this.node.addChild(_0x2e2911, -0x1);
          _0x2e2911.addComponent(cc.Sprite).spriteFrame = _0x5b0c5d.GValue.Atlas_Game.getSpriteFrame('kl' + _0x1f8557);
          if (_0xa31b69) {
            var _0x31aa28 = _0x184fec.GConfig.actionFrameTime;
            var _0x1a67c9 = cc.fadeIn(0x2 * _0x31aa28);
            var _0x143149 = cc.fadeOut(0x4 * _0x31aa28);
            var _0xdd680d = cc.scaleTo(0x4 * _0x31aa28, 1.2);
            var _0xfdbdb3 = cc.spawn(_0x143149, _0xdd680d);
            var _0x585aa3 = cc.delayTime(0x3 * _0x31aa28);
            var _0x3cbd6c = cc.sequence(_0x1a67c9, _0xfdbdb3, _0x585aa3, cc.scaleTo(0x0, 0x1));
            _0x2e2911.runAction(cc.repeatForever(_0x3cbd6c));
          }
        },
        'removeDropUI': function () {
          var _0x5546fb = this.node.getChildByName("light");
          if (_0x5546fb) {
            _0x5546fb.removeFromParent();
          }
          this.landNode.removeComponent(_0xc52616);
          this.node.removeComponent(_0x1e3a66);
        }
      });
      cc._RF.pop();
    }, {
      'CEntityBase': "CEntityBase",
      'CommonConfig': "CommonConfig",
      'CommonValue': "CommonValue",
      'KnifeDropCollisionWallListener': 'KnifeDropCollisionWallListener',
      'KnifeThrowCtrl': 'KnifeThrowCtrl',
      'Tools': 'Tools',
      'Types': "Types"
    }],
    'CEntityPlayer': [function (_0x5f43a4, _0x1150f0, _0x483b2c) {
      'use strict';
  
      cc._RF.push(_0x1150f0, "a7314Yi/D1Hrrk3IgD2XfpV", "CEntityPlayer");
      var _0x557fc0 = _0x5f43a4("Tools");
      var _0x185880 = _0x5f43a4("CEntityBase");
      var _0x8aba94 = _0x5f43a4("GameData");
      var _0x1a3a7a = _0x5f43a4("CommonConfig");
      var _0x383ff4 = _0x5f43a4("CommonValue");
      var _0x19ae7a = _0x5f43a4('Types');
      var _0x405392 = _0x5f43a4("CEntityKnife");
      var _0x3f49b1 = _0x5f43a4("CommonEnum");
      var _0x3d3abd = _0x5f43a4("CommonAudio");
      var _0xbec87a = _0x5f43a4("PlayerAnimComponent");
      cc.Class({
        'extends': _0x185880,
        'properties': {
          'uiNode': cc.Node,
          'skinSpr': cc.Sprite,
          'colliderNode': cc.Node,
          'touchNode': cc.Node,
          'lightNode1': cc.Node,
          'lightNode2': cc.Node,
          'skel_die': sp.Skeleton,
          'skel_revive': sp.Skeleton
        },
        'ctor': function () {
          var _0x1c1527 = this;
          this.mainWeaponSkinId = 0x1;
          this.radius = 0x0;
          this.radiusIn = 0x0;
          this.firstDead = false;
          this.waitToDie = false;
          this.isDead = false;
          this.initRSpeed = 0x0;
          this.initRadius = 0x0;
          this.initDWAtk = 0x0;
          this.dwParam = [];
          this.knifeImage = '';
          this.curAttack = 0x1;
          this.curDWAtk = 0x1;
          this.curRSpeed = 0x0;
          this.invincible = false;
          this.invincibleTime = 0x0;
          this.shadow = null;
          this.CMoveFix = null;
          this.moveTouch = null;
          this.animCom = null;
          this.followPlayerOut = null;
          this.logicPlayer = null;
          this.stateCom = null;
          this.pickupCom = null;
          this.colEnemyCom = null;
          Object.defineProperty(this, 'touchAble', {
            'get': function () {
              return _0x1c1527.moveTouch.touchAble;
            },
            'set': function (_0x2f0b05) {
              _0x1c1527.moveTouch.touchAble = _0x2f0b05;
            },
            'enumerable': true,
            'configurable': true
          });
          Object.defineProperty(this, "touching", {
            'set': function (_0x5c637a) {
              _0x1c1527.moveTouch.touching = _0x5c637a;
              _0x1c1527.moveTouch.touchFalseTime = 0x0;
            },
            'enumerable': true,
            'configurable': true
          });
        },
        'onLoad': function () {
          var _0x3efd7d = this;
          this.skel_die.setCompleteListener(function (_0x2262c5, _0x484e97) {
            _0x3efd7d.node.active = false;
            if (_0x383ff4.GValue.EntityWorld.isReviveAble()) {
              _0x383ff4.GValue.EntityWorld.addPanelRevive(function () {
                _0x383ff4.GValue.EntityWorld.addPanelOver(false);
              }, function () {
                _0x3efd7d.revive();
              });
            } else {
              _0x383ff4.GValue.EntityWorld.addPanelOver(false);
            }
          });
          this.skel_revive.setCompleteListener(function (_0x31b280, _0x8a0a72) {
            _0x3efd7d.skel_revive.node.active = false;
          });
        },
        'init': function (_0x54edc5, _0x5e844c, _0x3139c7, _0x454a99) {
          this.followPlayerOut = _0x54edc5;
          this.followPlayerIn = _0x5e844c;
          this.teamID = _0x19ae7a.EntityTag.Player;
          this.shadow = _0x454a99;
          this.skinSpr.spriteFrame = _0x383ff4.GValue.Atlas_Game.getSpriteFrame('h' + _0x3139c7);
          this.animCom = _0x557fc0.DYTools.addScript(this.node, _0xbec87a);
          this.animCom.init(this.uiNode);
          this.pickupCom = _0x557fc0.DYTools.addScript(this.node, "PlayerPickupComponent");
          this.pickupCom.init(this);
          this.colEnemyCom = _0x557fc0.DYTools.addScript(this.node, "PlayerCollisionEnemyComponent");
          this.colEnemyCom.init(this);
          _0x557fc0.DYTools.addScript(this.colliderNode, "CNodeCollider").init(this.node, true);
          _0x557fc0.DYTools.addScript(this.colliderNode, "CHeroCollisionWallListener");
          this.logicPlayer = _0x557fc0.DYTools.addScript(this.node, 'CLogicPlayer');
          this.logicPlayer.init(this);
          this.stateCom = _0x557fc0.DYTools.addScript(this.node, "PlayerStateComponent");
          this.stateCom.init(this);
          this.CMoveFix = _0x557fc0.DYTools.addScript(this.node, 'CHMoveFix');
          this.initAnim();
          this.resetAttr();
          this.node.on("addKnife", this.addKnife, this);
          this.node.on('die', this.dieByEnemy, this);
          this.node.on("dieByKnife", this.dieByKnife, this);
          this.node.on("radiusChange", this.radiusChange, this);
          this.node.on("updateState", this.updateState, this);
        },
        'resetAttr': function () {
          this.stateCom.init(this);
          var _0xb0140 = _0x8aba94.TData.getCurSubFun();
          this.initAttack = _0x1a3a7a.GConfig.getPropertyData_Main().atk;
          this.initRSpeed = _0x8aba94.TData.HeroRotateSpeed;
          var _0x1a5383;
          if (_0x1a5383 = _0x383ff4.GValue.ArmsSub_TryFinish > 0x0 && _0xb0140 == _0x383ff4.GValue.ArmsSub_TryFinish ? _0x1a3a7a.GConfig.getPropertyArmsSubData(_0xb0140, _0x383ff4.GValue.EntityWorld.levelData.subTryLv) : _0x1a3a7a.GConfig.getPropertyData_Sub(_0xb0140)) {
            this.initDWAtk = _0x1a5383.atk;
          }
          this.curAttack = this.initAttack;
          this.curRSpeed = this.initRSpeed;
          this.curDWAtk = this.initDWAtk;
          this.mainWeaponSkinId = _0x1a3a7a.GConfig.getPropertyData_Main().imageId;
          this.knifeImage = 'k' + this.mainWeaponSkinId;
          this.radiusIn = _0x8aba94.TData.HeroRaduisIn;
          this.radiusChange(_0x557fc0.DYTools.getRadiusByKnifeCount(this.followPlayerOut.knivesCmp.knives.length));
          var _0x783644 = 0x0;
          for (var _0x41afc1 = this.node.getComponentsInChildren(cc.Collider); _0x783644 < _0x41afc1.length; _0x783644++) {
            _0x41afc1[_0x783644].tag = this.teamID;
          }
          this.updateState(_0x19ae7a.HeroState.Normal);
        },
        'initAnim': function () {
          var _0x547ac5 = _0x1a3a7a.GConfig.actionFrameTime;
          this.skinSpr.node.runAction(cc.repeatForever(cc.sequence(cc.scaleTo(0x7 * _0x547ac5, 1.02, 0.96), cc.scaleTo(0x8 * _0x547ac5, 0x1))));
        },
        'revive': function () {
          _0x383ff4.GValue.EntityWorld.reviveCount++;
          this.moveTouch.init(this);
          this.node.active = true;
          this.uiNode.active = true;
          this.skel_die.node.active = false;
          this.shadow.active = true;
          this.uiNode.active = true;
          this.uiNode.position = cc.v2(0x0, 0x0);
          this.uiNode.opacity = 0xff;
          this.invincible = true;
          this.invincibleTime = 0x0;
          var _0x6fc67a = _0x1a3a7a.GConfig.actionFrameTime;
          this.uiNode.scale = 0.7;
          var _0x3cfbb1 = cc.scaleTo(0x4 * _0x6fc67a, 1.4);
          var _0x2f40a1 = cc.scaleTo(0x5 * _0x6fc67a, 0x1);
          this.uiNode.runAction(cc.sequence(_0x3cfbb1, _0x2f40a1));
          var _0x2a1d2a = this;
          this.scheduleOnce(function () {
            _0x2a1d2a.followPlayerOut.revive();
            _0x2a1d2a.followPlayerIn.revive();
            _0x2a1d2a.updateState(_0x2a1d2a.stateCom.state);
            var _0x3fe1fa = cc.repeatForever(cc.sequence(cc.fadeTo(0.08, 0xa), cc.fadeTo(0.08, 0xff)));
            _0x3fe1fa.setTag(0x3e9);
            _0x2a1d2a.skinSpr.node.runAction(_0x3fe1fa);
          }, 0xf * _0x1a3a7a.GConfig.actionFrameTime);
          _0x3d3abd.GAudio.playSound(_0x3d3abd.Enum_Audio.revive);
          this.skel_revive.node.active = true;
          this.skel_revive.setAnimation(0x0, 'play', false);
          this.scheduleOnce(function () {
            _0x2a1d2a.fickEnemys();
          }, 0x8 * _0x1a3a7a.GConfig.actionFrameTime);
        },
        'fickEnemys': function () {
          var _0x5e4cb8 = this;
          var _0x336354 = 0x0;
          var _0x735930 = this.radius + 0xfa;
          var _0x28df23 = _0x735930 * _0x735930;
          var _0x343b7e = cc.v2(_0x735930, 0x0);
          var _0x199ae1 = this.getPositionForMap();
          var _0xb6e8a7 = Number(_0x1a3a7a.GConfig.getGbData(_0x3f49b1.Enum_Gb.ReviveAtk)) * this.initAttack;
          var _0x2a7569 = [];
          var _0x4c6305 = 0x0;
          for (var _0x306fa1 = _0x383ff4.GValue.EntityWorld.Enemys; _0x4c6305 < _0x306fa1.length; _0x4c6305++) {
            var _0x4a475b = (_0x88e362 = _0x306fa1[_0x4c6305]).node.position;
            if (!_0x88e362.isBoss && _0x557fc0.DYTools.isNumberDiffRange(_0x4a475b.x, _0x199ae1.x, _0x735930) && _0x557fc0.DYTools.isNumberDiffRange(_0x4a475b.y, _0x199ae1.y, _0x735930) && _0x199ae1.sub(_0x4a475b).magSqr() <= _0x28df23) {
              if (!_0x88e362.hasAttribution(_0x19ae7a.EnemyAttr.Enter)) {
                var _0x368236 = _0x4a475b.sub(_0x199ae1).signAngle(_0x343b7e);
                var _0x55e420 = _0x343b7e.rotate(-_0x368236);
                var _0x22b86f = (_0x55e420 = _0x55e420.add(_0x199ae1)).sub(_0x88e362.node.position);
                _0x88e362.node.runAction(cc.moveBy(0.37, _0x22b86f));
              }
              _0x336354 = 0.4;
              _0x2a7569.push(_0x88e362);
            }
          }
          for (var _0x9a039e = 0x0; _0x9a039e < _0x2a7569.length; _0x9a039e++) {
            var _0x88e362;
            (_0x88e362 = _0x2a7569[_0x9a039e]).bloodChange(-_0xb6e8a7);
          }
          this.scheduleOnce(function () {
            _0x5e4cb8.isDead = false;
          }, _0x336354);
        },
        'startGame': function (_0x2ff376) {
          if (undefined === _0x2ff376) {
            _0x2ff376 = null;
          }
          this.resetAttr();
          this.followPlayerOut.node.emit("startGame");
          this.followPlayerIn.node.emit('startGame');
          this.moveTouch = _0x557fc0.DYTools.addScript(this.touchNode, "CMoveByTouch");
          this.moveTouch.init(this, _0x2ff376);
          this.CMoveFix.init(this.colliderNode.getComponent(cc.Collider));
          var _0xfc8920 = _0x1a3a7a.GConfig.getPropertyData_Sub(_0x8aba94.TData.getCurSubFun());
          if (_0xfc8920) {
            var _0x283b51 = _0xfc8920["var"];
            this.dwParam = _0x557fc0.DYTools.stringToNumber(_0x283b51, _0x1a3a7a.GConfig.SeparatorII);
          }
        },
        'updateGameLogic': function (_0x579d1d) {
          this.logicPlayer.updateLogic(_0x579d1d);
          if (this.CMoveFix) {
            this.CMoveFix.updateGameLogic(_0x579d1d);
          }
          if (!this.isDead) {
            this.followPlayerIn.updateGameLogic(_0x579d1d);
          }
          this.followPlayerOut.updateGameLogic(_0x579d1d);
          this.pickupCom.updateGameLoginc(_0x579d1d);
          this.colEnemyCom.updateGameLogic(_0x579d1d);
          this.stateCom.updateGameLogic(_0x579d1d);
          if (this.invincible) {
            this.invincibleTime += _0x579d1d;
            if (this.invincibleTime >= 0x5) {
              this.invincible = false;
              this.skinSpr.node.stopActionByTag(0x3e9);
              this.skinSpr.node.opacity = 0xff;
            }
          }
          if (_0x383ff4.GValue.EntityWorld.m_gameOver) {
            _0x383ff4.GValue.PropMgr.clear();
          }
        },
        'addKnifeIn': function (_0x300a9f) {
          this.followPlayerIn.addKnife(_0x300a9f);
        },
        'addKnife': function (_0x4d9793) {
          this.followPlayerOut.knivesCmp.addKnife(_0x4d9793);
          var _0x597db0 = _0x383ff4.GValue.EntityWorld.addEntitySys.createMainKnifeShadow(_0x4d9793, this.mainWeaponSkinId);
          _0x4d9793.getComponent(_0x405392).setShadow(_0x597db0);
        },
        'radiusChange': function (_0x2e475b) {
          if (this.radius != _0x2e475b) {
            this.radius = _0x2e475b;
            this.followPlayerOut.heroRotate.setRotateSpeed(_0x8aba94.TData.HeroRaduis * this.curRSpeed / this.radius);
          }
        },
        'updateState': function (_0x441a1c) {
          switch (_0x441a1c) {
            case _0x19ae7a.HeroState.Normal:
            case _0x19ae7a.HeroState.StrongIII:
              if (_0x441a1c == _0x19ae7a.HeroState.StrongIII) {
                this.curRSpeed = this.initRSpeed * _0x383ff4.GValue.StrongRT;
                this.curAttack = this.initAttack * Number(_0x1a3a7a.GConfig.getGbData(_0x3f49b1.Enum_Gb.StrongAtk));
                this.curDWAtk = this.initDWAtk * Number(_0x1a3a7a.GConfig.getGbData(_0x3f49b1.Enum_Gb.StrongAtk));
                this.followPlayerOut.node.emit("enterStrong", 0x1);
                this.followPlayerIn.node.emit("enterStrong", 0x1);
                _0x383ff4.GValue.EntityWorld.gameUI.showPropProgress(_0x19ae7a.PropType.Strong);
              } else {
                this.followPlayerOut.node.emit("enterStrong", 0x0);
                this.followPlayerIn.node.emit("enterStrong", 0x0);
                if (_0x441a1c == _0x19ae7a.HeroState.Normal) {
                  this.curRSpeed = this.initRSpeed;
                  this.curAttack = this.initAttack;
                  this.curDWAtk = this.initDWAtk;
                }
              }
              this.followPlayerOut.knivesCmp.emitAllKnivesChangeSkin();
              this.followPlayerOut.heroRotate.setRotateSpeed(_0x8aba94.TData.HeroRaduis * this.curRSpeed / this.radius);
              break;
            case _0x19ae7a.HeroState.Dead:
              this.followPlayerOut.node.emit("enterStrong", 0x0);
              this.followPlayerIn.node.emit("enterStrong", 0x0);
          }
        },
        'dieByEnemy': function (_0x5954cc) {
          if (!(_0x5954cc.isDead || _0x5954cc.stateCom.state == _0x19ae7a.EnemyAction.Sleep || _0x5954cc.stateCom.state == _0x19ae7a.EnemyAction.Awaking)) {
            this.die();
          }
        },
        'dieBySnake': function () {
          this.die();
        },
        'dieByKnife': function (_0x290dc5) {
          this.die();
        },
        'die': function () {
          if (!this.invincible && !_0x383ff4.GValue.EntityWorld.m_gameOver && !this.isDead) {
            this.isDead = true;
            _0x383ff4.GValue.EntityWorld.dieCount++;
            if (this.moveTouch) {
              this.moveTouch.touchEndEvent();
              this.touchAble = false;
            }
            _0x383ff4.GValue.EntityWorld.setTouching(true);
            _0x3d3abd.GAudio.stopSoundByName(_0x3d3abd.Enum_Audio.laserAtk);
            _0x3d3abd.GAudio.stopSoundByName(_0x3d3abd.Enum_Audio.hurt);
            var _0x125cfd = this;
            var _0x4dbc30 = _0x1a3a7a.GConfig.actionFrameTime;
            _0x125cfd.followPlayerOut.die();
            _0x125cfd.followPlayerIn.die();
            var _0x1c6133 = cc.scaleTo(0x2 * _0x4dbc30, 1.15, 1.05);
            var _0x3cfef0 = cc.moveTo(0x2 * _0x4dbc30, cc.v2(0x3, 0x6));
            var _0x582e88 = cc.fadeTo(0x2 * _0x4dbc30, 0xd8);
            var _0x55449e = cc.spawn(_0x1c6133, _0x3cfef0, _0x582e88);
            var _0x172015 = cc.scaleTo(0x1 * _0x4dbc30, 1.22, 1.08);
            var _0x2d4918 = cc.moveTo(0x1 * _0x4dbc30, cc.v2(0x0, 0x0));
            var _0x133317 = cc.fadeTo(0x1 * _0x4dbc30, 0xcc);
            var _0x2ef324 = cc.spawn(_0x172015, _0x2d4918, _0x133317);
            var _0xe88ac3 = cc.scaleTo(0x2 * _0x4dbc30, 1.37, 1.14);
            var _0x3cc135 = cc.moveTo(0x2 * _0x4dbc30, cc.v2(0x3, 0x6));
            var _0x3ece26 = cc.fadeTo(0x2 * _0x4dbc30, 0xad);
            var _0x2da1e5 = cc.spawn(_0xe88ac3, _0x3cc135, _0x3ece26);
            var _0x40eba7 = cc.scaleTo(0x1 * _0x4dbc30, 1.45, 1.17);
            var _0x2bd32d = cc.moveTo(0x1 * _0x4dbc30, cc.v2(0x0, 0x0));
            var _0x1f73aa = cc.fadeTo(0x1 * _0x4dbc30, 0x99);
            var _0x3ed2d0 = cc.spawn(_0x40eba7, _0x2bd32d, _0x1f73aa);
            var _0x179bc8 = cc.scaleTo(0x2 * _0x4dbc30, 1.5, 1.46);
            var _0x2e68c0 = cc.moveTo(0x2 * _0x4dbc30, cc.v2(0x3, 0x6));
            var _0x66865d = cc.fadeTo(0x2 * _0x4dbc30, 0xba);
            var _0x34e630 = cc.spawn(_0x179bc8, _0x2e68c0, _0x66865d);
            var _0x43fa0c = cc.scaleTo(0x1 * _0x4dbc30, 1.53, 1.61);
            var _0x1ecf02 = cc.moveTo(0x1 * _0x4dbc30, cc.v2(0x0, 0x0));
            var _0x33710d = cc.fadeTo(0x1 * _0x4dbc30, 0xcc);
            var _0x2c71d0 = cc.spawn(_0x43fa0c, _0x1ecf02, _0x33710d);
            var _0x2366d1 = cc.scaleTo(0x2 * _0x4dbc30, 1.5, 1.8);
            var _0x37acee = cc.moveTo(0x2 * _0x4dbc30, cc.v2(0x3, 0x6));
            var _0x5bb120 = cc.fadeTo(0x2 * _0x4dbc30, 0xff);
            var _0x19a0f6 = cc.spawn(_0x2366d1, _0x37acee, _0x5bb120);
            var _0x4f9408 = cc.sequence(_0x55449e, _0x2ef324, _0x2da1e5, _0x3ed2d0, _0x34e630, _0x2c71d0, _0x19a0f6, cc.callFunc(function () {
              _0x125cfd.skel_die.node.active = true;
              _0x125cfd.skel_die.setAnimation(0x0, "idle", false);
              _0x125cfd.uiNode.active = false;
              _0x125cfd.shadow.active = false;
            }));
            this.uiNode.runAction(_0x4f9408);
          }
        },
        'pickupAllKnives': function () {
          this.pickupCom.pickupAllKnives();
        },
        'playerOutUI': function (_0xacdccb) {
          var _0x138bff = this;
          var _0x2e71cf = _0x1a3a7a.GConfig.actionFrameTime;
          var _0x48bf9f = cc.scaleTo(0x4 * _0x2e71cf, 0x0);
          if (this.followPlayerOut) {
            this.followPlayerOut.node.runAction(_0x48bf9f);
          }
          if (this.followPlayerIn) {
            this.followPlayerIn.node.runAction(_0x48bf9f.clone());
          }
          this.scheduleOnce(function () {
            var _0x40f8d2 = cc.moveBy(0x4 * _0x2e71cf, cc.v2(0x0, -0x23));
            var _0x436d49 = cc.moveTo(0x7 * _0x2e71cf, cc.v2(_0x138bff.node.x, _0x383ff4.GValue.Size_View.height / _0x383ff4.GValue.MapScale + 0x64));
            var _0x5d3b1b = cc.sequence(_0x40f8d2, _0x436d49);
            _0x138bff.node.runAction(_0x5d3b1b);
          }, 0x4 * _0x2e71cf);
          this.scheduleOnce(function () {
            var _0xf89828 = new cc.Node();
            _0xf89828.name = 'tail';
            _0xf89828.anchorY = 0x1;
            _0xf89828.position = cc.v2(0x0, -0x1e);
            _0x138bff.uiNode.addChild(_0xf89828, 0xa);
            _0xf89828.addComponent(cc.Sprite).spriteFrame = _0x383ff4.GValue.Atlas_Game.getSpriteFrame("pTail");
            var _0x3e81d0 = cc.scaleTo(0x4 * _0x2e71cf, 0x1, 4.2);
            var _0x4c4d46 = cc.scaleTo(0x2 * _0x2e71cf, 0x1, 0.7);
            var _0x5e8848 = cc.sequence(_0x3e81d0, _0x4c4d46, cc.fadeOut(_0x2e71cf), cc.callFunc(function () {
              if (_0xacdccb) {
                _0xacdccb();
              }
            }));
            _0xf89828.runAction(_0x5e8848);
          }, 0x9 * _0x2e71cf);
          _0x3d3abd.GAudio.playSound(_0x3d3abd.Enum_Audio.playerFly_1);
        },
        'playerEnterGameAct': function (_0x4d81f0, _0x58a21f) {
          var _0x172c06 = this;
          var _0x483482 = _0x1a3a7a.GConfig.actionFrameTime;
          var _0x270ede = cc.callFunc(function () {
            if (_0x4d81f0) {
              _0x4d81f0();
            }
            var _0x3cb6fd = cc.scaleTo(0x4 * _0x483482, 0x1);
            if (_0x172c06.followPlayerOut) {
              _0x172c06.followPlayerOut.node.runAction(cc.sequence(_0x3cb6fd, cc.callFunc(function () {
                if (_0x58a21f) {
                  _0x58a21f();
                }
              })));
            }
            if (_0x172c06.followPlayerIn) {
              _0x172c06.followPlayerIn.node.runAction(_0x3cb6fd.clone());
            }
          });
          if (_0x383ff4.GValue.EntityWorld.mapMgr.curDirTag <= 0x2) {
            _0x172c06.node.y = -0x64;
            var _0x17e0cf = _0x383ff4.GValue.PlayerPosV;
            var _0x32671c = cc.moveTo(0x12 * _0x483482, _0x17e0cf).easing(cc.easeOut(0x4));
            var _0x28c66b = cc.sequence(_0x32671c, _0x270ede);
            _0x172c06.node.runAction(_0x28c66b);
          } else {
            _0x17e0cf = null;
            if (0x3 == _0x383ff4.GValue.EntityWorld.mapMgr.curDirTag) {
              _0x172c06.node.angle = -0x5a;
              _0x172c06.node.x = _0x383ff4.GValue.Size_View.width / _0x383ff4.GValue.MapScale + 0x64;
              _0x17e0cf = cc.v2(_0x383ff4.GValue.Size_View.width / _0x383ff4.GValue.MapScale - _0x383ff4.GValue.PlayerPosH.x, _0x383ff4.GValue.PlayerPosH.y);
            } else {
              _0x172c06.node.angle = 0x5a;
              _0x172c06.node.x = -0x64;
              _0x17e0cf = _0x383ff4.GValue.PlayerPosH;
            }
            _0x172c06.node.y = _0x383ff4.GValue.Size_View.height / _0x383ff4.GValue.MapScale / 0x2;
            _0x32671c = cc.moveTo(0x12 * _0x483482, _0x17e0cf).easing(cc.easeOut(0x4));
            var _0x5d0d46 = cc.sequence(_0x32671c, cc.rotateTo(0x6 * _0x483482, 0x0), _0x270ede);
            _0x172c06.node.runAction(_0x5d0d46);
          }
          var _0x446574 = _0x172c06.uiNode.getChildByName("tail");
          _0x446574.scaleY = 3.1;
          _0x446574.opacity = 0xff;
          var _0x1dd35a = cc.delayTime(0x5 * _0x483482);
          var _0x34828e = cc.scaleTo(0x6 * _0x483482, 0x1, 0.5);
          var _0x11df97 = cc.sequence(_0x1dd35a, _0x34828e, cc.fadeOut(_0x483482), cc.removeSelf());
          _0x446574.runAction(_0x11df97);
          _0x3d3abd.GAudio.playSound(_0x3d3abd.Enum_Audio.playerFly);
        },
        'playOutMapAct': function (_0x236e81) {
          if (undefined === _0x236e81) {
            _0x236e81 = null;
          }
          var _0x222bf9 = this;
          var _0x37db57 = _0x1a3a7a.GConfig.actionFrameTime;
          var _0x237d16 = cc.scaleTo(0x5 * _0x37db57, 0x0);
          if (this.followPlayerOut) {
            this.followPlayerOut.node.runAction(_0x237d16);
          }
          if (this.followPlayerIn) {
            this.followPlayerIn.node.runAction(_0x237d16.clone());
          }
          this.scheduleOnce(function () {
            var _0x187e19 = null;
            var _0x349bdc = _0x222bf9.node.position;
            var _0x409044 = 0x0;
            var _0x1fa5f6 = cc.v2(0x0, 0x0);
            if (_0x383ff4.GValue.EntityWorld.mapMgr.curDirTag <= 0x2) {
              _0x187e19 = cc.v2(0x0, -0x23);
              _0x1fa5f6 = cc.v2(_0x383ff4.GValue.ViewCenter.x / _0x383ff4.GValue.MapScale, _0x383ff4.GValue.Size_View.height / _0x383ff4.GValue.MapScale + 0x64);
              if (_0x222bf9.node.y > 0.75 * _0x383ff4.GValue.Size_View.height / _0x383ff4.GValue.MapScale) {
                _0x349bdc.y = 0.75 * _0x383ff4.GValue.Size_View.height / _0x383ff4.GValue.MapScale;
              }
              _0x349bdc.x = _0x1fa5f6.x;
            } else {
              if (0x3 == _0x383ff4.GValue.EntityWorld.mapMgr.curDirTag) {
                _0x409044 = -0x5a;
                _0x187e19 = cc.v2(0x23, 0x0);
                _0x1fa5f6 = cc.v2(-0x64, _0x383ff4.GValue.ViewCenter.y / _0x383ff4.GValue.MapScale);
                if (_0x222bf9.node.x < 0.25 * _0x383ff4.GValue.Size_View.width / _0x383ff4.GValue.MapScale) {
                  _0x349bdc.x = 0.25 * _0x383ff4.GValue.Size_View.width / _0x383ff4.GValue.MapScale;
                }
              } else {
                _0x409044 = 0x5a;
                _0x187e19 = cc.v2(-0x23, 0x0);
                _0x1fa5f6 = cc.v2(_0x383ff4.GValue.Size_View.width / _0x383ff4.GValue.MapScale + 0x64, _0x383ff4.GValue.ViewCenter.y / _0x383ff4.GValue.MapScale);
                if (_0x222bf9.node.x > 0.75 * _0x383ff4.GValue.Size_View.width / _0x383ff4.GValue.MapScale) {
                  _0x349bdc.x = 0.75 * _0x383ff4.GValue.Size_View.width / _0x383ff4.GValue.MapScale;
                }
              }
              _0x349bdc.y = _0x1fa5f6.y;
            }
            var _0x4a1ed3 = _0x349bdc.add(_0x187e19);
            var _0xc49ee2 = cc.moveTo(0x5 * _0x37db57, _0x4a1ed3);
            var _0x344646 = cc.rotateTo(0x5 * _0x37db57, _0x409044);
            var _0x646f68 = cc.spawn(_0xc49ee2, _0x344646);
            var _0x2ca0e9 = cc.moveTo(_0x4a1ed3.sub(_0x1fa5f6).mag() / 0xbb8, _0x1fa5f6);
            var _0x1d35b2 = cc.sequence(_0x646f68, _0x2ca0e9);
            _0x222bf9.node.runAction(_0x1d35b2);
          }, 0x5 * _0x37db57);
          this.scheduleOnce(function () {
            var _0x2e941b = new cc.Node();
            _0x2e941b.name = "tail";
            _0x2e941b.anchorY = 0x1;
            _0x2e941b.position = cc.v2(0x0, -0x1e);
            _0x222bf9.uiNode.addChild(_0x2e941b, 0xa);
            _0x2e941b.addComponent(cc.Sprite).spriteFrame = _0x383ff4.GValue.Atlas_Game.getSpriteFrame("pTail");
            var _0x17a7e0 = cc.scaleTo(0x5 * _0x37db57, 0x1, 4.2);
            var _0x5c94f2 = cc.scaleTo(0x3 * _0x37db57, 0x1, 0.7);
            var _0x1b5d2e = cc.sequence(_0x17a7e0, _0x5c94f2, cc.fadeOut(_0x37db57), cc.callFunc(function () {
              if (_0x236e81) {
                _0x236e81();
              }
            }));
            _0x2e941b.runAction(_0x1b5d2e);
          }, 0xa * _0x37db57);
          _0x3d3abd.GAudio.playSound(_0x3d3abd.Enum_Audio.playerFly_1);
        },
        'playMoveAct': function (_0x5cd741, _0x1c50aa, _0x3c2fdf) {
          var _0x1d9331 = this;
          var _0x35f9bf = _0x1a3a7a.GConfig.actionFrameTime;
          var _0x2cb78b = cc.callFunc(function () {
            var _0x3787cd = cc.scaleTo(0x4 * _0x35f9bf, 0x1);
            if (_0x1d9331.followPlayerOut) {
              _0x1d9331.followPlayerOut.node.runAction(cc.sequence(_0x3787cd, cc.callFunc(function () {
                if (_0x3c2fdf) {
                  _0x3c2fdf();
                }
              })));
            }
            if (_0x1d9331.followPlayerIn) {
              _0x1d9331.followPlayerIn.node.runAction(_0x3787cd.clone());
            }
          });
          _0x1d9331.node.position = _0x5cd741;
          _0x1d9331.node.angle = 0x0;
          var _0xe230d7 = cc.moveTo(0xa * _0x35f9bf, _0x1c50aa).easing(cc.easeOut(0x4));
          var _0x417b37 = cc.sequence(_0xe230d7, cc.rotateTo(0x6 * _0x35f9bf, 0x0), _0x2cb78b);
          _0x1d9331.node.runAction(_0x417b37);
          var _0x538736 = _0x1d9331.uiNode.getChildByName("tail");
          _0x538736.scaleY = 3.1;
          _0x538736.opacity = 0xff;
          var _0x5e9bdc = cc.delayTime(0x3 * _0x35f9bf);
          var _0x2d1dda = cc.scaleTo(0x5 * _0x35f9bf, 0x1, 0.5);
          var _0x188667 = cc.sequence(_0x5e9bdc, _0x2d1dda, cc.fadeOut(_0x35f9bf), cc.removeSelf());
          _0x538736.runAction(_0x188667);
          _0x3d3abd.GAudio.playSound(_0x3d3abd.Enum_Audio.playerFly);
        },
        'playEleAct': function (_0x141f05) {
          this.animCom.playXuliAnim(_0x141f05);
        },
        'changeMainWeaponSkin': function () {
          var _0x528350 = _0x1a3a7a.GConfig.getPropertyData_Main().imageId;
          if (this.mainWeaponSkinId != _0x528350) {
            this.mainWeaponSkinId = _0x528350;
            this.knifeImage = 'k' + this.mainWeaponSkinId;
            var _0x15f0d9 = "sw_" + this.mainWeaponSkinId;
            var _0x4b1c10 = 0x0;
            for (var _0x2058c0 = this.followPlayerOut.knivesCmp.knives; _0x4b1c10 < _0x2058c0.length; _0x4b1c10++) {
              var _0x8b1a1 = _0x2058c0[_0x4b1c10].getComponent(_0x405392);
              if (_0x8b1a1) {
                _0x8b1a1.skinNode.emit("changeSkin", this.knifeImage);
                _0x8b1a1.changeShadowImage(_0x15f0d9);
              }
            }
          }
        },
        'getKnivesCount': function () {
          return this.followPlayerOut.knivesCmp.knives.length;
        },
        'setDWRotateAble': function (_0x2077cd) {
          if (this.followPlayerIn) {
            this.followPlayerIn.rotateAble = _0x2077cd;
          }
        },
        'stopMove': function () {
          this.moveTouch.touchEndEvent();
        },
        'getPositionForMap': function () {
          var _0x28b4ca = this.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
          return _0x383ff4.GValue.EntityWorld.addEntitySys.enemyNode.convertToNodeSpaceAR(_0x28b4ca);
        }
      });
      cc._RF.pop();
    }, {
      'CEntityBase': "CEntityBase",
      'CEntityKnife': "CEntityKnife",
      'CommonAudio': 'CommonAudio',
      'CommonConfig': "CommonConfig",
      'CommonEnum': "CommonEnum",
      'CommonValue': "CommonValue",
      'GameData': "GameData",
      'PlayerAnimComponent': 'PlayerAnimComponent',
      'Tools': "Tools",
      'Types': "Types"
    }],
    'CEntitySnake': [function (_0x10d97e, _0x3d70a3, _0x2196f8) {
      'use strict';
  
      cc._RF.push(_0x3d70a3, '2d1f0VL4xRP4I+umzUkcqap', "CEntitySnake");
      var _0x313e7c = _0x10d97e('CommonValue');
      var _0x63338e = _0x10d97e('CommonFunc');
      var _0x22bdec = _0x10d97e('Tools');
      var _0x2650a7 = _0x10d97e("PfNum");
      var _0x3cab02 = _0x10d97e("CommonEnum");
      var _0x2ca2d2 = _0x10d97e("CommonConfig");
      var _0x34e352 = _0x10d97e('ConfigData');
      var _0x868c28 = _0x10d97e("CEnemyEffect");
      var _0x420993 = _0x10d97e('CommonAudio');
      var _0x1125e8 = _0x10d97e("Types");
      var _0x1a766d = _0x10d97e('GameData');
      var _0x49a586 = _0x10d97e('EnemyBase');
      cc.Class({
        'extends': _0x49a586,
        'properties': {},
        'init': function (_0x21c53b, _0x1dec70, _0x31eb49) {
          this.maxlen_snake = 0x0;
          this.list_snake = [];
          this.list_effect = [];
          this.dic_shadow = {};
          this.dic_hp = {};
          this.dic_gold = {};
          this.dic_radius = {};
          this.dic_diff_index = {};
          this.dic_follow_min = {};
          this.dic_follow_max = {};
          this.dic_unfollow_min = {};
          this.dic_unfollow_max = {};
          this.dic_pos = {};
          this.dic_rotate = {};
          this.index_head = 0x0;
          this.data = null;
          this.speed_move_in = 0x12c;
          this.speed_move = 0x0;
          this.speed_rotate = 0x0;
          this.cur_speed_rotate = 0x0;
          this.rotate_diff = 0x14;
          this.cur_time_follow = 0x0;
          this.cur_time_unfollow = 0x0;
          this.shadow_diffPos = cc.v2(0x14, -0x14);
          this.color_effect = cc.color(0xb9, 0x2a, 0x2a);
          this.isMove = true;
          this.willMove = false;
          this.rotate_enter = 0x0;
          this.minX = -0x64;
          this.maxX = 0x64;
          this.minY = -0xc8;
          this.maxY = 0xc8;
          this.pos_world = cc.v2(0x0, 0x0);
          this.pos_node_min = cc.v2(0x0, 0x0);
          this.pos_node_max = cc.v2(0x0, 0x0);
          this.isDead = false;
          this.radius = 0x0;
          this.frameshare = 0xa;
          this.timeshare = 0.016666666666666666 / this.frameshare;
          this.type = _0x1125e8.EnemyType.Snake;
          this.enterCall = _0x1dec70;
          this.isDead = false;
          this.aiType = _0x21c53b.ai;
          if (_0x21c53b.isIn) {
            this.aiType = _0x34e352.E_SnakeAI.Enter;
            this.rotate_enter = _0x21c53b.rotate_in;
          }
          this.data = _0x21c53b;
          this.node_snake = new cc.Node();
          this.node.addChild(this.node_snake);
          this.maxlen_snake = _0x21c53b.list_hp.length;
          for (var _0x2ea77b = 0x0; _0x2ea77b < this.maxlen_snake; _0x2ea77b++) {
            if (_0x313e7c.GValue.StageFailFinish) {
              this.dic_hp[_0x2ea77b] = _0x21c53b.list_hp[_0x2ea77b] * _0x313e7c.GValue.FailRatio;
            } else {
              this.dic_hp[_0x2ea77b] = _0x21c53b.list_hp[_0x2ea77b];
            }
            this.dic_gold[_0x2ea77b] = _0x21c53b.list_gold[_0x2ea77b];
            this.dic_follow_min[_0x2ea77b] = _0x21c53b.list_follow_min[_0x2ea77b];
            this.dic_follow_max[_0x2ea77b] = _0x21c53b.list_follow_max[_0x2ea77b];
            this.dic_unfollow_min[_0x2ea77b] = _0x21c53b.list_unfollow_min[_0x2ea77b];
            this.dic_unfollow_max[_0x2ea77b] = _0x21c53b.list_unfollow_max[_0x2ea77b];
            if (0x0 == _0x2ea77b) {
              this.dic_radius[_0x2ea77b] = 0x46;
            } else if (_0x2ea77b == this.maxlen_snake - 0x1) {
              this.dic_radius[_0x2ea77b] = 0x1e;
            } else {
              this.dic_radius[_0x2ea77b] = 0x32;
            }
          }
          this.speed_move = _0x21c53b.speed_move > 0x0 ? _0x21c53b.speed_move : 0x1;
          this.speed_move_in = _0x21c53b.speed_move_in > 0x0 ? _0x21c53b.speed_move_in : 0x1;
          if (_0x21c53b.isIn) {
            this.speed_rotate = this.data.speed_rotate_in;
          } else {
            this.set_rotate_speed();
          }
          this.color_effect = this.data.color;
          var _0x8539df = this.get_speedXY_by_rotate(_0x21c53b.rotate_in, _0x21c53b.distance_in);
          var _0x5d4c33 = cc.v2(this.data.target_in.x - _0x8539df.x, this.data.target_in.y - _0x8539df.y);
          this.create_snake(this.maxlen_snake, _0x21c53b.rotate_in, _0x5d4c33);
          if (_0x31eb49) {
            _0x31eb49(this);
          }
          this.pos_world = this.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
          this.pos_node_min = this.node.convertToNodeSpaceAR(cc.v2(this.minX, this.minY).add(this.pos_world));
          this.pos_node_max = this.node.convertToNodeSpaceAR(cc.v2(this.maxX, this.maxY).add(this.pos_world));
          this.buffCom = _0x22bdec.DYTools.addScript(this.node, "EnemyBuffComponent");
          this.buffCom.init(this);
        },
        'create_snake': function (_0x234faa, _0x169693, _0xab15b) {
          if (!(_0x234faa <= 0x0)) {
            var _0x119864;
            this.node_head = this.create_item(0x0, "snake_head", false);
            this.node_head.setRotation(_0x169693);
            this.node_head.setPosition(_0xab15b);
            this.node_snake.addChild(this.node_head);
            this.list_snake.push(this.node_head);
            if (0x1 == _0x234faa) {
              ;
            } else {
              for (_0x119864 = 0x1; _0x119864 < _0x234faa - 0x1; _0x119864++) {
                var _0x2f67d2 = this.create_item(_0x119864, "snake_body", true);
                _0x2f67d2.setPosition(_0xab15b);
                _0x2f67d2.name = "snake_body";
                this.node_snake.addChild(_0x2f67d2);
                this.list_snake.push(_0x2f67d2);
              }
              var _0x5af2d1 = this.create_item(_0x234faa - 0x1, "snake_tail", true);
              _0x2f67d2.name = "snake_tail";
              _0x5af2d1.setPosition(_0xab15b);
              this.node_snake.addChild(_0x5af2d1);
              this.list_snake.push(_0x5af2d1);
            }
            var _0x4a3448 = 0x0;
            for (_0x119864 = 0x0; _0x119864 < this.list_snake.length; _0x119864++) {
              var _0x31e333 = -0x5;
              if (0x0 == _0x119864) {
                _0x31e333 = 0x0;
              } else if (_0x119864 == this.list_snake.length - 0x1) {
                _0x31e333 = -0x0;
              }
              var _0x141b74 = this.list_snake[_0x119864];
              _0x141b74.zIndex = this.list_snake.length - _0x119864;
              _0x141b74.group = "enemy";
              var _0x336c36 = this.get_item_nodeSp(_0x141b74).getContentSize();
              _0x4a3448 = _0x4a3448 + 0.5 * _0x336c36.height + _0x31e333;
              var _0x36b6e8 = _0x3cab02.E_CTag.Boss_SnakeHead + _0x119864;
              this.addCircleCollider(_0x141b74, this.dic_radius[_0x119864], _0x36b6e8);
              if (_0x119864 > 0x0) {
                var _0x2ce3b8 = _0x4a3448 / this.speed_move / this.timeshare;
                this.dic_diff_index[_0x119864] = Math.floor(_0x2ce3b8);
                _0x4a3448 += 0.5 * _0x336c36.height;
              }
              var _0x3eb2d5 = cc.instantiate(_0x313e7c.GValue.pf_enemy_effect);
              _0x141b74.addChild(_0x3eb2d5);
              var _0x21a3c9 = _0x3eb2d5.getComponent(_0x868c28);
              _0x21a3c9.init(this);
              this.list_effect.push(_0x21a3c9);
              if (_0x119864 == this.list_snake.length - 0x1) {
                _0x21a3c9.fireFrameAnim.node.y = 0x14;
              } else {
                _0x21a3c9.fireFrameAnim.node.y = 0x0 == _0x119864 ? -0x1e : 0xa;
              }
            }
            this.setTail();
          }
        },
        'create_item': function (_0x5238e8, _0x48ccae, _0x135b9e) {
          var _0x2357c5 = new cc.Node();
          var _0x281adf = '_' + this.data.image;
          var _0xc320db = _0x48ccae + _0x281adf;
          var _0x434d32 = _0x48ccae + "_shadow";
          var _0x833897 = _0x48ccae + "_shine" + _0x281adf;
          var _0x29c98f = "snake_line" + _0x281adf;
          var _0x38fb03 = new cc.Node();
          var _0x7a30fa = _0x38fb03.addComponent(cc.Sprite);
          _0x63338e.GFunc.changeAtlasSprite(_0x313e7c.GValue.Atlas_Shadow, _0x7a30fa, _0x434d32);
          _0x38fb03.setAnchorPoint(0.5, 0.5);
          _0x38fb03.setPosition(_0x2357c5.position.add(this.shadow_diffPos));
          this.node_snake.addChild(_0x38fb03);
          this.dic_shadow[_0x5238e8] = _0x38fb03;
          _0x38fb03.opacity = 0x0;
          _0x38fb03.runAction(cc.sequence(cc.delayTime(0.1), cc.fadeIn(0.1)));
          var _0x5ab45e = new cc.Node();
          var _0x14169f = _0x5ab45e.addComponent(cc.Sprite);
          _0x63338e.GFunc.changeAtlasSprite(_0x313e7c.GValue.Atlas_Enemy, _0x14169f, _0xc320db);
          _0x5ab45e.setAnchorPoint(0.5, 0.5);
          _0x2357c5.addChild(_0x5ab45e);
          _0x5ab45e.name = 'sp';
          var _0x14a485 = new cc.Node();
          var _0x292d39 = _0x14a485.addComponent(cc.Sprite);
          _0x63338e.GFunc.changeAtlasSprite(_0x313e7c.GValue.Atlas_Enemy, _0x292d39, _0x833897);
          _0x14a485.setAnchorPoint(0.5, 0.5);
          _0x5ab45e.addChild(_0x14a485);
          _0x14a485.opacity = 0x0;
          _0x14a485.name = "shine";
          if (_0x135b9e) {
            var _0x3eccf9 = new cc.Node();
            var _0x4bd13a = _0x3eccf9.addComponent(cc.Sprite);
            _0x63338e.GFunc.changeAtlasSprite(_0x313e7c.GValue.Atlas_Enemy, _0x4bd13a, _0x29c98f);
            _0x3eccf9.setAnchorPoint(0.5, 0x1);
            _0x3eccf9.setPosition(0x0, -0x5);
            _0x2357c5.addChild(_0x3eccf9);
            _0x3eccf9.name = "line";
          }
          return _0x2357c5;
        },
        'remove_item_show': function (_0x113cf7) {
          var _0x332195 = this.get_item_nodeSp(_0x113cf7);
          if (_0x332195) {
            _0x332195.destroy();
          }
          var _0x3a200c = this.get_item_nodeLine(_0x113cf7);
          if (_0x3a200c) {
            _0x3a200c.destroy();
          }
        },
        'get_item_nodeSp': function (_0x2846c3) {
          return _0x2846c3.getChildByName('sp');
        },
        'get_item_nodeShine': function (_0x448ef8) {
          var _0x1bb1b5 = null;
          var _0x5409d3 = this.get_item_nodeSp(_0x448ef8);
          if (_0x5409d3) {
            _0x1bb1b5 = _0x5409d3.getChildByName("shine");
          }
          return _0x1bb1b5;
        },
        'get_item_nodeLine': function (_0x2d4663) {
          return _0x2d4663.getChildByName("line");
        },
        'get_item_com_effect': function (_0x220e75) {
          return this.list_effect[_0x220e75];
        },
        'addCircleCollider': function (_0x37232f, _0xe71d8d, _0x23aef0) {
          var _0xd97cc0 = _0x37232f.addComponent(cc.CircleCollider);
          _0xd97cc0.radius = _0xe71d8d;
          _0xd97cc0.tag = _0x23aef0;
          _0xd97cc0.name = this.data.id.toString();
        },
        'setTail': function () {
          var _0xbd6f87 = this.list_snake.length;
          if (_0xbd6f87 > 0x0) {
            this.node_tail = this.list_snake[_0xbd6f87 - 0x1];
            var _0x500396 = this.node_tail.getComponent(cc.CircleCollider);
            if (_0x500396) {
              _0x500396.tag = _0x3cab02.E_CTag.Boss_SnakeTail;
              this.radius = _0x500396.radius;
            }
            if (this.bloodNum) {
              this.bloodNum.destroy();
            }
            this.bloodNum = cc.instantiate(_0x313e7c.GValue.pf_num);
            this.bloodNum.scale = this.dic_radius[_0xbd6f87 - 0x1] / 0x32 * 0.8;
            this.node_tail.addChild(this.bloodNum);
            this._bloodNum = this.bloodNum.getComponent(_0x2650a7);
            this._bloodNum.setParam(_0x3cab02.Enum_Num.Blood, cc.v2(0.5, 0.5), 0x0, _0x313e7c.GValue.Atlas_Enemy);
            var _0x864d55 = this.dic_hp[_0xbd6f87 - 0x1];
            this._bloodNum.setString(_0x63338e.GFunc.getNumK(Math.ceil(_0x864d55)));
            if (0x1 == _0xbd6f87) {
              this.bloodNum.scale *= 0.7;
            }
            var _0x16cbd8 = this.get_item_nodeShine(this.node_tail);
            if (_0x16cbd8) {
              _0x16cbd8.stopAllActions();
              var _0x49f0e7 = _0x2ca2d2.GConfig.actionFrameTime;
              var _0x3ece6b = cc.fadeTo(0x2 * _0x49f0e7, 0xff);
              var _0x1e6e86 = cc.delayTime(0x2 * _0x49f0e7);
              var _0xc34daa = cc.fadeTo(0x0 * _0x49f0e7, 0x0);
              var _0x5b6e09 = cc.delayTime(0x2 * _0x49f0e7);
              var _0x559236 = cc.sequence(_0x3ece6b, _0x1e6e86, _0xc34daa, _0x5b6e09);
              var _0x53828c = cc.repeatForever(_0x559236);
              _0x16cbd8.runAction(_0x53828c);
            }
          }
        },
        'attackTail': function (_0x1d2179, _0x3d44a5) {
          _0x420993.GAudio.playEnemyHurtSound();
          if (0x0 == _0x1d2179) {
            this.buffCom.addBuff(_0x1125e8.EnemyBuff.SlowDown);
          } else {
            if (0x1 == _0x1d2179) {
              switch (_0x1a766d.TData.getCurSubFun()) {
                case _0x1125e8.DWType.Knife:
                case _0x1125e8.DWType.Laser:
                  this.buffCom.addBuff(_0x1125e8.EnemyBuff.SlowDown);
                  break;
                case _0x1125e8.DWType.Ice:
                  this.buffCom.addBuff(_0x1125e8.EnemyBuff.Frozen);
                  break;
                case _0x1125e8.DWType.Fire:
                  this.buffCom.addBuff(_0x1125e8.EnemyBuff.Firing);
              }
            }
          }
          this.bloodChange(-_0x3d44a5);
          _0x420993.GAudio.playEnemyHurtSound();
          var _0x480844 = this.list_snake.length;
          var _0x444cb8 = this.get_item_com_effect(_0x480844 - 0x1);
          if (_0x444cb8) {
            _0x444cb8.hurt(cc.v2(0x0, 0x0), this.color_effect);
          }
        },
        'bloodChange': function (_0x56ddac) {
          var _0x4b246d = this.list_snake.length;
          if (_0x4b246d > 0x0) {
            var _0x3a8fc6 = this.dic_hp[_0x4b246d - 0x1];
            _0x3a8fc6 += _0x56ddac;
            this.dic_hp[_0x4b246d - 0x1] = _0x3a8fc6;
            if (_0x3a8fc6 > 0x0) {
              if (this._bloodNum) {
                this._bloodNum.setString(_0x63338e.GFunc.getNumK(Math.ceil(_0x3a8fc6)));
              }
            } else {
              this.tail_die();
            }
          } else {
            this.tail_die();
          }
        },
        'laserAtkTail': function (_0x40cd1a, _0x13bac6) {
          var _0x12f905 = this.list_snake.length;
          if (_0x12f905 > 0x0) {
            var _0x3f675a = this.dic_hp[_0x12f905 - 0x1];
            _0x3f675a -= _0x40cd1a;
            this.dic_hp[_0x12f905 - 0x1] = _0x3f675a;
            if (_0x3f675a > 0x0) {
              if (this._bloodNum) {
                this._bloodNum.setString(_0x63338e.GFunc.getNumK(Math.ceil(_0x3f675a)));
              }
            } else {
              this.tail_die();
            }
          } else {
            this.tail_die();
          }
          var _0x108666 = this.get_item_com_effect(_0x12f905 - 0x1);
          if (_0x108666) {
            _0x108666.laserHurt(cc.v2(0x0, 0x0), 0x168 - this.node_tail.rotation + _0x13bac6, this.color_effect);
          }
        },
        'attackBody': function (_0x402587, _0x31268f, _0x1b4209) {
          var _0x1ba615 = _0x31268f - _0x3cab02.E_CTag.Boss_SnakeHead;
          var _0x1ebd0a = this.get_item_com_effect(_0x1ba615);
          if (_0x1ebd0a) {
            var _0x14464a = cc.v2(0x0, 0x0);
            var _0x1f0381 = 0x1;
            if (_0x1b4209) {
              var _0x543447 = _0x1b4209.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
              _0x14464a = _0x1ebd0a.node.convertToNodeSpaceAR(_0x543447);
              _0x1f0381 = 0.8 + 0.2 * Math.random();
            }
            _0x1ebd0a.hit(_0x14464a, 0x0, _0x1f0381);
          }
          _0x420993.GAudio.playEnemyHurtSound();
        },
        'tail_die': function () {
          var _0x421485 = this.list_snake.length;
          var _0x12e5f8 = _0x421485 - 0x1;
          var _0x4c1388 = this.list_effect[_0x12e5f8];
          if (_0x421485 > 0x0) {
            var _0x551bda = this.node_tail;
            this.remove_item_show(_0x551bda);
            var _0x15b6f3 = this.dic_shadow[_0x12e5f8];
            if (_0x15b6f3) {
              _0x15b6f3.destroy();
              delete this.dic_shadow[_0x12e5f8];
            }
            var _0x2c9a95 = this.get_item_com_effect(_0x12e5f8);
            if (_0x2c9a95) {
              _0x2c9a95.die(this.dic_gold[_0x12e5f8], this.color_effect, function () {
                if (_0x551bda) {
                  _0x551bda.destroy();
                }
              });
            }
            this.play_audio();
            this.list_snake.splice(_0x12e5f8, 0x1);
            this.list_effect.splice(_0x12e5f8, 0x1);
          }
          if (this.list_snake.length <= 0x0) {
            this.die();
          } else {
            this.setTail();
          }
          this.buffCom.reset();
          if (_0x4c1388) {
            _0x4c1388.updateGameLogic(0x0);
          }
        },
        'die': function () {
          if (!this.isDead) {
            this.isDead = true;
            _0x313e7c.GValue.EntityWorld.bossDie(this.node);
            this.bloodNum.destroy();
            delete _0x313e7c.GValue.EntityWorld.SnakeEnemys[this.data.id];
            if (this.data.gold > 0x0) {
              _0x313e7c.GValue.EntityWorld.playGoldFlyEffect(0x1, this.data.gold, this.node_head.convertToWorldSpaceAR(cc.v2(0x0, 0x0)));
            }
          }
        },
        'setIsMove': function (_0x43ee74) {
          this.isMove = _0x43ee74;
        },
        'setWillMove': function (_0x2abd1c) {
          this.willMove = _0x2abd1c;
        },
        'updateShadow': function () {
          for (var _0x3f74ea = 0x0; _0x3f74ea < this.list_snake.length; _0x3f74ea++) {
            var _0x3bebbc = this.list_snake[_0x3f74ea];
            var _0x1bee73 = this.dic_shadow[_0x3f74ea];
            if (_0x1bee73) {
              _0x1bee73.rotation = _0x3bebbc.rotation;
              _0x1bee73.setPosition(_0x3bebbc.position.add(this.shadow_diffPos));
            }
          }
        },
        'updateGameLogic': function (_0x2d46c0) {
          _0x2d46c0 = 0.0167;
          var _0x2394c3 = this.list_snake.length;
          if (!(_0x2394c3 <= 0x0) && _0x313e7c.GValue.PlayerTouching && this.isMove) {
            this.buffCom.updateGameLogic(_0x2d46c0);
            var _0x3bfd81 = this.list_effect[this.list_snake.length - 0x1];
            if (_0x3bfd81) {
              _0x3bfd81.updateGameLogic(_0x2d46c0);
            }
            var _0x56ec47 = this.speed_move;
            if (this.aiType == _0x34e352.E_SnakeAI.Enter) {
              _0x56ec47 = this.speed_move_in;
            }
            if (this.hasBuff(_0x1125e8.EnemyBuff.Frozen)) {
              _0x56ec47 *= _0x313e7c.GValue.EntityWorld.player.dwParam[0x1];
            }
            var _0x203089 = this.node_head.rotation;
            var _0x4a497f = this.node_head.position;
            var _0x27daf2 = this.get_speedXY_by_rotate(_0x203089, _0x56ec47);
            var _0x28a153 = cc.v2(_0x27daf2.x * _0x2d46c0, _0x27daf2.y * _0x2d46c0);
            var _0x279c85 = this.cur_speed_rotate * _0x2d46c0;
            var _0x4a5963 = _0x4a497f.add(_0x28a153);
            var _0x4214e1 = _0x203089 + _0x279c85;
            _0x4214e1 = (_0x4214e1 = _0x4214e1 >= 0x168 ? _0x4214e1 - 0x168 : _0x4214e1) < 0x0 ? _0x4214e1 + 0x168 : _0x4214e1;
            this.node_head.setPosition(_0x4a5963);
            this.node_head.rotation = _0x4214e1;
            var _0x1cc62b;
            var _0x52f24e = _0x2d46c0 * _0x56ec47 / this.speed_move / this.timeshare;
            var _0x2c0ad2 = 0x1 / _0x52f24e;
            for (_0x1cc62b = 0x1; _0x1cc62b < _0x52f24e; _0x1cc62b++) {
              this.index_head++;
              this.dic_pos[this.index_head] = _0x4a497f.add(cc.v2(_0x28a153.x * _0x2c0ad2 * _0x1cc62b, _0x28a153.y * _0x2c0ad2 * _0x1cc62b));
              var _0x1d4e6a = _0x279c85 * _0x2c0ad2 * _0x1cc62b;
              _0x1d4e6a = (_0x1d4e6a = _0x1d4e6a >= 0x168 ? _0x1d4e6a - 0x168 : _0x1d4e6a) < 0x0 ? _0x1d4e6a + 0x168 : _0x1d4e6a;
              this.dic_rotate[this.index_head] = _0x203089 + _0x1d4e6a;
            }
            this.index_head++;
            this.dic_rotate[this.index_head] = this.node_head.rotation;
            this.dic_pos[this.index_head] = this.node_head.position;
            this.dic_rotate[this.index_head] = this.node_head.rotation;
            for (_0x1cc62b = 0x1; _0x1cc62b < _0x2394c3; _0x1cc62b++) {
              var _0x95ec8 = this.list_snake[_0x1cc62b];
              var _0x4b13d3 = this.index_head - this.dic_diff_index[_0x1cc62b];
              var _0x2c7b02 = this.dic_pos[_0x4b13d3];
              var _0x4c9d23 = this.dic_rotate[_0x4b13d3];
              if (_0x2c7b02) {
                _0x95ec8.setPosition(_0x2c7b02);
                _0x95ec8.setRotation(_0x4c9d23);
                var _0x37fdf2 = this.get_item_nodeLine(_0x95ec8);
                var _0x42591a = this.list_snake[_0x1cc62b - 0x1];
                if (_0x37fdf2 && _0x42591a) {
                  var _0x1043d5 = _0x42591a.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
                  var _0x38c52a = _0x95ec8.convertToNodeSpaceAR(_0x1043d5);
                  var _0x3105a1 = this.get_rotate_by_xy(_0x37fdf2.x - _0x38c52a.x, _0x37fdf2.y - _0x38c52a.y);
                  _0x37fdf2.rotation = _0x3105a1 + 0xb4;
                }
              }
              if (_0x1cc62b == _0x2394c3 - 0x1) {
                for (var _0x583f87 = _0x4b13d3; _0x583f87 < _0x4b13d3 + _0x52f24e; _0x583f87++) {
                  delete this.dic_pos[_0x583f87];
                  delete this.dic_rotate[_0x583f87];
                }
              }
            }
            this.updateShadow();
            if (this.aiType == _0x34e352.E_SnakeAI.Enter) {
              if (_0x4a497f.x > this.pos_node_min.x && _0x4a5963.x <= this.pos_node_min.x) {
                this.cur_speed_rotate = -this.speed_rotate;
                this.rotate_enter = 0x168 - this.rotate_enter;
              } else if (_0x4a497f.x < this.pos_node_max.x && _0x4a5963.x >= this.pos_node_max.x) {
                this.cur_speed_rotate = this.speed_rotate;
                this.rotate_enter = 0x168 - this.rotate_enter;
              } else {
                if (Math.abs(_0x4214e1 - this.rotate_enter) < 0xa) {
                  this.cur_speed_rotate = 0x0;
                }
                if (this.node_head.y <= this.data.yIn) {
                  this.cur_speed_rotate = 0x0;
                  this.set_rotate_speed();
                  this.aiType = this.data.ai;
                  if (!this.willMove) {
                    this.isMove = false;
                  }
                  this.play_audio();
                  if (this.enterCall) {
                    this.enterCall(this);
                  }
                }
              }
            } else {
              if (this.aiType == _0x34e352.E_SnakeAI.Box) {
                if (_0x4a497f.y > this.pos_node_min.y && _0x4a5963.y <= this.pos_node_min.y) {
                  if (0x0 == this.cur_speed_rotate) {
                    var _0x39afae = 0x1 == _0x22bdec.DYTools.random_int(0x0, 0x1) ? 0x1 : -0x1;
                    this.cur_speed_rotate = this.speed_rotate * _0x39afae;
                  }
                } else {
                  if (_0x4a497f.y < this.pos_node_max.y && _0x4a5963.y >= this.pos_node_max.y) {
                    if (0x0 == this.cur_speed_rotate) {
                      _0x39afae = 0x1 == _0x22bdec.DYTools.random_int(0x0, 0x1) ? 0x1 : -0x1;
                      this.cur_speed_rotate = this.speed_rotate * _0x39afae;
                    }
                  } else {
                    if (_0x4a497f.x > this.pos_node_min.x && _0x4a5963.x <= this.pos_node_min.x) {
                      if (0x0 == this.cur_speed_rotate) {
                        _0x39afae = 0x1 == _0x22bdec.DYTools.random_int(0x0, 0x1) ? 0x1 : -0x1;
                        this.cur_speed_rotate = this.speed_rotate * _0x39afae;
                      }
                    } else {
                      if (_0x4a497f.x < this.pos_node_max.x && _0x4a5963.x >= this.pos_node_max.x) {
                        if (0x0 == this.cur_speed_rotate) {
                          _0x39afae = 0x1 == _0x22bdec.DYTools.random_int(0x0, 0x1) ? 0x1 : -0x1;
                          this.cur_speed_rotate = this.speed_rotate * _0x39afae;
                        }
                      } else {
                        var _0x3c78bb = this.get_rotate_by_xy(0x0 - _0x4a5963.x, 0x0 - _0x4a5963.y);
                        if (Math.abs(_0x3c78bb - _0x4214e1) < this.rotate_diff) {
                          this.cur_speed_rotate = 0x0;
                        }
                      }
                    }
                  }
                }
              } else {
                if (this.aiType == _0x34e352.E_SnakeAI.Player && _0x313e7c.GValue.EntityWorld.player) {
                  if (this.cur_time_follow >= 0x0) {
                    this.cur_time_follow -= _0x2d46c0;
                    var _0x572ed6 = _0x313e7c.GValue.EntityWorld.player.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
                    _0x38c52a = this.node.convertToNodeSpaceAR(_0x572ed6);
                    _0x3c78bb = this.get_rotate_by_xy(_0x38c52a.x - _0x4a5963.x, _0x38c52a.y - _0x4a5963.y);
                    var _0x3dd764 = Math.abs(_0x4214e1 - _0x3c78bb);
                    if (_0x3dd764 <= 0xb4) {
                      ;
                    } else {
                      var _0x5d3383 = _0x3c78bb + 0x168;
                      var _0x3b9a1b = _0x3c78bb - 0x168;
                      if ((_0x3dd764 = Math.abs(_0x4214e1 - _0x5d3383)) <= 0xb4) {
                        _0x3c78bb = _0x5d3383;
                      } else if ((_0x3dd764 = Math.abs(_0x4214e1 - _0x3b9a1b)) <= 0xb4) {
                        _0x3c78bb = _0x3b9a1b;
                      }
                    }
                    this.cur_speed_rotate = _0x3dd764 <= 0x5 ? 0x0 : _0x4214e1 < _0x3c78bb ? this.speed_rotate : _0x4214e1 > _0x3c78bb ? -this.speed_rotate : 0x0;
                  } else {
                    this.cur_time_unfollow -= _0x2d46c0;
                    this.cur_speed_rotate = 0x0;
                    if (this.cur_time_unfollow <= 0x0) {
                      this.set_follow_time();
                      this.set_rotate_speed();
                    }
                  }
                }
              }
            }
          }
        },
        'set_follow_time': function () {
          var _0x917261 = this.list_snake.length - 0x1;
          if (!(_0x917261 < 0x0)) {
            var _0x127b3f = this.dic_follow_max[_0x917261];
            _0x127b3f = _0x127b3f || 0x0;
            var _0x421257 = this.dic_follow_min[_0x917261];
            _0x421257 = _0x421257 || 0x0;
            this.cur_time_follow = _0x421257 + (_0x127b3f - _0x421257) * Math.random();
            var _0x41d463 = this.dic_unfollow_max[_0x917261];
            _0x41d463 = _0x41d463 || 0x0;
            var _0x1d2a26 = this.dic_unfollow_min[_0x917261];
            _0x1d2a26 = _0x1d2a26 || 0x0;
            this.cur_time_unfollow = _0x1d2a26 + (_0x41d463 - _0x1d2a26) * Math.random();
          }
        },
        'set_rotate_speed': function () {
          var _0x20f666 = this.data.speed_rotate_min;
          var _0x4247aa = this.data.speed_rotate_max;
          this.speed_rotate = _0x20f666 + (_0x4247aa - _0x20f666) * Math.random();
        },
        'get_speedXY_by_rotate': function (_0x465545, _0x1fe040) {
          var _0x5bda6e = cc.v2(0x0, 0x0);
          if (0x0 == _0x465545 || 0x168 == _0x465545) {
            _0x5bda6e = cc.v2(0x0, -_0x1fe040);
          } else {
            if (0x5a == _0x465545) {
              _0x5bda6e = cc.v2(-_0x1fe040, 0x0);
            } else {
              if (0xb4 == _0x465545) {
                _0x5bda6e = cc.v2(0x0, _0x1fe040);
              } else {
                if (0x10e == _0x465545) {
                  _0x5bda6e = cc.v2(_0x1fe040, 0x0);
                } else {
                  if (_0x465545 > 0xb4 && _0x465545 < 0x10e) {
                    var _0x124be3 = (_0x465545 - 0xb4) / 0xb4 * Math.PI;
                    _0x5bda6e = cc.v2(_0x1fe040 * Math.sin(_0x124be3), _0x1fe040 * Math.cos(_0x124be3));
                  } else if (_0x465545 > 0x5a && _0x465545 < 0xb4) {
                    _0x124be3 = (_0x465545 - 0x5a) / 0xb4 * Math.PI;
                    _0x5bda6e = cc.v2(-_0x1fe040 * Math.cos(_0x124be3), _0x1fe040 * Math.sin(_0x124be3));
                  } else if (_0x465545 > 0x0 && _0x465545 < 0x5a) {
                    _0x124be3 = _0x465545 / 0xb4 * Math.PI;
                    _0x5bda6e = cc.v2(-_0x1fe040 * Math.sin(_0x124be3), -_0x1fe040 * Math.cos(_0x124be3));
                  } else if (_0x465545 > 0x10e && _0x465545 < 0x168) {
                    _0x124be3 = (_0x465545 - 0x10e) / 0xb4 * Math.PI;
                    _0x5bda6e = cc.v2(_0x1fe040 * Math.cos(_0x124be3), -_0x1fe040 * Math.sin(_0x124be3));
                  }
                }
              }
            }
          }
          return _0x5bda6e;
        },
        'get_rotate_by_xy': function (_0x4f246f, _0x4086f3) {
          var _0x51e299 = 0x0;
          if (0x0 == _0x4f246f && 0x0 == _0x4086f3) {
            _0x51e299 = 0x0;
          } else {
            if (0x0 == _0x4f246f) {
              _0x51e299 = _0x4086f3 > 0x0 ? 0x10e : 0x5a;
            } else {
              if (0x0 == _0x4086f3) {
                _0x51e299 = _0x4f246f > 0x0 ? 0x0 : 0xb4;
              } else {
                if (_0x4f246f > 0x0 && _0x4086f3 > 0x0) {
                  var _0x3d7fcd = Math.abs(_0x4f246f / _0x4086f3);
                  _0x51e299 = 0x10e + Math.atan(_0x3d7fcd) / (0x2 * Math.PI) * 0x168;
                } else if (_0x4f246f < 0x0 && _0x4086f3 > 0x0) {
                  _0x3d7fcd = Math.abs(_0x4086f3 / _0x4f246f);
                  _0x51e299 = 0xb4 + Math.atan(_0x3d7fcd) / (0x2 * Math.PI) * 0x168;
                } else if (_0x4f246f < 0x0 && _0x4086f3 < 0x0) {
                  _0x3d7fcd = Math.abs(_0x4f246f / _0x4086f3);
                  _0x51e299 = 0x5a + Math.atan(_0x3d7fcd) / (0x2 * Math.PI) * 0x168;
                } else if (_0x4f246f > 0x0 && _0x4086f3 < 0x0) {
                  _0x3d7fcd = Math.abs(_0x4086f3 / _0x4f246f);
                  _0x51e299 = Math.atan(_0x3d7fcd) / (0x2 * Math.PI) * 0x168;
                }
              }
            }
          }
          return (_0x51e299 -= 0x5a) < 0x0 ? _0x51e299 + 0x168 : _0x51e299;
        },
        'play_audio': function () {
          var _0x223230 = "snake_" + _0x22bdec.DYTools.random_int(0x1, 0x2);
          _0x420993.GAudio.playSound(_0x223230);
        },
        'hasBuff': function (_0x4d82fe) {
          return this.buffCom.hasBuff(_0x4d82fe);
        }
      });
      cc._RF.pop();
    }, {
      'CEnemyEffect': "CEnemyEffect",
      'CommonAudio': "CommonAudio",
      'CommonConfig': "CommonConfig",
      'CommonEnum': "CommonEnum",
      'CommonFunc': "CommonFunc",
      'CommonValue': 'CommonValue',
      'ConfigData': "ConfigData",
      'EnemyBase': "EnemyBase",
      'GameData': "GameData",
      'PfNum': "PfNum",
      'Tools': "Tools",
      'Types': 'Types'
    }],
    'CEntityWall': [function (_0x5f4f8d, _0x354125, _0x36d962) {
      'use strict';
  
      cc._RF.push(_0x354125, "d023aKWGopEU4czfvXISmG6", "CEntityWall");
      var _0x3bd6cd = _0x5f4f8d("Tools");
      var _0x513243 = _0x5f4f8d("CommonValue");
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'wallType': cc.Integer,
          'sprWall': cc.Sprite,
          'sprNode': cc.Node,
          'wallCollider': cc.BoxCollider,
          'wallCCollider': cc.CircleCollider
        },
        'ctor': function () {
          this._data = null;
        },
        'init': function (_0xd6db65, _0x48634b) {
          this._data = _0xd6db65;
          this.node.position = cc.v2(_0xd6db65.x, _0xd6db65.y);
          this.node.angle = this._data.rt;
          var _0x441429 = _0xd6db65.dr;
          if (_0xd6db65.dr < 0x4) {
            _0x441429 = 0x64 * _0xd6db65.ty + 0x1;
          }
          for (var _0x21b6f7 = 0x0; _0x21b6f7 < this.sprWall.length; _0x21b6f7++) {
            this.sprWall[_0x21b6f7].spriteFrame = _0x513243.GValue.Atlas_Wall.getSpriteFrame('w' + _0x48634b + '_' + _0x441429);
          }
          if (0x4 == _0xd6db65.dr) {
            this.node.scaleY = this._data.sy;
            this.node.scaleX = this._data.sx;
            _0x441429 = 0x4;
          } else {
            if (0x5 == _0xd6db65.dr) {
              for (_0x21b6f7 = 0x0; _0x21b6f7 < this._data.cL.length; _0x21b6f7++) {
                var _0x63c42a = this._data.cL[_0x21b6f7];
                this.sprNode[_0x21b6f7].active = true;
                this.sprNode[_0x21b6f7].x = _0x63c42a.x;
                this.sprNode[_0x21b6f7].y = _0x63c42a.y;
                this.sprNode[_0x21b6f7].scaleX = _0x63c42a.sx;
                this.sprNode[_0x21b6f7].scaleY = _0x63c42a.sy;
                this.sprNode[_0x21b6f7].width = _0x63c42a.wt;
                this.sprNode[_0x21b6f7].height = _0x63c42a.ht;
              }
              _0x441429 = 0x5;
            } else if (0x6 == _0xd6db65.dr) {
              this.node.scaleY = this._data.sy;
              this.node.scaleX = this._data.sx;
              _0x441429 = 0x6;
            } else {
              this.node.scaleY = this._data.sy;
              this.node.scaleX = this._data.sx;
              this.sprNode[0x0].anchorX = this._data.ax;
              this.sprNode[0x0].anchorY = this._data.ay;
              this.sprNode[0x0].width = this._data.wt;
              this.sprNode[0x0].height = this._data.ht;
            }
          }
          if (0x4 == this._data.dr) {
            this.wallCCollider.tag = _0xd6db65.dr;
            _0x3bd6cd.DYTools.addScript(this.wallCCollider.node, "CNodeCollider").init(this.node, true);
          } else if (0x5 == this._data.dr) {
            this.wallCCollider.tag = _0xd6db65.dr;
            _0x3bd6cd.DYTools.addScript(this.wallCCollider.node, "CNodeCollider").init(this.node, true);
            this.wallCCollider.radius = this._data.wt;
          } else if (0x6 == this._data.dr) {
            this.wallCollider.tag = _0xd6db65.dr;
            _0x3bd6cd.DYTools.addScript(this.wallCollider.node, "CNodeCollider").init(this.node, true);
          } else {
            this.wallCollider.tag = _0xd6db65.dr;
            _0x3bd6cd.DYTools.addScript(this.wallCollider.node, "CNodeCollider").init(this.node, true);
            if (_0xd6db65.ty < 0x2) {
              this.wallCollider.size.width = this.sprNode[0x0].width;
              this.wallCollider.node.position = cc.v2(this.wallCollider.node.x + (0.5 - this.sprNode[0x0].anchorX) * this.sprNode[0x0].width, this.wallCollider.node.y + (0.5 - this.sprNode[0x0].anchorY) * this.sprNode[0x0].height);
            }
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonValue': "CommonValue",
      'Tools': "Tools"
    }],
    'CEntityWorld': [function (_0x2b1015, _0x4c4f33, _0x12f651) {
      'use strict';
  
      var _0x3f1993;
      function _0x7acc6c(_0x21e2f0, _0x507d5d, _0x43b5ee) {
        if (_0x507d5d in _0x21e2f0) {
          Object.defineProperty(_0x21e2f0, _0x507d5d, {
            'value': _0x43b5ee,
            'enumerable': true,
            'configurable': true,
            'writable': true
          });
        } else {
          _0x21e2f0[_0x507d5d] = _0x43b5ee;
        }
        return _0x21e2f0;
      }
      cc._RF.push(_0x4c4f33, "43a79rAvnVCJpxVREEN1Kmf", "CEntityWorld");
      var _0x54c84d = _0x2b1015("Tools");
      var _0x4df466 = _0x2b1015("CollisionEventManager");
      var _0x2041ec = _0x2b1015("EntityEnemy");
      var _0x47a308 = _0x2b1015("CommonValue");
      var _0x4d8f02 = _0x2b1015("GameData");
      var _0x32557a = _0x2b1015("CommonAudio");
      var _0x17e5a1 = _0x2b1015('CommonConfig');
      var _0x374f7f = _0x2b1015("ConfigData");
      var _0x16e091 = _0x2b1015("CommonFunc");
      var _0xb5f65a = _0x2b1015("HomeUI");
      var _0x36558b = _0x2b1015('CommonEnum');
      var _0x57e120 = _0x2b1015("GuideUI");
      var _0x16d316 = _0x2b1015('Types');
      _0x2b1015("CommonSdk");
      var _0x1ba530 = _0x2b1015('PropManager');
      _0x3f1993 = {
        'canvas': cc.Node,
        'gameNode': cc.Node,
        'mapShield': cc.Node,
        'touchShield': cc.Node,
        'gameUINode': cc.Node,
        'homeUINode': cc.Node,
        'guideUINode': cc.Node,
        'addEntityNode': cc.Node,
        'poolMgr': cc.Node,
        'mapMgrNode': cc.Node,
        'ddSdkNode': cc.Node,
        'shieldNode': cc.Node
      };
      _0x7acc6c(_0x3f1993, "guideUINode", cc.Node);
      _0x7acc6c(_0x3f1993, "pf_sdk", cc.Prefab);
      _0x7acc6c(_0x3f1993, "pf_anim", cc.Prefab);
      _0x7acc6c(_0x3f1993, 'pf_num', cc.Prefab);
      _0x7acc6c(_0x3f1993, "pf_enemy_effect", cc.Prefab);
      _0x7acc6c(_0x3f1993, "pf_guideUI", cc.Prefab);
      _0x7acc6c(_0x3f1993, "pf_homeUI", cc.Prefab);
      _0x7acc6c(_0x3f1993, "pf_gameUI", cc.Prefab);
      _0x7acc6c(_0x3f1993, "atlasGame", cc.SpriteAtlas);
      _0x7acc6c(_0x3f1993, 'atlasEnemy', cc.SpriteAtlas);
      _0x7acc6c(_0x3f1993, 'atlasShadow', cc.SpriteAtlas);
      _0x7acc6c(_0x3f1993, "atlasBoss", cc.SpriteAtlas);
      _0x7acc6c(_0x3f1993, "atlasGuide", cc.SpriteAtlas);
      _0x7acc6c(_0x3f1993, "atlasTest", cc.SpriteAtlas);
      cc.Class({
        'extends': cc.Component,
        'properties': _0x3f1993,
        'onLoad': function () {
          this.inBack = false;
          this.backToFront = false;
          this.inGuide = false;
          this.m_gameStart = false;
          this.m_gameOver = false;
          this.isLoading = true;
          this.gameNodePos = cc.Vec2.ZERO;
          this.touchAvaliable = true;
          this.addEntitySys = null;
          this.mapMgr = null;
          this.heroColSys = null;
          this.knifeColSys = null;
          this.deputyWeaponColSys = null;
          this.gameRuleSystem = null;
          this.propMgr = null;
          this.player = null;
          this.knifes = [];
          this.landKnifes = [];
          this.enemyDropNumber = 0x0;
          this.enemyDropPropNumber = 0x0;
          this.Enemys = [];
          this.pauseEnemys = [];
          this.SnakeEnemys = {};
          this.CircleEnemys = {};
          this.FireEnemys = {};
          this.Props = [];
          this.landRect = null;
          this.touchDirty = 0x0;
          this.curDtRatio = 0x1;
          this.levelData = null;
          this.curLevel = 0x0;
          this.reviveCount = 0x0;
          this.dieCount = 0x0;
          this.enemyColorBlood = [];
          this.enemyColorParam = {};
          this.gameUI = null;
          this.mapStop = false;
          this._enemyWaveCount = 0x0;
          this._conEnemyArr = [];
          this._mapPauseData = null;
          this._mapPauseAble = false;
          this._mapPauseEnemyAble = false;
          this._mapPauseCount = 0x0;
          this._pauseEnemyIndex = [];
          this._pauseEnemyTime = [];
          this._bossData = null;
          this._bossPos = cc.Vec2.ZERO;
          this._bossCount = 0x0;
          this._bossArr = [];
          this._bossConfigData = null;
          this._bossTimeAble = false;
          this._bossTime = [];
          this.knifeColIndex = 0x0;
          _0x47a308.GValue.Root_Canvas = this.canvas;
          _0x47a308.GValue.EntityWorld = this;
          _0x47a308.GValue.PlayerSlowRatio = 0x1;
          _0x16e091.GFunc.adjustScreen(this.gameNode);
          _0x47a308.GValue.MapScale = this.gameNode.scale;
          _0x47a308.GValue.PlayerMainPos = _0x47a308.GValue.ViewCenter.add(cc.v2(0x0, 0.02 * -_0x47a308.GValue.Size_View.height)).mul(0x1 / _0x47a308.GValue.MapScale);
          _0x47a308.GValue.PlayerPosV = cc.v2(_0x47a308.GValue.ViewCenter.x / _0x47a308.GValue.MapScale, 0.6 * _0x47a308.GValue.ViewCenter.y / _0x47a308.GValue.MapScale);
          _0x47a308.GValue.PlayerPosH = cc.v2(0.8 * _0x47a308.GValue.ViewCenter.x / _0x47a308.GValue.MapScale, _0x47a308.GValue.ViewCenter.y / _0x47a308.GValue.MapScale);
          this.gameNode.position = cc.v2(0.5 * -_0x47a308.GValue.Size_View.width, 0.5 * -_0x47a308.GValue.Size_View.height);
          this.mapShield.scale = 0x1 / _0x47a308.GValue.MapScale;
          this.setTouching(true);
          this.landRect = cc.rect(-0xc8, -0xc8, _0x47a308.GValue.Size_View.width + 0x190, _0x47a308.GValue.Size_View.height + 0x190);
          _0x47a308.GValue.EnemyColorBloodPercent = parseInt(_0x17e5a1.GConfig.getGbData(_0x36558b.Enum_Gb.EnemyColor)) / 0x64;
          this.isLoading = true;
          this.gameNodePos = this.gameNode.position;
          _0x47a308.GValue.Atlas_Game = this.atlasGame;
          _0x47a308.GValue.Atlas_Enemy = this.atlasEnemy;
          _0x47a308.GValue.Atlas_Shadow = this.atlasShadow;
          _0x47a308.GValue.Atlas_Boss = this.atlasBoss;
          _0x47a308.GValue.Atlas_Guide = this.atlasGuide;
          _0x47a308.GValue.Atlas_Test = this.atlasTest;
          _0x47a308.GValue.pf_num = this.pf_num;
          _0x47a308.GValue.pf_anim = this.pf_anim;
          _0x47a308.GValue.pf_enemy_effect = this.pf_enemy_effect;
          var _0x1eea1d = this.poolMgr.getComponent("CPoolMgr");
          _0x1eea1d.init();
          this.addEntitySys = _0x54c84d.DYTools.addScript(this.addEntityNode, "EntityAddSys");
          this.addEntitySys.init(_0x1eea1d);
          this.mapMgr = _0x54c84d.DYTools.addScript(this.mapMgrNode, "MapManager");
          this.heroColSys = _0x54c84d.DYTools.addScript(this.node, "CHeroCollisionHandleSystem");
          this.knifeColSys = _0x54c84d.DYTools.addScript(this.node, "CKnifeCollisionHandleSystem");
          this.deputyWeaponColSys = _0x54c84d.DYTools.addScript(this.node, 'DeputyWeaponCollisionHandleSys');
          this.gameRuleSystem = _0x54c84d.DYTools.addScript(this.node, 'CGameRuleSystem');
          this.propMgr = _0x54c84d.DYTools.addScript(this.node, _0x1ba530);
          this.propMgr.init();
          _0x47a308.GValue.PropMgr = this.propMgr;
          this.nextLoad();
          _0x16e091.GFunc.initPowerRecover();
          _0x16e091.GFunc.initOfflineGoldRecover();
          this.schedule(function (_0x5429fc) {
            _0x16e091.GFunc.checkPowerRecover(0x1);
            _0x16e091.GFunc.checkGoldOffline(0x1);
            if (_0x47a308.GValue.HomeUI) {
              _0x47a308.GValue.HomeUI.refreshPowerRecover();
              _0x47a308.GValue.HomeUI.refreshOfflineRecover();
              _0x47a308.GValue.HomeUI.refresh_sys_lvuptip(true);
            }
          }, 0x1, cc.macro.REPEAT_FOREVER, 0x0);
          var _0x4cfc74 = this;
          cc.game.off(cc.game.EVENT_HIDE);
          cc.game.on(cc.game.EVENT_HIDE, function (_0x55b501) {
            _0x4cfc74.inBack = true;
            _0x54c84d.DYTools.error("进入后台");
            _0x4d8f02.TData.saveLastData();
            _0x4d8f02.TData.saveSettingData();
            cc.audioEngine.pauseAll();
          });
          cc.game.off(cc.game.EVENT_SHOW);
          cc.game.on(cc.game.EVENT_SHOW, function () {
            _0x4cfc74.inBack = false;
            _0x4cfc74.backToFront = true;
            _0x54c84d.DYTools.error("进入前台");
            _0x16e091.GFunc.initPowerRecover();
            _0x16e091.GFunc.initOfflineGoldRecover();
            _0x32557a.GAudio.playBgm(_0x32557a.GAudio.curBgm);
          });
          this.node.on("knifeCol", this.playerKnifeColKniveEffect, this);
        },
        'nextLoad': function () {
          this.player = this.addEntitySys.addPlayer();
          this.player.node.position = _0x47a308.GValue.PlayerMainPos;
          var _0x5e3f32 = _0x4d8f02.TData.WeaponCount;
          var _0x870929 = 0x0;
          for (var _0x519608 = this.addEntitySys.AddKnife(_0x5e3f32); _0x870929 < _0x519608.length; _0x870929++) {
            var _0x54f724 = _0x519608[_0x870929];
            this.knifes.push(_0x54f724);
            _0x54c84d.DYTools.addScript(_0x54f724.node, "CKnifeInit").init(this.player);
          }
          var _0x100522 = cc.instantiate(this.pf_gameUI);
          this.gameUINode.addChild(_0x100522);
          this.gameUI = _0x100522.getComponent("GameUI");
          this.gameUINode.active = false;
          _0x47a308.GValue.GameUI = this.gameUI;
          var _0x590d9d = cc.instantiate(this.pf_guideUI);
          this.guideUINode.addChild(_0x590d9d);
          _0x47a308.GValue.GuideUI = _0x590d9d.getComponent(_0x57e120);
          _0x47a308.GValue.GuideUI.init();
          if (_0x17e5a1.GConfig.isLocal) {
            ;
          } else {
            var _0x58d3ee = cc.instantiate(this.pf_homeUI);
            this.homeUINode.addChild(_0x58d3ee);
            _0x47a308.GValue.HomeUI = _0x58d3ee.getComponent(_0xb5f65a);
            _0x47a308.GValue.HomeUI.init();
          }
          _0x16e091.GFunc.changePlayerSkin(_0x4d8f02.TData.getCurSubFun());
          _0x32557a.GAudio.playBgm(_0x32557a.Enum_Audio.bgm_main);
          if (!_0x17e5a1.GConfig.isDevelop && _0x17e5a1.GConfig.isWx) {
            if (!_0x47a308.GValue.DDSDK) {
              _0x47a308.GValue.DDSDK = cc.instantiate(this.pf_sdk);
              _0x47a308.GValue.DDSDKUI = _0x47a308.GValue.DDSDK.getComponent('ddsdk_ui');
            }
            this.ddSdkNode.addChild(_0x47a308.GValue.DDSDK);
          }
        },
        'start': function () {
          if (_0x47a308.GValue.FirstMain) {
            _0x47a308.GValue.FirstMain = false;
          }
          this.isLoading = false;
          if (_0x47a308.GValue.DDSDKUI) {
            _0x47a308.GValue.DDSDKUI.adjustUI();
            _0x47a308.GValue.DDSDKUI.showMain(true);
            _0x47a308.GValue.DDSDKUI.showFavGame(false);
          }
        },
        'resetGameNode': function () {
          this.addEntitySys.mapWall.removeAllChildren();
          this.addEntitySys.enemyNode.removeAllChildren();
          this.addEntitySys.itemNode.removeAllChildren();
          this.addEntitySys.propNode.removeAllChildren();
        },
        'clearMap': function () {
          this.addEntitySys.clear();
        },
        'gameStart': function (_0x1c12dd) {
          if (_0x47a308.GValue.DDSDKUI) {
            _0x47a308.GValue.DDSDKUI.showMain(false);
          }
          this.resetGameNode();
          this.curLevel = _0x1c12dd;
          this.levelData = _0x17e5a1.GConfig.getLevelData(this.curLevel);
          _0x47a308.GValue.StageFailFinish = false;
          if (_0x47a308.GValue.StageFail == this.curLevel && (_0x372beb = this.levelData.failParam.split(_0x17e5a1.GConfig.SeparatorI)).length > 0x1) {
            var _0x5e71f2 = _0x54c84d.DYTools.stringToNumber(_0x372beb[0x0], _0x17e5a1.GConfig.SeparatorII);
            var _0x594e67 = -0x1;
            for (var _0xd9d2e8 = 0x0; _0xd9d2e8 < _0x5e71f2.length && _0x47a308.GValue.StageFailCount >= _0x5e71f2[_0xd9d2e8]; _0xd9d2e8++) {
              _0x594e67 = _0xd9d2e8;
            }
            if (_0x594e67 >= 0x0) {
              var _0x3acc76 = _0x54c84d.DYTools.stringToNumber(_0x372beb[0x1], _0x17e5a1.GConfig.SeparatorII);
              try {
                _0x47a308.GValue.StageFailFinish = true;
                _0x47a308.GValue.FailRatio = _0x3acc76[_0x594e67];
                _0x54c84d.DYTools.warn("难度降低:" + _0x3acc76[_0x594e67]);
              } catch (_0xa637e4) {
                _0x54c84d.DYTools.error("难度系数错误", _0xa637e4);
              }
            }
          }
          var _0x46240b = this;
          var _0x3f489a = _0x17e5a1.GConfig.actionFrameTime;
          _0x46240b.player.playerOutUI(function () {
            _0x46240b.gameUINode.active = true;
            _0x46240b.gameUI.playGameStartAct(function () {
              _0x46240b.addEntitySys.preLoadStart(function () {
                _0x46240b.mapMgr.init(_0x46240b.levelData, _0x46240b.addEntitySys, function () {
                  _0x32557a.GAudio.playBgm(_0x32557a.Enum_Audio.bgm);
                  if (_0x36558b.Enum_GuideStep.StageStart > _0x4d8f02.TData.getGuideStep()) {
                    _0x4d8f02.TData.setGuideStep(_0x36558b.Enum_GuideStep.StageStart);
                  }
                  _0x46240b.gameUI.startGame(_0x46240b.mapMgr.pauseDis);
                  _0x46240b.gameUI.playBlackHideAct();
                  _0x46240b.scheduleOnce(function () {
                    _0x46240b.gameUI.playProgressShowAct();
                  }, 0x3 * _0x3f489a);
                  _0x46240b.scheduleOnce(function () {
                    _0x46240b.player.playerEnterGameAct(function () {}, function () {
                      var _0x4cb97d = function () {
                        _0x4df466.CollisionEventManager.getInstance().init();
                        _0x46240b.mapMgr.startGame();
                        var _0x2cd37b = 0x0;
                        for (var _0x3d1847 = _0x46240b.Enemys; _0x2cd37b < _0x3d1847.length; _0x2cd37b++) {
                          _0x3d1847[_0x2cd37b].startGame();
                        }
                        _0x46240b.m_gameStart = true;
                        _0x46240b.check_guide_level();
                      };
                      if (0x1 == _0x46240b.curLevel) {
                        _0x46240b.gameUI.showFingerGuide(_0x4cb97d);
                        if (_0x4d8f02.TData.getGuideStep() < _0x36558b.Enum_GuideStep.Finger) {
                          _0x4d8f02.TData.setGuideStep(_0x36558b.Enum_GuideStep.Finger);
                        }
                        _0x46240b.player.startGame(function () {
                          _0x46240b.gameUI.hideFingerGuide();
                          _0x4cb97d();
                        });
                      } else {
                        _0x46240b.player.startGame();
                        _0x4cb97d();
                      }
                    });
                  }, 0x4 * _0x3f489a);
                  _0x46240b.scheduleOnce(function () {
                    _0x46240b.mapMgr.playEnterAct();
                  }, 0x8 * _0x3f489a);
                });
              });
            });
          });
          this.enemyColorBlood.splice(0x0);
          this.enemyColorBlood = _0x54c84d.DYTools.stringToNumber(this.levelData.enemyColor, _0x17e5a1.GConfig.SeparatorII);
          for (_0xd9d2e8 = this.enemyColorBlood.length - 0x1; _0xd9d2e8 > 0x0; _0xd9d2e8--) {
            var _0x372beb = [];
            var _0x866f0f = this.enemyColorBlood[_0xd9d2e8];
            var _0x28dc56 = this.enemyColorBlood[_0xd9d2e8 - 0x1];
            _0x866f0f = (_0x866f0f - _0x28dc56) * _0x47a308.GValue.EnemyColorBloodPercent + _0x28dc56;
            var _0x2aa142 = _0x17e5a1.GConfig.colorArr[_0xd9d2e8];
            var _0x38272d = _0x17e5a1.GConfig.colorArr[_0xd9d2e8 - 0x1];
            var _0x284863 = (_0x2aa142.getR() - _0x38272d.getR()) / (_0x866f0f - _0x28dc56);
            var _0x3eee25 = _0x2aa142.getR() - _0x866f0f * _0x284863;
            _0x372beb.push(Number(_0x284863.toFixed(0x3)));
            _0x372beb.push(Number(_0x3eee25.toFixed(0x3)));
            _0x284863 = (_0x2aa142.getG() - _0x38272d.getG()) / (_0x866f0f - _0x28dc56);
            _0x3eee25 = _0x2aa142.getG() - _0x866f0f * _0x284863;
            _0x372beb.push(Number(_0x284863.toFixed(0x3)));
            _0x372beb.push(Number(_0x3eee25.toFixed(0x3)));
            _0x284863 = (_0x2aa142.getB() - _0x38272d.getB()) / (_0x866f0f - _0x28dc56);
            _0x3eee25 = _0x2aa142.getB() - _0x866f0f * _0x284863;
            _0x372beb.push(Number(_0x284863.toFixed(0x3)));
            _0x372beb.push(Number(_0x3eee25.toFixed(0x3)));
            this.enemyColorParam[_0xd9d2e8 - 0x1] = _0x372beb;
          }
          this._enemyWaveCount = 0x0;
          this._conEnemyArr = [];
          this._mapPauseData = null;
          this._mapPauseAble = false;
          this._mapPauseCount = 0x0;
          this._pauseEnemyIndex = [];
          this._pauseEnemyTime = [];
          this._mapPauseCount = 0x0;
        },
        'check_guide_level': function () {
          if (0x1 == this.curLevel) {
            var _0x419e8f = this;
            this.scheduleOnce(function () {
              _0x419e8f.inGuide = true;
              _0x47a308.GValue.GuideUI.set_shield_state(false);
              _0x419e8f.player.stopMove();
              _0x47a308.GValue.GuideUI.popup_panelLevelGuide(function () {
                _0x419e8f.inGuide = false;
              });
              _0x419e8f.setTouching(true);
              if (_0x4d8f02.TData.getGuideStep() < _0x36558b.Enum_GuideStep.Flash) {
                _0x4d8f02.TData.setGuideStep(_0x36558b.Enum_GuideStep.Flash);
              }
            }, 0x2);
          }
        },
        'setTouching': function (_0x15bc74) {
          if (this.touchAvaliable && (!this.m_gameOver && !this.inGuide || _0x15bc74) && _0x47a308.GValue.PlayerTouching != _0x15bc74) {
            this.touchDirty = _0x15bc74 ? 0x1 : -0x1;
            _0x47a308.GValue.PlayerTouching = _0x15bc74;
            _0x47a308.GValue.PauseSlowRatio = _0x15bc74 ? 0x1 : 0.02;
            this.touchShield.active = !_0x15bc74;
            cc.director.getScheduler().setTimeScale(_0x47a308.GValue.PauseSlowRatio);
            if (!_0x15bc74) {
              this.curDtRatio = 0x1;
              this.touchShield.opacity = 0x0;
            }
          }
        },
        'update': function (_0x12892c) {
          if (!this.inBack && (this.backToFront && (_0x12892c = 0.016666666666666666, this.backToFront = false), _0x47a308.GValue.OnlineTime += _0x12892c, _0x47a308.GValue.OnlineTime >= 0x1e && (_0x47a308.GValue.OnlineTime = 0x0), !this.inGuide)) {
            _0x16e091.GFunc.check_performance(_0x12892c);
            if (this.player) {
              this.player.updateGameLogic(_0x12892c * _0x47a308.GValue.PauseSlowRatio);
              var _0x5f4646 = 0x0;
              for (var _0x100b8c = this.knifes; _0x5f4646 < _0x100b8c.length; _0x5f4646++) {
                _0x100b8c[_0x5f4646].updateGameLogic(_0x12892c * _0x47a308.GValue.PauseSlowRatio);
              }
            }
            if (this.m_gameStart && !this.m_gameOver) {
              if (!_0x47a308.GValue.PlayerTouching) {
                _0x12892c *= _0x47a308.GValue.PauseSlowRatio;
                if (this.player.isDead) {
                  this.touchShield.active = false;
                  this.setTouching(true);
                } else if (-0x1 == this.touchDirty) {
                  this.curDtRatio -= 0.025;
                  if (this.curDtRatio <= _0x47a308.GValue.PauseSlowRatio) {
                    this.curDtRatio = _0x47a308.GValue.PauseSlowRatio;
                    this.touchDirty = 0x0;
                  }
                  this.touchShield.opacity = 0xff * (0x1 - (this.curDtRatio - 0.02) / 0.98);
                }
              }
              this._updateMap(_0x12892c);
              this._updateEnemys(_0x12892c);
              this._updateGameLogic(_0x12892c);
              this.checkGameOver();
            }
          }
        },
        '_updateGameLogic': function (_0x3ba117) {
          if (!this.player.isDead) {
            for (var _0x2365b6 in this.SnakeEnemys) {
              var _0x4bb129 = this.SnakeEnemys[_0x2365b6];
              if (_0x4bb129) {
                _0x4bb129.updateGameLogic(_0x3ba117);
              }
            }
            for (var _0x2365b6 in this.CircleEnemys) {
              var _0x231e91 = this.CircleEnemys[_0x2365b6];
              if (_0x231e91) {
                _0x231e91.updateGameLogic(_0x3ba117);
              }
            }
            for (var _0x2365b6 in this.FireEnemys) {
              var _0xc09396 = this.FireEnemys[_0x2365b6];
              if (_0xc09396) {
                _0xc09396.updateGameLogic(_0x3ba117);
              }
            }
            for (var _0x34723a in _0x47a308.GValue.DicBossEnemy) {
              var _0x167ddb = _0x47a308.GValue.DicBossEnemy[_0x34723a];
              for (var _0x2365b6 in _0x167ddb) _0x167ddb[_0x2365b6].updateGameLogic(_0x3ba117);
            }
            var _0x42ac5d = 0x0;
            for (var _0x69e5ec = this.Enemys; _0x42ac5d < _0x69e5ec.length; _0x42ac5d++) {
              _0x69e5ec[_0x42ac5d].updateGameLogic(_0x3ba117);
            }
            var _0x3d4895 = 0x0;
            for (var _0x477a0d = this.landKnifes; _0x3d4895 < _0x477a0d.length; _0x3d4895++) {
              var _0x4fe735 = _0x477a0d[_0x3d4895];
              if (!this.landRect.contains(_0x4fe735.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0)))) {
                _0x54c84d.DYTools.arrRemove(this.landKnifes, _0x4fe735);
              }
            }
            var _0x361201 = 0x0;
            for (var _0x5eb960 = this.Props; _0x361201 < _0x5eb960.length; _0x361201++) {
              var _0x171e7c = _0x5eb960[_0x361201];
              _0x171e7c.updateGameLogic(_0x3ba117);
              if (Math.abs(this.player.node.x - _0x171e7c.node.x) < 0x5a && Math.abs(this.player.node.y - _0x171e7c.node.y) < 0x5a && this.player.node.position.sub(_0x171e7c.node.position).magSqr() < 0x1fa4) {
                this.player.node.emit("prop", _0x171e7c);
              }
            }
            if (this.m_gameStart) {
              this.heroColSys.updateGameLogic(_0x3ba117);
              this.knifeColSys.updateGameLogic(_0x3ba117);
              this.deputyWeaponColSys.updateGameLogic(_0x3ba117);
              this.propMgr.updateGameLogic(_0x3ba117);
            }
          }
        },
        '_updateMap': function (_0x1d2bd0) {
          if (!this.player.isDead && !this.mapStop) {
            this.mapMgr.updateMap(_0x1d2bd0);
            var _0x4216c8 = this.mapMgr.checkMapPause();
            if (_0x4216c8) {
              var _0x3e1374 = this;
              this._mapPauseEnemyAble = false;
              this.mapMgr.setMapStop(true);
              this._mapPauseData = _0x4216c8;
              this._pauseEnemyIndex = [];
              this._pauseEnemyTime = [];
              for (var _0x1f5bd8 = 0x0; _0x1f5bd8 < this._mapPauseData.oId.length; _0x1f5bd8++) {
                this._pauseEnemyIndex.push(0x0);
                this._pauseEnemyTime.push(0x0);
              }
              return void (0x0 == this.mapMgr.pauseArr.length ? this.gameUI.showEnemyCome(function () {
                _0x3e1374._mapPauseEnemyAble = true;
              }) : _0x3e1374._mapPauseEnemyAble = true);
            }
            if (!this._bossData) {
              var _0x316f86 = this.mapMgr.checkBoss();
              if (_0x316f86 && (this._mapPauseEnemyAble = false, this._bossData = _0x316f86, this.mapMgr.setMapStop(true), this._mapPauseData = this.mapMgr.bossPause, this._pauseEnemyIndex = [], this._pauseEnemyTime = [], this._mapPauseData)) {
                for (_0x1f5bd8 = 0x0; _0x1f5bd8 < this._mapPauseData.oId.length; _0x1f5bd8++) {
                  this._pauseEnemyIndex.push(0x0);
                  this._pauseEnemyTime.push(0x0);
                }
              }
            }
            this.checkBoss(_0x1d2bd0);
          }
        },
        'checkBoss': function (_0x29581b) {
          var _0x1dfdc4 = this;
          var _0x5be7ac = this;
          if (this._bossData && 0x0 == this.Enemys.length && 0x0 == this._bossCount && this.player.touchAble) {
            _0x5be7ac._bossCount++;
            var _0x4487f2 = _0x17e5a1.GConfig.getMapBossData(_0x5be7ac._bossData.oId);
            this._bossConfigData = _0x4487f2;
            var _0x2e9f70 = null;
            var _0x492456 = false;
            if (_0x4487f2.pause) {
              _0x5be7ac.shieldNode.active = true;
              _0x5be7ac.player.touchAble = false;
              _0x5be7ac.setTouching(true);
              _0x5be7ac.touchAvaliable = false;
              _0x4df466.CollisionEventManager.getInstance().setCollisionAble(false);
              _0x2e9f70 = _0x4487f2.player;
              _0x492456 = true;
              this._bossTimeAble = false;
            } else {
              this._bossTimeAble = true;
            }
            _0x5be7ac.gameUI.showBossCome(function () {
              var _0x4ac794 = _0x17e5a1.GConfig.getConfigBossData(_0x4487f2.type[0x0], _0x4487f2.bId[0x0]);
              var _0x4f9815 = _0x4487f2.tip;
              var _0x1be6c5 = function () {
                for (var _0x5a570c = 0x0; _0x5a570c < _0x4487f2.time.length; _0x5a570c++) {
                  _0x5be7ac._bossTime.push(_0x4487f2.time[_0x5a570c]);
                }
                _0x5be7ac.addEntitySys.addBoss(_0x4487f2.type[0x0], _0x4487f2.bId[0x0], function (_0x41616f) {
                  if (undefined === _0x41616f) {
                    _0x41616f = null;
                  }
                  _0x5be7ac.shieldNode.active = false;
                  if (_0x41616f) {
                    _0x5be7ac._bossArr.push([_0x41616f.node, _0x4ac794, _0x41616f]);
                  }
                  if (_0x4487f2.pause) {
                    for (var _0x2277f4 = 0x0; _0x2277f4 < _0x5be7ac._bossArr.length; _0x2277f4++) {
                      var _0x372736 = _0x5be7ac._bossArr[_0x2277f4][0x2];
                      switch (_0x4ac794.type) {
                        case _0x16d316.BossType.Knife:
                          _0x16e091.GFunc.changeKnifeEnemyParentToUI(_0x372736, _0x5be7ac.gameUI.bossTipNode);
                          _0x372736.node.zIndex = -0x1;
                          _0x372736.followWeapon.node.zIndex = -0x2;
                          break;
                        case _0x16d316.BossType.Snake:
                        case _0x16d316.BossType.Circle:
                          _0x16e091.GFunc.changeParent(_0x372736.node, _0x5be7ac.gameUI.bossTipNode);
                          _0x372736.node.zIndex = -0x1;
                          break;
                        case _0x16d316.BossType.Fire:
                        case _0x16d316.BossType.Electr:
                      }
                    }
                  }
                  var _0xc14db2 = function () {
                    if (_0x4487f2.pause) {
                      for (var _0x2284f6 = 0x0; _0x2284f6 < _0x5be7ac._bossArr.length; _0x2284f6++) {
                        var _0x56ab6b = _0x5be7ac._bossArr[_0x2284f6][0x2];
                        var _0x2fe281 = _0x5be7ac._bossArr[_0x2284f6][0x1];
                        if (_0x56ab6b) {
                          switch (_0x2fe281.type) {
                            case _0x16d316.BossType.Knife:
                              _0x16e091.GFunc.changeKnifeEnemyParentToMap(_0x56ab6b);
                              _0x56ab6b.node.zIndex = 0x2710;
                              _0x56ab6b.followWeapon.node.zIndex = 0x270f;
                              _0x56ab6b.actionAble = true;
                              break;
                            case _0x16d316.BossType.Snake:
                              _0x16e091.GFunc.changeParent(_0x56ab6b.node, _0x1dfdc4.addEntitySys.enemyNode);
                              _0x56ab6b.setIsMove(true);
                              _0x56ab6b.setWillMove(true);
                              _0x56ab6b.node.zIndex = 0x2710;
                              break;
                            case _0x16d316.BossType.Circle:
                              _0x16e091.GFunc.changeParent(_0x56ab6b.node, _0x1dfdc4.addEntitySys.enemyNode);
                              _0x56ab6b.setTargetIn(true);
                              _0x56ab6b.node.zIndex = 0x2710;
                              break;
                            case _0x16d316.BossType.Fire:
                              _0x56ab6b.setCanAttack(true);
                              break;
                            case _0x16d316.BossType.Electr:
                              _0x56ab6b.setBossBegin(true);
                          }
                        }
                      }
                      _0x5be7ac.player.touchAble = true;
                      _0x5be7ac.player.touching = true;
                      _0x5be7ac._mapPauseEnemyAble = true;
                      _0x5be7ac.setTouching(true);
                      _0x5be7ac.touchAvaliable = true;
                      _0x4df466.CollisionEventManager.getInstance().setCollisionAble(true);
                      _0x5be7ac._bossTimeAble = true;
                    }
                  };
                  if (_0x492456) {
                    _0x5be7ac.gameUI.showBossTips(_0x4f9815, function () {
                      _0xc14db2();
                    });
                  } else {
                    _0xc14db2();
                  }
                });
                _0x5be7ac.bossShake();
                _0x32557a.GAudio.playBgm(_0x32557a.Enum_Audio.bgm_boss);
              };
              if (_0x2e9f70) {
                _0x5be7ac.player.node.runAction(cc.sequence(cc.moveTo(0.8, _0x2e9f70), cc.callFunc(function () {
                  _0x1be6c5();
                })));
              } else {
                _0x1be6c5();
              }
            });
          }
          this.checkOtherBoss(_0x29581b);
        },
        'checkOtherBoss': function (_0x2eb631) {
          var _0x25c8ea = this;
          var _0xe4e373 = this;
          if (this._bossData) {
            var _0x60f63c;
            var _0x4a787f = function (_0x5f1cd1) {
              if (_0x4e27dd._bossTimeAble) {
                _0x4e27dd._bossTime[_0x5f1cd1] -= _0x2eb631;
              }
              if (_0x4e27dd._bossTime[_0x5f1cd1] <= 0x0) {
                _0x4e27dd.addEntitySys.addBoss(_0x4e27dd._bossConfigData.type[_0x5f1cd1], _0x4e27dd._bossConfigData.bId[_0x5f1cd1], null, function (_0x484275) {
                  if (undefined === _0x484275) {
                    _0x484275 = null;
                  }
                  var _0x30197b = _0x17e5a1.GConfig.getConfigBossData(_0x25c8ea._bossConfigData.type[_0x5f1cd1], _0x25c8ea._bossConfigData.bId[_0x5f1cd1]);
                  if (_0x484275) {
                    _0xe4e373._bossArr.push([_0x484275.node, _0x30197b, _0x484275]);
                  }
                });
                _0x4e27dd.bossShake();
                _0xe4e373._bossTime.splice(_0x5f1cd1, 0x1);
                _0x5f1cd1--;
              }
              _0x60f63c = _0x5f1cd1;
            };
            var _0x4e27dd = this;
            for (var _0x34f934 = 0x1; _0x34f934 < this._bossTime.length; _0x34f934++) {
              _0x4a787f(_0x34f934);
              _0x34f934 = _0x60f63c;
            }
          }
        },
        '_updateEnemys': function (_0x49106d) {
          if (!this.player.isDead) {
            this.mapMgr.checkAreaEnemy();
            this.checkMapPauseEnemy(_0x49106d);
            for (var _0x284996 = 0x0; _0x284996 < this._conEnemyArr.length; _0x284996++) {
              var _0x424c70 = this._conEnemyArr[_0x284996];
              _0x424c70.time += _0x49106d;
              if (_0x424c70.time >= _0x424c70.duration) {
                _0x424c70.time = 0x0;
                var _0xe1b8a2 = _0x424c70.enemy[0x0];
                _0x424c70.enemy.splice(0x0, 0x1);
                if (0x0 == _0x424c70.enemy.length) {
                  this._conEnemyArr.splice(_0x284996, 0x1);
                  _0x284996--;
                }
                var _0x4b4f82 = this.addEntitySys.addContinueEnemys(_0xe1b8a2, _0x424c70.rect);
                this.addEnemys(_0x4b4f82);
              }
            }
            var _0x5a2f29 = this.mapMgr.checkContinuumEnemy();
            if (_0x5a2f29) {
              var _0x76180d = _0x17e5a1.GConfig.getEnemyConData(_0x5a2f29.oId);
              if (_0x76180d) {
                var _0x16a36c = new _0x374f7f.ContinueEnemyData();
                _0x16a36c.id = _0x76180d.id;
                _0x16a36c.duration = _0x76180d.duration;
                _0x16a36c.enemy = _0x76180d.enemy.split('#');
                _0x16a36c.rect = cc.rect(-0x1a4, -0x15e, 0x348, 0x5dc);
                this._conEnemyArr.push(_0x16a36c);
              } else {
                _0x54c84d.DYTools.error('怪物表少配置', _0x5a2f29.id);
              }
            }
            var _0x4ea6a9 = this.mapMgr.checkEnemyOut();
            if (_0x4ea6a9) {
              this._enemyWaveCount++;
              if (this._enemyWaveCount > 0x1) {
                this._enemyWaveCount = 0x0;
              }
              var _0x281b70 = cc.rect(_0x4ea6a9.x - _0x4ea6a9.wt * _0x4ea6a9.ax, _0x4ea6a9.y - _0x4ea6a9.ht * _0x4ea6a9.ay, _0x4ea6a9.wt, _0x4ea6a9.ht);
              if (_0x4ea6a9.ax - 0.05 < 0x0) {
                _0x281b70.x += 0x64;
                _0x281b70.width -= 0x64;
              } else if (_0x4ea6a9.ax - 0.95 > 0x0) {
                _0x281b70.width -= 0x64;
              }
              if (_0x4ea6a9.ay - 0.05 < 0x0) {
                _0x281b70.y += 0x64;
                _0x281b70.height -= 0x64;
              } else if (_0x4ea6a9.ay - 0.95 > 0x0) {
                _0x281b70.height -= 0x64;
              }
              this.createEnemys(_0x17e5a1.GConfig.getEnemyOutData(_0x4ea6a9.oId), _0x281b70);
            }
          }
        },
        'checkMapPauseEnemy': function (_0x3e2d8f) {
          if (this._mapPauseData) {
            if (this._mapPauseEnemyAble) {
              this._mapPauseAble = false;
              for (var _0x146728 = 0x0; _0x146728 < this._mapPauseData.dir.length; _0x146728++) {
                this._pauseEnemyTime[_0x146728] += _0x3e2d8f;
                var _0x3e3602 = _0x17e5a1.GConfig.getPauseData(this._mapPauseData.oId[_0x146728]);
                if (_0x3e3602.enemyArr.length > this._pauseEnemyIndex[_0x146728]) {
                  this._mapPauseAble = true;
                  if (_0x3e3602.duration[this._pauseEnemyIndex[_0x146728]] <= this._pauseEnemyTime[_0x146728]) {
                    this.createPauseEnemy(this._mapPauseData.dir[_0x146728], _0x3e3602.enemyArr[this._pauseEnemyIndex[_0x146728]], _0x3e3602.size);
                    this._pauseEnemyIndex[_0x146728]++;
                    this._pauseEnemyTime[_0x146728] = 0x0;
                  }
                }
              }
            } else {
              this._mapPauseAble = true;
            }
            return true;
          }
          return false;
        },
        'createPauseEnemy': function (_0x4f78ba, _0xd52881, _0x2d583c) {
          for (var _0x4a3de8 = 0x0; _0x4a3de8 < _0xd52881.length; _0x4a3de8++) {
            var _0x39c438 = _0xd52881[_0x4a3de8];
            var _0x4eb0e8 = this.addEntitySys.addPauseEnemy(_0x39c438.x, _0x39c438.y, _0x4f78ba, _0x2d583c);
            this.addEnemys(_0x4eb0e8);
            var _0x50b7ca = 0x0;
            for (var _0xd6df17 = _0x4eb0e8; _0x50b7ca < _0xd6df17.length; _0x50b7ca++) {
              var _0x1837f1 = _0xd6df17[_0x50b7ca];
              this.pauseEnemys.push(_0x1837f1);
            }
          }
        },
        'createEnemys': function (_0x5a2d6e, _0x154bad) {
          if (undefined === _0x154bad) {
            _0x154bad = null;
          }
          var _0x3025dc = _0x5a2d6e.param.split(_0x17e5a1.GConfig.SeparatorI);
          var _0x682b56 = 0x0;
          for (var _0x204771 = 0x0; _0x204771 < _0x3025dc.length; _0x204771++) {
            var _0x4cd0b0 = _0x54c84d.DYTools.stringToPoint(_0x3025dc[_0x204771], _0x17e5a1.GConfig.SeparatorII);
            var _0x597db8 = _0x17e5a1.GConfig.getEnemyData(_0x4cd0b0.x);
            var _0x45e155 = this.addEntitySys.AddEnemy(_0x597db8, _0x4cd0b0.y, _0x154bad);
            this.addEnemys(_0x45e155);
            var _0x4a69cf = 0x0;
            for (var _0x224670 = _0x45e155; _0x4a69cf < _0x224670.length; _0x4a69cf++) {
              var _0x5d0fa9 = _0x224670[_0x4a69cf];
              if (this.m_gameStart) {
                _0x5d0fa9.startGame();
              }
              _0x682b56++;
            }
          }
          return _0x682b56;
        },
        'checkPauseEnemyEmpty': function () {
          if (!this._mapPauseAble && this._mapPauseData && 0x0 == this.pauseEnemys.length) {
            this.mapMgr.setMapStop(false);
            this._mapPauseData = null;
            this._mapPauseCount++;
            this.gameUI.pauseEnemyFinish(this._mapPauseCount);
          }
        },
        'addEnemys': function (_0x5f4a52) {
          for (var _0x13866a = 0x0; _0x13866a < _0x5f4a52.length; _0x13866a++) {
            var _0x28a61e = _0x5f4a52[_0x13866a];
            if (!_0x54c84d.DYTools.arrContains(this.Enemys, _0x28a61e)) {
              this.Enemys.push(_0x28a61e);
            }
          }
        },
        'addEnemy': function (_0x391caf) {
          if (!_0x54c84d.DYTools.arrContains(this.Enemys, _0x391caf)) {
            this.Enemys.push(_0x391caf);
          }
        },
        'removeEnemy': function (_0x1f6edb, _0x1d36b4) {
          if (undefined === _0x1d36b4) {
            _0x1d36b4 = false;
          }
          _0x54c84d.DYTools.arrRemove(this.pauseEnemys, _0x1f6edb);
          _0x54c84d.DYTools.arrRemove(this.Enemys, _0x1f6edb);
          this.checkPauseEnemyEmpty();
          if (_0x1d36b4) {
            this.bossDie(_0x1f6edb.node);
          }
        },
        'bossDie': function (_0x2f0d33) {
          var _0x43ff75 = this;
          if (this._bossData) {
            var _0xb3209f = null;
            for (var _0x2d5cb5 = 0x0; _0x2d5cb5 < this._bossArr.length; _0x2d5cb5++) {
              var _0x1e0824 = this._bossArr[_0x2d5cb5];
              if (_0x1e0824[0x0] === _0x2f0d33) {
                _0xb3209f = _0x1e0824[0x1];
                this._bossArr.splice(_0x2d5cb5, 0x1);
                _0x54c84d.DYTools.warn("boss die", this._bossArr.length, this._bossTime);
                break;
              }
            }
            if (0x0 == this._bossArr.length && 0x1 == this._bossTime.length) {
              this.mapMgr.bossData = null;
              this._bossData = null;
              this._mapPauseData = null;
              this._mapPauseEnemyAble = false;
              this._mapPauseCount++;
              this.gameUI.pauseEnemyFinish(this._mapPauseCount);
              this._bossPos = _0x2f0d33.convertToWorldSpaceAR(cc.Vec2.ZERO);
            }
            if (_0xb3209f && _0xb3209f.clear) {
              this.scheduleOnce(function () {
                for (var _0x20b706 = _0x43ff75.Enemys.length - 0x1; _0x20b706 >= 0x0; _0x20b706--) {
                  var _0x4841bd = _0x43ff75.Enemys[_0x20b706];
                  _0x4841bd.die(false);
                  _0x43ff75.gameUI.addGoldCount(_0x4841bd.data.cData.dropGold);
                }
              }, 0.5);
            }
          }
        },
        'addKnife': function (_0x53ead0) {
          if (!_0x54c84d.DYTools.arrContains(this.knifes, _0x53ead0)) {
            this.knifes.push(_0x53ead0);
          }
        },
        'removeKnife': function (_0x2d5a3e) {
          _0x54c84d.DYTools.arrRemove(this.knifes, _0x2d5a3e);
        },
        'checkGameOver': function () {
          if (!this.m_gameOver && this.mapMgr.mapOver && !(this._conEnemyArr.length > 0x0)) {
            for (var _0x53d302 in this.SnakeEnemys) if (this.SnakeEnemys[_0x53d302]) {
              return;
            }
            for (var _0x53d302 in this.CircleEnemys) if (this.CircleEnemys[_0x53d302]) {
              return;
            }
            for (var _0x53d302 in this.FireEnemys) if (this.FireEnemys[_0x53d302]) {
              return;
            }
            for (var _0x5cf31c in _0x47a308.GValue.DicBossEnemy) {
              var _0x544275 = _0x47a308.GValue.DicBossEnemy[_0x5cf31c];
              for (var _0x53d302 in _0x544275) if (_0x544275[_0x53d302]) {
                return;
              }
            }
            if (!(this.mapMgr.pauseArr.length > 0x0 || this._mapPauseData || this._bossData || this.Enemys.length > 0x0)) {
              this.player.moveTouch.touchAble = false;
              this.m_gameOver = true;
              this.setTouching(true);
              var _0x18c0fb = this;
              this.scheduleOnce(function () {
                if (_0x18c0fb.levelData.fun > 0x0) {
                  _0x18c0fb.addPanelNew(_0x18c0fb.levelData.fun);
                } else {
                  _0x18c0fb.addPanelOver(true);
                }
              }, 0.5);
            }
          }
        },
        'gamePass': function (_0x2329c2) {
          var _0x3d0302 = this;
          this.player.pickupAllKnives();
          this.addEntitySys.propNode.removeAllChildren();
          this.mapMgr.playMapEndStoneBlink();
          this.shakeSlight(function () {
            _0x3d0302.mapMgr.playMapEndStoneAct(function () {
              _0x3d0302.player.playOutMapAct();
              if (_0x2329c2) {
                _0x2329c2();
              }
            });
            _0x3d0302.gameUI.showStoneDrop();
            _0x3d0302.stoneBombShake();
          });
        },
        'addProp': function (_0x505287) {
          var _0x2d14c6 = this.addEntitySys.addProp(_0x505287);
          this.Props.push(_0x2d14c6);
          return _0x2d14c6;
        },
        'removeProp': function (_0x51ddb3) {
          _0x51ddb3.willRemove();
          _0x54c84d.DYTools.arrRemove(this.Props, _0x51ddb3);
          this.addEntitySys.removeProp(_0x51ddb3.node);
        },
        'shake': function () {
          if (_0x47a308.GValue.PlayerTouching) {
            this.gameNode.stopAllActions();
            var _0x377869 = _0x17e5a1.GConfig.actionFrameTime;
            this.gameNode.position = this.gameNodePos;
            var _0x50da14 = cc.moveTo(0x1 * _0x377869, this.gameNodePos.add(cc.v2(0x0, -0x6)));
            var _0x3e7b61 = cc.moveTo(0x2 * _0x377869, this.gameNodePos.add(cc.v2(-0x1, 0x4)));
            var _0xe79abc = cc.moveTo(0x2 * _0x377869, this.gameNodePos);
            var _0xcc4935 = cc.sequence(_0x50da14, _0x3e7b61, _0xe79abc);
            this.gameNode.runAction(_0xcc4935);
          }
        },
        'bossShake': function () {
          this.gameNode.stopAllActions();
          var _0x4426b0 = _0x17e5a1.GConfig.actionFrameTime;
          this.gameNode.position = this.gameNodePos;
          var _0x196bed = cc.moveTo(0x1 * _0x4426b0, this.gameNodePos.add(cc.v2(0x0, 0x2)));
          var _0x418a77 = cc.moveTo(0x2 * _0x4426b0, this.gameNodePos);
          var _0x61ca61 = cc.sequence(_0x196bed, _0x418a77);
          this.gameNode.runAction(_0x61ca61);
        },
        'stoneBombShake': function () {
          this.gameNode.stopAllActions();
          var _0x1c0640 = _0x17e5a1.GConfig.actionFrameTime;
          this.gameNode.position = this.gameNodePos;
          var _0xb16d4 = cc.moveTo(0x1 * _0x1c0640, this.gameNodePos.add(cc.v2(0x0, -0xa)));
          var _0x3c64d1 = cc.moveTo(0x2 * _0x1c0640, this.gameNodePos.add(cc.v2(0x0, 0x7)));
          var _0x808b14 = cc.moveTo(0x1 * _0x1c0640, this.gameNodePos.add(cc.v2(-0x8, -0x9)));
          var _0x455e2f = cc.moveTo(0x1 * _0x1c0640, this.gameNodePos.add(cc.v2(0x5, 0x5)));
          var _0x558f51 = cc.moveTo(0x1 * _0x1c0640, this.gameNodePos.add(cc.v2(-0x4, -0x7)));
          var _0x5ad4b9 = cc.moveTo(0x2 * _0x1c0640, this.gameNodePos.add(cc.v2(0x0, 0x4)));
          var _0x5dedaf = cc.moveTo(0x2 * _0x1c0640, this.gameNodePos);
          var _0x59f892 = cc.sequence(_0xb16d4, _0x3c64d1, _0x808b14, _0x455e2f, _0x558f51, _0x5ad4b9, _0x5dedaf);
          this.gameNode.runAction(_0x59f892);
        },
        'shakeTimes': function (_0x57168f) {
          this.gameNode.stopAllActions();
          var _0x210620 = _0x17e5a1.GConfig.actionFrameTime;
          this.gameNode.position = this.gameNodePos;
          var _0x750dfd = cc.moveTo(0x1 * _0x210620, this.gameNodePos.add(cc.v2(0x0, 0xa)));
          var _0x3a9bb9 = cc.moveTo(0x2 * _0x210620, this.gameNodePos);
          var _0x4f9818 = cc.sequence(_0x750dfd, _0x3a9bb9);
          var _0x1d24a6 = cc.repeat(_0x4f9818, _0x57168f);
          this.gameNode.runAction(_0x1d24a6);
        },
        'shakeSlight': function (_0x266afb) {
          this.gameNode.stopAllActions();
          var _0x5a07ea = _0x17e5a1.GConfig.actionFrameTime;
          this.gameNode.position = this.gameNodePos;
          var _0x5a0992 = cc.moveTo(0x2 * _0x5a07ea, this.gameNodePos.add(cc.v2(0x0, -0x2)));
          var _0x24a01e = cc.moveTo(0x1 * _0x5a07ea, this.gameNodePos);
          var _0x571056 = cc.repeat(cc.sequence(_0x5a0992, _0x24a01e), 0xa);
          var _0x38019f = cc.callFunc(function () {
            if (_0x266afb) {
              _0x266afb();
            }
          });
          var _0x64f3cb = cc.sequence(_0x571056, _0x38019f);
          this.gameNode.runAction(_0x64f3cb);
        },
        'isReviveAble': function () {
          var _0x545513 = this.levelData.reviveCount > this.reviveCount;
          if (_0x545513) {
            if (!_0x4d8f02.TData.isFirstRevive()) {
              parseInt(_0x17e5a1.GConfig.getGbData(_0x36558b.Enum_Gb.ReviveFree));
              _0x47a308.GValue.EntityWorld.curLevel;
            }
            _0x545513 = true;
          }
          return _0x545513;
        },
        'addKillCount': function () {
          this.gameUI.addKillCount();
        },
        'addPanelRevive': function (_0x17228e, _0x79344) {
          if (undefined === _0x79344) {
            _0x79344 = null;
          }
          _0x16e091.GFunc.createPrefabByName("PanelRevive", this.gameUINode, function (_0x49c859) {
            _0x49c859.create(_0x4d8f02.TData.isFirstRevive(), _0x17228e, _0x79344);
          });
        },
        'addPanelNew': function (_0x5f4a99) {
          var _0x484a0c = this;
          _0x16e091.GFunc.createPrefabByName("PanelNew", this.gameUINode, function (_0x54bdd7) {
            _0x54bdd7.create(_0x5f4a99, _0x484a0c._bossPos, function () {
              _0x484a0c.addPanelOver(true);
            });
          });
        },
        'addPanelOver': function (_0x13eb26) {
          var _0x4dce61 = this;
          _0x16e091.GFunc.createPrefabByName("PanelOver", this.gameUINode, function (_0x89565c) {
            _0x89565c.create(_0x13eb26, _0x4dce61.gameUI.goldCount, parseInt(_0x17e5a1.GConfig.getGbData(_0x36558b.Enum_Gb.StagePower)));
            if (_0x4d8f02.TData.getGuideStep() < _0x36558b.Enum_GuideStep.StageOver) {
              _0x4d8f02.TData.setGuideStep(_0x36558b.Enum_GuideStep.StageOver);
            }
          });
          _0x54c84d.DYTools.stringToNumber(_0x17e5a1.GConfig.getGbData(_0x36558b.Enum_Gb.WeaponReport), _0x17e5a1.GConfig.SeparatorII);
          if (!_0x13eb26) {
            if (_0x47a308.GValue.StageFail <= 0x0) {
              _0x47a308.GValue.StageFail = this.curLevel;
              _0x47a308.GValue.StageFailCount = 0x1;
            } else if (this.curLevel == _0x47a308.GValue.StageFail) {
              _0x47a308.GValue.StageFailCount++;
            } else {
              _0x47a308.GValue.StageFail = this.curLevel;
              _0x47a308.GValue.StageFailCount = 0x1;
            }
          }
        },
        'onBtnBack': function () {
          if (_0x47a308.GValue.DDSDK) {
            _0x47a308.GValue.DDSDK.parent = null;
          }
          _0x47a308.GValue.HomeUI = null;
          cc.director.loadScene("Game");
        },
        'getRangeEnemys': function (_0x99d211, _0x34c3b0) {
          var _0xf5edd4 = [];
          var _0x3bad35 = 0x0;
          for (var _0x395cb8 = this.Enemys; _0x3bad35 < _0x395cb8.length; _0x3bad35++) {
            var _0x15d04e = (_0x34a04d = _0x395cb8[_0x3bad35]).node.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
            var _0x1c119f = _0x34c3b0 + (_0x34a04d.radius ? _0x34a04d.radius : 0x0);
            if (_0x54c84d.DYTools.isNumberDiffRange(_0x99d211.x, _0x15d04e.x, _0x1c119f) && _0x54c84d.DYTools.isNumberDiffRange(_0x99d211.y, _0x15d04e.y, _0x34c3b0)) {
              _0xf5edd4.push(_0x34a04d);
            }
          }
          for (var _0x526dfd in this.SnakeEnemys) {
            _0x15d04e = (_0x34a04d = this.SnakeEnemys[_0x526dfd]).node_tail.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
            if (_0x54c84d.DYTools.isNumberDiffRange(_0x99d211.x, _0x15d04e.x, _0x34c3b0) && _0x54c84d.DYTools.isNumberDiffRange(_0x99d211.y, _0x15d04e.y, _0x34c3b0)) {
              _0xf5edd4.push(_0x34a04d);
            }
          }
          for (var _0x526dfd in this.CircleEnemys) {
            var _0x17eaf6 = (_0x1f28c7 = this.CircleEnemys[_0x526dfd]).dic_node;
            for (var _0x38f976 in _0x17eaf6) {
              var _0xff3ea2 = _0x17eaf6[_0x38f976];
              var _0x34a04d = _0xff3ea2.getComponent(_0x2041ec);
              if (_0xff3ea2) {
                _0x1c119f = _0x34c3b0 + (_0x34a04d.radius ? _0x34a04d.radius : 0x0);
                _0x15d04e = _0xff3ea2.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
                if (_0x54c84d.DYTools.isNumberDiffRange(_0x99d211.x, _0x15d04e.x, _0x1c119f) && _0x54c84d.DYTools.isNumberDiffRange(_0x99d211.y, _0x15d04e.y, _0x34c3b0)) {
                  _0xf5edd4.push(_0x34a04d);
                }
              }
            }
          }
          for (var _0x526dfd in this.FireEnemys) {
            _0x34a04d = this.FireEnemys[_0x526dfd];
            if (_0x34a04d.isDead) {
              _0x15d04e = _0x34a04d.node_collider.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
              _0x1c119f = _0x34c3b0 + (_0x34a04d.radius ? _0x34a04d.radius : 0x0);
              if (_0x54c84d.DYTools.isNumberDiffRange(_0x99d211.x, _0x15d04e.x, _0x1c119f) && _0x54c84d.DYTools.isNumberDiffRange(_0x99d211.y, _0x15d04e.y, _0x1c119f)) {
                _0xf5edd4.push(_0x34a04d);
              }
            }
          }
          for (var _0x382f0a in _0x47a308.GValue.DicBossEnemy) {
            var _0x45a82a = _0x47a308.GValue.DicBossEnemy[_0x382f0a];
            for (var _0x526dfd in _0x45a82a) {
              var _0x1f28c7 = _0x45a82a[_0x526dfd];
              _0xf5edd4.push(_0x1f28c7.getListDWLasterTarget());
            }
          }
          return _0xf5edd4;
        },
        'getNeareastEnemys': function (_0x411a91, _0x713973, _0x3c811d) {
          var _0x306670 = [];
          var _0x3b5f55 = [];
          for (var _0x1dfa63 = 0x0; _0x1dfa63 < _0x411a91.length; _0x1dfa63++) {
            var _0x36557d = _0x411a91[_0x1dfa63];
            var _0x358881 = cc.Vec2.ZERO;
            var _0x5d67d7 = _0x36557d.radius ? _0x36557d.radius : 0x0;
            _0x358881 = _0x36557d.isSnake ? _0x36557d.node_tail.convertToWorldSpaceAR(cc.Vec2.ZERO) : _0x36557d.isFire ? _0x36557d.node_collider.convertToWorldSpaceAR(cc.Vec2.ZERO) : _0x36557d.node.convertToWorldSpaceAR(cc.Vec2.ZERO);
            var _0x19db48 = _0x713973.sub(_0x358881).mag() - _0x5d67d7;
            _0x36557d.isFire;
            if (_0x306670.length < _0x3c811d) {
              _0x306670.push(_0x36557d);
              _0x3b5f55.push(_0x19db48);
              _0x3b5f55.sort(function (_0x479d0f, _0xa0eaff) {
                return _0x479d0f - _0xa0eaff;
              });
            } else if (_0x19db48 < _0x3b5f55[0x0]) {
              _0x306670[0x0] = _0x36557d;
              _0x3b5f55[0x0] = _0x19db48;
              _0x3b5f55.sort(function (_0x1ffe96, _0x1e685c) {
                return _0x1ffe96 - _0x1e685c;
              });
            }
          }
          return _0x306670;
        },
        'getFarthestEnemys': function (_0x273af2, _0x11ae8f, _0x105642) {
          var _0x433ae3 = [];
          var _0x8d1822 = [];
          for (var _0x2c7122 = 0x0; _0x2c7122 < _0x273af2.length; _0x2c7122++) {
            var _0x44d509 = _0x273af2[_0x2c7122];
            var _0xec706a = cc.Vec2.ZERO;
            var _0x454f8f = _0x44d509.radius ? _0x44d509.radius : 0x0;
            _0xec706a = _0x44d509.isSnake ? _0x44d509.node_tail.convertToWorldSpaceAR(cc.Vec2.ZERO) : _0x44d509.isFire ? _0x44d509.node_collider.convertToWorldSpaceAR(cc.Vec2.ZERO) : _0x44d509.node.convertToWorldSpaceAR(cc.Vec2.ZERO);
            var _0x4384d8 = _0x11ae8f.sub(_0xec706a).mag() - _0x454f8f;
            if (_0x433ae3.length < _0x105642) {
              _0x433ae3.push(_0x44d509);
              _0x8d1822.push(_0x4384d8);
              _0x8d1822.sort(function (_0x36b914, _0x47589c) {
                return _0x47589c - _0x36b914;
              });
            } else if (_0x4384d8 > _0x8d1822[0x0]) {
              _0x433ae3[0x0] = _0x44d509;
              _0x8d1822[0x0] = _0x4384d8;
              _0x8d1822.sort(function (_0x418d14, _0x51aa05) {
                return _0x51aa05 - _0x418d14;
              });
            }
          }
          return _0x433ae3;
        },
        'getRangeEnemysForMap': function (_0x574aee, _0x34df96) {
          var _0x2fd1d4 = [];
          var _0x4ccf81 = 0x0;
          for (var _0x15853c = this.Enemys; _0x4ccf81 < _0x15853c.length; _0x4ccf81++) {
            var _0x3f3159 = _0x15853c[_0x4ccf81];
            var _0x4704d8 = _0x3f3159.node.position;
            if (_0x54c84d.DYTools.isNumberDiffRange(_0x574aee.x, _0x4704d8.x, _0x34df96) && _0x54c84d.DYTools.isNumberDiffRange(_0x574aee.y, _0x4704d8.y, _0x34df96)) {
              _0x2fd1d4.push(_0x3f3159);
            }
          }
          return _0x2fd1d4;
        },
        'getNeareastEnemysForMap': function (_0x2d7e2f, _0x4798bb, _0x4a8d8d) {
          var _0x4bc590 = [];
          var _0x550dc4 = [];
          for (var _0x3fe6e7 = 0x0; _0x3fe6e7 < _0x2d7e2f.length; _0x3fe6e7++) {
            var _0x48a24d = _0x2d7e2f[_0x3fe6e7];
            var _0x5229be = cc.Vec2.ZERO;
            if (_0x48a24d.isSnake) {
              _0x5229be = _0x48a24d.node_tail.position.add(_0x48a24d.node.position);
            } else {
              if (_0x48a24d.isFullBlood()) {
                continue;
              }
              _0x5229be = _0x48a24d.node.convertToWorldSpaceAR(cc.Vec2.ZERO);
              _0x5229be = this.addEntitySys.enemyNode.convertToNodeSpaceAR(_0x5229be);
            }
            var _0x180944 = _0x4798bb.sub(_0x5229be).magSqr();
            if (_0x4bc590.length < _0x4a8d8d) {
              _0x4bc590.push(_0x48a24d);
              _0x550dc4.push(_0x180944);
              _0x550dc4.sort(function (_0xfbdfd2, _0x4eff58) {
                return _0xfbdfd2 - _0x4eff58;
              });
            } else if (_0x180944 < _0x550dc4[0x0]) {
              _0x4bc590[0x0] = _0x48a24d;
              _0x550dc4[0x0] = _0x180944;
              _0x550dc4.sort(function (_0x52a166, _0x4d66d8) {
                return _0x52a166 - _0x4d66d8;
              });
            }
          }
          return _0x4bc590;
        },
        'getSkinColor': function (_0x2a47dc) {
          var _0x442419;
          var _0x29249c = this.enemyColorBlood;
          var _0x2ead59 = _0x47a308.GValue.EnemyColorBloodPercent;
          var _0x53dfee = _0x17e5a1.GConfig.colorArr;
          if (_0x2a47dc <= this.enemyColorBlood[0x0]) {
            return _0x53dfee[0x0];
          }
          if (_0x2a47dc <= this.enemyColorBlood[0x1]) {
            if ((_0x29249c[0x1] - _0x29249c[0x0]) * _0x2ead59 + _0x29249c[0x0] < _0x2a47dc) {
              return _0x53dfee[0x1];
            }
            var _0x3fb3d4 = (_0x442419 = this.enemyColorParam[0x0])[0x0] * _0x2a47dc + _0x442419[0x1];
            var _0x561f70 = _0x442419[0x2] * _0x2a47dc + _0x442419[0x3];
            var _0x1b7f90 = _0x442419[0x4] * _0x2a47dc + _0x442419[0x5];
            return cc.color(_0x3fb3d4, _0x561f70, _0x1b7f90);
          }
          return _0x2a47dc <= this.enemyColorBlood[0x2] ? (_0x29249c[0x2] - _0x29249c[0x1]) * _0x2ead59 + _0x29249c[0x1] < _0x2a47dc ? _0x53dfee[0x2] : (_0x3fb3d4 = (_0x442419 = this.enemyColorParam[0x1])[0x0] * _0x2a47dc + _0x442419[0x1], _0x561f70 = _0x442419[0x2] * _0x2a47dc + _0x442419[0x3], _0x1b7f90 = _0x442419[0x4] * _0x2a47dc + _0x442419[0x5], cc.color(_0x3fb3d4, _0x561f70, _0x1b7f90)) : _0x2a47dc <= this.enemyColorBlood[0x3] ? (_0x29249c[0x3] - _0x29249c[0x2]) * _0x2ead59 + _0x29249c[0x2] < _0x2a47dc ? _0x53dfee[0x3] : (_0x3fb3d4 = (_0x442419 = this.enemyColorParam[0x2])[0x0] * _0x2a47dc + _0x442419[0x1], _0x561f70 = _0x442419[0x2] * _0x2a47dc + _0x442419[0x3], _0x1b7f90 = _0x442419[0x4] * _0x2a47dc + _0x442419[0x5], cc.color(_0x3fb3d4, _0x561f70, _0x1b7f90)) : _0x2a47dc <= this.enemyColorBlood[0x4] ? (_0x29249c[0x4] - _0x29249c[0x3]) * _0x2ead59 + _0x29249c[0x3] < _0x2a47dc ? _0x53dfee[0x4] : (_0x3fb3d4 = (_0x442419 = this.enemyColorParam[0x3])[0x0] * _0x2a47dc + _0x442419[0x1], _0x561f70 = _0x442419[0x2] * _0x2a47dc + _0x442419[0x3], _0x1b7f90 = _0x442419[0x4] * _0x2a47dc + _0x442419[0x5], cc.color(_0x3fb3d4, _0x561f70, _0x1b7f90)) : (_0x29249c[0x5] - _0x29249c[0x4]) * _0x2ead59 + _0x29249c[0x4] < _0x2a47dc ? _0x53dfee[0x5] : (_0x3fb3d4 = (_0x442419 = this.enemyColorParam[0x4])[0x0] * _0x2a47dc + _0x442419[0x1], _0x561f70 = _0x442419[0x2] * _0x2a47dc + _0x442419[0x3], _0x1b7f90 = _0x442419[0x4] * _0x2a47dc + _0x442419[0x5], cc.color(_0x3fb3d4, _0x561f70, _0x1b7f90));
        },
        'playGoldFlyEffect': function (_0x4cfe03, _0x206306, _0x15199f) {
          this.gameUI.playGoldFlyEffect(_0x4cfe03, _0x206306, _0x15199f);
        },
        'playerKnifeColKniveEffect': function (_0x1ec9ca) {
          this.knifeColIndex++;
          if (this.knifeColIndex % 0x2 == 0x1) {
            _0x32557a.GAudio.playSound(_0x32557a.Enum_Audio.rival + _0x54c84d.DYTools.random_int(0x1, 0x8));
          }
          var _0x26d4bc = _0x1ec9ca[0x0].parent.convertToWorldSpaceAR(_0x1ec9ca[0x0].position);
          var _0x10f9ae = _0x1ec9ca[0x1].parent.convertToWorldSpaceAR(_0x1ec9ca[0x1].position);
          var _0x2617f2 = cc.v2((_0x26d4bc.x + _0x10f9ae.x) / 0x2, (_0x26d4bc.y + _0x10f9ae.y) / 0x2);
          this.addEntitySys.addCollisionEffect(_0x2617f2);
        },
        'getContinueEnemyRect': function (_0x5464a4) {
          var _0x4e8c98 = cc.rect();
          switch (this.mapMgr.curDirTag) {
            case 0x1:
              _0x4e8c98 = cc.rect(_0x5464a4.x, _0x47a308.GValue.Size_View.height + 0x64, _0x5464a4.width, 0x0);
              break;
            case 0x2:
              _0x4e8c98 = cc.rect(_0x5464a4.x, -0x64, _0x5464a4.width, 0x0);
              break;
            case 0x3:
              _0x4e8c98 = cc.rect(-0x64, _0x5464a4.y, 0x0, _0x5464a4.height);
              break;
            case 0x4:
              _0x4e8c98 = cc.rect(_0x47a308.GValue.Size_View.width + 0x64, _0x5464a4.y, 0x0, _0x5464a4.height);
          }
          return _0x4e8c98;
        }
      });
      cc._RF.pop();
    }, {
      'CollisionEventManager': "CollisionEventManager",
      'CommonAudio': "CommonAudio",
      'CommonConfig': 'CommonConfig',
      'CommonEnum': "CommonEnum",
      'CommonFunc': 'CommonFunc',
      'CommonSdk': "CommonSdk",
      'CommonValue': "CommonValue",
      'ConfigData': "ConfigData",
      'EntityEnemy': 'EntityEnemy',
      'GameData': 'GameData',
      'GuideUI': "GuideUI",
      'HomeUI': "HomeUI",
      'PropManager': 'PropManager',
      'Tools': "Tools",
      'Types': "Types"
    }],
    'CGameRuleSystem': [function (_0x30f26d, _0x3f92b5, _0x32ed83) {
      'use strict';
  
      cc._RF.push(_0x3f92b5, "0343fQCg/hPs71gEHTHfyCN", "CGameRuleSystem");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this._countDownTime = 0x63;
          this.players = [];
          this._gameOverFunc = null;
          this._localPlayer = null;
          this._allDead = false;
          this._reviveFunc = null;
          this.isGameOver = false;
          this.isRevive = false;
        },
        'init': function (_0x237231, _0xea061c, _0x1db6d1, _0x23032a, _0x20e87f) {
          this._gameOverFunc = _0x237231;
          this._localPlayer = _0xea061c;
          for (var _0x429afb = 0x0; _0x429afb < _0x1db6d1.length; _0x429afb++) {
            var _0x59029d = _0x1db6d1[_0x429afb];
            this.players.push(_0x59029d);
          }
          this._countDownTime = _0x23032a;
          this._allDead = false;
          this._reviveFunc = _0x20e87f;
        },
        'updateGameLogic': function (_0x374182) {
          if (!this.isGameOver) {
            this._countDownTime -= _0x374182;
            if (this._countDownTime <= 0x0) {
              this.onGameOver();
            } else {
              if (!this._localPlayer.firstDead || this.isRevive) {
                if (this._localPlayer.isDead) {
                  this.onGameOver();
                } else {
                  this._allDead = true;
                  var _0x1acd2a = 0x0;
                  for (var _0x3ab546 = this.players; _0x1acd2a < _0x3ab546.length; _0x1acd2a++) {
                    var _0x18fd25 = _0x3ab546[_0x1acd2a];
                    if (!_0x18fd25.isLocal && !_0x18fd25.isDead) {
                      this._allDead = false;
                      break;
                    }
                  }
                  if (this._allDead) {
                    this.onGameOver();
                  }
                }
              } else {
                this.onRevive();
              }
            }
          }
        },
        'onGameOver': function () {
          if (this._gameOverFunc) {
            this._gameOverFunc();
            this._gameOverFunc = null;
            this.isGameOver = true;
          }
        },
        'onRevive': function () {
          if (this._reviveFunc) {
            this._reviveFunc();
            this.isRevive = true;
          }
        },
        'onContinue': function () {
          this.isRevive = false;
        }
      });
      cc._RF.pop();
    }, {}],
    'CHMoveFix': [function (_0xbb3996, _0x19c063, _0x1f608a) {
      'use strict';
  
      cc._RF.push(_0x19c063, "98e86jEdVND6o/ukHanEV3G", 'CHMoveFix');
      var _0x4eaaff = _0xbb3996("Tools");
      var _0x3f37ec = _0xbb3996("CommonValue");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this._collider = null;
          this._collisionBlocks = [];
          this._fixDir = null;
          this._minX = null;
          this._maxX = null;
          this._minY = null;
          this._maxY = null;
          this._collisionFix = [];
          this._offset = 0x4;
          this._curCollisionWall = [];
          this._minViewX = 0x0;
          this._maxViewX = 0x0;
          this._minViewY = 0x0;
          this._maxViewY = 0x0;
          this._radius = 0x0;
        },
        'onLoad': function () {
          this.node.on('fixByBlock', this.fixByBlock, this);
          this.node.on("wallCollision", this.collisionWall, this);
          this.node.on("wallLeave", this.leaveWall, this);
        },
        'init': function (_0x1bc11f) {
          this._collider = _0x1bc11f;
          this._radius = this._collider.radius * this._collider.node.parent.scale;
          this._minViewX = this._radius;
          this._maxViewX = _0x3f37ec.GValue.Size_View.width - this._radius;
          this._minViewY = this._radius;
          this._maxViewY = _0x3f37ec.GValue.Size_View.height - this._radius;
        },
        'updateGameLogic': function (_0x3166ca) {
          if (!_0x3f37ec.GValue.EntityWorld.m_gameOver && this._collider) {
            this.fixPositionByWall();
            this.fixPositionByScreen();
            this.reset();
          }
        },
        'fixByBlock': function (_0x488bf3) {
          if (!_0x4eaaff.DYTools.arrContains(this._collisionBlocks, _0x488bf3)) {
            this._collisionBlocks.push(_0x488bf3);
          }
        },
        'fixPositionByScreen': function () {
          var _0x27ef53 = this.node.position.mul(_0x3f37ec.GValue.MapScale);
          var _0x357adf = 0x0;
          var _0x266dea = 0x0;
          var _0x2d9a3b = false;
          var _0x48629a = false;
          if (_0x27ef53.x < this._minViewX) {
            _0x357adf = this._minViewX - _0x27ef53.x;
            _0x2d9a3b = true;
          } else if (_0x27ef53.x > this._maxViewX) {
            _0x357adf = this._maxViewX - _0x27ef53.x;
            _0x2d9a3b = true;
          }
          if (_0x27ef53.y < this._minViewY) {
            _0x266dea = this._minViewY - _0x27ef53.y;
            _0x48629a = true;
          } else if (_0x27ef53.y > this._maxViewY) {
            _0x266dea = this._maxViewY - _0x27ef53.y;
            _0x48629a = true;
          }
          if (_0x2d9a3b || _0x48629a) {
            this.node.position = _0x27ef53.add(cc.v2(_0x357adf, _0x266dea)).mul(0x1 / _0x3f37ec.GValue.MapScale);
          }
        },
        'fixPositionByWall': function () {
          if (0x0 != this._curCollisionWall.length) {
            for (var _0x22f419 = 0x0; _0x22f419 < this._curCollisionWall.length; _0x22f419++) {
              var _0x14b070 = this._curCollisionWall[_0x22f419];
              var _0x274f68 = this._collider;
              var _0xc0f161 = _0x14b070.node.parent;
              var _0x1b7578 = this.node.parent;
              var _0x1babd7 = _0xc0f161.position.add(_0x3f37ec.GValue.EntityWorld.mapMgr.mapTop.position);
              switch (_0x14b070.tag) {
                case 0x0:
                  var _0x1e3b4a = _0x14b070.size.height;
                  this._maxY = _0x1babd7.y - _0x14b070.offset.y - 0.5 * _0x1e3b4a - _0x274f68.radius * _0x274f68.node.parent.scale + this._offset;
                  if (this.node.y > this._maxY) {
                    this.node.y = this._maxY;
                  }
                  break;
                case 0x1:
                  _0x1e3b4a = _0x14b070.size.height;
                  this._minY = _0x1babd7.y + _0x14b070.offset.y + 0.5 * _0x1e3b4a + _0x274f68.radius * _0x274f68.node.parent.scale - this._offset;
                  if (this.node.y < this._minY) {
                    this.node.y = this._minY;
                  }
                  break;
                case 0x2:
                  _0x1e3b4a = _0x14b070.size.height;
                  this._minX = _0x1babd7.x + _0x14b070.offset.y + 0.5 * _0x1e3b4a + _0x274f68.radius * _0x274f68.node.parent.scale - this._offset;
                  if (this.node.x < this._minX) {
                    this.node.x = this._minX;
                  }
                  break;
                case 0x3:
                  _0x1e3b4a = _0x14b070.size.height;
                  this._maxX = _0x1babd7.x - _0x14b070.offset.y - 0.5 * _0x1e3b4a - _0x274f68.radius * _0x274f68.node.parent.scale + this._offset;
                  if (this.node.x > this._maxX) {
                    this.node.x = this._maxX;
                  }
                  break;
                case 0x4:
                  _0x1babd7 = _0x1babd7.add(_0x14b070.node.position);
                  if ((_0x2bb2cc = (_0x210dfc = this.node.position.sub(_0x1babd7)).mag()) < (_0x5daccc = this._radius + _0x14b070.radius - this._offset)) {
                    var _0x2a0c96 = _0x210dfc.x / _0x2bb2cc;
                    var _0x5aa58e = _0x210dfc.y / _0x2bb2cc;
                    var _0x3b3a86 = _0x1babd7.add(cc.v2(_0x5daccc * _0x2a0c96, _0x5daccc * _0x5aa58e));
                    this.node.position = _0x3b3a86;
                  }
                  break;
                case 0x5:
                  _0x1babd7.addSelf(_0x14b070.node.position);
                  if ((_0x2bb2cc = (_0x210dfc = this.node.position.sub(_0x1babd7)).mag()) < (_0x5daccc = this._radius + _0x14b070.radius - this._offset)) {
                    _0x2a0c96 = _0x210dfc.x / _0x2bb2cc;
                    _0x5aa58e = _0x210dfc.y / _0x2bb2cc;
                    _0x3b3a86 = _0x1babd7.add(cc.v2(_0x5daccc * _0x2a0c96, _0x5daccc * _0x5aa58e));
                    this.node.position = _0x3b3a86;
                  }
                  break;
                case 0x6:
                  var _0x210dfc;
                  var _0x2bb2cc;
                  _0x1babd7 = _0x14b070.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
                  _0x1babd7 = _0x1b7578.convertToNodeSpaceAR(_0x1babd7);
                  if ((_0x2bb2cc = (_0x210dfc = this.node.position.sub(_0x1babd7)).mag()) < (_0x5daccc = this._radius + 0.5 * _0x14b070.size.width - this._offset)) {
                    _0x2a0c96 = _0x210dfc.x / _0x2bb2cc;
                    _0x5aa58e = _0x210dfc.y / _0x2bb2cc;
                    _0x3b3a86 = _0x1babd7.add(cc.v2(_0x5daccc * _0x2a0c96, _0x5daccc * _0x5aa58e));
                    this.node.position = _0x3b3a86;
                  }
                  break;
                case 0x65:
                  var _0x5daccc = _0x14b070.size.width;
                  var _0x7cc85d = _0x14b070.size.height;
                  var _0x1b1c4b = Math.abs(_0xc0f161.angle);
                  if (_0x1b1c4b > 0x50 && _0x1b1c4b < 0x64 || _0x1b1c4b > 0x104 && _0x1b1c4b < 0x118) {
                    _0x5daccc = _0x14b070.size.height;
                    _0x7cc85d = _0x14b070.size.width;
                  }
                  _0x1babd7 = _0x14b070.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
                  _0x1babd7 = this.node.parent.convertToNodeSpaceAR(_0x1babd7);
                  if (_0x4eaaff.DYTools.isNumberDiffRange(this.node.y, _0x1babd7.y, _0x7cc85d / 0x2)) {
                    if (this.node.x < _0x1babd7.x) {
                      if ((_0x3cd6a8 = _0x1babd7.x - _0x5daccc / 0x2 - this._radius + this._offset) < this.node.x) {
                        this.node.x = _0x3cd6a8;
                      }
                    } else if ((_0x3cc5b7 = _0x1babd7.x + _0x5daccc / 0x2 + this._radius - this._offset) > this.node.x) {
                      this.node.x = _0x3cc5b7;
                    }
                  } else {
                    if (_0x4eaaff.DYTools.isNumberDiffRange(this.node.x, _0x1babd7.x, _0x5daccc / 0x2)) {
                      if (this.node.y < _0x1babd7.y) {
                        if ((_0x54eeff = _0x1babd7.y - _0x7cc85d / 0x2 - this._radius + this._offset) < this.node.y) {
                          this.node.y = _0x54eeff;
                        }
                      } else if ((_0x4f5ff2 = _0x1babd7.y + _0x7cc85d / 0x2 + this._radius - this._offset) > this.node.y) {
                        this.node.y = _0x4f5ff2;
                      }
                    } else {
                      var _0xbc5119 = false;
                      var _0x5f3e38 = false;
                      var _0x4a3af5 = Math.abs(_0x5daccc / 0x2 + this._radius) - Math.abs(this.node.x - _0x1babd7.x);
                      var _0x1da949 = Math.abs(_0x7cc85d / 0x2 + this._radius) - Math.abs(this.node.y - _0x1babd7.y);
                      if (_0x4eaaff.DYTools.isNumberDiffRange(_0x4a3af5, _0x1da949, this._offset)) {
                        _0xbc5119 = true;
                        _0x5f3e38 = true;
                      } else if (_0x4a3af5 < _0x1da949) {
                        _0xbc5119 = true;
                      } else if (_0x4a3af5 > _0x1da949) {
                        _0x5f3e38 = true;
                      }
                      var _0x212698 = this.node.position.sub(_0x1babd7);
                      if (_0x212698.x > 0x0 && _0x212698.y > 0x0) {
                        if (_0xbc5119 && (_0x3cc5b7 = _0x1babd7.x + _0x5daccc / 0x2 + this._radius - this._offset) > this.node.x) {
                          this.node.x = _0x3cc5b7;
                        }
                        if (_0x5f3e38 && (_0x4f5ff2 = _0x1babd7.y + _0x7cc85d / 0x2 + this._radius - this._offset) > this.node.y) {
                          this.node.y = _0x4f5ff2;
                        }
                      } else {
                        if (_0x212698.x > 0x0 && _0x212698.y < 0x0) {
                          var _0x3cc5b7;
                          if (_0xbc5119) {
                            if ((_0x3cc5b7 = _0x1babd7.x + _0x5daccc / 0x2 + this._radius - this._offset) > this.node.x) {
                              this.node.x = _0x3cc5b7;
                            }
                          }
                          if (_0x5f3e38 && (_0x54eeff = _0x1babd7.y - _0x7cc85d / 0x2 - this._radius + this._offset) < this.node.y) {
                            this.node.y = _0x54eeff;
                          }
                        } else {
                          if (_0x212698.x < 0x0 && _0x212698.y < 0x0) {
                            var _0x54eeff;
                            if (_0xbc5119 && (_0x3cd6a8 = _0x1babd7.x - _0x5daccc / 0x2 - this._radius + this._offset) < this.node.x) {
                              this.node.x = _0x3cd6a8;
                            }
                            if (_0x5f3e38) {
                              if ((_0x54eeff = _0x1babd7.y - _0x7cc85d / 0x2 - this._radius + this._offset) < this.node.y) {
                                this.node.y = _0x54eeff;
                              }
                            }
                          } else {
                            var _0x3cd6a8;
                            var _0x4f5ff2;
                            if (_0xbc5119) {
                              if ((_0x3cd6a8 = _0x1babd7.x - _0x5daccc / 0x2 - this._radius + this._offset) < this.node.x) {
                                this.node.x = _0x3cd6a8;
                              }
                            }
                            if (_0x5f3e38) {
                              if ((_0x4f5ff2 = _0x1babd7.y + _0x7cc85d / 0x2 + this._radius - this._offset) > this.node.y) {
                                this.node.y = _0x4f5ff2;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
              }
            }
          }
        },
        'collisionWall': function (_0xc81fc) {
          if (!_0x4eaaff.DYTools.arrContains(this._curCollisionWall, _0xc81fc)) {
            this._curCollisionWall.push(_0xc81fc);
            if (0x65 == _0xc81fc.tag) {
              this._collisionBlocks.push(_0xc81fc);
            }
          }
        },
        'leaveWall': function (_0x2dadf6) {
          _0x4eaaff.DYTools.arrRemove(this._curCollisionWall, _0x2dadf6);
          if (0x65 == _0x2dadf6.tag) {
            _0x4eaaff.DYTools.arrRemove(this._collisionBlocks, _0x2dadf6);
          }
        },
        'reset': function () {
          this._collisionBlocks = [];
          this._collisionFix = [];
          this._minX = null;
          this._maxX = null;
          this._minY = null;
          this._maxY = null;
        }
      });
      cc._RF.pop();
    }, {
      'CommonValue': "CommonValue",
      'Tools': "Tools"
    }],
    'CHMove': [function (_0x2c3e9b, _0x56a297, _0x28f887) {
      'use strict';
  
      cc._RF.push(_0x56a297, "082c76TU+BBP4zaOTAZ7EwQ", "CHMove");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.moveSpeed = 0x12c;
          this.moveSpeedRate = 0x1;
          this._moveByPos = null;
        },
        'onLoad': function () {
          this.node.on("onMoveBy", this.onMoveByKeyboard, this);
          this.node.on("onStopMoving", this.onStopMovingByKeyboard, this);
          this.node.on("changeSpeedRate", this.changeSpeedRate, this);
        },
        'set_speed': function (_0xed274) {
          this.moveSpeed = _0xed274;
        },
        'onMoveByKeyboard': function (_0x259fda) {
          this.onMoveBy(_0x259fda.dPos);
        },
        'changeSpeedRate': function (_0x1b14f3) {
          this.moveSpeedRate = _0x1b14f3;
        },
        'onStopMovingByKeyboard': function () {
          this._moveByPos = null;
        },
        'onMoveBy': function (_0x4864bd) {
          this._moveByPos = _0x4864bd;
        },
        'updateGameLogic': function (_0x49fff7) {
          this.onNodeMoveBy(_0x49fff7);
        },
        'onNodeMoveBy': function (_0x4d294f) {
          if (this._moveByPos) {
            var _0x517bb5 = this._moveByPos.normalize();
            this.node.x += this.moveSpeed * this.moveSpeedRate * _0x517bb5.x * _0x4d294f;
            this.node.y += this.moveSpeed * this.moveSpeedRate * _0x517bb5.y * _0x4d294f;
          }
        }
      });
      cc._RF.pop();
    }, {}],
    'CHRotate': [function (_0x4a84df, _0x3efc2a, _0x577897) {
      'use strict';
  
      cc._RF.push(_0x3efc2a, "6196bQplX1LK46feHnNB0te", "CHRotate");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.rotateSpeed = 0x96;
          this.isStop = false;
          this.stopKeepTime = 0.1;
          this._stopTime = 0x0;
        },
        'onLoad': function () {
          this.node.on("stopParentRotate", this.stopRotate, this);
        },
        'stopRotate': function () {
          this.isStop = true;
          this._stopTime = 0x0;
        },
        'setRotateSpeed': function (_0x220f43) {
          this.rotateSpeed = _0x220f43;
        },
        'updateGameLogic': function (_0x3fdbd9) {
          if (this.isStop) {
            if (this._stopTime < this.stopKeepTime) {
              return void (this._stopTime += _0x3fdbd9);
            }
            this.isStop = false;
          }
          this.node.angle += this.rotateSpeed * _0x3fdbd9;
        }
      });
      cc._RF.pop();
    }, {}],
    'CHeroCollisionHandleSystem': [function (_0x2f8046, _0x14bebe, _0xa93d2f) {
      'use strict';
  
      cc._RF.push(_0x14bebe, "64babaGnm5HiqktaHkNIM1m", "CHeroCollisionHandleSystem");
      var _0x323808 = _0x2f8046("CBaseCollisionHandleSystem");
      cc.Class({
        'extends': _0x323808,
        'properties': {},
        'ctor': function () {
          this._eventListName = '_heroCollisionEvent';
        },
        'handelCollisionEvent': function (_0x1df73c) {
          var _0xd74074 = _0x1df73c[0x0];
          var _0xcc4fae = _0x1df73c[0x1];
          if (_0xd74074 && _0xd74074.node) {
            switch (_0xd74074.node.group) {
              case 'otherKnife':
                if (_0xd74074.tag === _0xcc4fae.tag || 0x0 === _0xd74074.tag) {
                  return;
                }
                _0xcc4fae.node.emit('emitEvent', ['dieByKnife', _0xd74074]);
                break;
              case "block":
                break;
              case "enemy":
                var _0xab3a9 = _0xd74074.node.parent.getComponent("EntityEnemy");
                _0xcc4fae.node.emit("emitEvent", ["die", _0xab3a9]);
                break;
              case "prop":
                _0xcc4fae.node.emit("emitEvent", ["prop", _0xd74074]);
            }
          }
        },
        'updateGameLogic': function (_0x235a43) {
          _0x323808.prototype.updateGameLogic.call(this, _0x235a43);
          this._collisionEventMgr.clearHeroEvent();
        }
      });
      cc._RF.pop();
    }, {
      'CBaseCollisionHandleSystem': "CBaseCollisionHandleSystem"
    }],
    'CHeroCollisionWallListener': [function (_0xc317c2, _0x174e25, _0x57031b) {
      'use strict';
  
      cc._RF.push(_0x174e25, "5b318bCPX9LL7MLlm+4kQAm", "CHeroCollisionWallListener");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this._wallCollisionCount = 0x0;
        },
        'onLoad': function () {},
        'radiusChange': function (_0x40e001) {},
        'onCollisionExit': function (_0x1be20d, _0x9ee71c) {
          if (!(0x4 != _0x1be20d.node.groupIndex && 0xa != _0x1be20d.node.groupIndex)) {
            this._wallCollisionCount--;
            this.noticeWallLeave(_0x1be20d);
          }
        },
        'onCollisionEnter': function (_0xb42a24, _0x4d8e38) {
          if (!(0x4 != _0xb42a24.node.groupIndex && 0xa != _0xb42a24.node.groupIndex)) {
            this.noticeWallCollision(_0xb42a24);
            this._wallCollisionCount++;
          }
        },
        'noticeWallCollision': function (_0x52111a) {
          this.node.parent.emit('wallCollision', _0x52111a);
        },
        'noticeWallLeave': function (_0x2ecfa4) {
          this.node.parent.emit("wallLeave", _0x2ecfa4);
        }
      });
      cc._RF.pop();
    }, {}],
    'CHeroKnifeCollisionWallListener': [function (_0xc43757, _0x29fe95, _0x17376e) {
      'use strict';
  
      cc._RF.push(_0x29fe95, "4ccd3hXjJZII60GCIMzLC3+", "CHeroKnifeCollisionWallListener");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.collider = null;
          this._wallCollisionCount = 0x0;
        },
        'onLoad': function () {
          this.collider = this.node.getComponent(cc.CircleCollider);
          this.node.on("radiusChange", this.radiusChange, this);
        },
        'radiusChange': function (_0x53f536) {
          if (this.collider) {
            this.collider.radius = _0x53f536;
          }
        },
        'onCollisionExit': function () {
          this._wallCollisionCount--;
          if (0x0 === this._wallCollisionCount) {
            this.noticeWallCollision(false);
          }
        },
        'onCollisionEnter': function () {
          if (0x0 === this._wallCollisionCount) {
            this.noticeWallCollision(true);
          }
          this._wallCollisionCount++;
        },
        'noticeWallCollision': function (_0x3173e9) {
          this.node.emit("wallCollision", _0x3173e9);
        }
      });
      cc._RF.pop();
    }, {}],
    'CKnifeColliderListener': [function (_0x4beab2, _0x1ebf52, _0x4a2292) {
      'use strict';
  
      cc._RF.push(_0x1ebf52, "a820612P/FEWITaDjrYO1g4", "CKnifeColliderListener");
      var _0x159af7 = _0x4beab2("Types");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {},
        'onLoad': function () {
          this.node.on("onPickUpKnife", this.onPickUpKnife, this);
          this.node.on("throwKnife", this.throwKnife, this);
        },
        'throwKnife': function (_0x35a14c) {
          this.node.emit('changeTag', _0x35a14c);
          this.node.emit("noticeOwnerLeave");
          this.node.emit("updateState", _0x159af7.KnifeState.Release);
          this.node.emit("stopResetPos");
        },
        'onPickUpKnife': function (_0x4647fe) {
          this.node.emit("changeTag", _0x4647fe.tag);
          this.node.emit("updateState", _0x159af7.KnifeState.Capture);
          this.node.emit("stopResetPos");
          this.node.emit('changeKnifeAttackGroup', "knife");
          _0x4647fe.node.emit("emitEvent", ["addKnife", this.node]);
        }
      });
      cc._RF.pop();
    }, {
      'Types': "Types"
    }],
    'CKnifeColliderNodeCtrl': [function (_0x58ec92, _0x5f1cdf, _0x39e8ab) {
      'use strict';
  
      cc._RF.push(_0x5f1cdf, "0789dvC569Nr7Pb5b3AFpoE", 'CKnifeColliderNodeCtrl');
      var _0xc943d9 = _0x58ec92('Types');
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.attackNode = null;
          this.rivalNode = null;
          this.knifeStateComp = null;
          this.isOut = true;
        },
        'init': function (_0x4ca77e, _0xdf44f2, _0x3bd2db) {
          if (undefined === _0x3bd2db) {
            _0x3bd2db = true;
          }
          this.attackNode = _0x4ca77e;
          this.rivalNode = _0xdf44f2;
          this.knifeStateComp = this.node.getComponent('CKnifeStateComponent');
          this.isOut = _0x3bd2db;
          if (!this.isOut) {
            this.rivalNode.active = false;
          }
        },
        'throwKnifeStart': function () {
          this.attackNode.active = false;
          this.rivalNode.active = false;
        },
        'pickKnife': function () {
          this.attackNode.active = true;
          if (this.isOut) {
            this.rivalNode.active = true;
          }
        },
        'updateLogic': function (_0x399187) {
          if (!this.knifeStateComp) {
            this.knifeStateComp = this.node.getComponent("CKnifeStateComponent");
          }
          if (this.knifeStateComp.isDirty) {
            switch (this.knifeStateComp.state) {
              case _0xc943d9.KnifeState.Capture:
              case _0xc943d9.KnifeState.Init:
                this.pickKnife();
                break;
              case _0xc943d9.KnifeState.Release:
                this.throwKnifeStart();
                break;
              case _0xc943d9.KnifeState.Normal:
                this.throwKnifeFinish();
            }
          }
        },
        'throwKnifeFinish': function () {
          this.attackNode.active = false;
          this.rivalNode.active = false;
        }
      });
      cc._RF.pop();
    }, {
      'Types': "Types"
    }],
    'CKnifeCollisionHandleSystem': [function (_0x3b7eef, _0x77eec, _0x3b233d) {
      'use strict';
  
      cc._RF.push(_0x77eec, '90db5cdN7ZGT4XZToskvI4j', "CKnifeCollisionHandleSystem");
      var _0x36bee4 = _0x3b7eef('CBaseCollisionHandleSystem');
      var _0x45ed69 = _0x3b7eef("Types");
      var _0x34d396 = _0x3b7eef("CommonValue");
      var _0x523ccb = _0x3b7eef("CommonEnum");
      var _0x426117 = _0x3b7eef("CommonFunc");
      cc.Class({
        'extends': _0x36bee4,
        'properties': {},
        'ctor': function () {
          this._eventListName = "_knifeCollisionEvent";
        },
        'handelCollisionEvent': function (_0xf3433d) {
          var _0x42f7ca = _0xf3433d[0x0];
          var _0x56374c = _0xf3433d[0x1];
          if (_0x42f7ca && _0x42f7ca.node) {
            switch (_0x42f7ca.node.group) {
              case "enemy":
                if (_0x56374c.tag <= 0x0) {
                  return;
                }
                if (_0x42f7ca.tag == _0x523ccb.E_CTag.Boss_SnakeTail) {
                  var _0x20db54 = _0x42f7ca.name;
                  if (_0x4191ed = _0x34d396.GValue.EntityWorld.SnakeEnemys[_0x20db54]) {
                    _0x4191ed.attackTail(0x0, _0x34d396.GValue.EntityWorld.player.curAttack);
                  }
                } else {
                  if (_0x42f7ca.tag >= _0x523ccb.E_CTag.Boss_SnakeHead && _0x42f7ca.tag < _0x523ccb.E_CTag.Boss_SnakeTail) {
                    var _0x4191ed;
                    _0x20db54 = _0x42f7ca.name;
                    if (_0x4191ed = _0x34d396.GValue.EntityWorld.SnakeEnemys[_0x20db54]) {
                      _0x4191ed.attackBody(0x0, _0x42f7ca.tag, _0x56374c.node);
                    }
                  } else {
                    if (_0x42f7ca.tag == _0x523ccb.E_CTag.Boss_Fire) {
                      _0x20db54 = _0x42f7ca.name;
                      var _0x2c7384 = _0x34d396.GValue.EntityWorld.FireEnemys[_0x20db54];
                      if (_0x2c7384) {
                        _0x2c7384.attack(0x0, _0x34d396.GValue.EntityWorld.player.curAttack);
                      }
                    } else {
                      if (_0x42f7ca.tag >= _0x523ccb.E_CTag.Boss_ElectrHead && _0x42f7ca.tag < _0x523ccb.E_CTag.Boss_ElectrLine) {
                        _0x20db54 = _0x42f7ca.name;
                        var _0x562e77 = _0x426117.GFunc.getBossCom(_0x45ed69.BossType.Electr, _0x20db54);
                        if (_0x562e77) {
                          _0x562e77.attack(0x0, _0x34d396.GValue.EntityWorld.player.curAttack, _0x42f7ca.tag);
                        }
                      }
                    }
                  }
                }
                this.attackEnemy(_0x42f7ca, _0x56374c);
                break;
              case 'wall':
                if (_0x56374c.tag >= 0x0) {
                  return;
                }
                var _0x449ce8 = 0x0;
                switch (_0x42f7ca.tag) {
                  case 0x0:
                    _0x449ce8 = 0xb4;
                    break;
                  case 0x1:
                    _0x449ce8 = 0x0;
                    break;
                  case 0x2:
                    _0x449ce8 = 0x5a;
                    break;
                  case 0x3:
                    _0x449ce8 = 0x10e;
                }
                _0x56374c.node.emit("emitEvent", ["fixByWall", [_0x42f7ca, _0x449ce8, _0x56374c.size.height]]);
                break;
              case 'otherKnife':
                if (_0x56374c.tag < 0x0 || _0x42f7ca.tag < 0x0 || _0x56374c.tag === _0x42f7ca.tag) {
                  return;
                }
                this.node.emit("knifeCol", [_0x56374c.node, _0x42f7ca.node]);
            }
          }
        },
        'updateGameLogic': function (_0x13781c) {
          _0x36bee4.prototype.updateGameLogic.call(this, _0x13781c);
          this._collisionEventMgr.clearKnifeEvent();
        },
        'attackEnemy': function (_0x409d44, _0x362519) {
          _0x409d44.node.emit("emitEvent", ['hurt', 0x0, _0x34d396.GValue.EntityWorld.player.curAttack]);
          _0x362519.node.parent.emit("attackLight");
        },
        'throwKnife': function (_0x258cee, _0x23aa49, _0xbd416f) {
          _0x258cee.node.emit("emitEvent", ["stopParentRotate"]);
          _0x258cee.node.emit("emitEvent", ["throwKnife", _0xbd416f]);
        }
      });
      cc._RF.pop();
    }, {
      'CBaseCollisionHandleSystem': "CBaseCollisionHandleSystem",
      'CommonEnum': 'CommonEnum',
      'CommonFunc': "CommonFunc",
      'CommonValue': 'CommonValue',
      'Types': "Types"
    }],
    'CKnifeCountComponent': [function (_0x4f19ef, _0x2b60f1, _0x1fcee4) {
      'use strict';
  
      cc._RF.push(_0x2b60f1, "0e8daAO3ZlM6rV800Je0EOy", "CKnifeCountComponent");
      _0x4f19ef("Types");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.index = 0x0;
          this.maxCount = 0x0;
          this.isDirty = false;
          this.isMore = false;
        },
        'onLoad': function () {
          this.node.on("updateCount", this.updateCount, this);
          this.node.on("resetDirty", this.resetDirty, this);
        },
        'updateCount': function (_0x45cb74) {
          this.index = _0x45cb74[0x0];
          this.isMore = this.maxCount < _0x45cb74[0x1];
          this.maxCount = _0x45cb74[0x1];
          this.isDirty = true;
        },
        'resetDirty': function () {
          this.isDirty = false;
        }
      });
      cc._RF.pop();
    }, {
      'Types': 'Types'
    }],
    'CKnifeFixByWallCtrl': [function (_0x2535cf, _0x3cf953, _0x1c4bf8) {
      'use strict';
  
      cc._RF.push(_0x3cf953, "92aa6TZwVpIjopIUiUXhlgj", "CKnifeFixByWallCtrl");
      _0x2535cf("Types");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.resetTime = 0.25;
          this._curResetTime = 0x0;
          this._waitResetTime = 0x0;
          this.allWaitTime = 0.1;
          this.knifeOwnerComp = null;
          this.targetPos = null;
          this.targetRollRotation = null;
          this.maxRadius = null;
          this.finalPos = null;
          this.finalRotation = null;
          this._startReset = null;
          this._firstStart = null;
        },
        'onLoad': function () {
          this.node.on("fixByWall", this.fixByWall, this);
          this.node.on("stopResetPos", this.stopResetPos, this);
          this.node.on('logicTargetPos', this.logicTargetPos, this);
          if (!this.knifeOwnerComp) {
            this.knifeOwnerComp = this.node.getComponent("CKnifeOwnerComponent");
          }
        },
        'logicTargetPos': function (_0x59a34f) {
          this.targetPos = _0x59a34f[0x0].clone();
          this.targetRollRotation = _0x59a34f[0x1];
          this.maxRadius = _0x59a34f[0x2];
        },
        'stopResetPos': function () {
          this._startReset = false;
        },
        'fixByWall': function (_0x18c551) {
          var _0x13a2eb = _0x18c551[0x0];
          var _0x594e21 = _0x18c551[0x1];
          var _0x259a22 = _0x18c551[0x2];
          if (!this.knifeOwnerComp) {
            this.knifeOwnerComp = this.node.getComponent("CKnifeOwnerComponent");
          }
          var _0x15ae51 = this.knifeOwnerComp.owner.angle + this.targetRollRotation;
          var _0x216cda = Math.cos(_0x15ae51 * Math.PI / 0xb4);
          var _0x43cc30 = Math.sin(_0x15ae51 * Math.PI / 0xb4);
          var _0xe97a04 = 0x0;
          _0xe97a04 = _0x13a2eb.tag < 0x2 ? (_0x13a2eb.node.parent.y + (0x0 === _0x13a2eb.tag ? -0x1 : 0x1) * (_0x13a2eb.size.height / 0x2 + _0x259a22 / 0x2) - this.knifeOwnerComp.owner.y) / _0x43cc30 : (_0x13a2eb.node.parent.x + (0x2 === _0x13a2eb.tag ? 0x1 : -0x1) * (_0x13a2eb.size.width / 0x2 + _0x259a22 / 0x2) - this.knifeOwnerComp.owner.x) / _0x216cda;
          _0xe97a04 = Math.min(this.maxRadius, Math.max(0x32, Math.abs(_0xe97a04)));
          this.finalPos = this.node.position.normalize().mul(_0xe97a04);
          var _0x4c5812 = (_0x594e21 - this.node.parent.angle - (0x10e - this.targetRollRotation)) % 0x168;
          if (_0x4c5812 < -0xb4) {
            _0x4c5812 += 0x168;
          } else if (_0x4c5812 > 0xb4) {
            _0x4c5812 -= 0x168;
          }
          this.finalRotation = _0x4c5812 + (0x10e - this.targetRollRotation);
          this.node.position = this.finalPos;
          this.node.angle = this.finalRotation;
          this._curResetTime = 0x0;
          this._firstStart = true;
          this._startReset = true;
        }
      });
      cc._RF.pop();
    }, {
      'Types': "Types"
    }],
    'CKnifeInit': [function (_0x1bc133, _0x3d69a2, _0x430bfc) {
      'use strict';
  
      cc._RF.push(_0x3d69a2, "b3366s1mlhOIIl7c1NWQ7T3", "CKnifeInit");
      var _0x17bfe3 = _0x1bc133("Types");
      var _0xca6c94 = _0x1bc133("CEntityKnife");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.entityPlayer = null;
        },
        'init': function (_0x183573, _0x35e692) {
          if (undefined === _0x35e692) {
            _0x35e692 = true;
          }
          this.entityPlayer = _0x183573;
          if (_0x35e692) {
            this.entityPlayer.addKnife(this.node);
            this.node.emit("changeKnifeAttackGroup", 'knife');
          } else {
            this.entityPlayer.addKnifeIn(this.node);
            this.node.emit('changeKnifeAttackGroup', "deputyWeapon");
          }
          this.node.emit("changeTag", this.entityPlayer.teamID);
          this.node.emit("updateState", _0x17bfe3.KnifeState.Init);
          this.node.getComponent(_0xca6c94).skinNode.emit("changeSkin", this.entityPlayer.knifeImage);
        }
      });
      cc._RF.pop();
    }, {
      'CEntityKnife': "CEntityKnife",
      'Types': "Types"
    }],
    'CKnifeMoveCtrl': [function (_0x13c919, _0x377c7c, _0xfbf600) {
      'use strict';
  
      cc._RF.push(_0x377c7c, "5c5d84laBhGPL636pDjDBU3", "CKnifeMoveCtrl");
      var _0x44b7d3 = _0x13c919('Types');
      var _0x258102 = _0x13c919('Tools');
      var _0xf6d5cd = _0x13c919('CommonValue');
      var _0x33478f = _0x13c919("CommonFunc");
      var _0x21bc68 = _0x13c919("CommonConfig");
      var _0x2cbeba = _0x13c919("CommonAudio");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.knifeEntity = null;
          this.changeTime = 0.05;
          this.changeSpeed = 0x1f4;
          this.adjustMoreSpeed = 0x1f4;
          this.adjustLessSpeed = 0x2bc;
          this.captureSpeed = 0x12c;
          this.releaseSpeed = 0x5dc;
          this.releaseRotation = 0x4b0;
          this.rollRotation = 0x0;
          this.danceRoll = 0x5;
          this.isOut = true;
          this.knifeCountComp = null;
          this.knifeStateComp = null;
          this.danceIndex = 0x0;
          this.startDance = false;
          this.danceTime = 0x0;
          this.danceRollAdd = 0x0;
          this.acceleration = 0x0;
          this.isDefence = false;
          this.raduis = 0x0;
          this.finalPosition = null;
          this.lastRotation = null;
          this.isRotating = false;
          this.isCapture = false;
          this.isRelease = false;
          this.isAdjust = false;
          this.isMore = false;
          this.moveDistance = 0x0;
        },
        'onLoad': function () {
          this.knifeCountComp = this.node.getComponent("CKnifeCountComponent");
          this.knifeStateComp = this.node.getComponent("CKnifeStateComponent");
          this.node.on("dance", this.dance, this);
          this.node.on("releasePosition", this.releasePosition, this);
          this.node.on("startChangeToAttack", this.startChangeToAttack, this);
          this.node.on("startChangeToDefence", this.startChangeToDefence, this);
        },
        'init': function (_0x6f3247, _0x582fee) {
          if (undefined === _0x582fee) {
            _0x582fee = true;
          }
          this.knifeEntity = _0x6f3247;
          this.isOut = _0x582fee;
        },
        'update': function (_0x223ae8) {
          if (!this.isRelease && (_0x223ae8 *= _0xf6d5cd.GValue.PauseSlowRatio, this.finalPosition && (this.finalPosition.x !== this.node.position.x || this.finalPosition.y !== this.node.position.y))) {
            var _0x12b5b9 = this.finalPosition.sub(this.node.position);
            var _0x5b1fa6 = _0x12b5b9.mag();
            this.moveDistance = this.changeSpeed * _0x223ae8;
            if (this.isAdjust) {
              if (this.isMore) {
                this.moveDistance = this.adjustMoreSpeed * _0x223ae8;
              } else {
                this.moveDistance = this.adjustLessSpeed * _0x223ae8;
              }
            }
            if (this.isCapture) {
              this.moveDistance = (_0xf6d5cd.GValue.EntityWorld.m_gameOver ? 0x320 : this.captureSpeed) * _0x223ae8;
            }
            this.acceleration += 0x32 * _0x223ae8;
            this.moveDistance += this.acceleration;
            if (this.moveDistance < _0x5b1fa6) {
              this.node.position = this.node.position.add(_0x12b5b9.mul(this.moveDistance / _0x5b1fa6));
            } else {
              this.node.position = this.finalPosition;
              if (this.isAdjust) {
                this.isAdjust = false;
              }
              if (this.isCapture) {
                _0x2cbeba.GAudio.playSound(_0x2cbeba.Enum_Audio.pick_knife);
                this.isCapture = false;
                var _0x1d6c5d = new cc.Node();
                var _0x381ff4 = _0x1d6c5d.addComponent(cc.Sprite);
                _0x33478f.GFunc.changeAtlasSprite(_0xf6d5cd.GValue.Atlas_Test, _0x381ff4, 'k_p_shine');
                this.node.addChild(_0x1d6c5d);
                var _0x129c77 = _0x21bc68.GConfig.actionFrameTime;
                var _0x33f9aa = cc.scaleTo(0x4 * _0x129c77, 1.8);
                var _0x302b5e = cc.scaleTo(0xa * _0x129c77, 2.9);
                var _0x3cef74 = cc.fadeTo(0xa * _0x129c77, 0x0);
                var _0xb9fde4 = cc.spawn(_0x302b5e, _0x3cef74);
                var _0x5e91c6 = cc.sequence(_0x33f9aa, _0xb9fde4, cc.removeSelf());
                _0x1d6c5d.runAction(_0x5e91c6);
              }
            }
          }
        },
        'dance': function (_0x28cb1e) {
          this.danceIndex = 0x0;
          this.startDance = true;
          this.danceTime = _0x28cb1e;
          this.danceRoll = 0xa;
          this.danceRollAdd = 0.5;
          var _0x173db8 = 0x28;
          var _0x485fd7 = [];
          for (var _0x19aed3 = 0x5; _0x19aed3 > 0x0; _0x19aed3--) {
            var _0xab83b6 = _0x19aed3 / 0xf * _0x28cb1e / 0x4;
            _0x173db8 -= 0x2;
            var _0x8edb73 = cc.sequence(cc.rotateBy(_0xab83b6, _0x173db8), cc.rotateBy(_0xab83b6, -_0x173db8), cc.rotateBy(_0xab83b6, -_0x173db8), cc.rotateBy(_0xab83b6, _0x173db8));
            _0x485fd7.push(_0x8edb73);
          }
          var _0x2d104a = cc.sequence(_0x485fd7);
          this.node.runAction(_0x2d104a);
        },
        'getFinalPosition': function () {
          this.acceleration = 0x0;
          var _0x283ee5 = this.knifeCountComp.maxCount;
          var _0x214c52 = this.knifeCountComp.index;
          var _0x7c2b71 = this.knifeEntity.teamID == _0x44b7d3.EntityTag.Enemy ? 0x5a : this.isOut ? _0x258102.DYTools.getRadiusByKnifeCount(_0x283ee5) : _0x258102.DYTools.getRadiusByKnifeInCount(_0x283ee5);
          this.rollRotation = 0x168 / _0x283ee5 * _0x214c52;
          var _0x39e95d = Math.sin(this.rollRotation * Math.PI / 0xb4) * _0x7c2b71;
          var _0x2a2112 = Math.cos(this.rollRotation * Math.PI / 0xb4) * _0x7c2b71;
          this.raduis = _0x7c2b71;
          return cc.v2(_0x2a2112, _0x39e95d);
        },
        'releasePosition': function (_0x1d1646) {
          this.releasePosition = _0x1d1646;
        },
        'getRadiusChangePosition': function () {
          var _0x57e458 = this.knifeCountComp.maxCount;
          var _0x6bf91e = this.knifeEntity.teamID == _0x44b7d3.EntityTag.Enemy ? 0x5a : this.isOut ? _0x258102.DYTools.getRadiusByKnifeCount(_0x57e458) : _0x258102.DYTools.getRadiusByKnifeInCount(_0x57e458);
          var _0x51fa52 = Math.sin(this.rollRotation * Math.PI / 0xb4) * _0x6bf91e;
          var _0x590699 = Math.cos(this.rollRotation * Math.PI / 0xb4) * _0x6bf91e;
          this.raduis = _0x6bf91e;
          return cc.v2(_0x590699, _0x51fa52);
        },
        'startChangeToDefence': function () {
          var _0x2dd7e9 = this;
          this.isDefence = true;
          this.finalPosition = this.getFinalPosition();
          setTimeout(function () {
            var _0x581006 = _0x2dd7e9.isDefence ? _0x44b7d3.KnifeState.Defence : _0x44b7d3.KnifeState.Attack;
            if (_0x2dd7e9.node) {
              _0x2dd7e9.node.emit("updateState", _0x581006);
            }
          }, 0x3e8 * this.changeTime);
          this.rotateKnife();
        },
        'startChangeToAttack': function () {
          this.finalPosition = this.getFinalPosition();
          this.node.emit("updateState", _0x44b7d3.KnifeState.Attack);
          this.rotateKnife();
        },
        'getThrowPosition': function () {
          this.acceleration = 0x0;
          return this.releasePosition;
        },
        'rotateKnife': function () {
          var _0x1836a7 = this;
          if (this.node) {
            var _0x45cbf8 = this.knifeEntity.teamID == _0x44b7d3.EntityTag.Enemy ? -this.rollRotation : 0x5a - this.rollRotation;
            if (this.lastRotation !== _0x45cbf8) {
              this.isRotating = true;
              this.lastRotation = _0x45cbf8;
              var _0x531b4a = cc.rotateTo(this.changeTime, _0x45cbf8);
              var _0x2881a0 = cc.callFunc(function () {
                _0x1836a7.isRotating = false;
              });
              this.node.stopAllActions();
              this.node.runAction(cc.sequence(_0x531b4a, _0x2881a0));
            } else if (!this.isRotating) {
              if (this.node.angle !== _0x45cbf8) {
                this.node.angle = -_0x45cbf8;
              }
            }
          }
        },
        'updateLogic': function (_0x3d3e38) {
          if (!this.knifeStateComp) {
            this.knifeStateComp = this.node.getComponent("CKnifeStateComponent");
          }
          if (!this.knifeCountComp) {
            this.knifeCountComp = this.node.getComponent("CKnifeCountComponent");
          }
          if (this.knifeStateComp.isDirty) {
            switch (this.knifeStateComp.state) {
              case _0x44b7d3.KnifeState.Init:
                this.finalPosition = this.getFinalPosition();
                this.node.position = this.finalPosition;
                this.logicTargetInfo();
                break;
              case _0x44b7d3.KnifeState.Capture:
                this.isCapture = true;
                this.finalPosition = this.getFinalPosition();
                this.logicTargetInfo();
                break;
              case _0x44b7d3.KnifeState.Attack:
                this.startDance = false;
                break;
              case _0x44b7d3.KnifeState.Defence:
                break;
              case _0x44b7d3.KnifeState.Release:
                this.isRelease = true;
            }
          }
          if (this.knifeCountComp.isDirty) {
            this.isAdjust = true;
            this.isMore = this.knifeCountComp.isMore;
            if (!(this.isCapture || this.isMore)) {
              this.node.position = this.getRadiusChangePosition();
            }
            this.finalPosition = this.getFinalPosition();
            this.rotateKnife();
            this.logicTargetInfo();
            this.setScale();
          }
        },
        'logicTargetInfo': function () {
          this.node.emit("logicTargetPos", [this.finalPosition, this.rollRotation, this.raduis]);
        },
        'updateDance': function (_0x61b7b3) {
          if (this.node.parent.children.length < 0x3) {
            this.startDance = false;
          }
          if (this.startDance) {
            if (this.danceIndex % 0x4 == 0x0) {
              this.node.angle += this.danceRoll;
            } else if (this.danceIndex % 0x4 == 0x1) {
              this.node.angle -= this.danceRoll;
            } else if (this.danceIndex % 0x4 == 0x2) {
              this.node.angle -= this.danceRoll;
            } else if (this.danceIndex % 0x4 == 0x3) {
              this.node.angle += this.danceRoll;
              this.danceRoll += this.danceRollAdd;
            }
            this.danceIndex++;
          }
        },
        'setScale': function () {
          var _0x2cbc2f = 0.01 * this.knifeCountComp.index + 0x1;
          _0x2cbc2f = _0x2cbc2f > 1.01 ? 1.01 : _0x2cbc2f;
          if (this.node.scale !== _0x2cbc2f) {
            this.node.scale = _0x2cbc2f;
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonAudio': "CommonAudio",
      'CommonConfig': "CommonConfig",
      'CommonFunc': "CommonFunc",
      'CommonValue': 'CommonValue',
      'Tools': "Tools",
      'Types': 'Types'
    }],
    'CKnifeOwnerComponent': [function (_0x48a5d8, _0x3ed55e, _0x2b0a6c) {
      'use strict';
  
      cc._RF.push(_0x3ed55e, "701530XuwlJCIYu+6wNqqLw", 'CKnifeOwnerComponent');
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.owner = null;
          this.player = null;
        },
        'onLoad': function () {
          this.node.on("updateOwner", this.updateOwner, this);
          this.node.on("noticeOwnerLeave", this.noticeOwnerLeave, this);
          this.node.on("addKnife", this.addKnife, this);
          this.node.on("stopParentRotate", this.stopParentRotate, this);
          this.node.on("localHeroCollision", this.localHeroCollision, this);
        },
        'updateOwner': function (_0x5afe44) {
          this.owner = _0x5afe44.node;
          this.player = _0x5afe44.player;
        },
        'stopParentRotate': function () {
          if (this.owner) {
            this.owner.emit("stopParentRotate");
          }
        },
        'noticeOwnerLeave': function () {
          if (this.owner) {
            this.owner.emit("reduceKnife", this.node);
            this.owner = null;
          }
        },
        'localHeroCollision': function () {
          this.owner.emit("localHeroCollision");
        },
        'addKnife': function (_0x3abb17) {
          if (this.owner) {
            this.owner.emit("addKnife", _0x3abb17);
          }
        }
      });
      cc._RF.pop();
    }, {}],
    'CKnifeParentCtrl': [function (_0xb6bd42, _0x36c2f3, _0x4356ff) {
      'use strict';
  
      cc._RF.push(_0x36c2f3, "3ca41+W735MV5OMXy3BEcfT", "CKnifeParentCtrl");
      var _0x2f4c37 = _0xb6bd42("Types");
      var _0xb0263 = _0xb6bd42('CEntityKnife');
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.entity = null;
          this.itemNode = null;
          this.knifeStateComp = null;
          this.knifeOwnerComp = null;
        },
        'init': function (_0x1def64, _0x432973) {
          this.entity = _0x1def64;
          this.itemNode = _0x432973;
          this.knifeStateComp = this.node.getComponent("CKnifeStateComponent");
          this.knifeOwnerComp = this.node.getComponent("CKnifeOwnerComponent");
        },
        'updateLogic': function (_0x47b82f) {
          if (!this.knifeStateComp) {
            this.knifeStateComp = this.node.getComponent("CKnifeStateComponent");
          }
          if (!this.knifeOwnerComp) {
            this.knifeOwnerComp = this.node.getComponent("CKnifeOwnerComponent");
          }
          if (this.knifeStateComp.isDirty) {
            switch (this.knifeStateComp.state) {
              case _0x2f4c37.KnifeState.Capture:
              case _0x2f4c37.KnifeState.Init:
                if (this.knifeOwnerComp.owner) {
                  this.changeParent(this.knifeOwnerComp.owner);
                }
                break;
              case _0x2f4c37.KnifeState.Release:
                var _0x142f2a = this.node.parent.convertToWorldSpaceAR(this.node.position);
                var _0xd96ef2 = this.itemNode.convertToNodeSpaceAR(_0x142f2a);
                var _0x14be3c = this.node.parent.parent.convertToWorldSpaceAR(this.node.parent.position);
                var _0x29cb70 = this.itemNode.convertToNodeSpaceAR(_0x14be3c);
                var _0x5f069e = _0xd96ef2.sub(_0x29cb70);
                var _0x36bcc6 = [Math.PI / 0x2, -Math.PI / 0x2];
                var _0x5455b1 = Math.floor(0x2 * Math.random());
                var _0x1ccdc3 = Math.PI / 0x24 - Math.random() * (Math.PI / 0x12);
                var _0x341842 = _0x36bcc6[_0x5455b1] + _0x1ccdc3;
                var _0x3d9da9 = _0x5f069e.rotate(_0x341842);
                this.changeParent(this.itemNode);
                if (this.entity.bossDiscarded) {
                  this.node.emit('changeKnifeAttackGroup', 'landKnife');
                  this.node.getComponent(_0xb0263).initDrop(_0x3d9da9, 0x1, 0x4b0, false);
                } else {
                  this.node.emit("changeKnifeAttackGroup", "landKnife");
                  this.node.getComponent(_0xb0263).initDrop(_0x3d9da9, 0x1, 0x4b0);
                }
            }
          }
        },
        'changeParent': function (_0x543ed5) {
          var _0x1e89fa = this.node.parent.convertToWorldSpaceAR(this.node.position);
          var _0x4c21b2 = _0x543ed5.convertToNodeSpaceAR(_0x1e89fa);
          this.node.parent = _0x543ed5;
          this.node.position = _0x4c21b2;
        }
      });
      cc._RF.pop();
    }, {
      'CEntityKnife': "CEntityKnife",
      'Types': "Types"
    }],
    'CKnifeSkinCtrl': [function (_0x17d558, _0x288876, _0x95f5c3) {
      'use strict';
  
      cc._RF.push(_0x288876, "dec3bC7fZJPwoE601SMPgf0", "CKnifeSkinCtrl");
      var _0x207fb0 = _0x17d558("CommonFunc");
      var _0xddf06e = _0x17d558('Types');
      var _0x26f8f8 = _0x17d558('CommonValue');
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.knifeStateComp = null;
          this.knifeOwnerComp = null;
        },
        'init': function () {
          this.knifeStateComp = this.node.parent.getComponent("CKnifeStateComponent");
          this.knifeOwnerComp = this.node.parent.getComponent("CKnifeOwnerComponent");
          this.node.on("changeSkin", this.changeSkin, this);
        },
        'changeSkin': function (_0x254ee5) {
          var _0x342d42 = this.node.getComponent(cc.Sprite);
          _0x207fb0.GFunc.changeAtlasSprite(_0x26f8f8.GValue.Atlas_Game, _0x342d42, _0x254ee5);
        },
        'updateLogic': function (_0x19cb81) {
          if (!this.knifeStateComp) {
            this.knifeStateComp = this.node.parent.getComponent("CKnifeStateComponent");
          }
          if (!this.knifeOwnerComp) {
            this.knifeOwnerComp = this.node.parent.getComponent("CKnifeOwnerComponent");
          }
          if (this.knifeStateComp.isDirty) {
            switch (this.knifeStateComp.state) {
              case _0xddf06e.KnifeState.Init:
              case _0xddf06e.KnifeState.Capture:
            }
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonFunc': "CommonFunc",
      'CommonValue': 'CommonValue',
      'Types': "Types"
    }],
    'CKnifeStateComponent': [function (_0x2a587f, _0x171d67, _0x3dbcbd) {
      'use strict';
  
      cc._RF.push(_0x171d67, "b1866SEE5FPZ6ID4UpkRhjl", "CKnifeStateComponent");
      var _0x15ae32 = _0x2a587f('Types');
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.state = _0x15ae32.KnifeState.Attack;
          this.isDirty = false;
        },
        'onLoad': function () {
          this.node.on("updateState", this.updateState, this);
          this.node.on("resetDirty", this.resetDirty, this);
        },
        'resetDirty': function () {
          this.isDirty = false;
        },
        'updateState': function (_0x10233a) {
          if (this.state !== _0x10233a && (_0x10233a !== _0x15ae32.KnifeState.Attack && _0x10233a !== _0x15ae32.KnifeState.Defence || this.state !== _0x15ae32.KnifeState.Capture && this.state !== _0x15ae32.KnifeState.Release || !this.isDirty)) {
            this.state = _0x10233a;
            this.isDirty = true;
          }
        }
      });
      cc._RF.pop();
    }, {
      'Types': 'Types'
    }],
    'CLogicPlayer': [function (_0x242e2e, _0x469dcc, _0x4a5ab8) {
      'use strict';
  
      cc._RF.push(_0x469dcc, "37635a1125M6YWgZsaOPX9R", "CLogicPlayer");
      var _0x2afe10 = _0x242e2e("Tools");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.entityPlayer = null;
          this.knivesCmp = null;
          this.knivesCmpIn = null;
        },
        'init': function (_0x5de2b3) {
          this.entityPlayer = _0x5de2b3;
          this.knivesCmp = this.entityPlayer.followPlayerOut.knivesCmp;
        },
        'updateLogic': function (_0x49cb91) {
          if (this.knivesCmp.isDirty) {
            var _0x52500a = this.knivesCmp.emitAllKnivesCountChange();
            var _0x4670f6 = _0x2afe10.DYTools.getRadiusByKnifeCount(_0x52500a);
            this.knivesCmp.node.emit("radiusChange", _0x4670f6);
            this.entityPlayer.node.emit("radiusChange", _0x4670f6);
            this.knivesCmp.resetDirty();
          }
        }
      });
      cc._RF.pop();
    }, {
      'Tools': 'Tools'
    }],
    'CLoginEnemy': [function (_0x19bc1d, _0x46c030, _0x598fb3) {
      'use strict';
  
      cc._RF.push(_0x46c030, "ce4f1QuY2pBDa6FM1CzqdWa", "CLoginEnemy");
      var _0x4bc0d9 = _0x19bc1d("Tools");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.knivesCmp = null;
        },
        'init': function (_0x566d90) {
          this.entityEnemy = _0x566d90;
          this.knivesCmp = this.entityEnemy.followCtrl.followEnemy.knivesCmp;
        },
        'updateLogic': function (_0x5c7c3e) {
          if (this.knivesCmp.isDirty) {
            var _0x185d6c = this.knivesCmp.emitAllKnivesCountChange();
            var _0x27c5b8 = _0x4bc0d9.DYTools.getRadiusByKnifeCount(_0x185d6c);
            this.knivesCmp.node.emit("radiusChange", _0x27c5b8);
            this.entityEnemy.node.emit('radiusChange', _0x27c5b8);
            this.knivesCmp.resetDirty();
          }
        }
      });
      cc._RF.pop();
    }, {
      'Tools': 'Tools'
    }],
    'CMoveByTouch': [function (_0x3b66f5, _0xb6628a, _0x2c6877) {
      'use strict';
  
      cc._RF.push(_0xb6628a, "6796dtRwYlMpLSzVZMRalAn", "CMoveByTouch");
      var _0x545648 = _0x3b66f5("Tools");
      var _0x39e7c3 = _0x3b66f5('CommonValue');
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this._target = null;
          this.startPos = null;
          this.curDir = null;
          this.player = null;
          this.touchAble = false;
          this.touching = true;
          this.touchFalseTime = 0x0;
          this.firstTouchId = -0x1;
          this.touchCall = null;
        },
        'onLoad': function () {
          this.node.on(cc.Node.EventType.TOUCH_START, this._touchStartEvent, this);
          this.node.on(cc.Node.EventType.TOUCH_MOVE, this._touchMoveEvent, this);
          this.node.on(cc.Node.EventType.TOUCH_END, this.touchEndEvent, this);
          this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.touchEndEvent, this);
        },
        'init': function (_0x2db059, _0x298461) {
          if (undefined === _0x298461) {
            _0x298461 = null;
          }
          this.player = _0x2db059;
          this.touchCall = _0x298461;
          this._target = _0x2db059.node;
          this.touchAble = true;
          this.touching = true;
          _0x39e7c3.GValue.EntityWorld.setTouching(true);
        },
        'update': function (_0x245913) {
          if (!(this.touching || this.player.isDead)) {
            this.touchFalseTime += _0x245913;
            if (this.touchFalseTime > 0.5) {
              _0x39e7c3.GValue.EntityWorld.setTouching(false);
            }
          }
        },
        '_touchMoveEvent': function (_0x32089b) {
          if (_0x32089b && this.firstTouchId == _0x32089b.getID() && this.touchAble) {
            _0x39e7c3.GValue.EntityWorld.setTouching(true);
            var _0x494874 = _0x32089b.getDelta();
            if (_0x39e7c3.GValue.MapScale < 0.95) {
              _0x494874.mulSelf(0x1 / _0x39e7c3.GValue.MapScale);
            }
            var _0x3daaf8 = this._target.position;
            var _0x5eb3d9 = _0x3daaf8.add(_0x494874);
            if (_0x494874.mag() > 0x19) {
              var _0x31ce0a = 0x0;
              for (var _0xea8d52 = _0x39e7c3.GValue.EntityWorld.Enemys; _0x31ce0a < _0xea8d52.length; _0x31ce0a++) {
                var _0x41fb79 = _0xea8d52[_0x31ce0a];
                var _0x378fa3 = _0x41fb79.node.position.add(_0x39e7c3.GValue.EntityWorld.mapMgr.mapTop.position);
                var _0x469fff = cc.Intersection.pointLineDistance(_0x378fa3, _0x3daaf8, _0x5eb3d9, true);
                if (_0x41fb79.radius && _0x469fff <= _0x41fb79.radius) {
                  this.player.dieByEnemy(_0x41fb79);
                  break;
                }
              }
            }
            var _0x59e03e = _0x39e7c3.GValue.EntityWorld.mapMgr.blockArr;
            for (var _0x5ca7f6 = 0x0; _0x5ca7f6 < _0x59e03e.length; _0x5ca7f6++) {
              var _0x11f72b = _0x59e03e[_0x5ca7f6];
              var _0x2cf177 = _0x11f72b.width;
              var _0x5d1cff = _0x11f72b.height;
              _0x378fa3 = _0x11f72b.colCollider.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
              if (_0x545648.DYTools.isInSreen(_0x378fa3, -_0x2cf177)) {
                _0x378fa3 = this._target.parent.convertToNodeSpaceAR(_0x378fa3);
                var _0x111893 = cc.rect(_0x378fa3.x - 0.5 * _0x2cf177, _0x378fa3.y - 0.5 * _0x5d1cff, _0x2cf177, _0x5d1cff);
                if (cc.Intersection.lineRect(_0x3daaf8, _0x5eb3d9, _0x111893)) {
                  var _0xce4223 = _0x5eb3d9.sub(_0x3daaf8).normalize();
                  var _0xd2f8a3 = _0x3daaf8;
                  for (var _0x694e18 = 0x1; _0x694e18 < _0x469fff; _0x694e18 += 0x1) {
                    var _0xce4223;
                    var _0xd2f8a3;
                    var _0x694e18;
                    var _0x4e1f27 = _0x3daaf8.add(_0xce4223.mul(_0x694e18));
                    if (_0x111893.contains(_0x4e1f27)) {
                      break;
                    }
                    _0xd2f8a3 = _0x3daaf8;
                  }
                  _0x5eb3d9 = _0xd2f8a3;
                }
              }
            }
            this._target.position = _0x5eb3d9;
          }
        },
        '_touchStartEvent': function (_0x301dea) {
          if (_0x301dea && this.touchAble) {
            if (this.firstTouchId < 0x0) {
              this.firstTouchId = _0x301dea.getID();
              this.startPos = _0x301dea.getLocation();
              this._target.emit("heroMoveStart");
              _0x39e7c3.GValue.EntityWorld.setTouching(true);
              this.touching = true;
            }
            if (this.touchCall) {
              this.touchCall();
              this.touchCall = null;
            }
          }
        },
        'touchEndEvent': function (_0x9be87f) {
          if (undefined === _0x9be87f) {
            _0x9be87f = null;
          }
          if (_0x9be87f) {
            if (this.firstTouchId == _0x9be87f.getID()) {
              this.firstTouchId = -0x1;
              this._target.emit('onStopMoving');
              this.curDir = null;
              this.touching = false;
              this.touchFalseTime = 0x0;
            }
          } else {
            this.firstTouchId = -0x1;
            _0x39e7c3.GValue.EntityWorld.setTouching(false);
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonValue': "CommonValue",
      'Tools': "Tools"
    }],
    'CMoveWithOwnerNode': [function (_0x57f2bc, _0x178abc, _0x4f7750) {
      'use strict';
  
      cc._RF.push(_0x178abc, "e1dcb72YI1MtoV1KFX48q9v", 'CMoveWithOwnerNode');
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this._owner = null;
          this._entity = null;
          this._isSyncCulling = false;
          this._followNode = null;
          this.offset = cc.Vec2.ZERO;
          this.isMoving = false;
        },
        'init': function (_0x3010d6, _0x3cce33, _0x2285cf, _0x5deffd) {
          if (undefined === _0x5deffd) {
            _0x5deffd = cc.Vec2.ZERO;
          }
          this._owner = _0x3010d6;
          this._entity = _0x3cce33;
          this._followNode = _0x2285cf ? _0x2285cf.node : null;
          this.offset = _0x5deffd;
          this.updatePos(true);
        },
        'lateUpdate': function () {
          if (this._owner) {
            this.updatePos(false);
          }
        },
        'getOwnerPos': function () {
          var _0x13330c = null;
          if (this._followNode) {
            var _0x43b928 = this._followNode.parent.convertToWorldSpaceAR(this._followNode);
            _0x13330c = (this._entity.node.parent ? this._entity.node.parent : this._entity.node).convertToNodeSpaceAR(_0x43b928);
          } else {
            _0x13330c = this._owner ? cc.v2(this._owner.position) : cc.Vec2.ZERO;
          }
          return _0x13330c;
        },
        'updatePos': function (_0x67255b) {
          if (this._owner) {
            var _0x11d4d4 = this.getOwnerPos();
            var _0x147527 = this._entity.node.position;
            if (_0x67255b || _0x11d4d4.x !== _0x147527.x || _0x11d4d4.y !== _0x147527.y) {
              this._entity.node.position = _0x11d4d4.add(this.offset);
              this.isMoving = true;
            } else if (true === this.isMoving) {
              this.isMoving = false;
            }
          }
        }
      });
      cc._RF.pop();
    }, {}],
    'CNodeCollider': [function (_0x5af9ab, _0x5e9cf3, _0x45a1ce) {
      'use strict';
  
      cc._RF.push(_0x5e9cf3, "46c57uf1hpMMYtQpBQPAoRl", 'CNodeCollider');
      var _0x36a423 = _0x5af9ab("CollisionEventManager");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this._collider = null;
          this.parent = null;
          this.needCheckCollision = null;
          this.needCheckStay = null;
        },
        'onLoad': function () {
          this._collider = this.node.getComponent(cc.Collider);
          this.node.on("changeColliderTag", this.changeColliderTag, this);
          this.node.on("changeNodeGroup", this.changeNodeGroup, this);
          this.node.on("emitEvent", this.emitEvent, this);
        },
        'init': function (_0x51d543, _0x135927, _0x3280f8) {
          if (undefined === _0x3280f8) {
            _0x3280f8 = false;
          }
          this.parent = _0x51d543;
          this.needCheckCollision = _0x135927;
          this.needCheckStay = _0x3280f8;
        },
        'onCollisionEnter': function (_0x1fb6f1, _0x4d25cd) {
          if (this.needCheckCollision) {
            _0x36a423.CollisionEventManager.getInstance().addCollisionEvent(_0x1fb6f1, _0x4d25cd);
          }
        },
        'changeColliderTag': function (_0x2b9f9f) {
          if (this._collider) {
            this._collider.tag = _0x2b9f9f;
          } else {
            cc.error("no Collider To Change Tag");
          }
        },
        'onCollisionStay': function (_0x583fff, _0x444f89) {
          if (this.needCheckCollision && this.needCheckStay) {
            _0x36a423.CollisionEventManager.getInstance().addCollisionStayEvent(_0x583fff, _0x444f89);
          }
        },
        'onCollisionExit': function (_0x4ea88d, _0x5b9279) {
          if (this.needCheckCollision && this.needCheckStay) {
            _0x36a423.CollisionEventManager.getInstance().removeCollisionEvent(_0x4ea88d, _0x5b9279);
          }
        },
        'emitEvent': function (_0xf5610a) {
          if (this.parent) {
            this.parent.emit(_0xf5610a[0x0], _0xf5610a[0x1], _0xf5610a[0x2]);
          }
        },
        'changeNodeGroup': function (_0x46b2dd) {
          this.node.group = _0x46b2dd;
        }
      });
      cc._RF.pop();
    }, {
      'CollisionEventManager': "CollisionEventManager"
    }],
    'CPickKnifeCollisionHandleSystem': [function (_0x1cd6d5, _0x13ac16, _0x4666c7) {
      'use strict';
  
      cc._RF.push(_0x13ac16, '55ab9lXMpNC3opwr1n3sEWM', "CPickKnifeCollisionHandleSystem");
      var _0x286338 = _0x1cd6d5("CBaseCollisionHandleSystem");
      cc.Class({
        'extends': _0x286338,
        'properties': {},
        'ctor': function () {
          this._eventListName = "_pickKnifeCollisionEvent";
        },
        'handelCollisionEvent': function (_0x264573) {
          var _0x38b3ac = _0x264573[0x0];
          var _0x521586 = _0x264573[0x1];
          if (0x1 === _0x38b3ac.tag && 0x0 === _0x521586.tag) {
            _0x521586.node.emit("emitEvent", ["onPickUpKnife", _0x38b3ac]);
          }
        },
        'updateGameLogic': function (_0x5b6396) {
          this._collisionEventMgr.clearPickKnifeEvent();
        }
      });
      cc._RF.pop();
    }, {
      'CBaseCollisionHandleSystem': "CBaseCollisionHandleSystem"
    }],
    'CPlayerKnivesComponent': [function (_0x53d89c, _0xc802b2, _0x5c785a) {
      'use strict';
  
      cc._RF.push(_0xc802b2, "cab3cIFP/BMN6LZLuEPeD/X", "CPlayerKnivesComponent");
      var _0x65af52 = _0x53d89c("Tools");
      var _0x247b1e = _0x53d89c("CommonValue");
      var _0x45dbca = _0x53d89c("CEntityKnife");
      var _0x56614f = _0x53d89c("CommonAudio");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.knives = [];
          this.lights = [];
          this.strongNode = null;
          this.isDirty = false;
          this.player = null;
          this.startGame = false;
          this.isCollisionWall = null;
          this.isMove = false;
          this.interval = 0x0;
          this.stopMoveTime = 0x0;
          this.flitIndex = 0x0;
          this.limitTime = 0x0;
          this.danceTime = 0x0;
          this.danceKnifeArr = [];
        },
        'init': function (_0x2b1d34, _0x5d787f) {
          var _0xae1559 = this;
          if (undefined === _0x5d787f) {
            _0x5d787f = true;
          }
          this.player = _0x2b1d34;
          this.node.on("startGame", function () {
            _0xae1559.startGame = true;
            _0xae1559.knives = _0xae1559.knives.concat();
          }, this);
          if (_0x5d787f) {
            this.node.on('addKnife', this.addKnife, this);
            this.node.on('reduceKnife', this.reduceKnife, this);
            this.node.on("resetDirty", this.resetDirty, this);
          }
          this.node.on('wallCollision', this.wallCollision, this);
          this.node.on('enterStrong', this.enterStrong, this);
        },
        'wallCollision': function (_0x2c4d76) {
          this.isCollisionWall = _0x2c4d76;
        },
        'update': function (_0x4cf64f) {
          for (var _0xb60e13 = 0x0; _0xb60e13 < this.knives.length; _0xb60e13++) {
            var _0x395eb2 = this.knives[_0xb60e13];
            if (_0x395eb2) {
              _0x395eb2.emit("startChangeToAttack");
            }
          }
        },
        'reduceKnife': function (_0x8c8ef8) {
          _0x65af52.DYTools.arrRemove(this.knives, _0x8c8ef8);
          this.isDirty = true;
          if (this.strongNode) {
            this.strongNode.scale = this.player.radius / 0x82;
          }
        },
        'addKnife': function (_0x304e83) {
          if (!_0x65af52.DYTools.arrContains(this.knives, _0x304e83)) {
            this.knives.push(_0x304e83);
            _0x304e83.emit("updateOwner", this);
            _0x304e83.getComponent(_0x45dbca).skinNode.emit("changeSkin", this.player.knifeImage);
            this.checkNewKnifeStrong(_0x304e83);
            this.isDirty = true;
          }
          if (this.strongNode) {
            this.strongNode.scale = this.player.radius / 0x82;
          }
        },
        'emitAllKnivesCountChange': function () {
          var _0x23d994 = this.knives.length;
          for (var _0x13a8d9 = 0x0; _0x13a8d9 < _0x23d994; _0x13a8d9++) {
            this.knives[_0x13a8d9].emit("updateCount", [_0x13a8d9, _0x23d994]);
          }
          return _0x23d994;
        },
        'resetDirty': function () {
          this.isDirty = false;
        },
        'checkNewKnifeStrong': function (_0x2cddb1) {},
        'enterStrong': function (_0x5ec35d) {
          if (0x0 == _0x5ec35d) {
            if (this.strongNode) {
              this.strongNode.removeFromParent();
              this.strongNode = null;
            }
            _0x56614f.GAudio.stopSoundByName(_0x56614f.Enum_Audio.strong);
          } else {
            if (this.strongNode) {
              _0x56614f.GAudio.stopSoundByName(_0x56614f.Enum_Audio.strong);
            } else {
              this.strongNode = new cc.Node();
              this.node.addChild(this.strongNode, 0x1);
              this.strongNode.scale = this.player.radius / 0x82;
              this.strongNode.addComponent(cc.Sprite).spriteFrame = _0x247b1e.GValue.Atlas_Game.getSpriteFrame('strong');
            }
            _0x56614f.GAudio.playSound(_0x56614f.Enum_Audio.strong);
          }
        },
        'addStrongLight': function (_0x526d3b, _0x2121da) {
          var _0x240986 = new cc.Node();
          this.node.addChild(_0x240986, -0x1);
          _0x240986.position = _0x526d3b.add(cc.v2(0x0, -0x4));
          _0x240986.angle = -_0x2121da;
          _0x240986.addComponent(cc.Sprite).spriteFrame = _0x247b1e.GValue.Atlas_Game.getSpriteFrame('kl');
          this.lights.push(_0x240986);
        },
        'getKnifeNum': function () {
          return this.knives.length;
        },
        'emitAllKnivesChangeSkin': function () {
          var _0xeb9690 = this.knives.length;
          for (var _0x504b0d = 0x0; _0x504b0d < _0xeb9690; _0x504b0d++) {
            if (this.knives[_0x504b0d]) {
              this.knives[_0x504b0d].getComponent("CEntityKnife").skinNode.emit("changeSkin", this.player.knifeImage);
            }
          }
        },
        'emitAllKnivesRelease': function () {
          var _0x15ac20 = this.knives.length;
          for (var _0x1b353e = 0x0; _0x1b353e < _0x15ac20; _0x1b353e++) {
            if (this.knives[_0x1b353e]) {
              this.knives[_0x1b353e].emit("throwKnife");
            }
          }
          this.knives = [];
        },
        'removeSelf': function () {
          for (var _0x1c9528 = 0x0; _0x1c9528 < this.knives.length; _0x1c9528++) {
            var _0x51aa56 = this.knives[_0x1c9528];
            if (_0x51aa56) {
              _0x51aa56.getComponent(_0x45dbca).removeSelf();
            }
          }
        }
      });
      cc._RF.pop();
    }, {
      'CEntityKnife': "CEntityKnife",
      'CommonAudio': "CommonAudio",
      'CommonValue': 'CommonValue',
      'Tools': "Tools"
    }],
    'CPoolMgr': [function (_0xeb0e4a, _0x799a98, _0x52e676) {
      'use strict';
  
      cc._RF.push(_0x799a98, '3cc45+AgApO+K57+80yNNCV', 'CPoolMgr');
      var _0x2ccc93 = _0xeb0e4a("Types");
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'prefabArray': [cc.Prefab]
        },
        'init': function () {
          this.poolArray = [];
          for (var _0x3a70bc = 0x0; _0x3a70bc < _0x2ccc93.PoolType.COUNT; _0x3a70bc++) {
            var _0x383c28 = new cc.NodePool();
            var _0x44a354 = this.prefabArray[_0x3a70bc];
            var _0x21fc44 = 0x0;
            switch (_0x3a70bc) {
              case _0x2ccc93.PoolType.PLAYER:
              case _0x2ccc93.PoolType.PLAYER_MAIN_FOLLOW:
              case _0x2ccc93.PoolType.PLAYER_DW_FOLLOW:
                _0x21fc44 = 0x1;
                break;
              case _0x2ccc93.PoolType.ENEMY:
                _0x21fc44 = 0x3c;
                break;
              case _0x2ccc93.PoolType.KNIFE:
                _0x21fc44 = 0x64;
                break;
              case _0x2ccc93.PoolType.PROP:
                _0x21fc44 = 0xa;
                break;
              case _0x2ccc93.PoolType.FOLLOW_ENEMY:
                _0x21fc44 = 0x1;
                break;
              case _0x2ccc93.PoolType.DW_KNIFE:
                _0x21fc44 = 0x6;
            }
            for (var _0x4fce69 = 0x0; _0x4fce69 < _0x21fc44 && _0x44a354;) {
              var _0x2c0e2c = cc.instantiate(_0x44a354);
              _0x383c28.put(_0x2c0e2c);
              _0x4fce69++;
            }
            this.poolArray[_0x3a70bc] = _0x383c28;
          }
        },
        'getPlayer': function (_0x3f3f96) {
          if (undefined === _0x3f3f96) {
            _0x3f3f96 = "CEntityPlayer";
          }
          return this.get(_0x2ccc93.PoolType.PLAYER, _0x3f3f96);
        },
        'getPlayerMainFollow': function (_0x2b7539) {
          if (undefined === _0x2b7539) {
            _0x2b7539 = "CEntityFollowPlayer";
          }
          return this.get(_0x2ccc93.PoolType.PLAYER_MAIN_FOLLOW, _0x2b7539);
        },
        'getPlayerDWFollow': function (_0x1ed2c5) {
          if (undefined === _0x1ed2c5) {
            _0x1ed2c5 = "CEntityFollowPlayer";
          }
          return this.get(_0x2ccc93.PoolType.PLAYER_DW_FOLLOW, _0x1ed2c5);
        },
        'getDWKnife': function () {
          return this.get(_0x2ccc93.PoolType.DW_KNIFE);
        },
        'getKnife': function (_0x44f882) {
          if (undefined === _0x44f882) {
            _0x44f882 = "CEntityKnife";
          }
          return this.get(_0x2ccc93.PoolType.KNIFE, _0x44f882);
        },
        'getEnemy': function (_0x5da489) {
          if (undefined === _0x5da489) {
            _0x5da489 = "EntityEnemy";
          }
          return this.get(_0x2ccc93.PoolType.ENEMY, _0x5da489);
        },
        'putEnemy': function (_0x10032b) {
          this.put(_0x2ccc93.PoolType.ENEMY, _0x10032b);
        },
        'getWall': function (_0x373fc6) {
          if (undefined === _0x373fc6) {
            _0x373fc6 = "CEntityWall";
          }
          return this.get(_0x2ccc93.PoolType.WALL, _0x373fc6);
        },
        'getProp': function () {
          return this.get(_0x2ccc93.PoolType.PROP);
        },
        'putProp': function (_0x317662) {
          this.put(_0x2ccc93.PoolType.PROP, _0x317662);
        },
        'getFollowEnemy': function () {
          return this.get(_0x2ccc93.PoolType.FOLLOW_ENEMY);
        },
        'getCollEffect': function () {
          return this.get(_0x2ccc93.PoolType.EFFECT);
        },
        'get': function (_0x11678e, _0xfcd38e) {
          if (undefined === _0xfcd38e) {
            _0xfcd38e = '';
          }
          var _0x15cb51 = this.poolArray[_0x11678e];
          if (_0x15cb51) {
            var _0x1b2128 = _0x15cb51.get();
            if (!_0x1b2128) {
              var _0x1b803f = this.prefabArray[_0x11678e];
              _0x1b2128 = cc.instantiate(_0x1b803f);
            }
            return _0x1b2128;
          }
          cc.error("can't get pool of type:" + _0x11678e);
          return null;
        },
        'put': function (_0x4d71f9, _0x1eb56e) {
          var _0x449bee = this.poolArray[_0x4d71f9];
          if (!_0x449bee || !_0x1eb56e) {
            cc.error("can't get pool of type:" + _0x4d71f9);
            return null;
          }
          _0x449bee.put(_0x1eb56e);
        }
      });
      cc._RF.pop();
    }, {
      'Types': "Types"
    }],
    'CollisionEventManager': [function (_0x5435ff, _0x1c04ec, _0x16a8ce) {
      'use strict';
  
      cc._RF.push(_0x1c04ec, "2e1a25hXA1P6LvFsrwgqYzu", "CollisionEventManager");
      var _0x372998 = _0x1c04ec.exports;
      Object.defineProperty(_0x372998, "__esModule", {
        'value': true
      });
      var _0x39d1de = _0x5435ff("Tools");
      var _0x379fcc = function () {
        function _0xe56623() {
          this._heroCollisionEvent = [];
          this._knifeCollisionEvent = [];
          this._rivalKnifeCollisionEvent = [];
          this._deputyWeaponCollisionEvent = [];
        }
        _0xe56623.getInstance = function () {
          if (null === _0xe56623.instance) {
            _0xe56623.instance = new _0xe56623();
            _0xe56623.instance.init();
          }
          return _0xe56623.instance;
        };
        _0xe56623.cleanUp = function () {
          if (_0xe56623.instance) {
            _0x39d1de.DYTools.cleanUp(_0xe56623.instance);
          }
          _0xe56623.instance = null;
        };
        _0xe56623.prototype.init = function () {
          this.clear();
          cc.director.getCollisionManager().enabled = true;
        };
        _0xe56623.prototype.addCollisionEvent = function (_0xea4ac1, _0x463f18) {
          if (0x1 === _0x463f18.node.groupIndex) {
            this._heroCollisionEvent.push([_0xea4ac1, _0x463f18]);
          } else if (0x2 === _0x463f18.node.groupIndex) {
            this._knifeCollisionEvent.push([_0xea4ac1, _0x463f18]);
          } else if (0x6 === _0x463f18.node.groupIndex) {
            this._rivalKnifeCollisionEvent.push([_0xea4ac1, _0x463f18]);
          } else if (0x9 === _0x463f18.node.groupIndex) {
            this._deputyWeaponCollisionEvent.push([_0xea4ac1, _0x463f18]);
          }
        };
        _0xe56623.prototype.addCollisionStayEvent = function (_0xf75f39, _0x4a8f76) {
          if (0x2 !== _0x4a8f76.node.groupIndex && 0x7 !== _0x4a8f76.node.groupIndex || 0x5 !== _0xf75f39.node.groupIndex && 0x3 !== _0xf75f39.node.groupIndex) {
            if (0x4 === _0x4a8f76.node.groupIndex) {
              this._heroCollisionEvent.push([_0xf75f39, _0x4a8f76]);
            }
          } else {
            this._knifeCollisionEvent.push([_0xf75f39, _0x4a8f76]);
          }
        };
        _0xe56623.prototype.removeCollisionEvent = function (_0x1081e7, _0xf9874d) {
          _0xf9874d.node.groupIndex;
        };
        _0xe56623.prototype.clearKnifeEvent = function () {
          this._knifeCollisionEvent = [];
        };
        _0xe56623.prototype.clearHeroEvent = function () {
          this._heroCollisionEvent = [];
        };
        _0xe56623.prototype.clearDeputyWeaponEvent = function () {
          this._deputyWeaponCollisionEvent = [];
        };
        _0xe56623.prototype.clear = function () {
          this._heroCollisionEvent = [];
          this._knifeCollisionEvent = [];
          this._rivalKnifeCollisionEvent = [];
          this._deputyWeaponCollisionEvent = [];
        };
        _0xe56623.prototype.clearRivalKnifeEvent = function () {
          this._rivalKnifeCollisionEvent = [];
        };
        _0xe56623.prototype.setCollisionAble = function (_0x27d53e) {
          cc.director.getCollisionManager().enabled = _0x27d53e;
        };
        _0xe56623.instance = null;
        return _0xe56623;
      }();
      _0x372998.CollisionEventManager = _0x379fcc;
      cc._RF.pop();
    }, {
      'Tools': 'Tools'
    }],
    'CommonAudio': [function (_0x2b3add, _0x52ec39, _0x263aef) {
      'use strict';
  
      cc._RF.push(_0x52ec39, "4d498XoBn5Ok5Bx39HXKowN", 'CommonAudio');
      var _0x2d3366 = _0x52ec39.exports;
      var _0x3c2a90 = _0x2b3add("Tools");
      var _0x55cf73 = _0x2b3add("GameData");
      _0x2d3366.Enum_Audio = cc.Enum({
        'bgm': "bgm",
        'bgm_main': "bgm_main",
        'bgm_boss': "bgm_boss",
        'goldLess': "goldLess",
        'enemyDie': "eDie",
        'hurt': "hurt",
        'lvup_arms': "lvup_arms",
        'lvup_gold': 'lvup_gold',
        'lvup_open_close': 'lvup_open_close',
        'pick_knife': 'pick_knife',
        'fly_gold': 'fly_gold',
        'stoneBomb': "stoneBomb",
        'strong': "strong",
        'BossDropKnife': "BossDropKnife",
        'warning': "warning",
        'playerFly': 'playerFly',
        'playerFly_1': 'playerFly_1',
        'laserAtk': 'laserAtk',
        'rival': 'rival_',
        'newDW': "newDW",
        'revive': "revive",
        'overSuccess': 'overSuccess',
        'overFailed': "overFailed",
        'overWGold': "overWGold",
        'overLevelChange': "overLevelChange",
        'overGoldChange': 'overGoldChange',
        'bossFireIn': "bossFireIn",
        'bossFireCharge': "bossFireCharge",
        'bossFireAttack': "bossFireAttack",
        'bossFireStep': 'bossFireStep',
        'bossFireDie': 'bossFireDie',
        'bossFireBomb': "bossFireBomb",
        'bossElectrIn': "bossElectrIn",
        'bossElectrLaunch': "bossElectrLaunch",
        'bossElectrGun': "bossElectrGun",
        'bossElectrDie': "bossElectrDie"
      });
      var _0x592328 = function () {
        function _0x41c4ce() {
          this.curGuideAudioId = -0x1;
          this._isSoundOn = true;
          this._isMusicOn = true;
          this.curBgm = _0x2d3366.Enum_Audio.bgm_main;
          this.enemyHurt = null;
          this.willPlayHurt = false;
          this.enemyHurting = false;
          this.dict = {};
          this.clipDict = {};
          this.soundIdDict = {};
          this.hasPlayBgm = false;
        }
        _0x41c4ce.prototype.init = function () {
          var _0x1fc7e3 = this;
          var _0x24ef98 = _0x55cf73.TData.SettingData.sound;
          this._isSoundOn = !!_0x24ef98;
          _0x24ef98 = _0x55cf73.TData.SettingData.music;
          this._isMusicOn = !!_0x24ef98;
          var _0x5b82f2 = function (_0x2ebbf7) {
            if ("rival" == _0x2ebbf7) {
              var _0x233526 = function (_0x3e2fdb) {
                var _0x1ba95c = _0x2d3366.Enum_Audio[_0x2ebbf7] + _0x3e2fdb;
                var _0x149d58 = 'audio/' + _0x1ba95c;
                cc.loader.loadRes(_0x149d58, function (_0x1a821c, _0x30534e) {
                  if (_0x1a821c) {
                    _0x3c2a90.DYTools.error(_0x1a821c);
                  } else {
                    _0x1fc7e3.clipDict[_0x1ba95c] = _0x30534e;
                  }
                });
              };
              for (var _0x4ac701 = 0x1; _0x4ac701 <= 0x8; _0x4ac701++) {
                _0x233526(_0x4ac701);
              }
            } else {
              var _0x799af0 = _0x2d3366.Enum_Audio[_0x2ebbf7];
              var _0x5f0bab = "audio/" + _0x2d3366.Enum_Audio[_0x2ebbf7];
              cc.loader.loadRes(_0x5f0bab, function (_0x565fe1, _0x1494f0) {
                if (_0x565fe1) {
                  _0x3c2a90.DYTools.error(_0x565fe1);
                } else {
                  _0x1fc7e3.clipDict[_0x799af0] = _0x1494f0;
                }
              });
            }
          };
          for (var _0x47455e in _0x2d3366.Enum_Audio) _0x5b82f2(_0x47455e);
        };
        _0x41c4ce.prototype.checkBgm = function () {
          if (cc.sys.os == cc.sys.OS_IOS && this.hasPlayBgm) {
            if (!cc.audioEngine.isMusicPlaying()) {
              if (this.curBgm) {
                this.playBgm(this.curBgm);
              }
            }
          }
        };
        _0x41c4ce.prototype.playBgm = function (_0x2461b2) {
          this.curBgm = _0x2461b2;
          if (this._isMusicOn) {
            if (this.clipDict[_0x2461b2]) {
              cc.audioEngine.playMusic(this.clipDict[_0x2461b2], true);
              this.hasPlayBgm = true;
            } else {
              var _0x559a35 = "audio/" + _0x2461b2;
              cc.loader.loadRes(_0x559a35, function (_0x2e0830, _0x866011) {
                if (_0x2e0830) {
                  _0x3c2a90.DYTools.error(_0x2e0830);
                } else {
                  cc.audioEngine.playMusic(_0x866011, true);
                  this.hasPlayBgm = true;
                }
              });
            }
          }
        };
        _0x41c4ce.prototype.playSound = function (_0x5c090e, _0x4cab13) {
          if (undefined === _0x4cab13) {
            _0x4cab13 = false;
          }
          if (this._isSoundOn) {
            if (this.clipDict[_0x5c090e]) {
              this.soundIdDict[_0x5c090e] = this.playSoundWithClip(this.clipDict[_0x5c090e], _0x4cab13);
            } else {
              var _0x18c24e = this;
              var _0x28b441 = 'audio/' + _0x5c090e;
              cc.loader.loadRes(_0x28b441, function (_0x140d49, _0xf3308b) {
                if (_0x140d49) {
                  _0x3c2a90.DYTools.error(_0x140d49);
                } else {
                  _0x18c24e.clipDict[_0x5c090e] = _0xf3308b;
                  var _0x378d3a = _0x18c24e.playSoundWithClip(_0xf3308b, _0x4cab13);
                  _0x18c24e.soundIdDict[_0x5c090e] = _0x378d3a;
                }
              });
            }
          }
        };
        _0x41c4ce.prototype.playSoundWithClip = function (_0x299db2, _0x1f0bb4) {
          if (undefined === _0x1f0bb4) {
            _0x1f0bb4 = false;
          }
          return this._isSoundOn ? cc.audioEngine.playEffect(_0x299db2, _0x1f0bb4) : -0x1;
        };
        Object.defineProperty(_0x41c4ce.prototype, "musicOn", {
          'get': function () {
            return this._isMusicOn;
          },
          'set': function (_0x5312ca) {
            this._isMusicOn = _0x5312ca;
            _0x55cf73.TData.setSettingMusic(_0x5312ca ? 0x1 : 0x0);
            if (this._isMusicOn) {
              this.playBgm(this.curBgm);
            } else {
              cc.audioEngine.stopAll();
            }
          },
          'enumerable': true,
          'configurable': true
        });
        Object.defineProperty(_0x41c4ce.prototype, "soundOn", {
          'get': function () {
            return this._isSoundOn;
          },
          'set': function (_0x298471) {
            this._isSoundOn = _0x298471;
            _0x55cf73.TData.setSettingSound(_0x298471 ? 0x1 : 0x0);
          },
          'enumerable': true,
          'configurable': true
        });
        _0x41c4ce.prototype.stopSoundByName = function (_0x1f5e34) {
          if (this.soundIdDict[_0x1f5e34]) {
            cc.audioEngine.stopEffect(this.soundIdDict[_0x1f5e34]);
            this.soundIdDict[_0x1f5e34] = -0x1;
          }
        };
        _0x41c4ce.prototype.stopSound = function (_0x500b51) {
          if (this._isSoundOn) {
            cc.audioEngine.stopEffect(_0x500b51);
          }
        };
        _0x41c4ce.prototype.stopAllSound = function () {
          if (this._isSoundOn) {
            cc.audioEngine.stopAllEffects();
          }
        };
        _0x41c4ce.prototype.playEnemyHurtSound = function () {
          if (this._isSoundOn) {
            this.willPlayHurt = true;
            if (this.enemyHurt) {
              this.checkEnemyHurtSound();
            } else {
              var _0x184104 = this;
              var _0x1ca8f3 = "audio/" + _0x2d3366.Enum_Audio.hurt;
              cc.loader.loadRes(_0x1ca8f3, function (_0x157ead, _0x85406e) {
                if (_0x157ead) {
                  _0x3c2a90.DYTools.error(_0x157ead);
                } else {
                  _0x184104.enemyHurt = _0x85406e;
                  _0x184104.checkEnemyHurtSound();
                }
              });
            }
          }
        };
        _0x41c4ce.prototype.checkEnemyHurtSound = function () {
          var _0x52335a = this.getSoundNum(_0x2d3366.Enum_Audio.hurt);
          if (_0x52335a < 0x5) {
            var _0x13a789 = this;
            this.dict[_0x2d3366.Enum_Audio.hurt] = _0x52335a + 0x1;
            var _0x1b25b2 = cc.audioEngine.playEffect(this.enemyHurt, false);
            cc.audioEngine.setFinishCallback(_0x1b25b2, function () {
              _0x13a789.dict[_0x2d3366.Enum_Audio.hurt] = _0x13a789.getSoundNum(_0x2d3366.Enum_Audio.hurt) - 0x1;
              _0x13a789.soundIdDict[_0x2d3366.Enum_Audio.hurt] = _0x1b25b2;
            });
          }
        };
        _0x41c4ce.prototype.getSoundNum = function (_0xf9a0e6) {
          var _0x5b1847 = this.dict[_0xf9a0e6];
          if (!_0x5b1847) {
            _0x5b1847 = 0x0;
          }
          return _0x5b1847;
        };
        _0x41c4ce.instance = new _0x41c4ce();
        return _0x41c4ce;
      }();
      _0x2d3366.GAudio = _0x592328.instance;
      window.GAudio = _0x2d3366.GAudio;
      cc._RF.pop();
    }, {
      'GameData': "GameData",
      'Tools': 'Tools'
    }],
    'CommonConfig': [function (_0x7d7a3e, _0x2948fc, _0x55cb5b) {
      'use strict';
  
      cc._RF.push(_0x2948fc, "36400VwPKBN1KtXaITWwcdd", 'CommonConfig');
      var _0x3ff5c1 = _0x2948fc.exports;
      var _0x38c158 = _0x7d7a3e('CommonEnum');
      var _0x13859f = _0x7d7a3e("CommonEnum");
      var _0x4d05cb = _0x7d7a3e('GameData');
      var _0x378f2b = _0x7d7a3e("Types");
      var _0xd8e706 = function () {
        function _0x39e344() {
          this.Server_Local = 'http://192.168.1.92:8080/bladeX';
          this.Server_Test = "http://62.234.166.105:80/bladeX";
          this.Server_Publish_WeiXin = "https://popstar.gameley02.cn/popStar12";
          this.Version_Num = "0.1.9";
          this.VersionCode = 0x6d;
          this.Url_Login = this.Server_Local;
          this.environment = _0x38c158.Enum_EnvironmentType.Publish;
          this.channel = _0x13859f.Enum_Channel.Local;
          this.BiReport = true;
          this.hasLog = false;
          this.isCheat = false;
          this.isLocal = false;
          this.DeviceList_TopBar = ["IPHONE X", "Y85A", "PAAM00", "PACM00"];
          this.actionFrameTime = 0.0333;
          this.SeparatorI = '#';
          this.SeparatorII = '*';
          this.SeparatorIII = ',';
          this.MaxLevel = 0x13;
          this.MapDict = {};
          this.LevelDict = {};
          this.EnemyDict = {};
          this.AttrDict = {};
          this.EnemyOutDict = {};
          this.PauseDict = {};
          this.EnemyConDict = {};
          this.MapAreaEnemyDict = {};
          this.MapBossDict = {};
          this.BossKnifeDict = {};
          this.MapBossSnakeDict = {};
          this.MapBossCircleDict = {};
          this.MapBossFireDict = {};
          this.MapBossElectrDict = {};
          this.PropertyArmsMainDict = {};
          this.PropertyArmsSubDict = {};
          this.PropertyGoldKillDict = {};
          this.PropertyGoldOfflineDict = {};
          this.GbData = {};
          this.GuideDict = {};
          this.colorArr = [cc.color(0xff, 0xff, 0x0), cc.color(0x0, 0xff, 0x0), cc.color(0x0, 0xbe, 0xff), cc.color(0xbe, 0x0, 0xff), cc.color(0xff, 0x0, 0xb4), cc.color(0xff, 0x0, 0x0)];
          this.enemyFirePos = {
            0x1: cc.v2(0x0, 0x0),
            0x2: cc.v2(0x0, 0x6),
            0x3: cc.v2(0x0, 0xa),
            0x4: cc.v2(0x0, -0x6),
            0x5: cc.v2(0x0, -0xe),
            0x6: cc.v2(0x0, 0x0),
            0x9: cc.v2(0x0, -0xa),
            0xa: cc.v2(0x0, 0x0),
            0xb: cc.v2(0x0, 0xa),
            0x65: cc.v2(0x0, 0x0),
            0x68: cc.v2(0x0, -0x14),
            0x6a: cc.v2(0x0, 0x0),
            0xc8: cc.v2(0x0, -0x6),
            0xc9: cc.v2(0x0, 0xa),
            0xca: cc.v2(0x0, 0x14),
            0xcb: cc.v2(0x0, 0x14),
            0x3e9: cc.v2(0x0, -0x14),
            0x3ea: cc.v2(0x0, -0xa)
          };
          this.enemyFireScale = {
            0x4: 1.8,
            0x6: 1.8
          };
          this.enemyGoldEyePos = {
            0x1: cc.v2(0x1a, -0x2a),
            0x2: cc.v2(0x1c, -0x1a),
            0x3: cc.v2(0x26, -0x26),
            0x4: cc.v2(0x26, -0x26),
            0x5: cc.v2(0x0, -0xe),
            0x6: cc.v2(0x0, 0x0),
            0x9: cc.v2(0x0, -0xa),
            0xa: cc.v2(0x0, 0x0),
            0xb: cc.v2(0x0, 0xa),
            0x65: cc.v2(0x0, 0x0),
            0x68: cc.v2(0x0, -0x14),
            0x6a: cc.v2(0x0, 0x0),
            0xc8: cc.v2(0x0, -0x6),
            0xc9: cc.v2(0x0, 0xa),
            0xca: cc.v2(0x0, 0x14),
            0xcb: cc.v2(0x0, 0x14),
            0x3e9: cc.v2(0x0, -0x14),
            0x3ea: cc.v2(0x0, -0xa)
          };
          this.enemyGoldEyeScale = {
            0x1: 0x1,
            0x2: 0x1,
            0x3: 0x1,
            0x4: 0x1,
            0x5: 0x1,
            0x6: 0x1
          };
        }
        Object.defineProperty(_0x39e344.prototype, "isDevelop", {
          'get': function () {
            return this.environment == _0x38c158.Enum_EnvironmentType.Develop;
          },
          'enumerable': true,
          'configurable': true
        });
        Object.defineProperty(_0x39e344.prototype, "isWx", {
          'get': function () {
            return this.channel == _0x13859f.Enum_Channel.WeiXin;
          },
          'enumerable': true,
          'configurable': true
        });
        _0x39e344.prototype.addLevelData = function (_0x38f6f4) {
          this.LevelDict[_0x38f6f4.level] = _0x38f6f4;
        };
        _0x39e344.prototype.getLevelData = function (_0x188dd8) {
          return this.LevelDict[_0x188dd8];
        };
        _0x39e344.prototype.addEnemyData = function (_0x2d5669) {
          this.EnemyDict[_0x2d5669.id] = _0x2d5669;
        };
        _0x39e344.prototype.getEnemyData = function (_0x45b65c) {
          return this.EnemyDict[_0x45b65c];
        };
        _0x39e344.prototype.addAttrData = function (_0x5ed1cc) {
          this.AttrDict[_0x5ed1cc.id] = _0x5ed1cc;
        };
        _0x39e344.prototype.getAttrData = function (_0x38300f) {
          return this.AttrDict[_0x38300f];
        };
        _0x39e344.prototype.addEnemyOutData = function (_0x886dca) {
          this.EnemyOutDict[_0x886dca.id] = _0x886dca;
        };
        _0x39e344.prototype.getEnemyOutData = function (_0x71aabb) {
          return this.EnemyOutDict[_0x71aabb];
        };
        _0x39e344.prototype.addPauseData = function (_0x329620) {
          this.PauseDict[_0x329620.id] = _0x329620;
        };
        _0x39e344.prototype.getPauseData = function (_0x1250c8) {
          return this.PauseDict[_0x1250c8];
        };
        _0x39e344.prototype.addEnemyConData = function (_0x51a916) {
          this.EnemyConDict[_0x51a916.id] = _0x51a916;
        };
        _0x39e344.prototype.getEnemyConData = function (_0x3785b4) {
          return this.EnemyConDict[_0x3785b4];
        };
        _0x39e344.prototype.addMapAreaEnemyData = function (_0x3924b8) {
          this.MapAreaEnemyDict[_0x3924b8.id] = _0x3924b8;
        };
        _0x39e344.prototype.getMapAreaEnemyData = function (_0x20c0d4) {
          return this.MapAreaEnemyDict[_0x20c0d4];
        };
        _0x39e344.prototype.addMapBossData = function (_0xedc165) {
          this.MapBossDict[_0xedc165.id] = _0xedc165;
        };
        _0x39e344.prototype.getMapBossData = function (_0x43f3b7) {
          return this.MapBossDict[_0x43f3b7];
        };
        _0x39e344.prototype.getConfigBossDatas = function (_0x5a2987) {
          var _0x37eca4 = [];
          for (var _0xf3fae3 = 0x0; _0xf3fae3 < _0x5a2987.type.length; _0xf3fae3++) {
            _0x37eca4.push(this.getConfigBossData(_0x5a2987.type[_0xf3fae3], _0x5a2987.bId[_0xf3fae3]));
          }
          return _0x37eca4;
        };
        _0x39e344.prototype.getConfigBossData = function (_0x266e73, _0x120e91) {
          var _0x1e469e = null;
          switch (_0x266e73) {
            case _0x378f2b.BossType.Knife:
              _0x1e469e = _0x3ff5c1.GConfig.getKnifeBossData(_0x120e91);
              break;
            case _0x378f2b.BossType.Snake:
              _0x1e469e = _0x3ff5c1.GConfig.getMapBossSnakeData(_0x120e91);
              break;
            case _0x378f2b.BossType.Circle:
              _0x1e469e = _0x3ff5c1.GConfig.getMapBossCircleData(_0x120e91);
              break;
            case _0x378f2b.BossType.Fire:
              _0x1e469e = _0x3ff5c1.GConfig.getMapBossFireData(_0x120e91);
              break;
            case _0x378f2b.BossType.Electr:
              _0x1e469e = _0x3ff5c1.GConfig.getMapBossElectrData(_0x120e91);
          }
          return _0x1e469e;
        };
        _0x39e344.prototype.addKnifeBossData = function (_0x15a525) {
          this.BossKnifeDict[_0x15a525.id] = _0x15a525;
        };
        _0x39e344.prototype.getKnifeBossData = function (_0x579010) {
          return this.BossKnifeDict[_0x579010];
        };
        _0x39e344.prototype.addMapBossSnakeData = function (_0x309877) {
          this.MapBossSnakeDict[_0x309877.id] = _0x309877;
        };
        _0x39e344.prototype.getMapBossSnakeData = function (_0xead3da) {
          return this.MapBossSnakeDict[_0xead3da];
        };
        _0x39e344.prototype.addMapBossCircleData = function (_0x3f27d4) {
          this.MapBossCircleDict[_0x3f27d4.id] = _0x3f27d4;
        };
        _0x39e344.prototype.getMapBossCircleData = function (_0x3e7bef) {
          return this.MapBossCircleDict[_0x3e7bef];
        };
        _0x39e344.prototype.addMapBossFireData = function (_0x1378d3) {
          this.MapBossFireDict[_0x1378d3.id] = _0x1378d3;
        };
        _0x39e344.prototype.getMapBossFireData = function (_0x5d644c) {
          return this.MapBossFireDict[_0x5d644c];
        };
        _0x39e344.prototype.addMapBossElectrData = function (_0x1b9d2c) {
          this.MapBossElectrDict[_0x1b9d2c.id] = _0x1b9d2c;
        };
        _0x39e344.prototype.getMapBossElectrData = function (_0x45c117) {
          return this.MapBossElectrDict[_0x45c117];
        };
        _0x39e344.prototype.addPropertyArmsMainData = function (_0x3e7686) {
          this.PropertyArmsMainDict[_0x3e7686.lv] = _0x3e7686;
        };
        _0x39e344.prototype.getPropertyArmsMainData = function (_0xb44db5) {
          return this.PropertyArmsMainDict[_0xb44db5];
        };
        _0x39e344.prototype.getPropertyData_Main = function () {
          var _0xccb0a3 = _0x4d05cb.TData.getPropertyLv(_0x38c158.Enum_PropertyId.ArmsMain);
          return _0x3ff5c1.GConfig.getPropertyArmsMainData(_0xccb0a3);
        };
        _0x39e344.prototype.addPropertyArmsSubData = function (_0x5e700d) {
          if (!this.PropertyArmsSubDict[_0x5e700d.fun]) {
            this.PropertyArmsSubDict[_0x5e700d.fun] = {};
          }
          this.PropertyArmsSubDict[_0x5e700d.fun][_0x5e700d.lv] = _0x5e700d;
        };
        _0x39e344.prototype.getPropertyArmsSubData = function (_0x4522dc, _0x665d) {
          return this.PropertyArmsSubDict[_0x4522dc] ? this.PropertyArmsSubDict[_0x4522dc][_0x665d] : null;
        };
        _0x39e344.prototype.getPropertyData_Sub = function (_0xe4ddbd) {
          var _0x5727bb = _0x4d05cb.TData.getPropertyLv_Sub(_0xe4ddbd);
          return _0x3ff5c1.GConfig.getPropertyArmsSubData(_0xe4ddbd, _0x5727bb);
        };
        _0x39e344.prototype.addPropertyGoldKillData = function (_0x2d9711) {
          this.PropertyGoldKillDict[_0x2d9711.lv] = _0x2d9711;
        };
        _0x39e344.prototype.getPropertyGoldKillData = function (_0x498f8e) {
          return this.PropertyGoldKillDict[_0x498f8e];
        };
        _0x39e344.prototype.getPropertyData_GoldKill = function () {
          var _0x3567d9 = _0x4d05cb.TData.getPropertyLv(_0x38c158.Enum_PropertyId.GoldKill);
          return _0x3ff5c1.GConfig.getPropertyGoldKillData(_0x3567d9);
        };
        _0x39e344.prototype.addPropertyGoldOfflineData = function (_0xa6b4f) {
          this.PropertyGoldOfflineDict[_0xa6b4f.lv] = _0xa6b4f;
        };
        _0x39e344.prototype.getPropertyGoldOfflineData = function (_0x289552) {
          return this.PropertyGoldOfflineDict[_0x289552];
        };
        _0x39e344.prototype.getPropertyData_GoldOffline = function () {
          var _0x532b83 = _0x4d05cb.TData.getPropertyLv(_0x38c158.Enum_PropertyId.GoldOffline);
          return _0x3ff5c1.GConfig.getPropertyGoldOfflineData(_0x532b83);
        };
        _0x39e344.prototype.addGbData = function (_0x477495, _0x535ece) {
          this.GbData[_0x477495] = _0x535ece;
        };
        _0x39e344.prototype.getGbData = function (_0x11c0bf) {
          var _0x35420d = this.GbData[_0x11c0bf];
          if (undefined == _0x35420d) {
            _0x35420d = '';
          }
          return _0x35420d;
        };
        _0x39e344.prototype.addGuideData = function (_0x5aaa44, _0x1ed5af) {
          this.GuideDict[_0x5aaa44] = _0x1ed5af;
        };
        _0x39e344.prototype.getGuideData = function (_0xbc16e6) {
          return this.GuideDict[_0xbc16e6];
        };
        _0x39e344.instance = new _0x39e344();
        return _0x39e344;
      }();
      _0x3ff5c1.GConfig = _0xd8e706.instance;
      cc._RF.pop();
    }, {
      'CommonEnum': 'CommonEnum',
      'GameData': "GameData",
      'Types': "Types"
    }],
    'CommonEnum': [function (_0x4a53e6, _0x15a651, _0x1efc1c) {
      'use strict';
  
      cc._RF.push(_0x15a651, "dd71b0rrYVFv4uGPSaPXa4O", "CommonEnum");
      var _0xdb4a52 = _0x15a651.exports;
      _0xdb4a52.Enum_EnvironmentType = cc.Enum({
        'Develop': -0x1,
        'Publish': 0x1
      });
      _0xdb4a52.Enum_Channel = cc.Enum({
        'Local': -0x1,
        'WeiXin': 0x1,
        'Google': 0x2
      });
      _0xdb4a52.Enum_Sex = cc.Enum({
        'Sex_Boy': 0x1,
        'Sex_Girl': 0x2
      });
      _0xdb4a52.Enum_Reward = cc.Enum({
        'Gold': 0x1,
        'Power': 0x2
      });
      _0xdb4a52.Enum_Num = cc.Enum({
        'Blood': 0x1,
        'Level': 0x2,
        'Property': 0xb,
        'SubLv': 0xc
      });
      _0xdb4a52.Enum_PropertySys = cc.Enum({
        'None': 0x0,
        'ArmsMain': 0x1,
        'ArmsSub': 0x2,
        'Gold': 0x3
      });
      _0xdb4a52.Enum_PropertyId = cc.Enum({
        'None': 0x0,
        'ArmsMain': 0x1,
        'ArmsSub': 0x2,
        'GoldKill': 0x3,
        'GoldOffline': 0x4
      });
      _0xdb4a52.E_CTag = cc.Enum({
        'Boss_SnakeHead': 0x3e8,
        'Boss_SnakeTail': 0x44c,
        'Boss_ElectrHead': 0x4b0,
        'Boss_ElectrLine': 0x514,
        'Boss_Circle': 0x7d0,
        'Boss_Fire': 0xbb8,
        'Boss_FireHand': 0xbb9,
        'Boss_Parent': 0x2710
      });
      _0xdb4a52.Enum_Gb = cc.Enum({
        'PowerMax': 0x1,
        'PowerUse': 0x2,
        'PowerRecoverTime': 0x3,
        'EnemyColor': 0x4,
        'PropStrong': 0x5,
        'PropSlow': 0x6,
        'StagePower': 0x7,
        'MaxLevel': 0x8,
        'StrongAtk': 0x9,
        'ReviveAtk': 0xa,
        'WeaponReport': 0xb,
        'ReviveFree': 0xc,
        'StageFail': 0xd,
        'PropGold': 0xe,
        'adShareSwitch': 0x3e8,
        'shareCount': 0x3e9,
        'shareTime': 0x3ea,
        'shareProb': 0x3eb,
        'addMyProgram': 0x3ec,
        'GiftPowerFallDown': 0x3ed,
        'GiftPowerRecover': 0x3ee,
        'GiftGoldStage': 0x3ef,
        'OfflineTimes': 0x3f0,
        'SubTryStage': 0x3f1,
        'SubTryDie': 0x3f2,
        'SubTryMaxCount': 0x3f3,
        'officialEnter': 0x3f4,
        'lingjingSwitch': 0x3f5,
        'lingjingArea': 0x3f6
      });
      _0xdb4a52.Enum_Switch = cc.Enum({});
      _0xdb4a52.Enum_Banner = cc.Enum({
        'Banner_Main': 0x1,
        'Banner_Outline': 0x2,
        'Banner_Rank': 0x3,
        'Banner_CheckIn': 0x4,
        'Banner_CIExtra': 0x5,
        'Banner_Shop': 0x6,
        'Banner_FreeLvUp': 0xa,
        'Banner_Invite': 0xb,
        'Banner_Daily': 0xc,
        'Banner_Goods': 0xd
      });
      _0xdb4a52.Enum_ADShare = cc.Enum({
        'AS_Menu': 0x0,
        'AS_Revive': 0x1,
        'AS_Over': 0x2,
        'AS_Offline': 0x3,
        'AS_Power': 0x4,
        'AS_Gold': 0x5,
        'AS_TrySub': 0x6,
        'AS_FreeLU': 0x7
      });
      _0xdb4a52.Enum_AdShareType = cc.Enum({
        'None': 0x0,
        'Ad': 0x1,
        'Share': 0x2,
        'Free': 0x3
      });
      _0xdb4a52.Enum_Loading = cc.Enum({
        'Start': 0x1,
        'WXLogin': 0x2,
        'WXLoginSuc': 0x3,
        'Json': 0x4,
        'JsonEnd': 0x5,
        'Main': 0x6
      });
      _0xdb4a52.Enum_GuideStep = cc.Enum({
        'StageStart': 0x1,
        'Finger': 0x2,
        'Flash': 0x3,
        'StageOver': 0x4,
        'MainUp': 0x5,
        'SubUp': 0x6
      });
      _0xdb4a52.Enum_ReportErr = cc.Enum({
        'MainSceneLoad': 0x1
      });
      _0xdb4a52.Enum_AfType = cc.Enum({
        'load': 0x1,
        'guide': 0x2,
        'stageWin': 0x3,
        'video_finish': 0x4,
        'mainLvup': 0x5,
        'subLvup': 0x6
      });
      cc._RF.pop();
    }, {}],
    'CommonFunc': [function (_0x1dcd71, _0x160ca2, _0x15dadb) {
      'use strict';
  
      cc._RF.push(_0x160ca2, "0101744DgVDm7OR7EYttilr", "CommonFunc");
      var _0x3eb055 = _0x160ca2.exports;
      var _0x541acc = _0x1dcd71("aes");
      var _0xd05435 = _0x1dcd71("CommonValue");
      var _0x400fe8 = _0x1dcd71("CommonSdk");
      var _0xce3702 = _0x1dcd71("CommonConfig");
      var _0x34036 = _0x1dcd71('CommonEnum');
      var _0x565c13 = _0x1dcd71("Tools");
      var _0x2a4442 = _0x1dcd71("LoadingData");
      var _0x4a88a4 = _0x1dcd71("GameData");
      var _0x15676e = _0x1dcd71("ConfigData");
      var _0x192ff7 = function () {
        function _0xf38cfa() {
          this.m_gameScale = -0x1;
          this.panelLoading = null;
          this.EnemySkinDict = {};
          this.performance_level = 0x32;
          this.performance_count = 0x0;
          this.performance_dt = 0x0;
          this.performance_time = 0x5;
          window.CommonFunc = this;
        }
        _0xf38cfa.prototype.adjustScreen = function (_0x4947d8) {
          if (this.m_gameScale < 0x0) {
            var _0x3a8d82 = _0xd05435.GValue.Size_View;
            var _0x1ffc67 = cc.size(0x2d0, 0x500);
            var _0x3ef3e1 = _0x3a8d82.height / _0x1ffc67.height * _0x1ffc67.width;
            this.m_gameScale = _0x3a8d82.width / _0x3ef3e1;
          }
          if (this.m_gameScale < 0x1) {
            _0x4947d8.scale = this.m_gameScale;
          }
        };
        _0xf38cfa.prototype.isIPhoneX = function () {
          return _0xf38cfa;
        };
        _0xf38cfa.prototype.f_check_topbar = function (_0x5b4427) {
          if (!(_0xce3702.GConfig.channel != _0x34036.Enum_Channel.WeiXin)) {
            _0xd05435.GValue.Has_TopBar = _0x400fe8.GSDK.getGameScreenTopOffsetY > 0x0;
            _0x565c13.DYTools.error("GValue.Has_TopBar = " + _0xd05435.GValue.Has_TopBar);
          }
        };
        _0xf38cfa.prototype.close_keyBoard = function () {
          if (!_0xce3702.GConfig.isDevelop) {
            _0x400fe8.GSDK.close_keyboard();
          }
        };
        _0xf38cfa.prototype.showFloatTips = function (_0x2a9ecf, _0x326bd9, _0x367c94, _0x25c88e) {
          if (undefined === _0x326bd9) {
            _0x326bd9 = null;
          }
          if (undefined === _0x367c94) {
            _0x367c94 = null;
          }
          if (undefined === _0x25c88e) {
            _0x25c88e = null;
          }
          cc.loader.loadRes("prefab/common/PfTip", function (_0x3a79aa, _0xba75e1) {
            if (_0x3a79aa) {
              _0x565c13.DYTools.error(_0x3a79aa.message || _0x3a79aa);
            } else {
              _0x565c13.DYTools.createPrefabCom(_0xd05435.GValue.Root_Canvas, _0xba75e1, 'PfTip').show(_0x2a9ecf, _0x326bd9, _0x367c94, _0x25c88e);
            }
          });
        };
        _0xf38cfa.prototype.showModal = function (_0x201110, _0x2a717c, _0x157a31, _0x1386df) {
          this.createPrefabByName('PanelModal', _0xd05435.GValue.EntityWorld.node, function (_0x315aad) {
            _0x315aad.node.name = "PanelModal";
            _0x315aad.create(_0x201110, _0x2a717c, _0x157a31, _0x1386df);
          });
        };
        _0xf38cfa.prototype.showLoading = function () {
          this.createPrefabByName("PanelLoading", _0xd05435.GValue.Root_Canvas, function (_0x5a6369) {
            _0x3eb055.GFunc.panelLoading = _0x5a6369.node;
          });
        };
        _0xf38cfa.prototype.hideLoading = function () {
          if (this.panelLoading) {
            this.panelLoading.removeFromParent();
            this.panelLoading = null;
          }
        };
        _0xf38cfa.prototype.createPrefabByName = function (_0xf53c22, _0x14970c, _0x495bc6, _0x103656, _0x2637d5, _0x1bc5f9) {
          if (undefined === _0x495bc6) {
            _0x495bc6 = null;
          }
          if (undefined === _0x103656) {
            _0x103656 = true;
          }
          if (undefined === _0x2637d5) {
            _0x2637d5 = cc.v2(0x0, 0x0);
          }
          if (undefined === _0x1bc5f9) {
            _0x1bc5f9 = true;
          }
          var _0x5f3f67 = _0x565c13.DYTools.getConstructor(_0xf53c22);
          var _0x24755b = null;
          if (_0x5f3f67) {
            if (_0x5f3f67.prefabPath) {
              var _0x349706 = new _0x2a4442();
              _0x349706.addListResPf(_0x5f3f67.prefabPath);
              _0x349706.loadRes(function () {
                _0x349706 = null;
                cc.loader.loadRes(_0x5f3f67.prefabPath, cc.Prefab, function (_0x2669a2, _0x1bd1ab) {
                  if (_0x2669a2) {
                    _0x565c13.DYTools.error("error during creating layer:" + _0xf53c22 + " error:" + _0x2669a2);
                  } else {
                    if (_0x1bd1ab) {
                      var _0xfc5292 = null;
                      if (_0x1bc5f9) {
                        var _0x3cace4 = _0x5f3f67.prefabPath.substr(_0x5f3f67.prefabPath.lastIndexOf('/') + 0x1);
                        for (var _0x1530bb = 0x0; _0x1530bb < _0x14970c.children.length; _0x1530bb++) {
                          if (_0x14970c.children[_0x1530bb].name == _0x3cace4) {
                            _0xfc5292 = _0x14970c.children[_0x1530bb];
                          }
                        }
                      }
                      if (null == _0xfc5292) {
                        _0xfc5292 = cc.instantiate(_0x1bd1ab);
                      }
                      _0xfc5292.parent = _0x14970c;
                      _0xfc5292.positon = _0x2637d5;
                      _0x24755b = _0xfc5292.getComponent(_0xf53c22);
                    }
                    if (null === _0x24755b) {
                      _0x565c13.DYTools.error("Can not get component of " + _0xf53c22);
                    } else {
                      _0x24755b.onEnter();
                      if (false === _0x103656) {
                        _0x24755b.node.active = false;
                      }
                    }
                  }
                  if (_0x24755b && _0x495bc6) {
                    _0x495bc6(_0x24755b);
                  }
                });
              }, null);
            } else {
              _0x565c13.DYTools.error("please assign " + _0xf53c22 + "'s static var prefabPath");
              if (_0x495bc6) {
                _0x495bc6(null);
              }
            }
          } else {
            _0x565c13.DYTools.error("Can not get constructor of " + _0xf53c22);
            if (_0x495bc6) {
              _0x495bc6(null);
            }
          }
        };
        _0xf38cfa.prototype.changeAtlasSprite = function (_0x456c84, _0xaa1c01, _0x54069f) {
          if (_0x456c84 && _0xaa1c01) {
            _0xaa1c01.spriteFrame = _0x456c84.getSpriteFrame(_0x54069f);
          }
        };
        _0xf38cfa.prototype.resetCommonData = function () {};
        _0xf38cfa.prototype.preloadMaps = function (_0x51e77b, _0x4f0233, _0x1ee082) {
          if (undefined === _0x4f0233) {
            _0x4f0233 = null;
          }
          if (undefined === _0x1ee082) {
            _0x1ee082 = null;
          }
          for (var _0x3b669b = 0x0; _0x3b669b < _0x51e77b.length; _0x3b669b++) {
            this.preLoadMap(_0x51e77b[_0x3b669b], _0x4f0233);
            if (_0x3b669b == _0x51e77b.length - 0x1 && _0x1ee082) {
              _0x1ee082();
            }
          }
        };
        _0xf38cfa.prototype.preLoadMap = function (_0x24d53e, _0x2b321b) {
          if (undefined === _0x2b321b) {
            _0x2b321b = null;
          }
          var _0x3afcd6 = 'map/map_' + _0x24d53e;
          cc.loader.loadRes(_0x3afcd6, function (_0x218890, _0x2291c3) {
            if (_0x218890) {
              _0x565c13.DYTools.error(_0x218890);
              _0x3eb055.GFunc.preLoadMap(_0x24d53e, _0x2b321b);
            } else {
              var _0x2251c8 = _0x2291c3.json;
              var _0xc5deda = new _0x15676e.MapData();
              _0xc5deda.bgW = parseInt(_0x2251c8.bgW);
              _0xc5deda.bgH = parseInt(_0x2251c8.bgH);
              var _0x4e8da1 = _0x2251c8.vL;
              for (var _0x33c065 = 0x0; _0x33c065 < _0x4e8da1.length; _0x33c065++) {
                var _0x1b93e7 = cc.v2(Number(_0x4e8da1[_0x33c065].x), Number(_0x4e8da1[_0x33c065].y));
                _0xc5deda.vL.push(_0x1b93e7);
              }
              _0x4e8da1 = _0x2251c8.wL;
              for (_0x33c065 = 0x0; _0x33c065 < _0x4e8da1.length; _0x33c065++) {
                var _0x2e53c9 = _0x4e8da1[_0x33c065];
                var _0x1dda4a = new _0x15676e.MapWallData();
                if (_0x2e53c9.hasOwnProperty('ax')) {
                  _0x1dda4a.ax = Number(_0x2e53c9.ax);
                }
                if (_0x2e53c9.hasOwnProperty('ay')) {
                  _0x1dda4a.ay = Number(_0x2e53c9.ay);
                }
                if (_0x2e53c9.hasOwnProperty('x')) {
                  _0x1dda4a.x = Number(_0x2e53c9.x);
                }
                if (_0x2e53c9.hasOwnProperty('y')) {
                  _0x1dda4a.y = Number(_0x2e53c9.y);
                }
                if (_0x2e53c9.hasOwnProperty('sx')) {
                  _0x1dda4a.sx = Number(_0x2e53c9.sx);
                }
                if (_0x2e53c9.hasOwnProperty('sy')) {
                  _0x1dda4a.sy = Number(_0x2e53c9.sy);
                }
                if (_0x2e53c9.hasOwnProperty('rt')) {
                  _0x1dda4a.rt = Number(_0x2e53c9.rt);
                }
                if (_0x2e53c9.hasOwnProperty('wt')) {
                  _0x1dda4a.wt = Number(_0x2e53c9.wt);
                }
                if (_0x2e53c9.hasOwnProperty('ht')) {
                  _0x1dda4a.ht = Number(_0x2e53c9.ht);
                }
                if (_0x2e53c9.hasOwnProperty('dr')) {
                  _0x1dda4a.dr = Number(_0x2e53c9.dr);
                }
                if (_0x2e53c9.hasOwnProperty('ty')) {
                  _0x1dda4a.ty = Number(_0x2e53c9.ty);
                }
                if (_0x2e53c9.hasOwnProperty('cL')) {
                  var _0x54745a = _0x2e53c9.cL;
                  for (var _0x27a16a = 0x0; _0x27a16a < _0x54745a.length; _0x27a16a++) {
                    var _0x5b5a24 = _0x54745a[_0x27a16a];
                    var _0x2834a2 = new _0x15676e.MapCircleWallData();
                    if (_0x5b5a24.hasOwnProperty('x')) {
                      _0x2834a2.x = Number(_0x5b5a24.x);
                    }
                    if (_0x5b5a24.hasOwnProperty('y')) {
                      _0x2834a2.y = Number(_0x5b5a24.y);
                    }
                    if (_0x5b5a24.hasOwnProperty('sx')) {
                      _0x2834a2.sx = Number(_0x5b5a24.sx);
                    }
                    if (_0x5b5a24.hasOwnProperty('sy')) {
                      _0x2834a2.sy = Number(_0x5b5a24.sy);
                    }
                    if (_0x5b5a24.hasOwnProperty('wt')) {
                      _0x2834a2.wt = Number(_0x5b5a24.wt);
                    }
                    if (_0x5b5a24.hasOwnProperty('ht')) {
                      _0x2834a2.ht = Number(_0x5b5a24.ht);
                    }
                    _0x1dda4a.cL.push(_0x2834a2);
                  }
                }
                _0xc5deda.wL.push(_0x1dda4a);
              }
              _0x4e8da1 = _0x2251c8.bL;
              for (_0x33c065 = 0x0; _0x4e8da1 && _0x33c065 < _0x4e8da1.length; _0x33c065++) {
                _0x2e53c9 = _0x4e8da1[_0x33c065];
                _0x1dda4a = new _0x15676e.MapBlockData();
                if (_0x2e53c9.hasOwnProperty('id')) {
                  _0x1dda4a.id = parseInt(_0x2e53c9.id);
                }
                if (_0x2e53c9.hasOwnProperty('x')) {
                  _0x1dda4a.x = Number(_0x2e53c9.x);
                }
                if (_0x2e53c9.hasOwnProperty('y')) {
                  _0x1dda4a.y = Number(_0x2e53c9.y);
                }
                if (_0x2e53c9.hasOwnProperty('sx')) {
                  _0x1dda4a.sx = Number(_0x2e53c9.sx);
                }
                if (_0x2e53c9.hasOwnProperty('sy')) {
                  _0x1dda4a.sy = Number(_0x2e53c9.sy);
                }
                if (_0x2e53c9.hasOwnProperty('rt')) {
                  _0x1dda4a.rt = Number(_0x2e53c9.rt);
                }
                _0xc5deda.bL.push(_0x1dda4a);
              }
              _0x4e8da1 = _0x2251c8.eL;
              for (_0x33c065 = 0x0; _0x33c065 < _0x4e8da1.length; _0x33c065++) {
                (_0x48e5b7 = new _0x15676e.MapEnemyOutData()).id = parseInt(_0x4e8da1[_0x33c065].id);
                _0x48e5b7.oId = parseInt(_0x4e8da1[_0x33c065].oId);
                _0x48e5b7.x = Number(_0x4e8da1[_0x33c065].x);
                _0x48e5b7.y = Number(_0x4e8da1[_0x33c065].y);
                _0x48e5b7.wt = Number(_0x4e8da1[_0x33c065].wt);
                _0x48e5b7.ht = Number(_0x4e8da1[_0x33c065].ht);
                if (_0x4e8da1[_0x33c065].hasOwnProperty('ax')) {
                  _0x48e5b7.ax = Number(_0x4e8da1[_0x33c065].ax);
                }
                if (_0x4e8da1[_0x33c065].hasOwnProperty('ay')) {
                  _0x48e5b7.ay = Number(_0x4e8da1[_0x33c065].ay);
                }
                _0xc5deda.eL.push(_0x48e5b7);
              }
              _0x4e8da1 = _0x2251c8.cL;
              for (_0x33c065 = 0x0; _0x33c065 < _0x4e8da1.length; _0x33c065++) {
                (_0x48e5b7 = new _0x15676e.MapEnemyOutData()).id = parseInt(_0x4e8da1[_0x33c065].id);
                _0x48e5b7.oId = parseInt(_0x4e8da1[_0x33c065].oId);
                _0x48e5b7.x = Number(_0x4e8da1[_0x33c065].x);
                _0x48e5b7.y = Number(_0x4e8da1[_0x33c065].y);
                _0x48e5b7.wt = Number(_0x4e8da1[_0x33c065].wt);
                _0x48e5b7.ht = Number(_0x4e8da1[_0x33c065].ht);
                if (_0x4e8da1[_0x33c065].hasOwnProperty('ax')) {
                  _0x48e5b7.ax = Number(_0x4e8da1[_0x33c065].ax);
                }
                if (_0x4e8da1[_0x33c065].hasOwnProperty('ay')) {
                  _0x48e5b7.ay = Number(_0x4e8da1[_0x33c065].ay);
                }
                _0xc5deda.cL.push(_0x48e5b7);
              }
              _0x4e8da1 = _0x2251c8.pL;
              for (_0x33c065 = 0x0; _0x33c065 < _0x4e8da1.length; _0x33c065++) {
                _0x5b5a24 = _0x4e8da1[_0x33c065];
                (_0x48e5b7 = new _0x15676e.MapPauseData()).id = parseInt(_0x5b5a24.id);
                _0x48e5b7.x = Number(_0x5b5a24.x);
                _0x48e5b7.y = Number(_0x5b5a24.y);
                var _0x4f3fcf = _0x5b5a24.dir;
                for (var _0x23334d = 0x0; _0x23334d < _0x4f3fcf.length; _0x23334d++) {
                  _0x48e5b7.dir.push(parseInt(_0x4f3fcf[_0x23334d]));
                  _0x48e5b7.oId.push(parseInt(_0x5b5a24.oId[_0x23334d]));
                }
                _0xc5deda.pL.push(_0x48e5b7);
              }
              _0x4e8da1 = _0x2251c8.aL;
              for (_0x33c065 = 0x0; _0x33c065 < _0x4e8da1.length; _0x33c065++) {
                _0x5b5a24 = _0x4e8da1[_0x33c065];
                (_0x48e5b7 = new _0x15676e.MapAreaEnemyData()).id = parseInt(_0x5b5a24.id);
                _0x48e5b7.x = Number(_0x5b5a24.x);
                _0x48e5b7.y = Number(_0x5b5a24.y);
                _0x48e5b7.oId = parseInt(_0x5b5a24.oId);
                _0xc5deda.aL.push(_0x48e5b7);
              }
              if (_0x2251c8.hasOwnProperty("boss")) {
                var _0x351448 = _0x2251c8.boss;
                (_0x48e5b7 = new _0x15676e.MapBossData()).x = Number(_0x351448.x);
                _0x48e5b7.y = Number(_0x351448.y);
                _0x48e5b7.oId = Number(_0x351448.oId);
                _0xc5deda.boss = _0x48e5b7;
              }
              if (_0x2251c8.hasOwnProperty('bP')) {
                var _0x40a7b3 = _0x2251c8.bP;
                var _0x48e5b7 = new _0x15676e.MapPauseData();
                _0x4f3fcf = _0x40a7b3.dir;
                for (_0x33c065 = 0x0; _0x33c065 < _0x4f3fcf.length; _0x33c065++) {
                  _0x48e5b7.dir.push(parseInt(_0x4f3fcf[_0x33c065]));
                  _0x48e5b7.oId.push(parseInt(_0x40a7b3.oId[_0x33c065]));
                }
                _0xc5deda.bP = _0x48e5b7;
              }
              _0xce3702.GConfig.MapDict[_0x24d53e] = _0xc5deda;
              if (_0x2b321b) {
                _0x2b321b(_0xc5deda);
              }
            }
          });
        };
        _0xf38cfa.prototype.setPlayerVisible = function (_0x4c1708) {
          var _0x2fb7ee = _0x4c1708 ? 0xff : 0x0;
          _0xd05435.GValue.EntityWorld.player.node.opacity = _0x2fb7ee;
          _0xd05435.GValue.EntityWorld.player.followPlayerOut.node.opacity = _0x2fb7ee;
          _0xd05435.GValue.EntityWorld.player.followPlayerIn.node.opacity = _0x2fb7ee;
          _0xd05435.GValue.EntityWorld.player.shadow.opacity = _0x2fb7ee;
          _0xd05435.GValue.EntityWorld.player.followPlayerOut.setShadowOpacity(_0x2fb7ee);
          _0xd05435.GValue.EntityWorld.player.followPlayerIn.setShadowOpacity(_0x2fb7ee);
        };
        _0xf38cfa.prototype.changePlayerParentToUI = function (_0x33d15a) {
          this.changeParent(_0xd05435.GValue.EntityWorld.player.followPlayerOut.node, _0x33d15a);
          this.changeParent(_0xd05435.GValue.EntityWorld.player.followPlayerIn.node, _0x33d15a);
          this.changeParent(_0xd05435.GValue.EntityWorld.player.node, _0x33d15a);
        };
        _0xf38cfa.prototype.changePlayerParentToMap = function () {
          var _0x1019ab = _0xd05435.GValue.EntityWorld.addEntitySys;
          this.changeParent(_0xd05435.GValue.EntityWorld.player.node, _0x1019ab.playerNode);
          this.changeParent(_0xd05435.GValue.EntityWorld.player.followPlayerOut.node, _0x1019ab.weaponNode);
          this.changeParent(_0xd05435.GValue.EntityWorld.player.followPlayerIn.node, _0x1019ab.weaponNode);
        };
        _0xf38cfa.prototype.changeKnifeEnemyParentToUI = function (_0x2631cc, _0x471e83) {
          if (_0x2631cc && _0x471e83) {
            this.changeParent(_0x2631cc.node, _0x471e83);
            this.changeParent(_0x2631cc.followWeapon.node, _0x471e83);
          }
        };
        _0xf38cfa.prototype.changeKnifeEnemyParentToMap = function (_0x2fe58a) {
          if (_0x2fe58a) {
            var _0x378a63 = _0xd05435.GValue.EntityWorld.addEntitySys;
            this.changeParent(_0x2fe58a.node, _0x378a63.enemyNode);
            this.changeParent(_0x2fe58a.followWeapon.node, _0x378a63.enemyNode);
          }
        };
        _0xf38cfa.prototype.changeParent = function (_0x36de9d, _0x1fbe3c) {
          var _0x4c2731 = _0x36de9d.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
          _0x4c2731 = _0x1fbe3c.convertToNodeSpaceAR(_0x4c2731);
          _0x36de9d.parent = _0x1fbe3c;
          _0x36de9d.position = _0x4c2731;
        };
        _0xf38cfa.prototype.changePlayerTheme = function (_0x31b7c5) {
          this.changePlayerSkin(_0x31b7c5);
          this.changePlayerSubWeapon(_0x31b7c5);
        };
        _0xf38cfa.prototype.changePlayerSkin = function (_0x4756b6) {
          if (_0xd05435.GValue.EntityWorld.player) {
            _0xd05435.GValue.EntityWorld.player.skinSpr.spriteFrame = _0xd05435.GValue.Atlas_Game.getSpriteFrame('h' + _0x4756b6);
            var _0x1f4a29 = _0xd05435.GValue.EntityWorld.player.shadow;
            if (_0x1f4a29) {
              var _0x1dc1c0 = _0x1f4a29.getComponent(cc.Sprite);
              if (_0x1dc1c0) {
                _0x1dc1c0.spriteFrame = _0xd05435.GValue.Atlas_Shadow.getSpriteFrame('sh_' + _0x4756b6);
              }
            }
          }
        };
        _0xf38cfa.prototype.changePlayerSubWeapon = function (_0xe26270) {
          if (_0xd05435.GValue.EntityWorld.player) {
            _0xd05435.GValue.EntityWorld.player.followPlayerIn.setWeapon(_0xe26270);
          }
        };
        _0xf38cfa.prototype.changePlayerMainWeapon = function () {
          if (_0xd05435.GValue.EntityWorld.player) {
            _0xd05435.GValue.EntityWorld.player.changeMainWeaponSkin();
          }
        };
        _0xf38cfa.prototype.getEnemyRandomDir = function (_0x14e7ab) {
          var _0x2368eb;
          _0x2368eb = _0xd05435.GValue.EntityWorld.mapMgr.curDirTag <= 0x2 ? _0xd05435.GValue.EntityWorld.mapMgr.mapStop ? cc.rect(0.2 * _0xd05435.GValue.ViewCenter.x, 0.2 * _0xd05435.GValue.ViewCenter.y, 1.6 * _0xd05435.GValue.ViewCenter.x, 1.6 * _0xd05435.GValue.ViewCenter.y) : cc.rect(0.8 * _0xd05435.GValue.ViewCenter.x, _0xd05435.GValue.ViewCenter.y, 0.4 * _0xd05435.GValue.ViewCenter.x, 0.8 * _0xd05435.GValue.ViewCenter.y) : cc.rect(0.2 * _0xd05435.GValue.ViewCenter.x, 0.2 * _0xd05435.GValue.ViewCenter.y, 1.6 * _0xd05435.GValue.ViewCenter.x, 1.6 * _0xd05435.GValue.ViewCenter.y);
          var _0x3661ba = cc.v2(_0x565c13.DYTools.random_int(_0x2368eb.xMin, _0x2368eb.xMax), _0x565c13.DYTools.random_int(_0x2368eb.yMin, _0x2368eb.yMax));
          var _0x317811 = _0x14e7ab.convertToWorldSpaceAR(cc.Vec2.ZERO);
          return _0x3661ba.sub(_0x317811).normalize();
        };
        _0xf38cfa.prototype.initEnemySkinDict = function () {
          for (var _0x17b32b = 0x1; _0x17b32b < 0x64; _0x17b32b++) {
            this.EnemySkinDict[_0x17b32b] = 'e_' + _0x17b32b;
          }
          for (_0x17b32b = 0x64; _0x17b32b < 0x6e; _0x17b32b++) {
            this.EnemySkinDict[_0x17b32b] = 'e_' + _0x17b32b;
          }
          for (_0x17b32b = 0x3e8; _0x17b32b < 0x3f2; _0x17b32b++) {
            this.EnemySkinDict[_0x17b32b] = 'e_' + _0x17b32b;
          }
        };
        _0xf38cfa.prototype.getEnemySkinImage = function (_0x58baed) {
          return _0xd05435.GValue.Atlas_Enemy.getSpriteFrame(this.EnemySkinDict[_0x58baed]);
        };
        _0xf38cfa.prototype.encode = function (_0x3da46a) {
          var _0x17ac07 = _0x541acc.CryptoJS.enc.Latin1.parse("mdy8155zs2619lfm");
          var _0x28430e = _0x541acc.CryptoJS.enc.Latin1.parse("s9mnbdk1giu2e3wn");
          return _0x541acc.CryptoJS.AES.encrypt(_0x3da46a, _0x17ac07, {
            'iv': _0x28430e,
            'mode': _0x541acc.CryptoJS.mode.CBC,
            'padding': _0x541acc.CryptoJS.pad.ZeroPadding
          }).toString();
        };
        _0xf38cfa.prototype.decode = function (_0xd3b31f) {
          var _0x209475 = _0x541acc.CryptoJS.enc.Latin1.parse("mdy8155zs2619lfm");
          var _0x22990c = _0x541acc.CryptoJS.enc.Latin1.parse("s9mnbdk1giu2e3wn");
          var _0x5c3354 = _0x541acc.CryptoJS.AES.decrypt(_0xd3b31f, _0x209475, {
            'iv': _0x22990c,
            'mode': _0x541acc.CryptoJS.mode.CBC,
            'padding': _0x541acc.CryptoJS.pad.ZeroPadding
          });
          return _0x541acc.CryptoJS.enc.Utf8.stringify(_0x5c3354);
        };
        _0xf38cfa.prototype.set_click = function (_0xc9a271, _0xaa4419, _0x2b24bd) {
          this.clear_click(_0xc9a271);
          _0xc9a271.on(cc.Node.EventType.TOUCH_START, function (_0x733d7c) {
            if (_0xaa4419) {
              _0xaa4419();
            }
          }.bind(_0x2b24bd), _0x2b24bd);
        };
        _0xf38cfa.prototype.clear_click = function (_0x4bfb8b) {
          _0x4bfb8b.off(cc.Node.EventType.TOUCH_START);
        };
        _0xf38cfa.prototype.getNumK = function (_0x43ea31) {
          if (_0x43ea31 < 0x3e8) {
            return _0x43ea31.toString();
          }
          var _0xb5cab2 = _0x43ea31 / 0x3e8;
          if (!(_0x43ea31 % 0x3e8 == 0x0)) {
            _0xb5cab2 = Math.floor(0xa * _0xb5cab2) / 0xa;
          }
          return _0xb5cab2.toString() + 'k';
        };
        _0xf38cfa.prototype.getNumString = function (_0x4e77fd) {
          var _0x1ef5db = '';
          var _0x2777bf = '';
          if (_0x4e77fd < 0x3e8) {
            _0x1ef5db = _0x4e77fd.toString();
          } else {
            var _0x4b3ee1 = 0x0;
            var _0x25c4be = 0x0;
            var _0x429670 = 0x0;
            if (_0x4e77fd >= 0xf4240) {
              _0x4b3ee1 = Math.floor(_0x4e77fd / 0xf4240);
              _0x25c4be = Math.floor(_0x4e77fd % 0xf4240 / 0x186a0);
              _0x429670 = Math.floor(_0x4e77fd % 0x186a0 / 0x2710);
              _0x2777bf = 'm';
            } else if (_0x4e77fd >= 0x3e8) {
              _0x4b3ee1 = Math.floor(_0x4e77fd / 0x3e8);
              _0x25c4be = Math.floor(_0x4e77fd % 0x3e8 / 0x64);
              _0x429670 = Math.floor(_0x4e77fd % 0x64 / 0xa);
              _0x2777bf = 'k';
            }
            _0x1ef5db = _0x4b3ee1 + '.' + _0x25c4be + _0x429670;
          }
          return _0x1ef5db + _0x2777bf;
        };
        _0xf38cfa.prototype.getTimeSecondStr = function (_0x587170) {
          var _0x2e4211 = '00:00';
          if (_0x587170 < 0x3c) {
            _0x2e4211 = "00:" + this.getTimestrDouble(_0x587170);
          } else {
            if (_0x587170 < 0xe10) {
              var _0x6b703a = Math.floor(_0x587170 / 0x3c);
              var _0x97694c = Math.floor(_0x587170 % 0x3c);
              _0x2e4211 = this.getTimestrDouble(_0x6b703a) + ':' + this.getTimestrDouble(_0x97694c);
            } else {
              if (_0x587170 < 0x34bc0) {
                var _0x561a34 = Math.floor(_0x587170 / 0xe10);
                var _0x3d2186 = Math.floor(_0x587170 % 0xe10);
                _0x6b703a = Math.floor(_0x3d2186 / 0x3c);
                _0x97694c = Math.floor(_0x3d2186 % 0x3c);
                _0x2e4211 = this.getTimestrDouble(_0x561a34) + ':' + this.getTimestrDouble(_0x6b703a) + ':' + this.getTimestrDouble(_0x97694c);
              }
            }
          }
          return _0x2e4211;
        };
        _0xf38cfa.prototype.getTimestrDouble = function (_0x2302d1) {
          var _0x42c8ed = '00';
          if (_0x2302d1 < 0xa) {
            _0x42c8ed = '0' + _0x2302d1.toFixed(0x0);
          } else if (_0x2302d1 < 0x3c) {
            _0x42c8ed = _0x2302d1.toFixed(0x0);
          }
          return _0x42c8ed;
        };
        _0xf38cfa.prototype.getCurTime = function () {
          return Math.floor(new Date().getTime() / 0x3e8);
        };
        _0xf38cfa.prototype.initPowerRecover = function () {
          var _0x1b884c = _0x4a88a4.TData.getPower();
          var _0x2d6807 = parseInt(_0xce3702.GConfig.getGbData(_0x34036.Enum_Gb.PowerMax));
          if (_0x1b884c < _0x2d6807) {
            var _0x21ff0b = _0x3eb055.GFunc.getCurTime() - _0x4a88a4.TData.getTimePower();
            if (_0x21ff0b > 0x0) {
              var _0x2ee909 = parseInt(_0xce3702.GConfig.getGbData(_0x34036.Enum_Gb.PowerRecoverTime));
              var _0x26442c = Math.floor(_0x21ff0b / _0x2ee909);
              var _0x2e034a = _0x1b884c + _0x26442c;
              _0x2e034a = _0x2e034a > _0x2d6807 ? _0x2d6807 : _0x2e034a;
              _0x4a88a4.TData.setPower(_0x2e034a);
              if (_0x26442c > 0x0) {
                _0x4a88a4.TData.setTimePower(_0x3eb055.GFunc.getCurTime(), true);
              }
              var _0x228f94 = _0x21ff0b % _0x2ee909;
              _0xd05435.GValue.PowerTime = _0x2ee909 - _0x228f94;
            }
          }
          if (_0xd05435.GValue.HomeUI) {
            _0xd05435.GValue.HomeUI.refreshPower();
          }
        };
        _0xf38cfa.prototype.checkPowerRecover = function (_0x1e2d52) {
          var _0x4b1e17 = _0x4a88a4.TData.getPower();
          if (_0x4b1e17 < parseInt(_0xce3702.GConfig.getGbData(_0x34036.Enum_Gb.PowerMax))) {
            _0xd05435.GValue.PowerTime -= _0x1e2d52;
            if (_0xd05435.GValue.PowerTime <= 0x0) {
              _0xd05435.GValue.PowerTime = parseInt(_0xce3702.GConfig.getGbData(_0x34036.Enum_Gb.PowerRecoverTime));
              _0x4a88a4.TData.setPower(_0x4b1e17 + 0x1);
              _0x4a88a4.TData.setTimePower(_0x3eb055.GFunc.getCurTime(), true);
              if (_0xd05435.GValue.HomeUI) {
                _0xd05435.GValue.HomeUI.refreshPower();
              }
            }
          }
        };
        _0xf38cfa.prototype.initOfflineGoldRecover = function () {
          var _0x3d353e = _0x4a88a4.TData.getOfflineGold();
          var _0x2a54c2 = _0x4a88a4.TData.getStage();
          var _0x22fb95 = _0xce3702.GConfig.getLevelData(_0x2a54c2);
          var _0x377cec = 0x0;
          var _0x3b0bcf = 0x0;
          if (_0x22fb95) {
            _0x377cec = _0x22fb95.offlineGoldMax;
            _0x3b0bcf = _0x22fb95.offlineGoldPre;
          }
          if (_0x3d353e < _0x377cec) {
            var _0x2ca5ab = _0x3eb055.GFunc.getCurTime();
            var _0x335b0d = _0x4a88a4.TData.getTimeOfflineGold();
            _0x335b0d = 0x0 == _0x335b0d ? _0x2ca5ab : _0x335b0d;
            _0x4a88a4.TData.setTimeOfflineGold(_0x335b0d, true);
            var _0x2033bd = _0x2ca5ab - _0x335b0d;
            if (_0x2033bd >= 0x0) {
              var _0x46d884 = _0xd05435.GValue.OfflineGoldOnceRecoverTime;
              var _0x5d7294 = _0x3d353e + Math.floor(_0x2033bd / _0x46d884) * _0x3b0bcf;
              _0x5d7294 = _0x5d7294 > _0x377cec ? _0x377cec : _0x5d7294;
              _0x4a88a4.TData.setOfflineGold(_0x5d7294);
              _0x4a88a4.TData.setTimeOfflineGold(_0x3eb055.GFunc.getCurTime(), true);
              var _0x5a87c8 = _0x2033bd % _0x46d884;
              _0xd05435.GValue.OfflineGoldTime = _0x46d884 - _0x5a87c8;
            }
          }
          if (_0xd05435.GValue.HomeUI) {
            _0xd05435.GValue.HomeUI.refreshOffline();
          }
        };
        _0xf38cfa.prototype.checkGoldOffline = function (_0x241fdb) {
          var _0x1a195c = _0x4a88a4.TData.getOfflineGold();
          var _0x5671e3 = _0x4a88a4.TData.getStage();
          var _0x3df4bc = _0xce3702.GConfig.getLevelData(_0x5671e3);
          var _0x289f95 = 0x0;
          var _0x3ee726 = 0x0;
          if (_0x3df4bc) {
            _0x289f95 = _0x3df4bc.offlineGoldMax;
            _0x3ee726 = _0x3df4bc.offlineGoldPre;
          }
          if (_0x1a195c < _0x289f95 && (_0xd05435.GValue.OfflineGoldTime -= _0x241fdb, _0xd05435.GValue.OfflineGoldTime <= 0x0)) {
            _0xd05435.GValue.OfflineGoldTime = _0xd05435.GValue.OfflineGoldOnceRecoverTime;
            var _0x5967ec = _0x1a195c + _0x3ee726;
            _0x5967ec = _0x5967ec > _0x289f95 ? _0x289f95 : _0x5967ec;
            _0x4a88a4.TData.setOfflineGold(_0x5967ec);
            _0x4a88a4.TData.setTimeOfflineGold(_0x3eb055.GFunc.getCurTime(), true);
            if (_0xd05435.GValue.HomeUI) {
              _0xd05435.GValue.HomeUI.refreshOffline();
            }
          }
        };
        _0xf38cfa.prototype.getGoldOfflineCurTime = function () {
          var _0x485ebf = _0x3eb055.GFunc.getCurTime();
          var _0x395a7f = _0x4a88a4.TData.getTimeOfflineGoldGet();
          _0x395a7f = 0x0 == _0x395a7f ? _0x485ebf : _0x395a7f;
          _0x4a88a4.TData.setTimeOfflineGoldGet(_0x395a7f, true);
          return _0x485ebf - _0x395a7f;
        };
        _0xf38cfa.prototype.randomTrySub = function (_0x1c3d2a) {
          var _0x3e2900 = 0x0;
          var _0x165a1b = true;
          var _0x41c9e9 = _0x4a88a4.TData.getListSub();
          for (var _0x27e146 = 0x0; _0x27e146 < _0x41c9e9.length; _0x27e146++) {
            var _0x3b4072 = _0x41c9e9[_0x27e146];
            if (_0x4a88a4.TData.getPropertyLv_Sub(_0x3b4072) >= _0x1c3d2a) {
              _0x165a1b = false;
              break;
            }
          }
          if (_0x165a1b && _0x41c9e9.length > 0x0) {
            _0x3e2900 = _0x41c9e9[_0x565c13.DYTools.random_int(0x0, _0x41c9e9.length - 0x1)];
          }
          _0xd05435.GValue.ArmsSub_TryWill = _0x3e2900;
        };
        _0xf38cfa.prototype.canPropertyLvup = function (_0x34e999, _0x381579) {
          if (undefined === _0x381579) {
            _0x381579 = 0x0;
          }
          var _0x15c845 = false;
          var _0x1ccf0d = _0x4a88a4.TData.getGold();
          if (_0x34e999 == _0x34036.Enum_PropertyId.ArmsMain) {
            if ((_0x4ed51d = _0xce3702.GConfig.getPropertyData_Main()) && _0x1ccf0d >= _0x4ed51d.gd && _0xce3702.GConfig.getPropertyArmsMainData(_0x4ed51d.lv + 0x1)) {
              _0x15c845 = true;
            }
          } else {
            if (_0x34e999 == _0x34036.Enum_PropertyId.ArmsSub) {
              if ((_0x4ed51d = _0xce3702.GConfig.getPropertyData_Sub(_0x381579)) && _0x1ccf0d >= _0x4ed51d.gd && _0xce3702.GConfig.getPropertyArmsSubData(_0x381579, _0x4ed51d.lv + 0x1)) {
                _0x15c845 = true;
              }
            } else {
              if (_0x34e999 == _0x34036.Enum_PropertyId.GoldKill) {
                if ((_0x4ed51d = _0xce3702.GConfig.getPropertyData_GoldKill()) && _0x1ccf0d >= _0x4ed51d.gd && _0xce3702.GConfig.getPropertyGoldKillData(_0x4ed51d.lv + 0x1)) {
                  _0x15c845 = true;
                }
              } else {
                if (_0x34e999 == _0x34036.Enum_PropertyId.GoldOffline) {
                  var _0x4ed51d;
                  if ((_0x4ed51d = _0xce3702.GConfig.getPropertyData_GoldOffline()) && _0x1ccf0d >= _0x4ed51d.gd && _0xce3702.GConfig.getPropertyGoldOfflineData(_0x4ed51d.lv + 0x1)) {
                    _0x15c845 = true;
                  }
                }
              }
            }
          }
          return _0x15c845;
        };
        _0xf38cfa.prototype.getCanPropertyArmsSubLvupFun = function () {
          var _0x5ebc29 = 0x0;
          var _0x54c82d = _0x4a88a4.TData.getListSub();
          for (var _0x528e39 = 0x0; _0x528e39 < _0x54c82d.length; _0x528e39++) {
            if (this.canPropertyLvup(_0x34036.Enum_PropertyId.ArmsSub, _0x54c82d[_0x528e39])) {
              _0x5ebc29 = _0x54c82d[_0x528e39];
              break;
            }
          }
          return _0x5ebc29;
        };
        _0xf38cfa.prototype.isCanPropertyArmsSubLvupCurFun = function () {
          var _0x32fef6 = _0x4a88a4.TData.getCurSubFun();
          return this.canPropertyLvup(_0x34036.Enum_PropertyId.ArmsSub, _0x32fef6);
        };
        _0xf38cfa.prototype.getUnGetArmsSubList = function () {
          var _0x42b938 = [];
          var _0x51330e = _0x4a88a4.TData.getListSub();
          for (var _0x4deb91 in _0xce3702.GConfig.PropertyArmsSubDict) {
            var _0x5892f2 = parseInt(_0x4deb91);
            if (!_0x565c13.DYTools.arrContain(_0x51330e, _0x5892f2)) {
              _0x42b938.push(_0x5892f2);
            }
          }
          return _0x42b938;
        };
        _0xf38cfa.prototype.getArmsMainChange = function () {
          _0xd05435.GValue.List_Main_Change = [];
          var _0x399509 = [];
          for (var _0x594070 in _0xce3702.GConfig.PropertyArmsMainDict) {
            var _0x3d388f = (_0xe5b02a = _0xce3702.GConfig.PropertyArmsMainDict[_0x594070]).imageId;
            if (!_0x565c13.DYTools.arrContain(_0x399509, _0x3d388f)) {
              _0x399509.push(_0x3d388f);
            }
          }
          for (var _0x4c6ed9 = 0x0; _0x4c6ed9 < _0x399509.length; _0x4c6ed9++) {
            var _0x1b64d2 = _0x399509[_0x4c6ed9];
            var _0x40f13e = null;
            for (var _0x594070 in _0xce3702.GConfig.PropertyArmsMainDict) {
              var _0xe5b02a;
              if (_0x1b64d2 == (_0x3d388f = (_0xe5b02a = _0xce3702.GConfig.PropertyArmsMainDict[_0x594070]).imageId)) {
                if (_0x40f13e) {
                  if (_0xe5b02a.lv < _0x40f13e.lv) {
                    _0x40f13e = _0xe5b02a;
                  }
                } else {
                  _0x40f13e = _0xe5b02a;
                }
              }
            }
            if (_0x40f13e) {
              _0xd05435.GValue.List_Main_Change.push(_0x40f13e);
            }
          }
          _0xd05435.GValue.List_Main_Change = _0xd05435.GValue.List_Main_Change.sort(function (_0x23b69a, _0x153933) {
            return _0x23b69a.lv > _0x153933.lv ? 0x1 : -0x1;
          });
          return _0xd05435.GValue.List_Main_Change;
        };
        _0xf38cfa.prototype.getCurMainChange = function () {
          var _0x375a69 = null;
          var _0x21fbde = _0x4a88a4.TData.getPropertyLv(_0x34036.Enum_PropertyId.ArmsMain);
          for (var _0x4daded = 0x0; _0x4daded < _0xd05435.GValue.List_Main_Change.length; _0x4daded++) {
            var _0x2092bf = _0xd05435.GValue.List_Main_Change[_0x4daded];
            if (!(_0x21fbde >= _0x2092bf.lv)) {
              break;
            }
            _0x375a69 = _0x2092bf;
          }
          return _0x375a69;
        };
        _0xf38cfa.prototype.getBossCom = function (_0x2a1b11, _0x2c0c06) {
          var _0x1fe569 = null;
          var _0x2cf7de = _0xd05435.GValue.DicBossEnemy[_0x2a1b11];
          if (_0x2cf7de) {
            _0x1fe569 = _0x2cf7de[_0x2c0c06];
          }
          return _0x1fe569;
        };
        _0xf38cfa.prototype.flyGold = function (_0xdc88c6, _0x2621ad, _0x56cb0a, _0x4c505a, _0x2f0828, _0x588c9a, _0x3676b1) {
          var _0x3a352d = 0x1 * _0xce3702.GConfig.actionFrameTime;
          var _0x533050 = function (_0x576415) {
            var _0x288319 = _0x576415 % 0x6;
            var _0x4dd9c0 = Math.floor(_0x576415 / 0x6);
            var _0x588b50 = new cc.Node();
            _0xdc88c6.addChild(_0x588b50);
            var _0x2111f0 = new cc.Node();
            _0x588b50.addChild(_0x2111f0);
            _0x2111f0.addComponent(cc.Sprite).spriteFrame = _0x2621ad;
            var _0x41fbf8 = cc.scaleTo(0x2 * _0x3a352d, 0.45, 0x1);
            var _0x360661 = cc.scaleTo(0x2 * _0x3a352d, 0x1, 0x1);
            var _0x11da06 = cc.scaleTo(0x2 * _0x3a352d, 0.42, 0x1);
            var _0x420e6f = cc.delayTime(0x1 * _0x3a352d);
            var _0x21ac53 = cc.scaleTo(0x2 * _0x3a352d, 0x1, 0x1);
            var _0x2b88d7 = cc.sequence(_0x41fbf8, _0x360661, _0x11da06, _0x420e6f, _0x21ac53);
            var _0x5ec840 = cc.repeatForever(_0x2b88d7);
            _0x2111f0.runAction(_0x5ec840);
            _0x588b50.opacity = 0x0;
            var _0x1b5111 = [];
            switch (_0x288319) {
              case 0x0:
                _0x2de742 = (_0x2de742 = _0x56cb0a.add(cc.v2(0x64 * (Math.random() - 0.5), 0x64 * (Math.random() - 0.5)))).add(cc.v2(0x1e * _0x4dd9c0, -0x1e * _0x4dd9c0));
                _0x588b50.setPosition(_0x2de742);
                _0x588b50.scale = 1.4;
                var _0x574272 = cc.delayTime(_0x3a352d * _0x565c13.DYTools.random_int(0x0, 0x3));
                var _0x3087aa = cc.fadeIn(0x0);
                var _0x167b4d = cc.moveTo(0x2 * _0x3a352d, _0x2de742.add(cc.v2(-0x5e, 0x46)));
                var _0x23a46d = cc.scaleTo(0x2 * _0x3a352d, 1.4);
                var _0x9cd7bb = cc.spawn(_0x167b4d, _0x23a46d);
                var _0x5e1169 = cc.moveTo(0x4 * _0x3a352d, _0x2de742.add(cc.v2(-0xa5, 0x47)));
                var _0x5a6284 = cc.scaleTo(0x4 * _0x3a352d, 1.3);
                var _0x57ad52 = cc.spawn(_0x5e1169, _0x5a6284);
                var _0x568052 = cc.moveTo(0x7 * _0x3a352d, _0x4c505a);
                var _0x50f494 = cc.scaleTo(0x7 * _0x3a352d, 0x1);
                var _0x4677a3 = cc.spawn(_0x568052, _0x50f494);
                var _0x4a4077 = cc.sequence(_0x574272, _0x3087aa, _0x9cd7bb, _0x57ad52, _0x4677a3);
                _0x1b5111.push(_0x4a4077);
                break;
              case 0x1:
                _0x2de742 = (_0x2de742 = _0x56cb0a.add(cc.v2(0x64 * (Math.random() - 0.5), 0x64 * (Math.random() - 0.5)))).add(cc.v2(0x1e * _0x4dd9c0, -0x1e * _0x4dd9c0));
                _0x588b50.setPosition(_0x2de742);
                _0x588b50.scale = 1.4;
                _0x574272 = cc.delayTime(_0x3a352d * _0x565c13.DYTools.random_int(0x0, 0x3));
                _0x3087aa = cc.fadeIn(0x0);
                _0x167b4d = cc.moveTo(0x2 * _0x3a352d, _0x2de742.add(cc.v2(0x5e, 0x46)));
                _0x23a46d = cc.scaleTo(0x2 * _0x3a352d, 1.4);
                _0x9cd7bb = cc.spawn(_0x167b4d, _0x23a46d);
                _0x5e1169 = cc.moveTo(0x4 * _0x3a352d, _0x2de742.add(cc.v2(0xa5, 0x47)));
                _0x5a6284 = cc.scaleTo(0x4 * _0x3a352d, 1.3);
                _0x57ad52 = cc.spawn(_0x5e1169, _0x5a6284);
                _0x568052 = cc.moveTo(0x7 * _0x3a352d, _0x4c505a);
                _0x50f494 = cc.scaleTo(0x7 * _0x3a352d, 0x1);
                _0x4677a3 = cc.spawn(_0x568052, _0x50f494);
                var _0x338c9d = cc.sequence(_0x574272, _0x3087aa, _0x9cd7bb, _0x57ad52, _0x4677a3);
                _0x1b5111.push(_0x338c9d);
                break;
              case 0x2:
                _0x2de742 = (_0x2de742 = _0x56cb0a.add(cc.v2(0x64 * (Math.random() - 0.5), 0x64 * (Math.random() - 0.5)))).add(cc.v2(0x1e * _0x4dd9c0, -0x1e * _0x4dd9c0));
                _0x588b50.setPosition(_0x2de742);
                _0x588b50.scale = 1.5;
                _0x574272 = cc.delayTime(_0x3a352d * _0x565c13.DYTools.random_int(0x0, 0x3));
                _0x3087aa = cc.fadeIn(0x0);
                _0x167b4d = cc.moveTo(0x3 * _0x3a352d, _0x2de742.add(cc.v2(-0x5e, -0x64)));
                _0x23a46d = cc.scaleTo(0x3 * _0x3a352d, 1.7);
                _0x9cd7bb = cc.spawn(_0x167b4d, _0x23a46d);
                _0x5e1169 = cc.moveTo(0x4 * _0x3a352d, _0x2de742.add(cc.v2(-0x62, -0x73)));
                _0x5a6284 = cc.scaleTo(0x4 * _0x3a352d, 1.3);
                _0x57ad52 = cc.spawn(_0x5e1169, _0x5a6284);
                _0x568052 = cc.moveTo(0x6 * _0x3a352d, _0x2de742.add(cc.v2(-0x5f, -0x40)));
                _0x50f494 = cc.scaleTo(0x6 * _0x3a352d, 1.3);
                _0x4677a3 = cc.spawn(_0x568052, _0x50f494);
                var _0x16be3b = cc.moveTo(0x5 * _0x3a352d, _0x4c505a);
                var _0x31ed7b = cc.scaleTo(0x5 * _0x3a352d, 0x1);
                var _0x4887dc = cc.spawn(_0x16be3b, _0x31ed7b);
                var _0x102d60 = cc.sequence(_0x574272, _0x3087aa, _0x9cd7bb, _0x57ad52, _0x4677a3, _0x4887dc);
                _0x1b5111.push(_0x102d60);
                break;
              case 0x3:
                _0x2de742 = (_0x2de742 = _0x56cb0a.add(cc.v2(0x64 * (Math.random() - 0.5), 0x64 * (Math.random() - 0.5)))).add(cc.v2(0x1e * _0x4dd9c0, -0x1e * _0x4dd9c0));
                _0x588b50.setPosition(_0x2de742);
                _0x588b50.scale = 1.5;
                _0x574272 = cc.delayTime(_0x3a352d * _0x565c13.DYTools.random_int(0x0, 0x3));
                _0x3087aa = cc.fadeIn(0x0);
                _0x167b4d = cc.moveTo(0x3 * _0x3a352d, _0x2de742.add(cc.v2(0x5e, -0x64)));
                _0x23a46d = cc.scaleTo(0x3 * _0x3a352d, 1.7);
                _0x9cd7bb = cc.spawn(_0x167b4d, _0x23a46d);
                _0x5e1169 = cc.moveTo(0x4 * _0x3a352d, _0x2de742.add(cc.v2(0x62, -0x73)));
                _0x5a6284 = cc.scaleTo(0x4 * _0x3a352d, 1.3);
                _0x57ad52 = cc.spawn(_0x5e1169, _0x5a6284);
                _0x568052 = cc.moveTo(0x6 * _0x3a352d, _0x2de742.add(cc.v2(0x5f, -0x40)));
                _0x50f494 = cc.scaleTo(0x6 * _0x3a352d, 1.3);
                _0x4677a3 = cc.spawn(_0x568052, _0x50f494);
                _0x16be3b = cc.moveTo(0x5 * _0x3a352d, _0x4c505a);
                _0x31ed7b = cc.scaleTo(0x5 * _0x3a352d, 0x1);
                _0x4887dc = cc.spawn(_0x16be3b, _0x31ed7b);
                var _0x307d14 = cc.sequence(_0x574272, _0x3087aa, _0x9cd7bb, _0x57ad52, _0x4677a3, _0x4887dc);
                _0x1b5111.push(_0x307d14);
                break;
              case 0x4:
                _0x2de742 = (_0x2de742 = _0x56cb0a.add(cc.v2(0x64 * (Math.random() - 0.5), 0x64 * (Math.random() - 0.5)))).add(cc.v2(0x1e * _0x4dd9c0, -0x1e * _0x4dd9c0));
                _0x588b50.setPosition(_0x2de742);
                _0x588b50.scale = 1.3;
                _0x574272 = cc.delayTime(_0x3a352d * _0x565c13.DYTools.random_int(0x0, 0x3));
                _0x3087aa = cc.fadeIn(0x0);
                _0x167b4d = cc.moveTo(0x3 * _0x3a352d, _0x2de742.add(cc.v2(-0x2c, 0x5a)));
                _0x23a46d = cc.scaleTo(0x3 * _0x3a352d, 1.5);
                _0x9cd7bb = cc.spawn(_0x167b4d, _0x23a46d);
                _0x5e1169 = cc.moveTo(0x3 * _0x3a352d, _0x2de742.add(cc.v2(-0x37, 0x6e)));
                _0x5a6284 = cc.scaleTo(0x3 * _0x3a352d, 1.2);
                _0x57ad52 = cc.spawn(_0x5e1169, _0x5a6284);
                _0x568052 = cc.moveTo(0x6 * _0x3a352d, _0x2de742.add(cc.v2(-0x3c, 0x8c)));
                _0x50f494 = cc.scaleTo(0x6 * _0x3a352d, 1.2);
                _0x4677a3 = cc.spawn(_0x568052, _0x50f494);
                _0x16be3b = cc.moveTo(0x5 * _0x3a352d, _0x4c505a);
                _0x31ed7b = cc.scaleTo(0x5 * _0x3a352d, 0x1);
                _0x4887dc = cc.spawn(_0x16be3b, _0x31ed7b);
                var _0x2720c7 = cc.sequence(_0x574272, _0x3087aa, _0x9cd7bb, _0x57ad52, _0x4677a3, _0x4887dc);
                _0x1b5111.push(_0x2720c7);
                break;
              case 0x5:
                var _0x2de742;
                _0x2de742 = (_0x2de742 = _0x56cb0a.add(cc.v2(0x64 * (Math.random() - 0.5), 0x64 * (Math.random() - 0.5)))).add(cc.v2(0x1e * _0x4dd9c0, -0x1e * _0x4dd9c0));
                _0x588b50.setPosition(_0x2de742);
                _0x588b50.scale = 1.3;
                _0x574272 = cc.delayTime(_0x3a352d * _0x565c13.DYTools.random_int(0x0, 0x3));
                _0x3087aa = cc.fadeIn(0x0);
                _0x167b4d = cc.moveTo(0x3 * _0x3a352d, _0x2de742.add(cc.v2(0x2c, 0x5a)));
                _0x23a46d = cc.scaleTo(0x3 * _0x3a352d, 1.5);
                _0x9cd7bb = cc.spawn(_0x167b4d, _0x23a46d);
                _0x5e1169 = cc.moveTo(0x3 * _0x3a352d, _0x2de742.add(cc.v2(0x37, 0x6e)));
                _0x5a6284 = cc.scaleTo(0x3 * _0x3a352d, 1.2);
                _0x57ad52 = cc.spawn(_0x5e1169, _0x5a6284);
                _0x568052 = cc.moveTo(0x6 * _0x3a352d, _0x2de742.add(cc.v2(0x3c, 0x8c)));
                _0x50f494 = cc.scaleTo(0x6 * _0x3a352d, 1.2);
                _0x4677a3 = cc.spawn(_0x568052, _0x50f494);
                _0x16be3b = cc.moveTo(0x5 * _0x3a352d, _0x4c505a);
                _0x31ed7b = cc.scaleTo(0x5 * _0x3a352d, 0x1);
                _0x4887dc = cc.spawn(_0x16be3b, _0x31ed7b);
                var _0x4f6ed6 = cc.sequence(_0x574272, _0x3087aa, _0x9cd7bb, _0x57ad52, _0x4677a3, _0x4887dc);
                _0x1b5111.push(_0x4f6ed6);
            }
            var _0x3b6f5b = cc.callFunc(function () {
              if (_0x588c9a) {
                _0x588c9a();
              }
              if (_0x576415 == _0x2f0828 - 0x1 && _0x3676b1) {
                _0x3676b1();
              }
            });
            _0x1b5111.push(_0x3b6f5b);
            _0x1b5111.push(cc.removeSelf());
            var _0xf7838 = cc.sequence(_0x1b5111);
            _0x588b50.runAction(_0xf7838);
          };
          for (var _0x557933 = 0x0; _0x557933 < _0x2f0828; _0x557933++) {
            _0x533050(_0x557933);
          }
        };
        _0xf38cfa.prototype.set_action_btn = function (_0x3efd72, _0x4d23c3) {
          var _0x31a658 = _0xce3702.GConfig.actionFrameTime;
          var _0x51f26c = cc.scaleTo(0x3 * _0x31a658, 1.15);
          var _0x3b449a = cc.scaleTo(0x3 * _0x31a658, 0.9);
          var _0x3574fd = cc.callFunc(function () {
            if (_0x4d23c3) {
              _0x4d23c3.setAnimation(0x0, 'play', false);
            }
          });
          var _0x6ba53f = cc.scaleTo(0x4 * _0x31a658, 1.05);
          var _0x310636 = cc.scaleTo(0x4 * _0x31a658, 0x1);
          var _0x461795 = cc.delayTime(0xf * _0x31a658);
          var _0x5d7041 = cc.sequence(_0x51f26c, _0x3b449a, _0x3574fd, _0x6ba53f, _0x310636, _0x461795);
          var _0x10296a = cc.repeatForever(_0x5d7041);
          _0x3efd72.runAction(_0x10296a);
        };
        _0xf38cfa.prototype.check_performance = function (_0x540c8a) {
          if (!(this.performance_level <= 0x0)) {
            this.performance_count++;
            this.performance_dt += _0x540c8a;
            if (this.performance_dt >= this.performance_time) {
              if (this.performance_count / this.performance_dt < 0x23) {
                this.performance_level = 0x0;
              }
              this.performance_count = 0x0;
              this.performance_dt = 0x0;
            }
          }
        };
        _0xf38cfa.instance = new _0xf38cfa();
        return _0xf38cfa;
      }();
      _0x3eb055.GFunc = _0x192ff7.instance;
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'CommonEnum': 'CommonEnum',
      'CommonSdk': 'CommonSdk',
      'CommonValue': "CommonValue",
      'ConfigData': "ConfigData",
      'GameData': "GameData",
      'LoadingData': "LoadingData",
      'Tools': "Tools",
      'aes': "aes"
    }],
    'CommonSdk': [function (_0x13b287, _0xbbde2d, _0x2f1256) {
      'use strict';
  
      cc._RF.push(_0xbbde2d, "08c6aY1vmRDi5MSsBRzVg21", "CommonSdk");
      var _0x52c6ff = _0xbbde2d.exports;
      var _0x3c588c = _0x13b287('CommonConfig');
      var _0x49e020 = _0x13b287("CommonEnum");
      var _0x4db7e2 = _0x13b287('Hawkeye');
      var _0x27604b = _0x13b287("AndroidManager");
      var _0x467304 = _0x13b287("GameData");
      var _0x23c453 = function () {
        function _0x8cfb7d() {
          this.sdkType = 0x0;
          this._showCall = null;
          this._hideCall = null;
          this._isAdverReady = false;
        }
        _0x8cfb7d.prototype.sendMainLvup = function (_0x5b797e) {
          if (_0x3c588c.GConfig.BiReport) {
            switch (this.sdkType) {
              case _0x49e020.Enum_Channel.WeiXin:
                break;
              case _0x49e020.Enum_Channel.Google:
                _0x27604b.AndroidMgr.sendInfor(_0x49e020.Enum_AfType.mainLvup, _0x5b797e.toString());
            }
          }
        };
        _0x8cfb7d.prototype.sendSubLvup = function (_0x49542b, _0x2dd3ac) {
          if (_0x3c588c.GConfig.BiReport) {
            switch (this.sdkType) {
              case _0x49e020.Enum_Channel.WeiXin:
                break;
              case _0x49e020.Enum_Channel.Google:
                _0x27604b.AndroidMgr.sendInfor(_0x49e020.Enum_AfType.subLvup, _0x49542b.toString(), _0x2dd3ac.toString());
            }
          }
        };
        _0x8cfb7d.prototype.sendAdverCount = function (_0x5a75aa) {
          if (_0x3c588c.GConfig.BiReport) {
            switch (this.sdkType) {
              case _0x49e020.Enum_Channel.WeiXin:
                _0x4db7e2.HKReport.sendAdverCount(_0x5a75aa);
                break;
              case _0x49e020.Enum_Channel.Google:
            }
          }
        };
        _0x8cfb7d.prototype.sendVideoShow = function (_0x49df85) {
          if (_0x3c588c.GConfig.BiReport) {
            switch (this.sdkType) {
              case _0x49e020.Enum_Channel.WeiXin:
                _0x4db7e2.HKReport.sendVideoShow(_0x49df85);
                break;
              case _0x49e020.Enum_Channel.Google:
            }
          }
        };
        _0x8cfb7d.prototype.sendVideoPlay = function (_0xd10334) {
          if (_0x3c588c.GConfig.BiReport) {
            switch (this.sdkType) {
              case _0x49e020.Enum_Channel.WeiXin:
                _0x4db7e2.HKReport.sendVideoPlay(_0xd10334);
                break;
              case _0x49e020.Enum_Channel.Google:
            }
          }
        };
        _0x8cfb7d.prototype.sendVideoFinish = function (_0x5213dc) {
          if (_0x3c588c.GConfig.BiReport) {
            switch (this.sdkType) {
              case _0x49e020.Enum_Channel.WeiXin:
                _0x4db7e2.HKReport.sendVideoFinish(_0x5213dc);
                break;
              case _0x49e020.Enum_Channel.Google:
                _0x27604b.AndroidMgr.sendInfor(_0x49e020.Enum_AfType.video_finish, _0x5213dc.toString());
            }
          }
        };
        _0x8cfb7d.prototype.sendShareOut = function (_0x72a4d6, _0xa9f9f) {
          if (_0x3c588c.GConfig.BiReport) {
            switch (this.sdkType) {
              case _0x49e020.Enum_Channel.WeiXin:
                _0x4db7e2.HKReport.sendShareOut(_0x72a4d6, _0xa9f9f);
                break;
              case _0x49e020.Enum_Channel.Google:
            }
          }
        };
        _0x8cfb7d.prototype.sendShareIn = function (_0x2963be, _0x5008dc, _0x4a466d) {
          if (_0x3c588c.GConfig.BiReport) {
            switch (this.sdkType) {
              case _0x49e020.Enum_Channel.WeiXin:
                _0x4db7e2.HKReport.sendShareIn(_0x2963be, _0x5008dc, _0x4a466d);
                break;
              case _0x49e020.Enum_Channel.Google:
            }
          }
        };
        _0x8cfb7d.prototype.sendSaveDataErr = function (_0x26f55b) {
          if (_0x3c588c.GConfig.BiReport) {
            switch (this.sdkType) {
              case _0x49e020.Enum_Channel.WeiXin:
                _0x4db7e2.HKReport.sendSaveDataErr(_0x26f55b);
                break;
              case _0x49e020.Enum_Channel.Google:
            }
          }
        };
        _0x8cfb7d.prototype.sendGameErr = function (_0x805851) {
          if (_0x3c588c.GConfig.BiReport) {
            switch (this.sdkType) {
              case _0x49e020.Enum_Channel.WeiXin:
                _0x4db7e2.HKReport.sendGameErr(_0x805851);
                break;
              case _0x49e020.Enum_Channel.Google:
            }
          }
        };
        _0x8cfb7d.prototype.show_model = function (_0x1d0628, _0x5c12d0, _0x416b49, _0x5c14d3, _0x48f00b, _0x2d95d4) {
          if (undefined === _0x48f00b) {
            _0x48f00b = '取消';
          }
          if (undefined === _0x2d95d4) {
            _0x2d95d4 = true;
          }
          if (!_0x3c588c.GConfig.isDevelop && this.gameSdk) {
            switch (this.sdkType) {
              case _0x49e020.Enum_Channel.WeiXin:
                this.gameSdk.show_model(_0x1d0628, _0x5c12d0, _0x416b49, _0x5c14d3, _0x48f00b, _0x2d95d4);
            }
          }
        };
        _0x8cfb7d.prototype.OpenCustomerServices = function () {
          if (!_0x3c588c.GConfig.isDevelop && this.gameSdk) {
            switch (this.sdkType) {
              case _0x49e020.Enum_Channel.WeiXin:
                this.gameSdk.OpenCustomerServices();
            }
          }
        };
        _0x8cfb7d.prototype.showFeedBack = function (_0x4a899d) {
          if (!_0x3c588c.GConfig.isDevelop && this.gameSdk) {
            switch (this.sdkType) {
              case _0x49e020.Enum_Channel.WeiXin:
                this.gameSdk.showFeedBackBtn(_0x4a899d);
            }
          }
        };
        _0x8cfb7d.prototype.saveData = function (_0xa0f935, _0x4ec314) {
          if (!_0x3c588c.GConfig.isDevelop && this.gameSdk) {
            switch (this.sdkType) {
              case _0x49e020.Enum_Channel.WeiXin:
                this.gameSdk.saveData(_0xa0f935, _0x4ec314);
            }
          }
        };
        _0x8cfb7d.prototype.close_keyboard = function () {
          if (!_0x3c588c.GConfig.isDevelop && this.gameSdk) {
            switch (this.sdkType) {
              case _0x49e020.Enum_Channel.WeiXin:
                this.gameSdk.close_keyboard();
            }
          }
        };
        _0x8cfb7d.prototype.virbrate = function (_0x233d5c) {
          if (!_0x3c588c.GConfig.isDevelop && 0x1 == _0x467304.TData.SettingData.shake) {
            switch (this.sdkType) {
              case _0x49e020.Enum_Channel.WeiXin:
                this.gameSdk.virbrate(_0x233d5c);
                break;
              case _0x49e020.Enum_Channel.Google:
                _0x27604b.AndroidMgr.virbrate(_0x233d5c);
            }
          }
        };
        _0x8cfb7d.prototype.openUrl = function (_0x4701df) {
          cc.sys.openURL(_0x4701df);
        };
        _0x8cfb7d.instance = new _0x8cfb7d();
        return _0x8cfb7d;
      }();
      _0x52c6ff.GSDK = _0x23c453.instance;
      cc._RF.pop();
    }, {
      'AndroidManager': "AndroidManager",
      'CommonConfig': "CommonConfig",
      'CommonEnum': "CommonEnum",
      'GameData': 'GameData',
      'Hawkeye': "Hawkeye"
    }],
    'CommonUI': [function (_0x1f4452, _0x33264b, _0x3400d6) {
      'use strict';
  
      cc._RF.push(_0x33264b, "e6ef5Eos+hCv69dkrg9skzn", "CommonUI");
      var _0x32aa83 = _0x33264b.exports;
      var _0x49d49e = function () {
        function _0x124ac1() {}
        _0x124ac1.instance = new _0x124ac1();
        return _0x124ac1;
      }();
      _0x32aa83.GUI = _0x49d49e.instance;
      cc._RF.pop();
    }, {}],
    'CommonValue': [function (_0xcb1a22, _0x4073c9, _0x56f73b) {
      'use strict';
  
      cc._RF.push(_0x4073c9, "e1236Nm8NtJKIViO7vZ7TXQ", "CommonValue");
      var _0x4f1508 = _0x4073c9.exports;
      var _0x5d3d46 = _0xcb1a22('CommonConfig');
      var _0x293211 = _0xcb1a22("CommonEnum");
      var _0x23d089 = _0xcb1a22("Tools");
      var _0x4f0eea = function () {
        function _0x530ec0() {
          this.Size_View = {
            'height': 0x500
          };
          this.ViewCenter = cc.Vec2.ZERO;
          this.WorldRect = null;
          this.Has_TopBar = false;
          this.Device_Model_Ready = false;
          this.Root_Canvas = null;
          this.FirstMain = true;
          this.OnlineTime = 0x0;
          this.AdShareSwitch = false;
          this.StrongRT = 0x0;
          this.StrongTime = 0x0;
          this.SlowTime = 0x0;
          this.SlowRatio = 0x0;
          this.GoldTime = 0x0;
          this.GoldCount = 0x0;
          this.Atlas_Game = null;
          this.Atlas_Wall = null;
          this.Atlas_Guide = null;
          this.Atlas_Enemy = null;
          this.Atlas_Shadow = null;
          this.Atlas_Boss = null;
          this.pf_num = null;
          this.pf_anim = null;
          this.pf_enemy_effect = null;
          this.Atlas_Test = null;
          this.EntityWorld = null;
          this.MapScale = 0x0;
          this.PropMgr = null;
          this.PlayerTouching = true;
          this.PauseSlowRatio = 0x1;
          this.PlayerSlowRatio = 0x1;
          this.EnemyColorBloodPercent = 0x0;
          this.DDSDK = null;
          this.DDSDKUI = null;
          this.GuideUI = null;
          this.HomeUI = null;
          this.GameUI = null;
          this.PlayerMainPos = cc.Vec2.ZERO;
          this.PlayerPosV = cc.Vec2.ZERO;
          this.PlayerPosH = cc.Vec2.ZERO;
          this.PowerTime = 0x0;
          this.OfflineGoldTime = 0x0;
          this.OfflineGoldOnceRecoverTime = 0x3c;
          this.GameOverGold = -0x1;
          this.StageFail = 0x0;
          this.StageFailCount = 0x0;
          this.StageFailFinish = false;
          this.FailRatio = 0x0;
          this.ChangeStage = false;
          this.FirstGetSub = false;
          this.Dic_Sub_Level = {};
          this.List_Main_Change = [];
          this.ArmsSub_TryWill = 0x0;
          this.ArmsSub_TryFinish = 0x0;
          this.Level_FailCount = 0x0;
          this.DicBossEnemy = {};
          this.officialOn = false;
          this.moreGame = false;
          this.tryGamme = false;
          this.adImage = false;
          this.favGame = false;
          this.curCity = '';
          this.areaArr = [];
          this.shareSwitch = false;
        }
        _0x530ec0.prototype.initCommonValue = function () {
          _0x5d3d46.GConfig.MaxLevel = parseInt(_0x5d3d46.GConfig.getGbData(_0x293211.Enum_Gb.MaxLevel));
          _0x4f1508.GValue.AdShareSwitch = 0x1 == parseInt(_0x5d3d46.GConfig.getGbData(_0x293211.Enum_Gb.adShareSwitch));
          var _0x3e15f7 = _0x23d089.DYTools.stringToNumber(_0x5d3d46.GConfig.getGbData(_0x293211.Enum_Gb.PropStrong), _0x5d3d46.GConfig.SeparatorII);
          _0x4f1508.GValue.StrongRT = _0x3e15f7[0x0];
          _0x4f1508.GValue.StrongTime = _0x3e15f7[0x1];
          _0x3e15f7 = _0x23d089.DYTools.stringToNumber(_0x5d3d46.GConfig.getGbData(_0x293211.Enum_Gb.PropSlow), _0x5d3d46.GConfig.SeparatorII);
          _0x4f1508.GValue.SlowTime = _0x3e15f7[0x0];
          _0x4f1508.GValue.SlowRatio = _0x3e15f7[0x1];
          _0x3e15f7 = _0x23d089.DYTools.stringToNumber(_0x5d3d46.GConfig.getGbData(_0x293211.Enum_Gb.PropGold), _0x5d3d46.GConfig.SeparatorII);
          _0x4f1508.GValue.GoldTime = _0x3e15f7[0x0];
          _0x4f1508.GValue.GoldCount = _0x3e15f7[0x1];
          _0x3e15f7 = _0x23d089.DYTools.stringToNumber(_0x5d3d46.GConfig.getGbData(_0x293211.Enum_Gb.lingjingSwitch), _0x5d3d46.GConfig.SeparatorII);
          try {
            _0x4f1508.GValue.officialOn = 0x1 == _0x3e15f7[0x0];
            _0x4f1508.GValue.moreGame = 0x1 == _0x3e15f7[0x1];
            _0x4f1508.GValue.tryGamme = 0x1 == _0x3e15f7[0x2];
            _0x4f1508.GValue.adImage = 0x1 == _0x3e15f7[0x3];
            _0x4f1508.GValue.favGame = 0x1 == _0x3e15f7[0x4];
          } catch (_0x6a3012) {
            _0x23d089.DYTools.error("lingjing error");
          }
          _0x4f1508.GValue.areaArr = _0x5d3d46.GConfig.getGbData(_0x293211.Enum_Gb.lingjingArea).split(_0x5d3d46.GConfig.SeparatorII);
          _0x23d089.DYTools.log("lingjing show1");
          this.checkCity();
          if (_0x4f1508.GValue.DDSDKUI) {
            _0x23d089.DYTools.log("lingjing show");
            _0x4f1508.GValue.DDSDKUI.refreshSDKShow();
          }
        };
        _0x530ec0.prototype.checkCity = function () {
          if ('' != this.curCity) {
            this.shareSwitch = this.areaArr.indexOf(this.curCity) < 0x0;
            _0x23d089.DYTools.log('区域--', this.shareSwitch);
          }
        };
        _0x530ec0.instance = new _0x530ec0();
        return _0x530ec0;
      }();
      _0x4f1508.GValue = _0x4f0eea.instance;
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'CommonEnum': 'CommonEnum',
      'Tools': 'Tools'
    }],
    'ConfigData': [function (_0x82f9cb, _0x561e75, _0x44ebef) {
      'use strict';
  
      cc._RF.push(_0x561e75, '8a30eI5sopIVJsKZ8QRw+Kp', "ConfigData");
      var _0x44c62b = _0x561e75.exports;
      Object.defineProperty(_0x44c62b, "__esModule", {
        'value': true
      });
      var _0x3e5c59 = _0x82f9cb("Tools");
      var _0x5ae4e9 = _0x82f9cb('CommonConfig');
      var _0x321f03 = _0x82f9cb("CommonValue");
      var _0xf8411d = function () {
        this.bgS = '';
        this.bgW = 0x0;
        this.bgH = 0x0;
        this.vL = [];
        this.wL = [];
        this.bL = [];
        this.iL = [];
        this.eL = [];
        this.cL = [];
        this.pL = [];
        this.aL = [];
        this.boss = null;
        this.bP = null;
      };
      _0x44c62b.MapData = _0xf8411d;
      var _0x45c7ae = function () {
        this.id = 0x0;
        this.x = 0x0;
        this.y = 0x0;
        this.sp = cc.Vec2.ZERO;
        this.ep = cc.Vec2.ZERO;
        this.wL = [];
      };
      _0x44c62b.MapWayData = _0x45c7ae;
      var _0x471c0f = function () {
        this.ax = 0.5;
        this.ay = 0.5;
        this.x = 0x0;
        this.y = 0x0;
        this.sx = 0x1;
        this.sy = 0x1;
        this.rt = 0x0;
        this.src = '';
        this.wt = 0x0;
        this.ht = 0x0;
        this.dr = 0x0;
        this.ty = 0x0;
        this.cL = [];
      };
      _0x44c62b.MapWallData = _0x471c0f;
      var _0x995c76 = function () {
        this.id = 0x0;
        this.x = 0x0;
        this.y = 0x0;
        this.sx = 0x1;
        this.sy = 0x1;
        this.rt = 0x0;
      };
      _0x44c62b.MapBlockData = _0x995c76;
      var _0x3665a2 = function () {
        this.x = 0x0;
        this.y = 0x0;
        this.sx = 0x1;
        this.sy = 0x1;
        this.wt = 0x0;
        this.ht = 0x0;
      };
      _0x44c62b.MapCircleWallData = _0x3665a2;
      var _0x269792 = function () {
        this.id = 0x0;
        this.oId = 0x0;
        this.x = 0x0;
        this.y = 0x0;
        this.ax = 0.5;
        this.ay = 0.5;
        this.wt = 0x0;
        this.ht = 0x0;
      };
      _0x44c62b.MapEnemyOutData = _0x269792;
      var _0x1f4a15 = function () {
        this.id = 0x0;
        this.x = 0x0;
        this.y = 0x0;
        this.dir = [];
        this.oId = [];
      };
      _0x44c62b.E_GuideId = cc.Enum({
        'ClickBtnSysMain': 0x1,
        'ClickBtnLvupMain': 0x2,
        'ClickBtnSysSub': 0x3,
        'ClickBtnLvupSub': 0x4
      });
      _0x44c62b.E_GuideUIType = cc.Enum({
        'None': 0x0,
        'Circle': 0x1,
        'Rect': 0x2,
        'Screen': 0x3
      });
      _0x44c62b.Enum_BFState = cc.Enum({
        'None': 0x0,
        'In': 0x1,
        'Normal': 0x2,
        'Charge': 0x3,
        'Attack': 0x4
      });
      _0x44c62b.E_SnakeAI = cc.Enum({
        'Box': 0x1,
        'Player': 0x2,
        'Enter': 0x3
      });
      _0x44c62b.GuideData = function () {
        function _0x4097c9() {
          this.id = 0x0;
          this.finishIdList = [];
          this.uiType = 0x0;
          this.uiScale = 0x1;
          this.uiDelay = 0x0;
          this.uiClickDelay = 0x0;
          this.uiEnd = cc.v2(0x0, 0x0);
          this.handShow = 0x0;
          this.handDelay = 0x0;
          this.handMoveTime = 0x0;
          this.handStart = cc.v2(0x0, 0x0);
          this.handEnd = cc.v2(0x0, 0x0);
        }
        _0x4097c9.prototype.loadData = function (_0x278d11) {
          var _0x2848a7;
          if (_0x278d11.hasOwnProperty('id')) {
            this.id = parseInt(_0x278d11.id);
          }
          if (_0x278d11.hasOwnProperty("fin")) {
            this.finishIdList = _0x3e5c59.DYTools.stringToNumber(_0x278d11.fin, '*');
          }
          if (_0x278d11.hasOwnProperty("utp")) {
            this.uiType = parseInt(_0x278d11.utp);
          }
          if (_0x278d11.hasOwnProperty("usc")) {
            this.uiScale = parseFloat(_0x278d11.usc);
          }
          if (_0x278d11.hasOwnProperty('utm')) {
            this.uiDelay = parseFloat(_0x278d11.utm);
          }
          if (_0x278d11.hasOwnProperty("utd")) {
            this.uiClickDelay = parseFloat(_0x278d11.utd);
          }
          if (_0x278d11.hasOwnProperty("uep")) {
            this.uiEnd = cc.v2(0x0, 0x0);
            if (0x2 == (_0x2848a7 = _0x278d11.uep.split('*')).length) {
              this.uiEnd = cc.v2(parseFloat(_0x2848a7[0x0]), parseFloat(_0x2848a7[0x1]));
            }
          }
          if (_0x278d11.hasOwnProperty('hs')) {
            this.handShow = parseInt(_0x278d11.hs);
          }
          if (_0x278d11.hasOwnProperty("htm")) {
            this.handDelay = parseFloat(_0x278d11.htm);
          }
          if (_0x278d11.hasOwnProperty("hmtm")) {
            this.handMoveTime = parseFloat(_0x278d11.hmtm);
          }
          if (_0x278d11.hasOwnProperty('hsp')) {
            this.handStart = cc.v2(0x0, 0x0);
            if (0x2 == (_0x2848a7 = _0x278d11.hsp.split('*')).length) {
              this.handStart = cc.v2(parseFloat(_0x2848a7[0x0]), parseFloat(_0x2848a7[0x1]));
            }
          }
          if (_0x278d11.hasOwnProperty("hep")) {
            this.handEnd = cc.v2(0x0, 0x0);
            if (0x2 == (_0x2848a7 = _0x278d11.hep.split('*')).length) {
              this.handEnd = cc.v2(parseFloat(_0x2848a7[0x0]), parseFloat(_0x2848a7[0x1]));
            }
          }
        };
        return _0x4097c9;
      }();
      _0x44c62b.MapPauseData = _0x1f4a15;
      var _0x414ba4 = function () {
        this.id = 0x0;
        this.x = 0x0;
        this.y = 0x0;
        this.oId = 0x0;
      };
      _0x44c62b.MapAreaEnemyData = _0x414ba4;
      var _0x5daeaf = function () {
        this.oId = 0x0;
        this.x = 0x0;
        this.y = 0x0;
      };
      _0x44c62b.MapBossData = _0x5daeaf;
      var _0x23b32 = function () {
        this.id = 0x0;
        this.nx = 0.5;
        this.ny = 0.5;
        this.pos = cc.Vec2.ZERO;
        this.rt = 0x0;
        this.oId = 0x0;
        this.x = 0x0;
        this.y = 0x0;
        this.ax = 0.5;
        this.ay = 0.5;
        this.wt = 0x0;
        this.ht = 0x0;
      };
      _0x44c62b.MapPipeData = _0x23b32;
      var _0x28cfc4 = function () {
        this.x = 0x0;
        this.y = 0x0;
        this.rt = 0x0;
        this.sx = 0x1;
        this.sy = 0x1;
        this.wt = 0x0;
        this.ht = 0x0;
        this.src = '';
      };
      _0x44c62b.MapImageData = _0x28cfc4;
      var _0x529374 = function () {
        function _0x26e11a() {
          this.level = 0x0;
          this.dropKCount = 0x0;
          this.mapSpeedV = 0x0;
          this.mapSpeedH = 0x0;
          this.enemyColor = '';
          this.bgId = 0x1;
          this.reviveCount = 0x0;
          this.knifeGold = 0x0;
          this.boss = 0x0;
          this.offlineGoldPre = 0x0;
          this.offlineGoldMax = 0x0;
          this.fun = 0x0;
          this.giftGold = 0x0;
          this.subTryLv = 0x0;
          this.failParam = '';
        }
        _0x26e11a.prototype.loadData = function (_0x46d914) {
          if (_0x46d914.hasOwnProperty('id')) {
            this.level = parseInt(_0x46d914.id);
          }
          if (_0x46d914.hasOwnProperty("bId")) {
            this.bgId = parseInt(_0x46d914.bId);
          }
          if (_0x46d914.hasOwnProperty("drn")) {
            this.dropKCount = parseInt(_0x46d914.drn);
          }
          if (_0x46d914.hasOwnProperty('spv')) {
            this.mapSpeedV = parseInt(_0x46d914.spv);
          }
          if (_0x46d914.hasOwnProperty("sph")) {
            this.mapSpeedH = parseInt(_0x46d914.sph);
          }
          if (_0x46d914.hasOwnProperty("col")) {
            this.enemyColor = _0x46d914.col;
          }
          if (_0x46d914.hasOwnProperty("reb")) {
            this.reviveCount = parseInt(_0x46d914.reb);
          }
          if (_0x46d914.hasOwnProperty("kgd")) {
            this.knifeGold = parseInt(_0x46d914.kgd);
          }
          if (_0x46d914.hasOwnProperty("boss")) {
            this.boss = parseInt(_0x46d914.boss);
          }
          if (_0x46d914.hasOwnProperty("mpr")) {
            this.offlineGoldPre = parseInt(_0x46d914.mpr);
          }
          if (_0x46d914.hasOwnProperty("prm")) {
            this.offlineGoldMax = parseInt(_0x46d914.prm);
          }
          if (_0x46d914.hasOwnProperty('sud')) {
            this.fun = parseInt(_0x46d914.sud);
          }
          if (_0x46d914.hasOwnProperty("gbd")) {
            this.giftGold = parseInt(_0x46d914.gbd);
          }
          if (_0x46d914.hasOwnProperty('mas')) {
            this.subTryLv = parseInt(_0x46d914.mas);
          }
          if (_0x46d914.hasOwnProperty('dit')) {
            this.failParam = _0x46d914.dit;
          }
        };
        return _0x26e11a;
      }();
      _0x44c62b.ConfigLevelData = _0x529374;
      var _0x259c16 = function () {
        function _0x3e5fac() {
          this.id = 0x0;
          this.size = cc.Vec2.ZERO;
          this.speed = cc.Vec2.ZERO;
          this.blood = cc.Vec2.ZERO;
          this.hurtSpeed = 0x0;
          this.playerInSpeed = 0x0;
          this.dropKParam = '';
          this.dropGold = 0x0;
          this.attr = [];
          this.moveType = 0x0;
          this.imageId = 0x0;
          this.dieEff = 0x0;
          this.radiusReduce = 0x0;
          this.adjustDuration = cc.Vec2.ZERO;
        }
        _0x3e5fac.prototype.loadData = function (_0x5b7e5c) {
          if (_0x5b7e5c.hasOwnProperty('id')) {
            this.id = parseInt(_0x5b7e5c.id);
          }
          if (_0x5b7e5c.hasOwnProperty('sz')) {
            this.size = _0x3e5c59.DYTools.stringToPoint(_0x5b7e5c.sz, _0x5ae4e9.GConfig.SeparatorII);
          }
          if (_0x5b7e5c.hasOwnProperty("spd")) {
            this.speed = _0x3e5c59.DYTools.stringToPoint(_0x5b7e5c.spd, _0x5ae4e9.GConfig.SeparatorII);
          }
          if (_0x5b7e5c.hasOwnProperty("asp")) {
            this.hurtSpeed = Number(_0x5b7e5c.asp);
          }
          if (_0x5b7e5c.hasOwnProperty('isp')) {
            this.playerInSpeed = Number(_0x5b7e5c.isp);
          }
          if (_0x5b7e5c.hasOwnProperty("bld")) {
            this.blood = _0x3e5c59.DYTools.stringToPoint(_0x5b7e5c.bld, _0x5ae4e9.GConfig.SeparatorII);
          }
          if (_0x5b7e5c.hasOwnProperty("dro")) {
            this.dropKParam = _0x5b7e5c.dro;
          }
          if (_0x5b7e5c.hasOwnProperty("mon")) {
            this.dropGold = parseInt(_0x5b7e5c.mon);
          }
          if (_0x5b7e5c.hasOwnProperty("fun")) {
            this.attr = _0x3e5c59.DYTools.stringToNumber(_0x5b7e5c.fun, _0x5ae4e9.GConfig.SeparatorII);
          }
          if (_0x5b7e5c.hasOwnProperty('mov')) {
            this.moveType = parseInt(_0x5b7e5c.mov);
          }
          if (_0x5b7e5c.hasOwnProperty("img")) {
            this.imageId = parseInt(_0x5b7e5c.img);
          }
          if (_0x5b7e5c.hasOwnProperty("rat")) {
            this.radiusReduce = Number(_0x5b7e5c.rat);
          }
          if (_0x5b7e5c.hasOwnProperty("tre")) {
            this.adjustDuration = _0x3e5c59.DYTools.stringToPoint(_0x5b7e5c.tre, _0x5ae4e9.GConfig.SeparatorII);
          }
        };
        return _0x3e5fac;
      }();
      _0x44c62b.ConfigEnemyData = _0x259c16;
      var _0x33e877 = function () {
        function _0x1a5b2f() {
          this.id = 0x0;
          this.attr = 0x0;
          this.param = '';
        }
        _0x1a5b2f.prototype.loadData = function (_0x2e48cb) {
          if (_0x2e48cb.hasOwnProperty('id')) {
            this.id = parseInt(_0x2e48cb.id);
          }
          if (_0x2e48cb.hasOwnProperty("fun")) {
            this.attr = parseInt(_0x2e48cb.fun);
          }
          if (_0x2e48cb.hasOwnProperty("ver")) {
            this.param = _0x2e48cb.ver;
          }
        };
        return _0x1a5b2f;
      }();
      _0x44c62b.ConfigAttrData = _0x33e877;
      var _0x59c59f = function () {
        function _0x3588a6() {
          this.id = 0x0;
          this.type = 0x0;
          this.param = '';
          this.refreshDuration = 0x0;
          this.refreshCount = 0x0;
        }
        _0x3588a6.prototype.loadData = function (_0x3888ea) {
          if (_0x3888ea.hasOwnProperty('id')) {
            this.id = parseInt(_0x3888ea.id);
          }
          if (_0x3888ea.hasOwnProperty('typ')) {
            this.type = parseInt(_0x3888ea.typ);
          }
          if (_0x3888ea.hasOwnProperty("com")) {
            this.param = _0x3888ea.com;
          }
          if (_0x3888ea.hasOwnProperty("tim")) {
            this.refreshDuration = Number(_0x3888ea.tim);
          }
          if (_0x3888ea.hasOwnProperty("rep")) {
            this.refreshCount = parseInt(_0x3888ea.rep);
          }
        };
        return _0x3588a6;
      }();
      _0x44c62b.ConfigEnemyOutData = _0x59c59f;
      var _0x481f2b = function () {
        function _0x312f3a() {
          this.id = 0x0;
          this.enemyArr = [];
          this.duration = [];
          this.size = [];
        }
        _0x312f3a.prototype.loadData = function (_0x4ea4cf) {
          if (_0x4ea4cf.hasOwnProperty('id')) {
            this.id = parseInt(_0x4ea4cf.id);
          }
          if (_0x4ea4cf.hasOwnProperty('mo')) {
            var _0x31a0e9 = _0x4ea4cf.mo.split('#');
            for (var _0x2025b7 = 0x0; _0x2025b7 < _0x31a0e9.length; _0x2025b7++) {
              var _0x1c1c9f = _0x31a0e9[_0x2025b7].split('*');
              var _0x22e376 = [];
              for (var _0x38e4e7 = 0x0; _0x38e4e7 < _0x1c1c9f.length; _0x38e4e7++) {
                var _0x20a75a = _0x3e5c59.DYTools.stringToPoint(_0x1c1c9f[_0x38e4e7], ',');
                _0x22e376.push(_0x20a75a);
              }
              this.enemyArr.push(_0x22e376);
            }
          }
          if (_0x4ea4cf.hasOwnProperty('in')) {
            this.duration = _0x3e5c59.DYTools.stringToNumber(_0x4ea4cf['in'], '*');
          }
          if (_0x4ea4cf.hasOwnProperty('are')) {
            _0x31a0e9 = _0x4ea4cf.are.split(_0x5ae4e9.GConfig.SeparatorI);
            for (_0x2025b7 = 0x0; _0x2025b7 < _0x31a0e9.length; _0x2025b7++) {
              this.size.push(_0x3e5c59.DYTools.stringToPoint(_0x31a0e9[_0x2025b7], _0x5ae4e9.GConfig.SeparatorII));
            }
          }
        };
        return _0x312f3a;
      }();
      _0x44c62b.ConfigPauseData = _0x481f2b;
      var _0x5ec152 = function () {
        function _0x12fbcc() {
          this.id = 0x0;
          this.duration = 0x0;
          this.enemy = '';
        }
        _0x12fbcc.prototype.loadData = function (_0x3e7701) {
          if (_0x3e7701.hasOwnProperty('id')) {
            this.id = parseInt(_0x3e7701.id);
          }
          if (_0x3e7701.hasOwnProperty("itv")) {
            this.duration = Number(_0x3e7701.itv);
          }
          if (_0x3e7701.hasOwnProperty('com')) {
            this.enemy = _0x3e7701.com;
          }
        };
        return _0x12fbcc;
      }();
      _0x44c62b.ConfigEnemyConData = _0x5ec152;
      var _0x71b10b = function () {
        function _0x481b4c() {
          this.id = 0x0;
          this.enemys = [];
        }
        _0x481b4c.prototype.loadData = function (_0x54d1b9) {
          if (_0x54d1b9.hasOwnProperty('id')) {
            this.id = parseInt(_0x54d1b9.id);
          }
          var _0x19eb8e = _0x3e5c59.DYTools.stringToNumber(_0x54d1b9.mon, _0x5ae4e9.GConfig.SeparatorII);
          var _0x65c18d = _0x3e5c59.DYTools.stringToNumber(_0x54d1b9.ang, _0x5ae4e9.GConfig.SeparatorII);
          var _0x102d9d = _0x54d1b9.pos.split(_0x5ae4e9.GConfig.SeparatorI);
          var _0x1a0740 = _0x54d1b9.wpo.split(_0x5ae4e9.GConfig.SeparatorI);
          for (var _0x162acc = 0x0; _0x162acc < _0x19eb8e.length; _0x162acc++) {
            var _0x460291 = new _0x481363();
            _0x460291.id = _0x19eb8e[_0x162acc];
            var _0x1d7ad6 = _0x65c18d[_0x162acc];
            var _0x50a7fb = _0x102d9d[_0x162acc];
            var _0x12de67 = _0x1a0740[_0x162acc];
            if (undefined != _0x1d7ad6 && undefined != _0x50a7fb && undefined != _0x12de67) {
              _0x460291.rotate = _0x1d7ad6;
              _0x460291.pos = _0x3e5c59.DYTools.stringToPoint(_0x50a7fb, _0x5ae4e9.GConfig.SeparatorII);
              _0x460291.awakePos = _0x3e5c59.DYTools.stringToPoint(_0x12de67, _0x5ae4e9.GConfig.SeparatorII);
            } else {
              _0x3e5c59.DYTools.error("地图区域怪表错误:" + _0x460291.id);
            }
            this.enemys.push(_0x460291);
          }
        };
        return _0x481b4c;
      }();
      _0x44c62b.ConfigMapEnemyAreaData = _0x71b10b;
      var _0x481363 = function () {
        this.id = 0x0;
        this.rotate = 0x0;
        this.pos = cc.Vec2.ZERO;
        this.awakePos = cc.Vec2.ZERO;
      };
      _0x44c62b.ConfigMapEnemyData = _0x481363;
      var _0x4a2963 = function () {
        function _0x198349() {
          this.id = 0x0;
          this.type = 0x0;
          this.ai = 0x2;
          this.list_hp = [];
          this.list_gold = [];
          this.list_follow_min = [];
          this.list_follow_max = [];
          this.list_unfollow_min = [];
          this.list_unfollow_max = [];
          this.speed_move = 0x12c;
          this.speed_rotate_min = 0x2d;
          this.speed_rotate_max = 0x2d;
          this.rotate_in = 0x0;
          this.distance_in = 0x320;
          this.target_in = cc.v2(0x0, 0x0);
          this.isIn = 0x0;
          this.yIn = 0x0;
          this.speed_rotate_in = 0x2d;
          this.speed_move_in = 0x12c;
          this.image = 0x1;
          this.color = cc.color(0xb9, 0x2a, 0x2a);
          this.gold = 0x0;
          this.player = cc.Vec2.ZERO;
          this.pause = false;
          this.clear = false;
          this.tip = '';
        }
        _0x198349.prototype.loadData = function (_0x568c95) {
          if (_0x568c95.hasOwnProperty('id')) {
            this.id = parseInt(_0x568c95.id);
          }
          if (_0x568c95.hasOwnProperty("tpe")) {
            this.type = parseInt(_0x568c95.tpe);
          }
          if (_0x568c95.hasOwnProperty('ai')) {
            this.ai = parseInt(_0x568c95.ai);
          }
          if (_0x568c95.hasOwnProperty('hp')) {
            this.list_hp = _0x3e5c59.DYTools.stringToNumber(_0x568c95.hp, '*');
          }
          if (_0x568c95.hasOwnProperty('gd')) {
            this.list_gold = _0x3e5c59.DYTools.stringToNumber(_0x568c95.gd, '*');
          }
          if (_0x568c95.hasOwnProperty('fl')) {
            var _0x58dc75 = _0x568c95.fl.split('#');
            for (var _0x4cc621 = 0x0; _0x4cc621 < _0x58dc75.length; _0x4cc621++) {
              if (0x2 == (_0x3a4712 = _0x3e5c59.DYTools.stringToNumber(_0x58dc75[_0x4cc621], '*')).length) {
                this.list_follow_min.push(_0x3a4712[0x0]);
                this.list_follow_max.push(_0x3a4712[0x1]);
              }
            }
          }
          if (_0x568c95.hasOwnProperty("ufl")) {
            _0x58dc75 = _0x568c95.ufl.split('#');
            for (_0x4cc621 = 0x0; _0x4cc621 < _0x58dc75.length; _0x4cc621++) {
              if (0x2 == (_0x3a4712 = _0x3e5c59.DYTools.stringToNumber(_0x58dc75[_0x4cc621], '*')).length) {
                this.list_unfollow_min.push(_0x3a4712[0x0]);
                this.list_unfollow_max.push(_0x3a4712[0x1]);
              }
            }
          }
          if (_0x568c95.hasOwnProperty('sp')) {
            this.speed_move = parseFloat(_0x568c95.sp);
          }
          if (_0x568c95.hasOwnProperty('rp') && 0x2 == (_0x3a4712 = _0x3e5c59.DYTools.stringToNumber(_0x568c95.rp, '*')).length) {
            this.speed_rotate_min = _0x3a4712[0x0];
            this.speed_rotate_max = _0x3a4712[0x1];
          }
          if (_0x568c95.hasOwnProperty('er')) {
            this.rotate_in = parseFloat(_0x568c95.er);
          }
          if (_0x568c95.hasOwnProperty('ed')) {
            this.distance_in = parseFloat(_0x568c95.ed);
          }
          if (_0x568c95.hasOwnProperty('et')) {
            this.target_in = _0x3e5c59.DYTools.stringToPoint(_0x568c95.et, '*');
          }
          if (_0x568c95.hasOwnProperty("isIn")) {
            this.isIn = parseInt(_0x568c95.isIn);
          }
          if (_0x568c95.hasOwnProperty('yIn')) {
            this.yIn = parseFloat(_0x568c95.yIn);
          }
          if (_0x568c95.hasOwnProperty('pp')) {
            var _0x4d68f0 = _0x3e5c59.DYTools.stringToPoint(_0x568c95.pp, _0x5ae4e9.GConfig.SeparatorII);
            this.player = cc.v2(_0x4d68f0.x * _0x321f03.GValue.Size_View.width, _0x4d68f0.y * _0x321f03.GValue.Size_View.height);
          }
          var _0x3a4712;
          if (_0x568c95.hasOwnProperty('st')) {
            this.pause = 0x1 == parseInt(_0x568c95.st);
          }
          if (_0x568c95.hasOwnProperty("kil")) {
            this.clear = 0x1 == parseInt(_0x568c95.kil);
          }
          if (_0x568c95.hasOwnProperty("tip")) {
            this.tip = _0x568c95.tip;
          }
          if (_0x568c95.hasOwnProperty('irp')) {
            this.speed_rotate_in = parseFloat(_0x568c95.irp);
          }
          if (_0x568c95.hasOwnProperty("isp")) {
            this.speed_move_in = parseFloat(_0x568c95.isp);
          }
          if (_0x568c95.hasOwnProperty('sh')) {
            this.image = parseInt(_0x568c95.sh);
          }
          if (_0x568c95.hasOwnProperty("col")) {
            if (0x3 == (_0x3a4712 = _0x3e5c59.DYTools.stringToNumber(_0x568c95.col, '*')).length) {
              this.color = cc.color(_0x3a4712[0x0], _0x3a4712[0x1], _0x3a4712[0x2]);
            }
          }
          if (_0x568c95.hasOwnProperty('gold')) {
            this.gold = parseFloat(_0x568c95.gold);
          }
        };
        return _0x198349;
      }();
      _0x44c62b.ConfigMapBossSnakeData = _0x4a2963;
      var _0x46c145 = function () {
        function _0x2c0b0a() {
          this.id = 0x0;
          this.type = 0x0;
          this.move_speed = 0x0;
          this.rotate_speed = 0x0;
          this.start_radius = 0x0;
          this.start_pos = cc.v2(0x0, 0x0);
          this.start_dir = cc.v2(0x0, -0x1);
          this.targetIn_time = 0x0;
          this.targetIn_pos = cc.v2(0x0, 0x0);
          this.list_time = [];
          this.list_radius = [];
          this.list_enemy = [];
          this.list_angle = [];
          this.list_dline = [];
          this.dic_line = {};
          this.lineId = 0x0;
          this.isIn = 0x0;
          this.rv = cc.v2(-0x2, -0x1);
          this.as_list_time = [];
          this.as_list_acc = [];
          this.ar_list_time = [];
          this.ar_list_acc = [];
          this.gold = 0x0;
          this.player = cc.Vec2.ZERO;
          this.pause = false;
          this.clear = false;
          this.tip = '';
        }
        _0x2c0b0a.prototype.loadData = function (_0x5343b3) {
          if (_0x5343b3.hasOwnProperty('id')) {
            this.id = parseInt(_0x5343b3.id);
          }
          if (_0x5343b3.hasOwnProperty("tpe")) {
            this.type = parseInt(_0x5343b3.tpe);
          }
          if (_0x5343b3.hasOwnProperty('ms')) {
            this.move_speed = parseFloat(_0x5343b3.ms);
          }
          if (_0x5343b3.hasOwnProperty('rs')) {
            this.rotate_speed = parseFloat(_0x5343b3.rs);
          }
          if (_0x5343b3.hasOwnProperty('sr')) {
            this.start_radius = parseFloat(_0x5343b3.sr);
          }
          if (_0x5343b3.hasOwnProperty('sp')) {
            this.start_pos = _0x3e5c59.DYTools.stringToPoint(_0x5343b3.sp, '*');
          }
          if (_0x5343b3.hasOwnProperty('sd')) {
            this.start_dir = _0x3e5c59.DYTools.stringToPoint(_0x5343b3.sd, '*');
          }
          if (_0x5343b3.hasOwnProperty('tt')) {
            this.targetIn_time = parseFloat(_0x5343b3.tt);
          }
          if (_0x5343b3.hasOwnProperty('tp')) {
            this.targetIn_pos = _0x3e5c59.DYTools.stringToPoint(_0x5343b3.tp, '*');
          }
          if (_0x5343b3.hasOwnProperty('tr')) {
            var _0x59aa88 = _0x5343b3.tr.split('#');
            for (var _0x55b30c = 0x0; _0x55b30c < _0x59aa88.length; _0x55b30c++) {
              if (0x2 == (_0x19382f = _0x3e5c59.DYTools.stringToNumber(_0x59aa88[_0x55b30c], '*')).length) {
                this.list_time.push(_0x19382f[0x0]);
                this.list_radius.push(_0x19382f[0x1]);
              }
            }
          }
          if (_0x5343b3.hasOwnProperty('en')) {
            _0x59aa88 = _0x5343b3.en.split('#');
            for (_0x55b30c = 0x0; _0x55b30c < _0x59aa88.length; _0x55b30c++) {
              if (0x3 == (_0x19382f = _0x59aa88[_0x55b30c].split('*')).length) {
                this.list_enemy.push(parseInt(_0x19382f[0x0]));
                this.list_angle.push(parseFloat(_0x19382f[0x1]));
                var _0x587e06 = _0x3e5c59.DYTools.stringToNumber(_0x19382f[0x2], '-');
                this.list_dline.push(_0x587e06);
              }
            }
          }
          if (_0x5343b3.hasOwnProperty('dl')) {
            _0x59aa88 = _0x5343b3.dl.split('#');
            for (_0x55b30c = 0x0; _0x55b30c < _0x59aa88.length; _0x55b30c++) {
              if (0x2 == (_0x19382f = _0x3e5c59.DYTools.stringToNumber(_0x59aa88[_0x55b30c], '*')).length) {
                this.dic_line[_0x19382f[0x0]] = _0x19382f[0x1];
              }
            }
          }
          if (_0x5343b3.hasOwnProperty('li')) {
            this.lineId = parseInt(_0x5343b3.li);
          }
          if (_0x5343b3.hasOwnProperty("isIn")) {
            this.isIn = parseInt(_0x5343b3.isIn);
          }
          if (_0x5343b3.hasOwnProperty('rv')) {
            this.rv = _0x3e5c59.DYTools.stringToPoint(_0x5343b3.rv, '*');
          }
          if (_0x5343b3.hasOwnProperty('as')) {
            _0x59aa88 = _0x5343b3.as.split('#');
            for (_0x55b30c = 0x0; _0x55b30c < _0x59aa88.length; _0x55b30c++) {
              if (0x2 == (_0x19382f = _0x3e5c59.DYTools.stringToNumber(_0x59aa88[_0x55b30c], '*')).length) {
                this.as_list_time.push(_0x19382f[0x0]);
                this.as_list_acc.push(_0x19382f[0x1]);
              }
            }
          }
          if (_0x5343b3.hasOwnProperty('ar')) {
            _0x59aa88 = _0x5343b3.ar.split('#');
            for (_0x55b30c = 0x0; _0x55b30c < _0x59aa88.length; _0x55b30c++) {
              var _0x19382f;
              if (0x2 == (_0x19382f = _0x3e5c59.DYTools.stringToNumber(_0x59aa88[_0x55b30c], '*')).length) {
                this.ar_list_time.push(_0x19382f[0x0]);
                this.ar_list_acc.push(_0x19382f[0x1]);
              }
            }
          }
          if (_0x5343b3.hasOwnProperty("gold")) {
            this.gold = parseFloat(_0x5343b3.gold);
          }
          if (_0x5343b3.hasOwnProperty('pp')) {
            var _0x5a819c = _0x3e5c59.DYTools.stringToPoint(_0x5343b3.pp, _0x5ae4e9.GConfig.SeparatorII);
            this.player = cc.v2(_0x5a819c.x * _0x321f03.GValue.Size_View.width, _0x5a819c.y * _0x321f03.GValue.Size_View.height);
          }
          if (_0x5343b3.hasOwnProperty('st')) {
            this.pause = 0x1 == parseInt(_0x5343b3.st);
          }
          if (_0x5343b3.hasOwnProperty('kil')) {
            this.clear = 0x1 == parseInt(_0x5343b3.kil);
          }
          if (_0x5343b3.hasOwnProperty("tip")) {
            this.tip = _0x5343b3.tip;
          }
        };
        return _0x2c0b0a;
      }();
      _0x44c62b.ConfigMapBossCircleData = _0x46c145;
      var _0x2cc488 = function () {
        function _0x59c35e() {
          this.id = 0x0;
          this.type = 0x0;
          this.hp = 0x2710;
          this.end_pos = cc.v2(0x0, 0x0);
          this.il = 0x0;
          this.ir = 0x1;
          this.ih = 0x2;
          this.enemys = [];
          this.lhands = [];
          this.rhands = [];
          this.gold = 0x0;
          this.player = cc.Vec2.ZERO;
          this.pause = false;
          this.clear = false;
          this.tip = '';
          this.image = 0x1;
        }
        _0x59c35e.prototype.loadData = function (_0x419400) {
          if (_0x419400.hasOwnProperty('id')) {
            this.id = parseInt(_0x419400.id);
          }
          if (_0x419400.hasOwnProperty("tpe")) {
            this.type = parseInt(_0x419400.tpe);
          }
          if (_0x419400.hasOwnProperty('hp')) {
            this.hp = parseInt(_0x419400.hp);
          }
          if (_0x419400.hasOwnProperty('il')) {
            this.il = parseFloat(_0x419400.il);
          }
          if (_0x419400.hasOwnProperty('ir')) {
            this.ir = parseFloat(_0x419400.ir);
          }
          if (_0x419400.hasOwnProperty('ih')) {
            this.ih = parseFloat(_0x419400.ih);
          }
          if (_0x419400.hasOwnProperty('ep')) {
            this.end_pos = _0x3e5c59.DYTools.stringToPoint(_0x419400.ep, _0x5ae4e9.GConfig.SeparatorII);
          }
          if (_0x419400.hasOwnProperty("enemys")) {
            this.enemys = _0x419400.enemys.split('#');
          }
          if (_0x419400.hasOwnProperty('lh')) {
            this.lhands = _0x419400.lh.split('#');
          }
          if (_0x419400.hasOwnProperty('rh')) {
            this.rhands = _0x419400.rh.split('#');
          }
          if (_0x419400.hasOwnProperty('gold')) {
            this.gold = parseFloat(_0x419400.gold);
          }
          if (_0x419400.hasOwnProperty('pp')) {
            var _0x411d32 = _0x3e5c59.DYTools.stringToPoint(_0x419400.pp, _0x5ae4e9.GConfig.SeparatorII);
            this.player = cc.v2(_0x411d32.x * _0x321f03.GValue.Size_View.width, _0x411d32.y * _0x321f03.GValue.Size_View.height);
          }
          if (_0x419400.hasOwnProperty('st')) {
            this.pause = 0x1 == parseInt(_0x419400.st);
          }
          if (_0x419400.hasOwnProperty("kil")) {
            this.clear = 0x1 == parseInt(_0x419400.kil);
          }
          if (_0x419400.hasOwnProperty('tip')) {
            this.tip = _0x419400.tip;
          }
          if (_0x419400.hasOwnProperty('sh')) {
            this.image = parseInt(_0x419400.sh);
          }
        };
        return _0x59c35e;
      }();
      _0x44c62b.ConfigMapBossFireData = _0x2cc488;
      var _0x3748ec = function () {
        function _0x434337() {
          this.id = 0x0;
          this.type = 0x0;
          this.hp = 0x2710;
          this.target_pos = cc.v2(0x0, 0x0);
          this.in_pos = cc.v2(0x0, 0x0);
          this.in_time = 0x0;
          this.speed_move = 0x0;
          this.speed_rotate = 0x0;
          this.enemys = [];
          this.attack = [];
          this.gold = 0x0;
          this.player = cc.Vec2.ZERO;
          this.pause = false;
          this.clear = false;
          this.tip = '';
        }
        _0x434337.prototype.loadData = function (_0x5ec546) {
          if (_0x5ec546.hasOwnProperty('id')) {
            this.id = parseInt(_0x5ec546.id);
          }
          if (_0x5ec546.hasOwnProperty("tpe")) {
            this.type = parseInt(_0x5ec546.tpe);
          }
          if (_0x5ec546.hasOwnProperty('hp')) {
            this.hp = parseInt(_0x5ec546.hp);
          }
          if (_0x5ec546.hasOwnProperty('tp')) {
            this.target_pos = _0x3e5c59.DYTools.stringToPoint(_0x5ec546.tp, _0x5ae4e9.GConfig.SeparatorII);
          }
          if (_0x5ec546.hasOwnProperty('ip')) {
            this.in_pos = _0x3e5c59.DYTools.stringToPoint(_0x5ec546.ip, _0x5ae4e9.GConfig.SeparatorII);
          }
          if (_0x5ec546.hasOwnProperty('it')) {
            this.in_time = parseFloat(_0x5ec546.it);
          }
          if (_0x5ec546.hasOwnProperty('sm')) {
            this.speed_move = parseFloat(_0x5ec546.sm);
          }
          if (_0x5ec546.hasOwnProperty('sr')) {
            this.speed_rotate = parseFloat(_0x5ec546.sr);
          }
          if (_0x5ec546.hasOwnProperty('enemys')) {
            this.enemys = _0x5ec546.enemys.split('#');
          }
          if (_0x5ec546.hasOwnProperty('attack')) {
            this.attack = _0x5ec546.attack.split('#');
          }
          if (_0x5ec546.hasOwnProperty("gold")) {
            this.gold = parseFloat(_0x5ec546.gold);
          }
          if (_0x5ec546.hasOwnProperty('pp')) {
            var _0x420118 = _0x3e5c59.DYTools.stringToPoint(_0x5ec546.pp, _0x5ae4e9.GConfig.SeparatorII);
            this.player = cc.v2(_0x420118.x * _0x321f03.GValue.Size_View.width, _0x420118.y * _0x321f03.GValue.Size_View.height);
          }
          if (_0x5ec546.hasOwnProperty('st')) {
            this.pause = 0x1 == parseInt(_0x5ec546.st);
          }
          if (_0x5ec546.hasOwnProperty("kil")) {
            this.clear = 0x1 == parseInt(_0x5ec546.kil);
          }
          if (_0x5ec546.hasOwnProperty('tip')) {
            this.tip = _0x5ec546.tip;
          }
        };
        return _0x434337;
      }();
      _0x44c62b.ConfigMapBossElectrData = _0x3748ec;
      var _0x56d7d0 = function () {
        function _0x56dca1() {
          this.id = 0x0;
          this.type = [];
          this.bId = [];
          this.time = [];
          this.player = cc.Vec2.ZERO;
          this.pause = false;
          this.tip = '';
        }
        _0x56dca1.prototype.loadData = function (_0x250d88) {
          if (_0x250d88.hasOwnProperty('id')) {
            this.id = parseInt(_0x250d88.id);
          }
          if (_0x250d88.hasOwnProperty("tpe")) {
            this.type = _0x3e5c59.DYTools.stringToNumber(_0x250d88.tpe, _0x5ae4e9.GConfig.SeparatorII);
          }
          if (_0x250d88.hasOwnProperty("bId")) {
            this.bId = _0x3e5c59.DYTools.stringToNumber(_0x250d88.bId, _0x5ae4e9.GConfig.SeparatorII);
          }
          if (_0x250d88.hasOwnProperty("per")) {
            this.time = _0x3e5c59.DYTools.stringToNumber(_0x250d88.per, _0x5ae4e9.GConfig.SeparatorII);
          }
          if (_0x250d88.hasOwnProperty('pp')) {
            var _0x373fdc = _0x3e5c59.DYTools.stringToPoint(_0x250d88.pp, _0x5ae4e9.GConfig.SeparatorII);
            this.player = cc.v2(0x2d0 * _0x373fdc.x, 0x500 * _0x373fdc.y);
          }
          if (_0x250d88.hasOwnProperty('st')) {
            this.pause = 0x1 == parseInt(_0x250d88.st);
          }
          if (_0x250d88.hasOwnProperty("tip")) {
            this.tip = _0x250d88.tip;
          }
        };
        return _0x56dca1;
      }();
      _0x44c62b.ConfigMapBossData = _0x56d7d0;
      var _0x23e9aa = function () {
        function _0x49d2f2() {
          this.id = 0x0;
          this.type = 0x0;
          this.enemyId = 0x0;
          this.radius = 0x0;
          this.knifeCount = 0x0;
          this.dropParam1 = '';
          this.dropParam2 = '';
          this.start = cc.Vec2.ZERO;
          this.end = cc.Vec2.ZERO;
          this.clear = false;
        }
        _0x49d2f2.prototype.loadData = function (_0x5db93a) {
          if (_0x5db93a.hasOwnProperty('id')) {
            this.id = parseInt(_0x5db93a.id);
          }
          if (_0x5db93a.hasOwnProperty("tpe")) {
            this.type = parseInt(_0x5db93a.tpe);
          }
          if (_0x5db93a.hasOwnProperty("mid")) {
            this.enemyId = parseInt(_0x5db93a.mid);
          }
          if (_0x5db93a.hasOwnProperty('ra')) {
            this.radius = parseInt(_0x5db93a.ra);
          }
          if (_0x5db93a.hasOwnProperty('nu')) {
            this.knifeCount = parseInt(_0x5db93a.nu);
          }
          if (_0x5db93a.hasOwnProperty("par1")) {
            this.dropParam1 = _0x5db93a.par1;
          }
          if (_0x5db93a.hasOwnProperty("par2")) {
            this.dropParam2 = _0x5db93a.par2;
          }
          if (_0x5db93a.hasOwnProperty('sp')) {
            var _0x2a00fb = _0x3e5c59.DYTools.stringToPoint(_0x5db93a.sp, _0x5ae4e9.GConfig.SeparatorII);
            this.start = cc.v2(_0x2a00fb.x * _0x321f03.GValue.Size_View.width, _0x2a00fb.y * _0x321f03.GValue.Size_View.height);
          }
          if (_0x5db93a.hasOwnProperty('ep')) {
            _0x2a00fb = _0x3e5c59.DYTools.stringToPoint(_0x5db93a.ep, _0x5ae4e9.GConfig.SeparatorII);
            this.end = cc.v2(_0x2a00fb.x * _0x321f03.GValue.Size_View.width, _0x2a00fb.y * _0x321f03.GValue.Size_View.height);
          }
          if (_0x5db93a.hasOwnProperty("kil")) {
            this.clear = 0x1 == parseInt(_0x5db93a.kil);
          }
        };
        return _0x49d2f2;
      }();
      _0x44c62b.ConfigKnifeBossData = _0x23e9aa;
      var _0x3db98b = function () {
        this.id = 0x0;
        this.blood = 0x0;
        this.moveSpeed = 0x0;
        this.scale = 0x0;
        this.adjustDuration = 0x0;
        this.cData = null;
        this.kData = null;
      };
      _0x44c62b.EnemyData = _0x3db98b;
      var _0x391115 = function () {
        this.id = 0x0;
        this.enemy = [];
        this.duration = 0x0;
        this.time = 0x0;
        this.rect = cc.rect();
      };
      _0x44c62b.ContinueEnemyData = _0x391115;
      var _0x24cc7b = function () {
        function _0x34f25f() {
          this.lv = 0x0;
          this.atk = 0x0;
          this.gd = 0x0;
          this.imageId = 0x1;
        }
        _0x34f25f.prototype.loadData = function (_0x10e6be) {
          if (_0x10e6be.hasOwnProperty('id')) {
            this.lv = parseInt(_0x10e6be.id);
          }
          if (_0x10e6be.hasOwnProperty("atk")) {
            this.atk = parseInt(_0x10e6be.atk);
          }
          if (_0x10e6be.hasOwnProperty('gd')) {
            this.gd = parseInt(_0x10e6be.gd);
          }
          if (_0x10e6be.hasOwnProperty('ima')) {
            this.imageId = parseInt(_0x10e6be.ima);
          }
        };
        return _0x34f25f;
      }();
      _0x44c62b.ConfigPropertyArmsMainData = _0x24cc7b;
      var _0x2616b6 = function () {
        function _0xa77f54() {
          this.fun = 0x0;
          this.lv = 0x0;
          this.atk = 0x0;
          this.gd = 0x0;
          this['var'] = '';
        }
        _0xa77f54.prototype.loadData = function (_0x364c2e) {
          if (_0x364c2e.hasOwnProperty("fun")) {
            this.fun = parseInt(_0x364c2e.fun);
          }
          if (_0x364c2e.hasOwnProperty('lv')) {
            this.lv = parseInt(_0x364c2e.lv);
          }
          if (_0x364c2e.hasOwnProperty("atk")) {
            this.atk = parseInt(_0x364c2e.atk);
          }
          if (_0x364c2e.hasOwnProperty('gd')) {
            this.gd = parseInt(_0x364c2e.gd);
          }
          if (_0x364c2e.hasOwnProperty("var")) {
            this['var'] = _0x364c2e["var"];
          }
        };
        return _0xa77f54;
      }();
      _0x44c62b.ConfigPropertyArmsSubData = _0x2616b6;
      var _0x34fc9d = function () {
        function _0x5c450c() {
          this.lv = 0x0;
          this.val = 0x0;
          this.gd = 0x0;
        }
        _0x5c450c.prototype.loadData = function (_0x414733) {
          if (_0x414733.hasOwnProperty('id')) {
            this.lv = parseInt(_0x414733.id);
          }
          if (_0x414733.hasOwnProperty("val")) {
            this.val = parseInt(_0x414733.val);
          }
          if (_0x414733.hasOwnProperty('gd')) {
            this.gd = parseInt(_0x414733.gd);
          }
        };
        return _0x5c450c;
      }();
      _0x44c62b.ConfigPropertyGoldKillData = _0x34fc9d;
      var _0x5d5e93 = function () {
        function _0x7e8bf8() {
          this.lv = 0x0;
          this.out = 0x0;
          this.gd = 0x0;
          this.lmt = 0x0;
        }
        _0x7e8bf8.prototype.loadData = function (_0x52d5db) {
          if (_0x52d5db.hasOwnProperty('id')) {
            this.lv = parseInt(_0x52d5db.id);
          }
          if (_0x52d5db.hasOwnProperty('out')) {
            this.out = parseInt(_0x52d5db.out);
          }
          if (_0x52d5db.hasOwnProperty('gd')) {
            this.gd = parseInt(_0x52d5db.gd);
          }
          if (_0x52d5db.hasOwnProperty("lmt")) {
            this.lmt = parseInt(_0x52d5db.lmt);
          }
        };
        return _0x7e8bf8;
      }();
      _0x44c62b.ConfigPropertyGoldOfflineData = _0x5d5e93;
      var _0x1de59d = function () {
        function _0xe85c44() {
          this.id = -0x1;
          this.title = '';
          this.imageUrl = '';
          this.userId = -0x1;
        }
        _0xe85c44.prototype.loadData = function (_0x3c1708) {
          if (_0x3c1708.hasOwnProperty('id')) {
            this.id = Number(_0x3c1708.id);
          }
          if (_0x3c1708.hasOwnProperty("url")) {
            this.imageUrl = _0x3c1708.url;
          }
          if (_0x3c1708.hasOwnProperty('text')) {
            this.title = _0x3c1708.text;
          }
        };
        return _0xe85c44;
      }();
      _0x44c62b.ShareData = _0x1de59d;
      var _0x1ea4b2 = function () {
        function _0x14be29() {
          this.id = 0x0;
          this.type = 0x0;
          this.value = [];
          this.shareId = [];
        }
        _0x14be29.prototype.loadData = function (_0x3acaa1) {
          if (_0x3acaa1.hasOwnProperty('id')) {
            this.id = Number(_0x3acaa1.id);
          }
          if (_0x3acaa1.hasOwnProperty("type")) {
            this.type = Number(_0x3acaa1.type);
          }
          if (_0x3acaa1.hasOwnProperty("vars")) {
            this.value = _0x3e5c59.DYTools.stringToNumber(_0x3acaa1.vars, _0x5ae4e9.GConfig.SeparatorII);
          }
          if (_0x3acaa1.hasOwnProperty("shareid")) {
            this.shareId = _0x3e5c59.DYTools.stringToNumber(_0x3acaa1.shareid, _0x5ae4e9.GConfig.SeparatorII);
          }
        };
        return _0x14be29;
      }();
      _0x44c62b.ADShareData = _0x1ea4b2;
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'CommonValue': "CommonValue",
      'Tools': "Tools"
    }],
    'DWK': [function (_0xfc36a3, _0x46a0fe, _0x4c27ca) {
      'use strict';
  
      cc._RF.push(_0x46a0fe, 'bfae2hinClCjbgItBf35d0r', "DWK");
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'label': cc.Label
        },
        'ctor': function () {
          this.label = null;
          this.text = 'hello';
        },
        'start': function () {}
      });
      cc._RF.pop();
    }, {}],
    'DeputyWeaponCollisionHandleSys': [function (_0x3b029a, _0x3ab7e2, _0x5e21bd) {
      'use strict';
  
      cc._RF.push(_0x3ab7e2, "87b69BbcOJHWrmv2PBeY5F5", "DeputyWeaponCollisionHandleSys");
      var _0x1a8f53 = _0x3b029a("CBaseCollisionHandleSystem");
      var _0x145733 = _0x3b029a('CommonValue');
      var _0x2536d7 = _0x3b029a("CommonEnum");
      cc.Class({
        'extends': _0x1a8f53,
        'properties': {},
        'ctor': function () {
          this._eventListName = "_deputyWeaponCollisionEvent";
        },
        'handelCollisionEvent': function (_0x1200a6) {
          var _0x2e315b = _0x1200a6[0x0];
          var _0x46794f = _0x1200a6[0x1];
          if (_0x2e315b && _0x2e315b.node) {
            switch (_0x2e315b.node.group) {
              case "enemy":
                if (_0x2e315b.tag == _0x2536d7.E_CTag.Boss_SnakeTail) {
                  var _0xfa0e0b = _0x2e315b.name;
                  if (_0x4bb728 = _0x145733.GValue.EntityWorld.SnakeEnemys[_0xfa0e0b]) {
                    _0x4bb728.attackTail(0x1, _0x145733.GValue.EntityWorld.player.curDWAtk);
                  }
                } else {
                  if (_0x2e315b.tag >= _0x2536d7.E_CTag.Boss_SnakeHead && _0x2e315b.tag < _0x2536d7.E_CTag.Boss_SnakeTail) {
                    var _0x4bb728;
                    _0xfa0e0b = _0x2e315b.name;
                    if (_0x4bb728 = _0x145733.GValue.EntityWorld.SnakeEnemys[_0xfa0e0b]) {
                      _0x4bb728.attackBody(0x0, _0x2e315b.tag, null);
                    }
                  } else {
                    if (_0x2e315b.tag == _0x2536d7.E_CTag.Boss_Fire) {
                      _0xfa0e0b = _0x2e315b.name;
                      var _0x231aff = _0x145733.GValue.EntityWorld.FireEnemys[_0xfa0e0b];
                      if (_0x231aff) {
                        _0x231aff.attack(0x1, _0x145733.GValue.EntityWorld.player.curDWAtk);
                      }
                    }
                  }
                }
                this.attackEnemy(_0x2e315b, _0x46794f);
            }
          }
        },
        'updateGameLogic': function (_0x5d4feb) {
          _0x1a8f53.prototype.updateGameLogic.call(this, _0x5d4feb);
          this._collisionEventMgr.clearDeputyWeaponEvent();
        },
        'attackEnemy': function (_0x3f19e2, _0x367dc5) {
          _0x3f19e2.node.emit("emitEvent", ["hurt", 0x1, _0x145733.GValue.EntityWorld.player.curDWAtk]);
          _0x367dc5.node.parent.emit("attackLight");
        }
      });
      cc._RF.pop();
    }, {
      'CBaseCollisionHandleSystem': 'CBaseCollisionHandleSystem',
      'CommonEnum': 'CommonEnum',
      'CommonValue': "CommonValue"
    }],
    'EnemyActionMoveComponent': [function (_0x1756e5, _0x1293e3, _0x205cc6) {
      'use strict';
  
      cc._RF.push(_0x1293e3, "67b47b46eNLl7U+/+a1h6pM", "EnemyActionMoveComponent");
      var _0xfea037 = _0x1756e5("EnemyMoveBaseComponent");
      var _0xf4e0cc = _0x1756e5("Tools");
      var _0x1e1d30 = _0x1756e5("Types");
      var _0x4b3a21 = _0x1756e5("CommonValue");
      cc.Class({
        'extends': _0xfea037,
        'properties': {},
        'ctor': function () {
          this.moveDistance = 0x0;
          this.curRatir = 0x0;
          this.distance = 0x0;
          this.targetRotate = 0x0;
          this.destFindMaxCount = 0xa;
          this.destFindCount = 0x0;
        },
        'updateGameLogic': function (_0x5035d7) {
          if (this.enemy) {
            switch (this.enemy.stateCom.state) {
              case _0x1e1d30.EnemyAction.Action:
                _0xfea037.prototype.updateGameLogic.call(this, _0x5035d7);
                if (!this.firstInScreen) {
                  var _0x253cd9 = this.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
                  if (_0xf4e0cc.DYTools.isInSreen(_0x253cd9, 0x28)) {
                    this.firstInScreen = true;
                  }
                }
                if (0x0 != this.moveType && this.player && !this.player.isDead) {
                  this.updateRotation(_0x5035d7);
                  this.updatePosition(_0x5035d7);
                }
            }
          }
        },
        'updateRotation': function (_0x5ec893) {
          switch (this.moveType) {
            case _0x1e1d30.EnemyMoveType.Follow:
            case _0x1e1d30.EnemyMoveType.SpeedUp:
              if (this.canChangeDir) {
                this.rotateTime += _0x5ec893;
                if (this.rotateTime > this.adjustDuration) {
                  this.adjustDir();
                }
              }
              break;
            case _0x1e1d30.EnemyMoveType.Elastic:
              if (this.canChangeDir) {
                if (this.firstInScreen) {
                  if (this.enemy.hasAttribution(_0x1e1d30.EnemyAttr.SplitMin) && (this.rotateTime += _0x5ec893, this.rotateTime > this.adjustDuration)) {
                    var _0x1389f9 = _0xf4e0cc.DYTools.random_int(0x34, 0x69) / 0x64 + _0xf4e0cc.DYTools.random_int(0x1, 0x3) * Math.PI / 0x2;
                    var _0x180782 = cc.v2(0x0, -0x1).rotate(_0x1389f9);
                    this.setCurDir(_0x180782);
                    this.rotateTime = 0x0;
                  }
                } else {
                  if (this.enemy.hasAttribution(_0x1e1d30.EnemyAttr.RanDir)) {
                    if (!this.enemy.moveFixCom.colWallAble) {
                      var _0x5e0e6f = this.player.getPositionForMap().sub(this.node.position);
                      this.setCurDir(_0x5e0e6f.normalize());
                      this.rotateTime = 0x0;
                      this.distance = this.curDir.mag();
                    }
                  } else if (this.enemy.hasAttribution(_0x1e1d30.EnemyAttr.SplitMin)) {
                    _0x5e0e6f = this.player.getPositionForMap().sub(this.node.position);
                    this.setCurDir(_0x5e0e6f.normalize());
                  } else {
                    this.rotateTime += _0x5ec893;
                    if (this.rotateTime > this.adjustDuration) {
                      _0x5e0e6f = this.player.getPositionForMap().sub(this.node.position);
                      this.setCurDir(_0x5e0e6f.normalize());
                      this.rotateTime = 0x0;
                      this.distance = this.curDir.mag();
                    }
                  }
                }
              }
          }
        },
        'adjustDir': function () {
          if (!(this.rotateTime < 0.2)) {
            var _0xdf056e = this.getWayDir();
            this.setCurDir(_0xdf056e.normalize());
            this.rotateTime = 0x0;
            this.distance = this.curDir.mag();
          }
        },
        'getWayDir': function () {
          var _0x195eb5 = cc.Vec2.ZERO;
          var _0x4d3020 = this.node.position;
          var _0x171172 = this.getIntersectBlocks(_0x4d3020);
          if (0x0 == _0x171172.length) {
            _0x195eb5 = this.player.getPositionForMap().sub(this.node.position);
          } else {
            var _0x1e7f10 = cc.Vec2.ZERO;
            if (_0x171172.length > 0x16) {
              var _0x4949b9 = this.player.getPositionForMap();
              this.destFindCount = 0x0;
              var _0x572439 = this.getNextDest(_0x4d3020, _0x171172, true);
              this.destFindCount = 0x0;
              var _0x224d8e = this.getNextDest(_0x4d3020, _0x171172, false);
              _0x1e7f10 = (_0x126171 = _0x572439.sub(_0x4949b9).mag()) < (_0x276386 = _0x224d8e.sub(_0x4949b9).mag()) ? _0x572439 : _0x224d8e;
            } else {
              var _0x126171 = 0x0;
              var _0xa6682b = [];
              for (this.destFindCount = 0x0; _0x171172.length > 0x0;) {
                var _0x3a49fb = this.getNextDest(_0x4d3020, _0x171172, true);
                _0x126171 += _0x4d3020.sub(_0x3a49fb).mag();
                if (this.arrContainPos(_0xa6682b, _0x3a49fb)) {
                  break;
                }
                _0xa6682b.push(_0x3a49fb);
                _0x4d3020 = _0x3a49fb;
                _0x171172 = this.getIntersectBlocks(_0x3a49fb);
                if (_0xa6682b.length > 0x14) {
                  _0x171172.splice(0x0);
                  _0xf4e0cc.DYTools.error("way0:error");
                }
              }
              var _0x276386 = 0x0;
              var _0x28a32b = [];
              _0x4d3020 = this.node.position;
              _0x171172 = this.getIntersectBlocks(_0x4d3020);
              for (this.destFindCount = 0x0; _0x171172.length > 0x0 && (_0x3a49fb = this.getNextDest(_0x4d3020, _0x171172, false), _0x276386 += _0x4d3020.sub(_0x3a49fb).mag(), !this.arrContainPos(_0x28a32b, _0x3a49fb));) {
                _0x28a32b.push(_0x3a49fb);
                _0x4d3020 = _0x3a49fb;
                _0x171172 = this.getIntersectBlocks(_0x3a49fb);
                if (_0x28a32b.length > 0x14) {
                  _0x171172.splice(0x0);
                  _0xf4e0cc.DYTools.error('way1:error');
                }
              }
              if (_0x126171 > _0x276386 && _0x276386 > 0x0) {
                _0x1e7f10 = _0x28a32b[0x0];
              } else if (_0x126171 > 0x0) {
                _0x1e7f10 = _0xa6682b[0x0];
              }
            }
            _0x195eb5 = _0x1e7f10.sub(this.node.position);
          }
          return _0x195eb5;
        },
        'getIntersectBlocks': function (_0x16ee65) {
          var _0x195c50 = this.player.getPositionForMap();
          var _0x290771 = this.enemy.radius;
          var _0x352059 = _0x16ee65.y + 0.75 * _0x290771;
          var _0x159bdf = _0x16ee65.y - 0.75 * _0x290771;
          var _0x369f07 = _0x16ee65.x - 0.75 * _0x290771;
          var _0x239d17 = _0x16ee65.x + 0.75 * _0x290771;
          var _0x54a99f = _0x195c50.y + 0x14 - 0x6;
          var _0x6a7a37 = _0x195c50.y - 0x14 + 0x6;
          var _0xf75ffd = _0x195c50.x - 0x14 + 0x6;
          var _0x4defa1 = _0x195c50.x + 0x14 - 0x6;
          var _0x10d619 = [];
          var _0x1e6c72 = _0x4b3a21.GValue.EntityWorld.mapMgr.blockArr;
          var _0x4a02d4 = _0x4b3a21.GValue.EntityWorld.mapMgr.blockRectArr;
          for (var _0x5e5b5d = 0x0; _0x5e5b5d < _0x1e6c72.length; _0x5e5b5d++) {
            var _0x225956 = _0x1e6c72[_0x5e5b5d];
            var _0x507161 = _0x4a02d4[_0x5e5b5d];
            var _0x1e230a = _0x507161.yMax;
            var _0x1e9449 = _0x507161.yMin;
            var _0x343fc1 = _0x507161.xMin;
            var _0x4f8404 = _0x507161.xMax;
            if (_0x352059 <= _0x1e9449 && _0x54a99f <= _0x1e9449) {
              ;
            } else {
              if (_0x159bdf >= _0x1e230a && _0x6a7a37 >= _0x1e230a) {
                ;
              } else {
                if (_0x369f07 >= _0x4f8404 && _0xf75ffd >= _0x4f8404) {
                  ;
                } else {
                  if (_0x239d17 <= _0x343fc1 && _0x4defa1 <= _0x343fc1) {
                    ;
                  } else {
                    var _0xc7c26a = _0x507161.x - 0.5 * _0x290771;
                    var _0x223636 = _0x507161.y - 0.5 * _0x290771;
                    var _0x31fdf6 = _0x507161.width + 0x1 * _0x290771;
                    var _0x24ec4b = _0x507161.height + 0x1 * _0x290771;
                    var _0x1b1402 = cc.rect(_0xc7c26a, _0x223636, _0x31fdf6, _0x24ec4b);
                    if (cc.Intersection.lineRect(_0x16ee65, _0x195c50, _0x1b1402)) {
                      _0x10d619.push(_0x225956);
                    }
                  }
                }
              }
            }
          }
          return _0x10d619;
        },
        'getNextDest': function (_0x1275ef, _0x5433d3, _0x2fca20) {
          this.destFindCount++;
          var _0x518c4a = cc.Vec2.ZERO;
          var _0x41e47b = 0x10f446;
          var _0x42482c = this.enemy.radius - 0x5;
          for (var _0x34db82 = 0x0; _0x34db82 < _0x5433d3.length; _0x34db82++) {
            var _0x25922e = _0x5433d3[_0x34db82];
            var _0x2dc79f = _0x25922e.node.position.add(_0x25922e.colCollider.node.position);
            var _0x3ede78 = _0x25922e.width;
            var _0x283315 = _0x25922e.height;
            var _0x9881be = _0x2dc79f.add(cc.v2(-_0x3ede78 / 0x2 - _0x42482c, -_0x283315 / 0x2 - _0x42482c));
            var _0x336755 = _0x2dc79f.add(cc.v2(-_0x3ede78 / 0x2 - _0x42482c, _0x283315 / 0x2 + _0x42482c));
            var _0x15ffa9 = _0x2dc79f.add(cc.v2(_0x3ede78 / 0x2 + _0x42482c, _0x283315 / 0x2 + _0x42482c));
            var _0x14c591 = _0x2dc79f.add(cc.v2(_0x3ede78 / 0x2 + _0x42482c, -_0x283315 / 0x2 - _0x42482c));
            var _0x29c016 = this.getBlockVertex(_0x1275ef, _0x2fca20, _0x2dc79f, _0x9881be, _0x336755, _0x15ffa9, _0x14c591, _0x3ede78 / 0x2 + _0x42482c - 0x2, _0x283315 / 0x2 + _0x42482c - 0x2);
            var _0x3c7f3c = this.getLineBlocks(_0x1275ef, _0x29c016, _0x4b3a21.GValue.EntityWorld.mapMgr.blockArr);
            if (this.destFindCount < this.destFindMaxCount) {
              _0xf4e0cc.DYTools.arrRemove(_0x3c7f3c, _0x25922e);
              if (_0x3c7f3c.length > 0x0) {
                _0x29c016 = this.getNextDest(_0x1275ef, _0x3c7f3c, _0x2fca20);
              }
            }
            var _0x4c9d0e = _0x29c016.sub(_0x1275ef).mag();
            if (_0x41e47b > _0x4c9d0e) {
              _0x41e47b = _0x4c9d0e;
              _0x518c4a = _0x29c016;
            }
          }
          return _0x518c4a;
        },
        'getLineBlocks': function (_0x1bfb08, _0x33ced7, _0xcdfdf9) {
          var _0x369ef6 = [];
          for (var _0x45e1b = 0x0; _0x45e1b < _0xcdfdf9.length; _0x45e1b++) {
            var _0x1c6274 = _0xcdfdf9[_0x45e1b];
            if (this.isLineBlock(_0x1bfb08, _0x33ced7, _0x1c6274)) {
              _0x369ef6.push(_0x1c6274);
            }
          }
          return _0x369ef6;
        },
        'isLineBlock': function (_0x14735b, _0x291ff1, _0x51f4ee) {
          var _0x337c63 = _0x51f4ee.node.position.add(_0x51f4ee.colCollider.node.position);
          var _0x5afcce = _0x51f4ee.width;
          var _0x343f00 = _0x51f4ee.height;
          var _0x4f6ecd = cc.rect(_0x337c63.x - _0x5afcce / 0x2 - 0xa, _0x337c63.y - _0x343f00 / 0x2 - 0xa, _0x5afcce + 0x14, _0x343f00 + 0x14);
          var _0x52390b = cc.v2(_0x4f6ecd.xMin, _0x4f6ecd.yMin);
          var _0x4037e9 = cc.v2(_0x4f6ecd.xMin, _0x4f6ecd.yMax);
          var _0x357888 = cc.v2(_0x4f6ecd.xMax, _0x4f6ecd.yMax);
          if (_0x14735b.y < _0x52390b.y && _0x291ff1.y < _0x52390b.y) {
            ;
          } else {
            if (_0x14735b.y > _0x4037e9.y && _0x291ff1.y > _0x4037e9.y) {
              ;
            } else {
              if (_0x14735b.x < _0x52390b.x && _0x291ff1.x < _0x52390b.x) {
                ;
              } else {
                if (_0x14735b.x > _0x357888.x && _0x291ff1.x > _0x357888.x) {
                  ;
                } else {
                  if (cc.Intersection.lineRect(_0x14735b, _0x291ff1, _0x4f6ecd)) {
                    return true;
                  }
                }
              }
            }
          }
          return false;
        },
        'getBlockVertex': function (_0x35dc15, _0x2a4f18, _0x526b8e, _0x46ab49, _0xc218e7, _0x15fbe0, _0x8540e7, _0x507f1e, _0x556f7e) {
          var _0x509a15 = [];
          _0x509a15.push(_0x46ab49);
          _0x509a15.push(_0xc218e7);
          _0x509a15.push(_0x15fbe0);
          _0x509a15.push(_0x8540e7);
          var _0x3ff14f = 0x0;
          if (_0x35dc15.x > _0x526b8e.x + _0x507f1e && _0x35dc15.y > _0x8540e7.y && _0x35dc15.y < _0x15fbe0.y) {
            _0x3ff14f = _0x2a4f18 ? 0x3 : 0x2;
          } else if (_0x35dc15.x < _0x526b8e.x - _0x507f1e && _0x35dc15.y > _0x46ab49.y && _0x35dc15.y < _0xc218e7.y) {
            _0x3ff14f = _0x2a4f18 ? 0x1 : 0x0;
          } else if (_0x35dc15.y > _0x526b8e.y + _0x556f7e && _0x35dc15.x > _0xc218e7.x && _0x35dc15.x < _0x15fbe0.x) {
            _0x3ff14f = _0x2a4f18 ? 0x2 : 0x1;
          } else if (_0x35dc15.y < _0x526b8e.y - _0x556f7e && _0x35dc15.x > _0x46ab49.x && _0x35dc15.x < _0x8540e7.x) {
            _0x3ff14f = _0x2a4f18 ? 0x0 : 0x3;
          } else if (_0x35dc15.x <= _0x526b8e.x && _0x35dc15.y <= _0x526b8e.y) {
            _0x3ff14f = _0x2a4f18 ? 0x1 : 0x3;
          } else if (_0x35dc15.x <= _0x526b8e.x && _0x35dc15.y >= _0x526b8e.y) {
            _0x3ff14f = _0x2a4f18 ? 0x2 : 0x0;
          } else if (_0x35dc15.x >= _0x526b8e.x && _0x35dc15.y >= _0x526b8e.y) {
            _0x3ff14f = _0x2a4f18 ? 0x3 : 0x1;
          } else if (_0x35dc15.x >= _0x526b8e.x && _0x35dc15.y <= _0x526b8e.y) {
            _0x3ff14f = _0x2a4f18 ? 0x0 : 0x2;
          } else {
            _0xf4e0cc.DYTools.error("没有方向");
          }
          return _0x509a15[_0x3ff14f];
        },
        'setRotate': function (_0x114d20) {
          var _0x4a983a = cc.v2(0x0, -0x1);
          var _0x31f9e5 = _0x114d20.signAngle(_0x4a983a);
          var _0x34774f = cc.misc.radiansToDegrees(_0x31f9e5);
          if (this.adjustDuration - 0.1 < 0x0) {
            this.node.angle = _0x34774f;
          } else {
            this.node.stopAllActions();
            this.node.runAction(cc.rotateTo(_0xf4e0cc.DYTools.random_int(0x5, 0xa) / 0x64, _0x34774f));
          }
          this.targetRotate = _0x34774f;
        },
        'arrContainPos': function (_0x225db7, _0x6780f2) {
          for (var _0x506626 = 0x0; _0x506626 < _0x225db7.length; _0x506626++) {
            if (_0x225db7[_0x506626].equals(_0x6780f2)) {
              return true;
            }
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonValue': 'CommonValue',
      'EnemyMoveBaseComponent': "EnemyMoveBaseComponent",
      'Tools': 'Tools',
      'Types': 'Types'
    }],
    'EnemyAnimComponent': [function (_0x58b50d, _0x167d80, _0x1653c8) {
      'use strict';
  
      cc._RF.push(_0x167d80, "9a6903aJsBIP5llj0AIsrzV", "EnemyAnimComponent");
      var _0x374aad = _0x58b50d("CommonConfig");
      var _0x4b59ac = _0x58b50d("Types");
      var _0x109ef5 = _0x58b50d('CommonValue');
      var _0x183ac3 = _0x58b50d('Tools');
      var _0x45e4b7 = _0x58b50d("PfFrameAnim");
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'backNode': cc.Node,
          'bodyNode': cc.Node,
          'dbNode': cc.Node,
          'pf_db': cc.Prefab,
          'animNode': cc.Node
        },
        'ctor': function () {
          this.backNode = null;
          this.bodyNode = null;
          this.dbNode = null;
          this.pf_db = null;
          this.animNode = null;
          this._data = null;
          this._entityEnemy = null;
          this._bloodNode = null;
          this._hurtLightNode = null;
          this._knifeLightNode = null;
          this._animDieCom = null;
          this._knifeLightCom = null;
          this.hpFrameAnim = null;
          this.hpCFrameAnim = null;
          this.hlpFrameAnim = null;
          this.dpFrameAnim = null;
          this.iceFrameAnim = null;
          this.fireFrameAnim = null;
          this.doctorFrameAnim = null;
          this.doctorEffectNode = null;
          this.eleFrameAnim = null;
          this.eleLineFrameAnim = null;
          this.eleCallback = null;
          this.goldPropFrameAnim = null;
          this.goldPropState = false;
          this._lightDWNode = null;
          this._lightDWCom = null;
          this._bodyPos = cc.Vec2.ZERO;
          this._bloodPos = cc.Vec2.ZERO;
          this._curActTag = -0x1;
          this._animList = [];
          this.hpPlaying = false;
          this.hpCPlaying = false;
          this.hlpPlaying = false;
          this.scaleY = 0x1;
          this.isHurted = false;
          this.hurtDuration = 0x0;
          this.posHNormal = cc.Vec2.ZERO;
          this.rtHNormal = 0x0;
          this.posHLaser = cc.Vec2.ZERO;
          this.rtHLaser = 0x0;
          this.dieCall = null;
        },
        'preLoad': function () {
          var _0x4f4902 = this;
          (_0x2e2534 = cc.instantiate(_0x109ef5.GValue.pf_anim)).scale = 1.8;
          this.hpFrameAnim = _0x2e2534.getComponent(_0x45e4b7);
          this.hpFrameAnim.init(_0x109ef5.GValue.Atlas_Enemy, "ah_", 0x5, 0.02, function () {
            _0x4f4902.onHpAnimFinished();
          });
          this.dbNode.addChild(_0x2e2534);
          (_0x2e2534 = cc.instantiate(_0x109ef5.GValue.pf_anim)).scale = 1.8;
          this.hpCFrameAnim = _0x2e2534.getComponent(_0x45e4b7);
          this.hpCFrameAnim.init(_0x109ef5.GValue.Atlas_Enemy, "ahh_", 0x9, 0.02, function () {
            _0x4f4902.onHpCAnimFinished();
          });
          this.dbNode.addChild(_0x2e2534);
          (_0x2e2534 = cc.instantiate(_0x109ef5.GValue.pf_anim)).scale = 0x3;
          _0x2e2534.anchorY = 0x1;
          this.hlpFrameAnim = _0x2e2534.getComponent(_0x45e4b7);
          this.hlpFrameAnim.init(_0x109ef5.GValue.Atlas_Enemy, "ahl_", 0x9, 0.02, function () {
            _0x4f4902.onHlpCAnimFinished();
          });
          this.dbNode.addChild(_0x2e2534);
          (_0x2e2534 = cc.instantiate(_0x109ef5.GValue.pf_anim)).scale = 0x2;
          this.dpFrameAnim = _0x2e2534.getComponent(_0x45e4b7);
          this.dpFrameAnim.init(_0x109ef5.GValue.Atlas_Enemy, "aed_", 0x17, 0.025, function () {
            _0x4f4902.onDpAnimFinished();
          });
          this.dbNode.addChild(_0x2e2534);
          (_0x2e2534 = cc.instantiate(_0x109ef5.GValue.pf_anim)).scale = 2.5;
          this.iceFrameAnim = _0x2e2534.getComponent(_0x45e4b7);
          this.iceFrameAnim.init(_0x109ef5.GValue.Atlas_Enemy, "aei_", 0x8, 1.5 * _0x374aad.GConfig.actionFrameTime, null, function () {
            _0x4f4902.onIceAnimStop();
          });
          this.animNode.addChild(_0x2e2534);
          (_0x2e2534 = cc.instantiate(_0x109ef5.GValue.pf_anim)).scale = 0x2;
          this.fireFrameAnim = _0x2e2534.getComponent(_0x45e4b7);
          this.fireFrameAnim.init(_0x109ef5.GValue.Atlas_Enemy, "aef_", 0x7, 1.8 * _0x374aad.GConfig.actionFrameTime, null, function () {
            _0x4f4902.onFireAnimStop();
          });
          this.animNode.addChild(_0x2e2534);
          (_0x2e2534 = cc.instantiate(_0x109ef5.GValue.pf_anim)).scale = 0x2;
          this.eleFrameAnim = _0x2e2534.getComponent(_0x45e4b7);
          this.eleFrameAnim.init(_0x109ef5.GValue.Atlas_Enemy, "aeh_", 0x5, 1.8 * _0x374aad.GConfig.actionFrameTime, null, function () {
            _0x4f4902.onEleAnimFinished();
          });
          this.animNode.addChild(_0x2e2534);
          var _0x2e2534;
          var _0x1c2631 = cc.instantiate(_0x109ef5.GValue.pf_anim);
          _0x1c2631.scale = 0x2;
          this.eleLineFrameAnim = _0x1c2631.getComponent(_0x45e4b7);
          this.eleLineFrameAnim.init(_0x109ef5.GValue.Atlas_Enemy, "aec_", 0x2, 1.8 * _0x374aad.GConfig.actionFrameTime, null, function () {
            _0x4f4902.onFireAnimStop();
          });
          this.animNode.addChild(_0x1c2631);
          (_0x2e2534 = cc.instantiate(_0x109ef5.GValue.pf_anim)).scale = 0x2;
          this.doctorFrameAnim = _0x2e2534.getComponent(_0x45e4b7);
          this.doctorFrameAnim.init(_0x109ef5.GValue.Atlas_Enemy, "aedoc_", 0x8, 0x2 * _0x374aad.GConfig.actionFrameTime, null, function () {
            _0x4f4902.onDocAnimStop();
          });
          this.animNode.addChild(_0x2e2534);
          this.doctorEffectNode = new cc.Node();
          this.bodyNode.parent.addChild(this.doctorEffectNode, -0xa);
          this.doctorEffectNode.addComponent(cc.Sprite).spriteFrame = _0x109ef5.GValue.Atlas_Enemy.getSpriteFrame("treatLight");
          this.doctorEffectNode.opacity = 0x0;
          (_0x2e2534 = cc.instantiate(_0x109ef5.GValue.pf_anim)).scale = 0x2;
          this.goldPropFrameAnim = _0x2e2534.getComponent(_0x45e4b7);
          this.goldPropFrameAnim.init(_0x109ef5.GValue.Atlas_Enemy, 'aepg_', 0x4, 0x2 * _0x374aad.GConfig.actionFrameTime, function () {
            _0x4f4902.goldPropFrameAnim.stop();
          });
          this.animNode.addChild(_0x2e2534);
        },
        'init': function (_0x5c917c, _0x4979b1, _0x4357f4, _0x460d66, _0x567c0e, _0x592d2d, _0x11b634) {
          this._entityEnemy = _0x5c917c;
          this._data = _0x4979b1;
          this.bodyNode = _0x4357f4;
          this._bloodNode = _0x460d66;
          this._hurtLightNode = _0x567c0e;
          this._knifeLightNode = _0x592d2d;
          this._animDieCom = _0x11b634.getComponent(cc.Animation);
          this._knifeLightCom = _0x592d2d.getComponent(cc.Animation);
          this._lightDWNode = _0x567c0e.parent.getChildByName("hurt1");
          this._lightDWCom = _0x567c0e.parent.getChildByName('cross1').getComponent(cc.Animation);
          this._bodyPos = this.bodyNode.position;
          this._bloodPos = this._bloodNode.position;
          this._animList.splice(0x0);
          var _0x19c1cd = _0x4979b1.cData.imageId;
          this.animNode.scale = 0x4 == _0x19c1cd || 0x6 == _0x19c1cd ? 0.5 : 0x1;
          if (this._entityEnemy.stateCom.state == _0x4b59ac.EnemyAction.Action) {
            this.addAnimAct(_0x4b59ac.EnemyAnim.Idle);
          }
          this.fireFrameAnim.node.y = _0x374aad.GConfig.enemyFirePos[this._data.cData.imageId].y;
          if (_0x374aad.GConfig.enemyFireScale[this._data.cData.imageId]) {
            this.fireFrameAnim.node.scale = _0x374aad.GConfig.enemyFireScale[this._data.cData.imageId];
          }
          if (0x4 == this._data.cData.imageId || 0x6 == this._data.cData.imageId) {
            this.doctorFrameAnim.node.scale = 1.5;
            this.doctorEffectNode.scale = 0.6;
          } else {
            this.doctorFrameAnim.node.scale = 0x2;
            this.doctorEffectNode.scale = 0x1;
          }
          this.goldPropFrameAnim.node.y = _0x374aad.GConfig.enemyGoldEyePos[this._data.cData.imageId].y;
          this.goldPropState = _0x109ef5.GValue.PropMgr.hasProp(_0x4b59ac.PropType.Gold);
          this._entityEnemy.uiCom.setGoldEyeShow(this.goldPropState);
          if (0x4 == this._data.cData.imageId || 0x6 == this._data.cData.imageId) {
            this.doctorFrameAnim.node.scale = 1.5;
            this.doctorEffectNode.scale = 0.6;
          } else {
            this.doctorFrameAnim.node.scale = 0x2;
            this.doctorEffectNode.scale = 0x1;
          }
        },
        'setThronShow': function (_0x79ee5d) {},
        'onAnimCompleted': function (_0x58853d) {
          if (_0x58853d == _0x4b59ac.EnemyAnim.HurtNormal) {
            this._curActTag = 0x0;
            this.bodyNode.stopAllActions();
          }
        },
        'addAnimAct': function (_0x4ac0a9, _0x145e0f, _0x1766fc, _0x41e22a) {
          if (undefined === _0x145e0f) {
            _0x145e0f = cc.Vec2.ZERO;
          }
          if (undefined === _0x1766fc) {
            _0x1766fc = 0x0;
          }
          if (undefined === _0x41e22a) {
            _0x41e22a = null;
          }
          switch (_0x4ac0a9) {
            case _0x4b59ac.EnemyAnim.Idle:
              break;
            case _0x4b59ac.EnemyAnim.HurtNormal:
              this.posHNormal = _0x145e0f;
              this.rtHNormal = _0x1766fc;
              break;
            case _0x4b59ac.EnemyAnim.HurtLaser:
              this.posHLaser = _0x145e0f;
              this.rtHLaser = _0x1766fc;
              break;
            case _0x4b59ac.EnemyAnim.Die:
              this.dieCall = _0x41e22a;
          }
          if (!_0x183ac3.DYTools.arrContain(this._animList, _0x4ac0a9)) {
            this._animList.push(_0x4ac0a9);
            this.refreshAnim();
          }
        },
        'removeAnimAct': function (_0x45c22f) {
          var _0x28e4af = this._animList.indexOf(_0x45c22f);
          if (_0x28e4af >= 0x0) {
            this._animList.splice(_0x28e4af, 0x1);
          }
          switch (_0x45c22f) {
            case _0x4b59ac.EnemyAnim.Idle:
            case _0x4b59ac.EnemyAnim.HurtNormal:
              break;
            case _0x4b59ac.EnemyAnim.HurtLaser:
              this.onHlpCAnimFinished();
          }
          this.refreshAnim();
        },
        'refreshAnim': function () {
          if (_0x183ac3.DYTools.arrContain(this._animList, _0x4b59ac.EnemyAnim.Die)) {
            this.initAnim();
            this.iceFrameAnim.stop();
            this.fireFrameAnim.stop();
            this.doctorFrameAnim.stop();
            this.goldPropFrameAnim.stop();
            this.playDieAnim(this.dieCall);
          } else {
            if (_0x183ac3.DYTools.arrContain(this._animList, _0x4b59ac.EnemyAnim.HurtNormal)) {
              var _0xca1297 = 0x0;
              if (this.isHurted) {
                _0xca1297 = 0x1;
              }
              this.isHurted = true;
              this.hurtDuration = 0x0;
              if (this._curActTag != _0x4b59ac.EnemyAnim.HurtNormal) {
                this._curActTag = _0x4b59ac.EnemyAnim.HurtNormal;
                this.initAnim();
                this.playHurtAnim();
                this.playHurtLightAnim(this.posHNormal);
                this.playHurtParticle(_0xca1297, this.posHNormal);
              }
              if (_0x183ac3.DYTools.arrContain(this._animList, _0x4b59ac.EnemyAnim.HurtLaser)) {
                this.playLaserHurtParticle(this.posHLaser);
              }
            } else if (_0x183ac3.DYTools.arrContain(this._animList, _0x4b59ac.EnemyAnim.HurtLaser)) {
              this._curActTag = _0x4b59ac.EnemyAnim.HurtLaser;
              this.isHurted = true;
              this.hurtDuration = 0x0;
              this.initAnim();
              this.playLaserHurtParticle(this.posHLaser);
              this.playLaserHurtAct();
            } else if (this._curActTag != _0x4b59ac.EnemyAnim.Idle) {
              this._curActTag = _0x4b59ac.EnemyAnim.Idle;
              this.initAnim();
              this.playIdleAnim();
            }
          }
        },
        'playDeputyHurtAnim': function (_0xa8e19e) {
          var _0x1e7767 = this;
          var _0x17142b = 0.7 * _0x374aad.GConfig.actionFrameTime;
          this._lightDWNode.active = true;
          this._lightDWNode.opacity = 0xff;
          this._lightDWNode.scale = 0x1;
          var _0x1d9178 = _0x183ac3.DYTools.random_int(0x0, 0x28) - 0x14;
          this._lightDWNode.position = _0xa8e19e.add(cc.v2(_0x1d9178, 0.5 * Math.abs(_0x1d9178)));
          var _0x5927c6 = cc.fadeTo(0x3 * _0x17142b, 0xb2);
          var _0x17e9a0 = cc.scaleTo(0x3 * _0x17142b, 1.46);
          this._lightDWNode.runAction(cc.sequence(cc.spawn(_0x5927c6, _0x17e9a0), cc.callFunc(function () {
            _0x1e7767._lightDWNode.opacity = 0x0;
          })));
          this._lightDWCom.node.active = true;
          this._lightDWCom.node.opacity = 0xff;
          this._lightDWCom.node.position = _0xa8e19e.add(cc.v2(_0x183ac3.DYTools.random_int(0x0, 0x3c) - 0x1e, _0x183ac3.DYTools.random_int(0x0, 0x14) - 0xa));
          this._lightDWCom.play();
          this.playHurtParticle(0x1, _0xa8e19e);
        },
        'initAnim': function () {
          this.bodyNode.stopAllActions();
          this.bodyNode.scale = 0x1;
          this.bodyNode.position = this._bodyPos;
          this._bloodNode.stopAllActions();
          this._bloodNode.scale = 0x1;
          this._bloodNode.position = this._bloodPos;
        },
        'updateGameLogic': function (_0x5e1d26) {
          if (this.isHurted) {
            this.hurtDuration += _0x5e1d26;
            if (this.hurtDuration >= 0.2) {
              this.hurtDuration = 0x0;
              this.isHurted = false;
            }
          }
          if (this.isHurted) {
            this.scaleY -= 0.02;
            if (this.scaleY < 0.75) {
              this.scaleY = 0.75;
            }
          } else {
            this.scaleY += 0.05;
            if (this.scaleY >= 0x1) {
              this.scaleY = 0x1;
            }
          }
          this.bodyNode.parent.scaleY = this.scaleY;
          if (!this._entityEnemy.isDead && this._entityEnemy.buffCom.isDirty) {
            if (this._entityEnemy.hasBuff(_0x4b59ac.EnemyBuff.Frozen)) {
              if (!this.iceFrameAnim.isPlaying()) {
                this.iceFrameAnim.reset();
              }
            } else if (this._entityEnemy.hasBuff(_0x4b59ac.EnemyBuff.Firing)) {
              if (!this.fireFrameAnim.isPlaying()) {
                this.fireFrameAnim.reset();
              }
            } else {
              if (this.iceFrameAnim.isPlaying()) {
                this.iceFrameAnim.stop();
              }
              if (this.fireFrameAnim.isPlaying()) {
                this.fireFrameAnim.stop(true);
              }
            }
            if (this._entityEnemy.hasBuff(_0x4b59ac.EnemyBuff.Treat)) {
              if (!this.doctorFrameAnim.isPlaying()) {
                this.doctorFrameAnim.reset();
                this.doctorEffectNode.opacity = 0xff;
              }
            } else if (this.doctorFrameAnim.isPlaying()) {
              this.doctorFrameAnim.stop();
            }
            this._entityEnemy.buffCom.isDirty = false;
          }
          this.checkGoldPropAnim();
        },
        'playIdleAnim': function () {
          var _0x1fdc6a = 1.2 * _0x374aad.GConfig.actionFrameTime;
          var _0x1c42ac = cc.scaleTo(0x4 * _0x1fdc6a, 1.02, 0.93);
          var _0x395cb9 = cc.scaleTo(0x3 * _0x1fdc6a, 0.98, 1.01);
          var _0x4401ec = cc.scaleTo(0x2 * _0x1fdc6a, 0x1, 0x1);
          var _0x3cd644 = cc.repeatForever(cc.sequence(_0x1c42ac, _0x395cb9, _0x4401ec));
          this.bodyNode.runAction(_0x3cd644);
          var _0x158764 = cc.moveBy(0x4 * _0x1fdc6a, cc.v2(0x0, 0x3));
          var _0x14d7a4 = cc.moveBy(0x3 * _0x1fdc6a, cc.v2(0x0, -0x2));
          var _0x5d4993 = cc.moveBy(0x3 * _0x1fdc6a, cc.v2(0x0, -0x1));
          var _0x148820 = cc.spawn(_0x1c42ac.clone(), _0x158764);
          var _0x4e3137 = cc.spawn(_0x395cb9.clone(), _0x14d7a4);
          var _0x46b6d7 = cc.spawn(_0x4401ec.clone(), _0x5d4993);
          this._bloodNode.runAction(cc.repeatForever(cc.sequence(_0x148820, _0x4e3137, _0x46b6d7)));
        },
        'playHurtAnim': function () {
          var _0x1189ad = this;
          var _0x56bc64 = 0.7 * _0x374aad.GConfig.actionFrameTime;
          var _0x2d5d1a = cc.scaleTo(0x0, 0x1);
          var _0x2a6628 = cc.scaleTo(0x2 * _0x56bc64, 1.14);
          var _0x4ea50d = cc.scaleTo(_0x56bc64, 1.14);
          var _0xdb8878 = cc.callFunc(function () {
            _0x1189ad.removeAnimAct(_0x4b59ac.EnemyAnim.HurtNormal);
          });
          this.bodyNode.runAction(cc.sequence(_0x2d5d1a, _0x2a6628, _0x4ea50d, _0xdb8878));
          var _0x5405d8 = cc.scaleTo(0x0, 0x1);
          var _0x174e0e = cc.scaleTo(0x2 * _0x56bc64, 1.14);
          var _0x270e40 = cc.moveBy(0x2 * _0x56bc64, cc.v2(0x0, 0x2));
          var _0x48543c = cc.spawn(_0x174e0e, _0x270e40);
          var _0x2932ab = cc.scaleTo(_0x56bc64, 1.14);
          var _0x5598c8 = cc.moveBy(_0x56bc64, cc.v2(0x0, -0x2));
          var _0x59bd4b = cc.spawn(_0x2932ab, _0x5598c8);
          this._bloodNode.runAction(cc.sequence(_0x5405d8, _0x48543c, _0x59bd4b));
        },
        'playHurtLightAnim': function (_0x1d2539) {
          var _0x3388f1 = this;
          var _0x368db8 = 0.7 * _0x374aad.GConfig.actionFrameTime;
          this._hurtLightNode.active = true;
          this._hurtLightNode.opacity = 0xff;
          this._hurtLightNode.scale = 0x1;
          var _0x2072c0 = _0x183ac3.DYTools.random_int(0x0, 0x28) - 0x14;
          this._hurtLightNode.position = _0x1d2539.add(cc.v2(_0x2072c0, 0.5 * Math.abs(_0x2072c0)));
          var _0x338746 = cc.fadeTo(0x3 * _0x368db8, 0xb2);
          var _0x3aa689 = cc.scaleTo(0x3 * _0x368db8, 1.46);
          this._hurtLightNode.runAction(cc.sequence(cc.spawn(_0x338746, _0x3aa689), cc.callFunc(function () {
            _0x3388f1._hurtLightNode.opacity = 0x0;
          })));
          this._knifeLightNode.active = true;
          this._knifeLightNode.opacity = 0xff;
          this._knifeLightNode.angle = -this.rtHNormal;
          this._knifeLightNode.position = _0x1d2539.add(cc.v2(_0x183ac3.DYTools.random_int(0x0, 0x3c) - 0x1e, _0x183ac3.DYTools.random_int(0x0, 0x14) - 0xa));
          this._knifeLightCom.play();
        },
        'playHurtParticle': function (_0x57765e, _0x3eec41) {
          if (0x0 == _0x57765e) {
            if (!this.hpPlaying) {
              this.hpPlaying = true;
              this.hpFrameAnim.reset();
              this.hpFrameAnim.node.position = _0x3eec41;
              this.hpFrameAnim.node.angle = -this.rtHNormal;
              this.hpFrameAnim.node.color = this.getParticleColor();
            }
          } else if (!(0x1 != _0x57765e || this.hpCPlaying)) {
            this.hpCPlaying = true;
            this.hpCFrameAnim.reset();
            this.hpCFrameAnim.node.position = _0x3eec41;
            this.hpCFrameAnim.node.angle = -this.rtHNormal;
            this.hpCFrameAnim.node.color = this.getParticleColor();
          }
        },
        'playLaserHurtAct': function () {
          var _0x18409b = 0.7 * _0x374aad.GConfig.actionFrameTime;
          var _0x278557 = cc.scaleTo(0x0, 0x1, 0.9);
          var _0x34ea34 = cc.scaleTo(0x2 * _0x18409b, 1.3, 0x1);
          var _0x4e39fb = cc.scaleTo(_0x18409b, 0x1);
          var _0xa07d92 = cc.sequence(_0x278557, _0x34ea34, _0x4e39fb);
          this.bodyNode.runAction(cc.repeatForever(_0xa07d92));
          var _0x3ca12f = cc.scaleTo(0x0, 0x1, 0.9);
          var _0x56f4d3 = cc.scaleTo(0x2 * _0x18409b, 1.3, 1.18);
          var _0xef29e3 = cc.scaleTo(_0x18409b, 0x1);
          this._bloodNode.runAction(cc.repeatForever(cc.sequence(_0x3ca12f, _0x56f4d3, _0xef29e3)));
        },
        'playLaserHurtParticle': function (_0x1a4d7b) {
          if (!this.hlpPlaying) {
            this.hlpFrameAnim.reset();
            this.hlpFrameAnim.node.position = _0x1a4d7b;
            this.hlpFrameAnim.node.angle = -this.rtHLaser;
            this.hlpFrameAnim.node.color = this.getParticleColor();
          }
        },
        'playElectricityAct': function (_0x33707e) {
          this.eleCallback = _0x33707e;
          this.eleFrameAnim.reset();
        },
        'onEleAnimFinished': function () {
          if (this.eleCallback) {
            this.eleCallback(this);
          }
          this.eleFrameAnim.stop();
        },
        'onHpAnimFinished': function () {
          this.hpPlaying = false;
          this.hpFrameAnim.stop();
        },
        'onHpCAnimFinished': function () {
          this.hpCPlaying = false;
          this.hpCFrameAnim.stop();
        },
        'onHlpCAnimFinished': function () {
          this.hlpPlaying = false;
          this.hlpFrameAnim.stop();
          if (this._entityEnemy.player.isDead) {
            this.bodyNode.stopAllActions();
            this._bloodNode.stopAllActions();
            var _0x38ab68 = this._animList.indexOf(_0x4b59ac.EnemyAnim.HurtLaser);
            if (_0x38ab68 >= 0x0) {
              this._animList.splice(_0x38ab68, 0x1);
            }
            if ((_0x38ab68 = this._animList.indexOf(_0x4b59ac.EnemyAnim.HurtNormal)) >= 0x0) {
              this._animList.splice(_0x38ab68, 0x1);
            }
            this.refreshAnim();
          } else if (_0x183ac3.DYTools.arrContain(this._animList, _0x4b59ac.EnemyAnim.HurtLaser) && !_0x183ac3.DYTools.arrContain(this._animList, _0x4b59ac.EnemyAnim.Die)) {
            this.refreshAnim();
          }
        },
        'onIceAnimStop': function () {},
        'onFireAnimStop': function () {},
        'onDocAnimStop': function () {
          this.doctorEffectNode.opacity = 0x0;
        },
        'onDpAnimFinished': function () {
          this._animDieCom.node.opacity = 0x0;
          this.dpFrameAnim.stop();
          this.hpFrameAnim.stop();
          this.hlpFrameAnim.stop();
          this.iceFrameAnim.stop();
          this.fireFrameAnim.stop();
          this.hpPlaying = false;
          this.hpCPlaying = false;
          this.hlpPlaying = false;
          if (this.dieCall) {
            this.dieCall();
          }
        },
        'playDieAnim': function (_0x3f583c) {
          var _0x2d4dd4 = this;
          this._animDieCom.node.opacity = 0xff;
          this._animDieCom.play('die');
          if (this._entityEnemy.hasAttribution(_0x4b59ac.EnemyAttr.Gold)) {
            _0x109ef5.GValue.EntityWorld.gameUI.playGoldEnemyDie(this.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0)), this._data.cData.dropGold);
          }
          this.dpFrameAnim.reset();
          this.dpFrameAnim.node.color = this.getParticleColor();
          var _0x297ffd = _0x374aad.GConfig.actionFrameTime;
          this.scheduleOnce(function () {
            var _0x22add9 = _0x2d4dd4.dbNode.getChildByName("dieLight");
            if (_0x22add9) {
              _0x22add9.opacity = 0xff;
            } else {
              (_0x22add9 = new cc.Node()).name = "dieLight";
              _0x2d4dd4.dbNode.addChild(_0x22add9);
              _0x22add9.addComponent(cc.Sprite).spriteFrame = _0x109ef5.GValue.Atlas_Enemy.getSpriteFrame("edl");
            }
            _0x22add9.scale = 1.55;
            _0x22add9.runAction(cc.sequence(cc.scaleTo(0x3 * _0x297ffd, 0.56), cc.callFunc(function () {
              _0x22add9.opacity = 0x0;
            })));
          }, _0x297ffd);
        },
        'checkGoldPropAnim': function () {
          if (this.goldPropState) {
            if (!_0x109ef5.GValue.PropMgr.hasProp(_0x4b59ac.PropType.Gold)) {
              this.goldPropState = false;
              this._entityEnemy.uiCom.setGoldEyeShow(false);
            }
          } else if (_0x109ef5.GValue.PropMgr.hasProp(_0x4b59ac.PropType.Gold)) {
            this.goldPropState = true;
            this.goldPropFrameAnim.reset();
            this._entityEnemy.uiCom.setGoldEyeShow(true);
          }
        },
        'getParticleColor': function () {
          return 0x3e9 == this._data.cData.imageId ? cc.Color.BLACK : this._entityEnemy.skinColor;
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'CommonValue': "CommonValue",
      'PfFrameAnim': 'PfFrameAnim',
      'Tools': 'Tools',
      'Types': 'Types'
    }],
    'EnemyAttrBaseCom': [function (_0x50b21a, _0x45663c, _0x35a641) {
      'use strict';
  
      cc._RF.push(_0x45663c, "751d19ad+pCmagfNRGT+4GK", "EnemyAttrBaseCom");
      var _0xc74a02 = _0x50b21a("EnemyBaseComponent");
      cc.Class({
        'extends': _0xc74a02,
        'properties': {},
        'ctor': function () {
          this.enemyEntity = null;
          this.attrData = null;
          this.attrMgr = null;
        },
        'updateGameLogic': function (_0x5a4cd1) {},
        'die': function () {}
      });
      cc._RF.pop();
    }, {
      'EnemyBaseComponent': 'EnemyBaseComponent'
    }],
    'EnemyAttrComponent': [function (_0x3a0486, _0x80603e, _0x1c1643) {
      'use strict';
  
      cc._RF.push(_0x80603e, "d6303H9DhNEb4vu2nQ7MneH", "EnemyAttrComponent");
      var _0x3ddc64 = _0x3a0486('Types');
      var _0x1f4f9f = _0x3a0486('CommonConfig');
      var _0xc680b1 = _0x3a0486("Tools");
      var _0x3eec08 = _0x3a0486('CommonValue');
      var _0x55a090 = _0x3a0486("EnemyAttrThronCom");
      var _0x2126fd = _0x3a0486("EnemyAttrDoctorCom");
      var _0x1904d0 = _0x3a0486("EnemyAttrSplitCom");
      var _0x384dc6 = _0x3a0486('EnemyAttrVomitCom');
      var _0x134733 = _0x3a0486("EnemyAttrEnterCom");
      var _0x20b09f = _0x3a0486('EnemyAttrTrackCom');
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.entity = null;
          this.attr = [];
          this.param = {};
          this.attrData = {};
          this.awakeRect = cc.rect();
          this.comArr = [];
          this.comDict = {};
        },
        'init': function (_0x4dc6a1) {
          this.entity = _0x4dc6a1;
          this.attr = [];
          this.param = {};
          this.attrData = {};
          var _0xe52ad8 = this.entity.data.cData.attr;
          for (var _0x6cafe6 = 0x0; _0x6cafe6 < _0xe52ad8.length; _0x6cafe6++) {
            var _0xedec8d = _0x1f4f9f.GConfig.getAttrData(_0xe52ad8[_0x6cafe6]);
            this.attr.push(_0xedec8d.attr);
            this.param[_0xedec8d.attr] = _0xedec8d.param;
            this.attrData[_0xedec8d.attr] = _0xedec8d;
          }
          if (this.hasAttribution(_0x3ddc64.EnemyAttr.Sleep)) {
            this.node.emit("updateState", _0x3ddc64.EnemyAction.Sleep);
            var _0x51e743 = _0xc680b1.DYTools.stringToPoint(this.param[_0x3ddc64.EnemyAttr.Sleep], _0x1f4f9f.GConfig.SeparatorII);
            var _0x1b155b = _0x3eec08.GValue.Size_View.width * _0x51e743.x;
            var _0x3af24a = _0x3eec08.GValue.Size_View.height * _0x51e743.y;
            this.awakeRect = cc.rect(_0x1b155b, _0x3af24a, _0x3eec08.GValue.Size_View.width - 0x2 * _0x1b155b, _0x3eec08.GValue.Size_View.height - 0x2 * _0x3af24a);
          } else {
            this.node.emit("updateState", _0x3ddc64.EnemyAction.Action);
          }
          var _0x1b6c6e = [];
          if (this.hasAttribution(_0x3ddc64.EnemyAttr.Thron)) {
            var _0x2da16c = _0xc680b1.DYTools.addScript(this.node, _0x55a090);
            _0x2da16c.init(this.entity, this.attrData[_0x3ddc64.EnemyAttr.Thron]);
            _0x1b6c6e.push(_0x2da16c);
          }
          if (this.hasAttribution(_0x3ddc64.EnemyAttr.Doctor)) {
            var _0x11a18e = _0xc680b1.DYTools.addScript(this.node, _0x2126fd);
            _0x11a18e.init(this.attrData[_0x3ddc64.EnemyAttr.Doctor]);
            _0x1b6c6e.push(_0x11a18e);
          }
          if (this.hasAttribution(_0x3ddc64.EnemyAttr.Split)) {
            var _0x2d8d93 = _0xc680b1.DYTools.addScript(this.node, _0x1904d0);
            _0x2d8d93.init(this.entity, this.attrData[_0x3ddc64.EnemyAttr.Split]);
            _0x1b6c6e.push(_0x2d8d93);
          }
          if (this.hasAttribution(_0x3ddc64.EnemyAttr.Vomit)) {
            var _0x12c127 = _0xc680b1.DYTools.addScript(this.node, _0x384dc6);
            _0x12c127.init(this.entity, this.attrData[_0x3ddc64.EnemyAttr.Vomit], this);
            _0x1b6c6e.push(_0x12c127);
          }
          if (this.hasAttribution(_0x3ddc64.EnemyAttr.Enter)) {
            var _0xed9a67 = _0xc680b1.DYTools.addScript(this.node, _0x134733);
            _0xed9a67.init(this.entity, this.attrData[_0x3ddc64.EnemyAttr.Enter]);
            _0x1b6c6e.push(_0xed9a67);
          }
          if (this.hasAttribution(_0x3ddc64.EnemyAttr.Track)) {
            var _0x3833b1 = _0xc680b1.DYTools.addScript(this.node, _0x20b09f);
            _0x3833b1.init(this.entity, this.attrData[_0x3ddc64.EnemyAttr.Track]);
            _0x1b6c6e.push(_0x3833b1);
          }
          for (_0x6cafe6 = 0x0; _0x6cafe6 < this.comArr.length; _0x6cafe6++) {
            var _0x1a9cd0 = this.comArr[_0x6cafe6];
            if (!_0xc680b1.DYTools.arrContain(_0x1b6c6e, _0x1a9cd0)) {
              _0x1a9cd0.destroy();
              this.comArr.splice(_0x6cafe6, 0x1);
              this.comDict[_0x1a9cd0.attrData.attr] = null;
              _0x6cafe6--;
            }
          }
          for (_0x6cafe6 = 0x0; _0x6cafe6 < _0x1b6c6e.length; _0x6cafe6++) {
            _0x1a9cd0 = _0x1b6c6e[_0x6cafe6];
            if (!_0xc680b1.DYTools.arrContain(this.comArr, _0x1a9cd0)) {
              this.comArr.push(_0x1a9cd0);
              this.comDict[_0x1a9cd0.attrData.attr] = _0x1a9cd0;
            }
          }
        },
        'updateGameLogic': function (_0x434f5a) {
          if (this.entity.stateCom.state == _0x3ddc64.EnemyAction.Sleep) {
            var _0x4941eb = this.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
            switch (_0x3eec08.GValue.EntityWorld.mapMgr.curDirTag) {
              case 0x1:
                if (this.awakeRect.y + this.awakeRect.height >= _0x4941eb.y) {
                  this.entity.awake();
                }
                break;
              case 0x2:
                if (this.awakeRect.y <= _0x4941eb.y) {
                  this.entity.awake();
                }
                break;
              case 0x3:
                if (this.awakeRect.x <= _0x4941eb.x) {
                  this.entity.awake();
                }
                break;
              case 0x4:
                if (this.awakeRect.x + this.awakeRect.width >= _0x4941eb.x) {
                  this.entity.awake();
                }
            }
          }
          var _0x286b82 = 0x0;
          for (var _0x17d8a8 = this.comArr; _0x286b82 < _0x17d8a8.length; _0x286b82++) {
            _0x17d8a8[_0x286b82].updateGameLogic(_0x434f5a);
          }
        },
        'hasAttribution': function (_0x3e247f) {
          return _0xc680b1.DYTools.arrContain(this.attr, _0x3e247f);
        },
        'die': function () {
          var _0x1a3946 = 0x0;
          for (var _0x4b55ee = this.comArr; _0x1a3946 < _0x4b55ee.length; _0x1a3946++) {
            _0x4b55ee[_0x1a3946].die();
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'CommonValue': "CommonValue",
      'EnemyAttrDoctorCom': 'EnemyAttrDoctorCom',
      'EnemyAttrEnterCom': "EnemyAttrEnterCom",
      'EnemyAttrSplitCom': "EnemyAttrSplitCom",
      'EnemyAttrThronCom': "EnemyAttrThronCom",
      'EnemyAttrTrackCom': "EnemyAttrTrackCom",
      'EnemyAttrVomitCom': "EnemyAttrVomitCom",
      'Tools': "Tools",
      'Types': "Types"
    }],
    'EnemyAttrDoctorCom': [function (_0x4985a0, _0x10b9b1, _0x26ac07) {
      'use strict';
  
      cc._RF.push(_0x10b9b1, '0e40f/2R8ZJxKQhtV/FxVST', "EnemyAttrDoctorCom");
      var _0x5552ce = _0x4985a0("EnemyAttrBaseCom");
      var _0x370588 = _0x4985a0("CommonValue");
      var _0x10e4a1 = _0x4985a0('Tools');
      var _0x550cd5 = _0x4985a0("CommonConfig");
      var _0x31e31b = _0x4985a0("Types");
      var _0x51734a = _0x4985a0("PfFrameAnim");
      cc.Class({
        'extends': _0x5552ce,
        'properties': {},
        'ctor': function () {
          this.radius = 0x0;
          this.count = 0x0;
          this.bloodTime = 0x0;
          this.freeTime = 0x0;
          this.blood = 0x0;
          this.time = 0x0;
          this.state = 0x0;
          this.enemyArr = [];
          this.lightPool = null;
          this.lightList = [];
          this.actLightList = [];
        },
        'init': function (_0x359a36) {
          this.attrData = _0x359a36;
          var _0x5907fc = _0x10e4a1.DYTools.stringToNumber(_0x359a36.param, _0x550cd5.GConfig.SeparatorII);
          this.radius = _0x5907fc[0x0];
          this.count = _0x5907fc[0x1];
          this.bloodTime = _0x5907fc[0x2];
          this.freeTime = _0x5907fc[0x3];
          this.blood = _0x5907fc[0x4] / 0x64;
          this.reset();
          this.initUI();
        },
        'reset': function () {
          if (this.lightPool) {
            this.lightPool.clear();
          }
          this.lightList = [];
          this.actLightList = [];
          this.enemyArr.splice(0x0);
          this.setState(0x0);
        },
        'rescueOver': function () {
          this.setState(0x0);
        },
        'setState': function (_0x4b5b24) {
          this.state = _0x4b5b24;
          this.time = 0x0;
        },
        'updateGameLogic': function (_0x16de26) {
          switch (this.state) {
            case 0x0:
              this.time += _0x16de26;
              if (this.time > this.freeTime) {
                this.setState(0x2);
              }
              break;
            case 0x1:
              this.time += _0x16de26;
              for (var _0x3084a1 = 0x0; _0x3084a1 < this.enemyArr.length; _0x3084a1++) {
                var _0x122a84 = (_0x4fe494 = this.enemyArr[_0x3084a1]).node.position;
                var _0x1b3ef4 = this.node.position;
                _0x122a84 = _0x122a84.sub(_0x1b3ef4);
                if (Math.abs(_0x122a84.x) > this.radius || Math.abs(_0x122a84.y) > this.radius) {
                  _0x4fe494.removeBuff(_0x31e31b.EnemyBuff.Treat);
                  this.enemyArr.splice(_0x3084a1, 0x1);
                  var _0x471f5e = this.lightList[_0x3084a1];
                  _0x10e4a1.DYTools.arrRemove(this.actLightList, _0x471f5e);
                  this.lightPool.put(_0x471f5e);
                  this.lightList.splice(_0x3084a1, 0x1);
                  _0x3084a1--;
                } else if (_0x4fe494.isDead || _0x4fe494.isFullBlood()) {
                  _0x4fe494.removeBuff(_0x31e31b.EnemyBuff.Treat);
                  this.enemyArr.splice(_0x3084a1, 0x1);
                  _0x471f5e = this.lightList[_0x3084a1];
                  _0x10e4a1.DYTools.arrRemove(this.actLightList, _0x471f5e);
                  this.lightPool.put(_0x471f5e);
                  this.lightList.splice(_0x3084a1, 0x1);
                  _0x3084a1--;
                }
              }
              if (this.enemyArr.length < this.count) {
                this.checkEnemy();
              }
              for (_0x3084a1 = 0x0; _0x3084a1 < this.enemyArr.length; _0x3084a1++) {
                var _0x4fe494 = this.enemyArr[_0x3084a1];
                if (_0x471f5e = this.lightList[_0x3084a1]) {
                  _0x471f5e.position = this.node.position;
                  _0x471f5e.opacity = 0xff;
                  var _0x127431 = _0x4fe494.node.position.sub(this.node.position);
                  var _0x100d0b = cc.misc.radiansToDegrees(_0x127431.signAngle(cc.v2(0x0, 0x1)));
                  var _0xaaf0e6 = _0x127431.mag();
                  _0x471f5e.angle = _0x100d0b;
                  var _0x17402a = _0xaaf0e6 / _0x471f5e.height;
                  if (_0x10e4a1.DYTools.arrContain(this.actLightList, _0x471f5e)) {
                    _0x471f5e.scaleY += 0.4;
                    if (_0x471f5e.scaleY > _0x17402a) {
                      _0x471f5e.scaleY = _0x17402a;
                      _0x10e4a1.DYTools.arrRemove(this.actLightList, _0x471f5e);
                    }
                  } else {
                    _0x471f5e.scaleY = _0x17402a;
                    _0x4fe494.bloodChange(_0x16de26 * this.blood * _0x4fe494.data.blood);
                  }
                }
              }
              if (this.time > this.bloodTime) {
                var _0x5307ba = 0x0;
                for (var _0x26856c = this.enemyArr; _0x5307ba < _0x26856c.length; _0x5307ba++) {
                  (_0x4fe494 = _0x26856c[_0x5307ba]).removeBuff(_0x31e31b.EnemyBuff.Treat);
                }
                this.enemyArr.splice(0x0);
                var _0x445570 = 0x0;
                for (var _0x5c29a8 = this.lightList; _0x445570 < _0x5c29a8.length; _0x445570++) {
                  _0x471f5e = _0x5c29a8[_0x445570];
                  this.lightPool.put(_0x471f5e);
                }
                this.actLightList.splice(0x0);
                this.lightList.splice(0x0);
                this.setState(0x0);
              }
              break;
            case 0x2:
              this.checkEnemy();
              if (this.enemyArr.length > 0x0) {
                this.setState(0x1);
              }
          }
        },
        'checkEnemy': function () {
          var _0x8ef7be = _0x370588.GValue.EntityWorld.getRangeEnemysForMap(this.node.position, this.radius);
          var _0x2cdc71 = 0x0;
          for (var _0xaee982 = _0x8ef7be = _0x370588.GValue.EntityWorld.getNeareastEnemysForMap(_0x8ef7be, this.node.position, this.count + 0x2); _0x2cdc71 < _0xaee982.length; _0x2cdc71++) {
            var _0x15c4fd = _0xaee982[_0x2cdc71];
            if (_0x15c4fd.node !== this.node && this.enemyArr.length < this.count && !_0x10e4a1.DYTools.arrContain(this.enemyArr, _0x15c4fd)) {
              _0x15c4fd.addBuff(_0x31e31b.EnemyBuff.Treat);
              this.enemyArr.push(_0x15c4fd);
              var _0x12944e = this.lightPool.get();
              _0x12944e.getComponent(_0x51734a).reset();
              _0x12944e.opacity = 0x0;
              _0x12944e.scaleY = 0x0;
              _0x370588.GValue.EntityWorld.addEntitySys.shadowNode.addChild(_0x12944e);
              this.lightList.push(_0x12944e);
              this.actLightList.push(_0x12944e);
            }
          }
        },
        'die': function () {
          var _0x320e38 = 0x0;
          for (var _0x286baf = this.lightList; _0x320e38 < _0x286baf.length; _0x320e38++) {
            _0x286baf[_0x320e38].removeFromParent();
          }
          this.lightPool.clear();
          var _0x49bcf9 = 0x0;
          for (var _0x5c2bc8 = this.enemyArr; _0x49bcf9 < _0x5c2bc8.length; _0x49bcf9++) {
            _0x5c2bc8[_0x49bcf9].removeBuff(_0x31e31b.EnemyBuff.Treat);
          }
        },
        'initUI': function () {
          this.lightPool = new cc.NodePool();
          for (var _0x1eacb1 = 0x0; _0x1eacb1 < this.count; _0x1eacb1++) {
            var _0x594db4 = cc.instantiate(_0x370588.GValue.pf_anim);
            _0x594db4.anchorY = 0x0;
            _0x594db4.getComponent(_0x51734a).init(_0x370588.GValue.Atlas_Enemy, "ael_9_", 0x2, 0x2 * _0x550cd5.GConfig.actionFrameTime, function () {});
            this.lightPool.put(_0x594db4);
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': 'CommonConfig',
      'CommonValue': 'CommonValue',
      'EnemyAttrBaseCom': "EnemyAttrBaseCom",
      'PfFrameAnim': 'PfFrameAnim',
      'Tools': "Tools",
      'Types': "Types"
    }],
    'EnemyAttrEnterCom': [function (_0x196b6a, _0x485cf5, _0x15f250) {
      'use strict';
  
      cc._RF.push(_0x485cf5, "e3432xeHY1OmqGbLwryiMQg", "EnemyAttrEnterCom");
      var _0x16a54f = _0x196b6a('EnemyAttrBaseCom');
      var _0x476fa9 = _0x196b6a("CommonConfig");
      var _0x478275 = _0x196b6a('Tools');
      var _0x578109 = _0x196b6a("CommonValue");
      cc.Class({
        'extends': _0x16a54f,
        'properties': {},
        'ctor': function () {
          this.speed = 0x0;
          this.startPos = cc.Vec2.ZERO;
          this.endPos = cc.Vec2.ZERO;
          this.curDir = cc.Vec2.ZERO;
          this.moveAble = true;
        },
        'init': function (_0x56d359, _0x3c60a2) {
          this.enemyEntity = _0x56d359;
          this.attrData = _0x3c60a2;
          this.speed = this.enemyEntity.data.moveSpeed;
          var _0x278de2 = this.attrData.param.split(_0x476fa9.GConfig.SeparatorI);
          if (_0x278de2.length > 0x1) {
            this.startPos = _0x478275.DYTools.stringToPoint(_0x278de2[0x0], _0x476fa9.GConfig.SeparatorII);
            this.endPos = _0x478275.DYTools.stringToPoint(_0x278de2[0x1], _0x476fa9.GConfig.SeparatorII);
            this.startPos = cc.v2(this.startPos.x * _0x578109.GValue.Size_View.width, this.startPos.y * _0x578109.GValue.Size_View.height);
            this.endPos = cc.v2(this.endPos.x * _0x578109.GValue.Size_View.width, this.endPos.y * _0x578109.GValue.Size_View.height);
            this.startPos = this.node.parent.convertToNodeSpaceAR(this.startPos);
            this.endPos = this.node.parent.convertToNodeSpaceAR(this.endPos);
          } else {
            _0x478275.DYTools.error("入场属性错误", this.attrData.param);
          }
          this.node.position = this.startPos;
          this.curDir = this.endPos.sub(this.startPos).normalize();
          this.enemyEntity.moveCom.setCurDir(this.curDir);
          this.moveAble = true;
          var _0xe7f2a0 = cc.v2(0x0, -0x1);
          var _0x538d31 = this.curDir.signAngle(_0xe7f2a0);
          var _0x5863ec = cc.misc.radiansToDegrees(_0x538d31);
          this.node.angle = _0x5863ec;
        },
        'updateGameLogic': function (_0x2d5753) {
          if (this.enemyEntity.moveAble && this.moveAble) {
            var _0x5288af = this.speed * this.curDir.x;
            var _0x60610e = this.speed * this.curDir.y;
            var _0x466c2d = cc.v2(_0x5288af * _0x2d5753, _0x60610e * _0x2d5753);
            var _0x12bea1 = this.endPos.sub(this.node.position);
            if (_0x466c2d.magSqr() < _0x12bea1.magSqr()) {
              this.node.position = this.node.position.add(_0x466c2d);
            } else {
              this.node.position = this.endPos;
              this.moveAble = false;
            }
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'CommonValue': 'CommonValue',
      'EnemyAttrBaseCom': "EnemyAttrBaseCom",
      'Tools': "Tools"
    }],
    'EnemyAttrSplitCom': [function (_0x3ab861, _0xe7ad15, _0x2ee736) {
      'use strict';
  
      cc._RF.push(_0xe7ad15, "033afruUTpCb4Ub3bnsH0XE", "EnemyAttrSplitCom");
      var _0x5906c1 = _0x3ab861("EnemyAttrBaseCom");
      var _0x2eacbd = _0x3ab861("ConfigData");
      var _0x36db42 = _0x3ab861("CommonConfig");
      var _0x525ede = _0x3ab861('Tools');
      var _0x55db0c = _0x3ab861("CommonValue");
      var _0x186c6a = _0x3ab861("Types");
      cc.Class({
        'extends': _0x5906c1,
        'properties': {},
        'ctor': function () {
          this.count = 0x0;
          this.ratio = 0x0;
          this.configData = null;
        },
        'init': function (_0x275ac1, _0x4eb755) {
          this.enemyEntity = _0x275ac1;
          this.attrData = _0x4eb755;
          var _0x1023cd = _0x525ede.DYTools.stringToNumber(_0x4eb755.param, _0x36db42.GConfig.SeparatorII);
          try {
            var _0x1ccf88 = this.enemyEntity.data.cData;
            this.count = _0x1023cd[0x0];
            this.ratio = _0x1023cd[0x1];
            var _0x539783 = _0x1023cd[0x2];
            this.configData = new _0x2eacbd.ConfigEnemyData();
            this.configData.size = _0x1ccf88.size.mul(_0x539783);
            this.configData.blood = _0x1ccf88.blood.mul(this.ratio);
            this.configData.speed = _0x1ccf88.speed;
            this.configData.hurtSpeed = _0x1ccf88.hurtSpeed;
            this.configData.playerInSpeed = _0x1ccf88.playerInSpeed;
            this.configData.dropGold = Math.floor(_0x1ccf88.dropGold * this.ratio);
            this.configData.attr = [0x0];
            this.configData.moveType = _0x1ccf88.moveType;
            this.configData.imageId = 0x4;
            this.configData.adjustDuration = 0x1 == _0x1ccf88.moveType ? _0x1ccf88.adjustDuration : cc.v2(0x1869f, 0x1869f);
          } catch (_0x1d0bac) {
            _0x525ede.DYTools.error('属性错误', _0x1d0bac);
          }
        },
        'die': function () {
          var _0x388f92 = this.node.convertToWorldSpaceAR(cc.Vec2.ZERO);
          var _0x2ea4f8 = this.enemyEntity.player.node.convertToWorldSpaceAR(cc.Vec2.ZERO);
          var _0x43fce7 = _0x388f92.sub(_0x2ea4f8).normalize();
          var _0x3fed8d = _0x55db0c.GValue.EntityWorld.addEntitySys.AddEnemy(this.configData, this.count, cc.rect(this.node.position.x, this.node.position.y, 0x0, 0x0));
          _0x55db0c.GValue.EntityWorld.addEnemys(_0x3fed8d);
          var _0xaef2da = function (_0x3e1c8e) {
            var _0x2373a6 = _0x3e1c8e.node;
            _0x3e1c8e.changeGroup('default');
            _0x3e1c8e.actionAble = false;
            _0x2373a6.emit("updateState", _0x186c6a.EnemyAction.None);
            var _0x3b850f = _0x525ede.DYTools.random_int(-0x64, 0x64);
            var _0x4eec77 = _0x43fce7.mul(_0x525ede.DYTools.random_int(0x64, 0xc8));
            _0x4eec77 = _0x4eec77.rotate(cc.misc.degreesToRadians(_0x3b850f));
            var _0x43cf3d = _0x309291.node.position.add(_0x4eec77);
            var _0x2bc19e = _0x2373a6.scale;
            _0x2373a6.scaleX = 0.82;
            _0x2373a6.scaleY = 0.58;
            var _0x180720 = cc.moveTo(0.3, _0x43cf3d);
            var _0x51c7fc = cc.scaleTo(0.3, _0x2bc19e);
            var _0x318e05 = cc.spawn(_0x180720, _0x51c7fc);
            _0x2373a6.runAction(cc.sequence(_0x318e05, cc.callFunc(function () {
              _0x3e1c8e.startGame();
              _0x3e1c8e.actionAble = true;
              _0x2373a6.emit("updateState", _0x186c6a.EnemyAction.Action);
              _0x3e1c8e.changeGroup("enemy");
            })));
          };
          var _0x309291 = this;
          for (var _0x5e338a = 0x0; _0x5e338a < _0x3fed8d.length; _0x5e338a++) {
            _0xaef2da(_0x3fed8d[_0x5e338a]);
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'CommonValue': 'CommonValue',
      'ConfigData': "ConfigData",
      'EnemyAttrBaseCom': "EnemyAttrBaseCom",
      'Tools': "Tools",
      'Types': "Types"
    }],
    'EnemyAttrThronCom': [function (_0x4a557a, _0x45b572, _0xf78793) {
      'use strict';
  
      cc._RF.push(_0x45b572, "91e32+TSPFLJaDp+tZFynAo", "EnemyAttrThronCom");
      var _0x24fff7 = _0x4a557a("EnemyAttrBaseCom");
      var _0x14ce26 = _0x4a557a("Types");
      var _0x5162d0 = _0x4a557a("Tools");
      var _0x1e88f9 = _0x4a557a('CommonConfig');
      var _0x4f2988 = _0x4a557a("CommonValue");
      cc.Class({
        'extends': _0x24fff7,
        'properties': {},
        'ctor': function () {
          this.thronShow = false;
          this.normalFrame = null;
          this.thronFrame = null;
          this.normalShadow = null;
          this.thronShadow = null;
          this.thronTime = 0x0;
          this.thronDuration = 0x0;
          this.normalTime = 0x0;
          this.normalDuration = 0x0;
          this.thronRadius = 0x0;
          this.normalRadius = 0x0;
        },
        'init': function (_0x43a7e2, _0x23c1d2) {
          this.enemyEntity = _0x43a7e2;
          this.attrData = _0x23c1d2;
          var _0x8d326e = _0x5162d0.DYTools.stringToNumber(this.attrData.param, _0x1e88f9.GConfig.SeparatorII);
          this.normalDuration = _0x8d326e[0x0];
          this.normalRadius = _0x8d326e[0x2];
          this.thronDuration = _0x8d326e[0x1];
          this.thronRadius = _0x8d326e[0x3];
          this.normalFrame = _0x4f2988.GValue.Atlas_Enemy.getSpriteFrame('e_' + _0x43a7e2.data.cData.imageId + '_0');
          this.thronFrame = _0x4f2988.GValue.Atlas_Enemy.getSpriteFrame('e_' + _0x43a7e2.data.cData.imageId + '_1');
          this.normalShadow = _0x4f2988.GValue.Atlas_Shadow.getSpriteFrame("se_" + _0x43a7e2.data.cData.imageId + '_0');
          this.thronShadow = _0x4f2988.GValue.Atlas_Shadow.getSpriteFrame("se_" + _0x43a7e2.data.cData.imageId + '_1');
          this.setThronShow(false);
        },
        'setThronShow': function (_0x402a7e) {
          this.thronShow = _0x402a7e;
          if (this.thronShow) {
            this.playShowThronAct();
          } else {
            this.playHideThronAct();
          }
        },
        'updateGameLogic': function (_0x43b411) {
          if (this.enemyEntity.stateCom.state == _0x14ce26.EnemyAction.Action) {
            if (this.thronShow) {
              this.thronTime += _0x43b411;
              if (this.thronTime > this.thronDuration) {
                this.thronTime = 0x0;
                this.setThronShow(false);
              }
            } else {
              this.normalTime += _0x43b411;
              if (this.normalTime > this.normalDuration) {
                this.normalTime = 0x0;
                this.setThronShow(true);
              }
            }
          }
        },
        'playShowThronAct': function () {
          var _0xf5ad6d = this;
          var _0x1b939f = this;
          var _0x2cb7ea = _0x1e88f9.GConfig.actionFrameTime;
          var _0x458d64 = this.enemyEntity.uiNode.position;
          var _0x18d39a = cc.place(_0x458d64);
          var _0x110115 = cc.place(_0x458d64.add(cc.v2(0x6, -0x3)));
          var _0x250e45 = cc.repeat(cc.sequence(cc.delayTime(0x2 * _0x2cb7ea), _0x110115, cc.delayTime(0x2 * _0x2cb7ea), _0x18d39a), 0x8);
          var _0x10b262 = cc.scaleTo(0x3 * _0x2cb7ea, 0.75);
          var _0x491e67 = cc.scaleTo(0x4 * _0x2cb7ea, 1.05);
          var _0xaa0501 = cc.scaleTo(0x2 * _0x2cb7ea, 0.6);
          var _0x21245d = cc.delayTime(_0x2cb7ea);
          var _0x97aa43 = cc.callFunc(function () {
            _0x1b939f.enemyEntity.uiCom.refreshSkinSprFrame(_0xf5ad6d.thronFrame);
            _0x1b939f.enemyEntity.shadow.getComponent(cc.Sprite).spriteFrame = _0xf5ad6d.thronShadow;
            _0x1b939f.enemyEntity.thronShow(true);
          });
          var _0x1b1786 = cc.scaleTo(0x3 * _0x2cb7ea, 1.2);
          var _0x689546 = cc.scaleTo(0x4 * _0x2cb7ea, 0x1);
          var _0xffb6d4 = cc.callFunc(function () {
            _0x1b939f.enemyEntity.setRadius(_0xf5ad6d.thronRadius);
          });
          var _0x5b4152 = cc.sequence(_0x250e45, _0x10b262, _0x491e67, _0xaa0501, _0x21245d, _0x97aa43, _0x1b1786, _0x689546, _0xffb6d4);
          this.enemyEntity.uiNode.runAction(_0x5b4152);
        },
        'playHideThronAct': function () {
          var _0x27901f = this;
          var _0x4c0ed8 = this;
          var _0x2ea1b3 = _0x1e88f9.GConfig.actionFrameTime;
          var _0x44bcab = cc.scaleTo(0x4 * _0x2ea1b3, 1.2);
          var _0x412724 = cc.scaleTo(0x3 * _0x2ea1b3, 0.7);
          var _0xccfb9e = cc.delayTime(_0x2ea1b3);
          var _0x473436 = cc.callFunc(function () {
            _0x4c0ed8.enemyEntity.uiCom.refreshSkinSprFrame(_0x27901f.normalFrame);
            _0x4c0ed8.enemyEntity.shadow.getComponent(cc.Sprite).spriteFrame = _0x27901f.normalShadow;
            _0x4c0ed8.enemyEntity.thronShow(false);
          });
          var _0xa723e4 = cc.scaleTo(0x2 * _0x2ea1b3, 1.05);
          var _0x1aa225 = cc.scaleTo(0x3 * _0x2ea1b3, 0x1);
          var _0x4f21ec = cc.callFunc(function () {
            _0x4c0ed8.enemyEntity.setRadius(_0x27901f.normalRadius);
          });
          var _0x123e24 = cc.sequence(_0x44bcab, _0x412724, _0xccfb9e, _0x473436, _0xa723e4, _0x1aa225, _0x4f21ec);
          this.enemyEntity.uiNode.runAction(_0x123e24);
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'CommonValue': "CommonValue",
      'EnemyAttrBaseCom': "EnemyAttrBaseCom",
      'Tools': "Tools",
      'Types': "Types"
    }],
    'EnemyAttrTrackCom': [function (_0x455282, _0x29cb1e, _0x32371a) {
      'use strict';
  
      cc._RF.push(_0x29cb1e, 'b3953GW4DlAXYdAuF6YFa44', "EnemyAttrTrackCom");
      var _0x152ca6 = _0x455282("EnemyAttrBaseCom");
      var _0x2f98cf = _0x455282("Tools");
      var _0x2fccb3 = _0x455282('CommonConfig');
      var _0x255976 = _0x455282("CommonValue");
      cc.Class({
        'extends': _0x152ca6,
        'properties': {},
        'ctor': function () {
          this.speed = 0x0;
          this.trackArr = [];
          this.moveStart = false;
          this.moveAble = false;
          this.startVec2 = cc.Vec2.ZERO;
          this.endVec2 = cc.Vec2.ZERO;
          this.startIndex = 0x0;
          this.endIndex = 0x0;
          this.curDir = cc.Vec2.ZERO;
          this.curRotation = 0x0;
          this.lastPosition = cc.Vec2.ZERO;
        },
        'init': function (_0x4c7c02, _0x3cef05) {
          this.enemyEntity = _0x4c7c02;
          this.attrData = _0x3cef05;
          this.trackArr.splice(0x0);
          this.moveStart = false;
          this.moveAble = false;
          this.speed = this.enemyEntity.data.moveSpeed;
          var _0x2bf765 = this.attrData.param.split(_0x2fccb3.GConfig.SeparatorI);
          for (var _0x21178c = 0x0; _0x21178c < _0x2bf765.length; _0x21178c++) {
            var _0x293e8f = _0x2f98cf.DYTools.stringToPoint(_0x2bf765[_0x21178c], _0x2fccb3.GConfig.SeparatorII);
            _0x293e8f = cc.v2(_0x293e8f.x * _0x255976.GValue.Size_View.width, _0x293e8f.y * _0x255976.GValue.Size_View.height);
            this.trackArr.push(this.node.parent.convertToNodeSpaceAR(_0x293e8f));
          }
          if (this.trackArr.length < 0x2) {
            _0x2f98cf.DYTools.error("轨迹移动点缺少", JSON.stringify(this.trackArr));
          }
        },
        'updateGameLogic': function (_0x1df711) {
          if (this.enemyEntity.moveAble) {
            if (this.moveStart) {
              if (this.moveAble) {
                if (this.trackArr.length < 0x2) {
                  return;
                }
                this.node.angle = this.curRotation;
                var _0x45f31d = this.speed * this.curDir.x;
                var _0x413d4c = this.speed * this.curDir.y;
                var _0x4c72dd = cc.v2(_0x45f31d * _0x1df711, _0x413d4c * _0x1df711);
                var _0x12d87e = this.node.position.add(_0x4c72dd);
                var _0x2db61c = false;
                if (this.curDir.x > 0x0) {
                  if (_0x12d87e.x >= this.endVec2.x) {
                    _0x2db61c = true;
                  }
                } else if (this.curDir.x < 0x0 && _0x12d87e.x <= this.endVec2.x) {
                  _0x2db61c = true;
                }
                if (this.curDir.y > 0x0) {
                  if (_0x12d87e.y >= this.endVec2.y) {
                    _0x2db61c = true;
                  }
                } else if (this.curDir.y < 0x0 && _0x12d87e.y <= this.endVec2.y) {
                  _0x2db61c = true;
                }
                if (_0x2db61c) {
                  this.node.position = this.endVec2;
                  this.endIndex++;
                  this.startIndex++;
                  if (this.startIndex >= this.trackArr.length) {
                    this.startIndex = 0x0;
                  }
                  if (this.endIndex >= this.trackArr.length) {
                    this.endIndex = 0x0;
                  }
                  this.refreshDir();
                } else {
                  this.node.position = this.node.position.add(_0x4c72dd);
                }
              }
            } else if (_0x2f98cf.DYTools.isVec2DiffRange(this.node.position, this.trackArr[0x0], 0x5)) {
              this.moveStart = true;
              this.moveAble = true;
              this.node.position = this.trackArr[0x0];
              this.startIndex = 0x0;
              this.endIndex = 0x1;
              this.refreshDir();
            } else {
              if (_0x2f98cf.DYTools.isVec2DiffRange(this.node.position, this.lastPosition, 0x1)) {
                this.moveStart = true;
                this.moveAble = true;
                this.node.position = this.trackArr[0x0];
                this.startIndex = 0x0;
                this.endIndex = 0x1;
                this.refreshDir();
              }
              this.lastPosition = this.node.position;
            }
          }
        },
        'refreshDir': function () {
          if (!(this.trackArr.length < 0x2)) {
            this.startVec2 = this.trackArr[this.startIndex];
            this.endVec2 = this.trackArr[this.endIndex];
            this.curDir = this.endVec2.sub(this.startVec2).normalize();
            this.enemyEntity.moveCom.setCurDir(this.curDir);
            var _0x4978f1 = cc.v2(0x0, -0x1);
            var _0xb3f5fd = this.curDir.signAngle(_0x4978f1);
            this.curRotation = cc.misc.radiansToDegrees(_0xb3f5fd);
            this.node.angle = this.curRotation;
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': 'CommonConfig',
      'CommonValue': "CommonValue",
      'EnemyAttrBaseCom': "EnemyAttrBaseCom",
      'Tools': "Tools"
    }],
    'EnemyAttrVomitCom': [function (_0x218bb2, _0x1e7df6, _0x95c6c7) {
      'use strict';
  
      cc._RF.push(_0x1e7df6, 'e7d4aqdEYlHXqLmypR3DjQ5', "EnemyAttrVomitCom");
      var _0x6e798d = _0x218bb2("EnemyAttrBaseCom");
      var _0x534283 = _0x218bb2("ConfigData");
      var _0x18238c = _0x218bb2("Tools");
      var _0x536828 = _0x218bb2("CommonConfig");
      var _0x3fff17 = _0x218bb2("CommonValue");
      var _0x338786 = _0x218bb2("Types");
      var _0x4f81a0 = _0x218bb2("EnemyAttrTrackCom");
      cc.Class({
        'extends': _0x6e798d,
        'properties': {},
        'ctor': function () {
          this.count = 0x0;
          this.time = 0x0;
          this.duration = 0x0;
          this.state = 0x0;
          this.configData = null;
          this.endCall = null;
          this.vomitTime = 0x0;
          this.vomitDuration = 0.25;
          this.vomitCount = 0x0;
          this.shadowNormal = null;
          this.shadowVomit = null;
        },
        'init': function (_0x5d0f9a, _0x388a42, _0x43719d) {
          this.enemyEntity = _0x5d0f9a;
          this.attrData = _0x388a42;
          this.attrMgr = _0x43719d;
          var _0x1c2a23 = _0x18238c.DYTools.stringToNumber(_0x388a42.param, _0x536828.GConfig.SeparatorII);
          try {
            var _0x420714 = this.enemyEntity.data.cData;
            this.count = _0x1c2a23[0x0];
            this.duration = _0x1c2a23[0x1];
            var _0x2b888f = _0x1c2a23[0x2];
            var _0x1d8c04 = _0x1c2a23[0x3];
            var _0x19adfe = _0x1c2a23[0x4];
            this.configData = new _0x534283.ConfigEnemyData();
            this.configData.size = _0x420714.size.mul(_0x1d8c04);
            this.configData.blood = _0x420714.blood.mul(_0x2b888f);
            this.configData.speed = cc.v2(_0x19adfe, _0x19adfe);
            this.configData.hurtSpeed = _0x420714.hurtSpeed;
            this.configData.playerInSpeed = _0x420714.playerInSpeed;
            this.configData.dropGold = 0x0;
            this.configData.attr = [0x64];
            this.configData.moveType = _0x338786.EnemyMoveType.Elastic;
            this.configData.imageId = 0x6;
            this.configData.adjustDuration = cc.v2(0xf4236, 0xf4236);
          } catch (_0x20f156) {
            _0x18238c.DYTools.error("属性错误", _0x20f156);
          }
          this.shadowNormal = _0x3fff17.GValue.Atlas_Shadow.getSpriteFrame("se_5_1");
          this.shadowVomit = _0x3fff17.GValue.Atlas_Shadow.getSpriteFrame("se_5_2");
          this.enemyEntity.shadow.getComponent(cc.Sprite).spriteFrame = this.shadowNormal;
        },
        'updateGameLogic': function (_0x18385c) {
          if (0x0 == this.state) {
            this.time += _0x18385c;
            if (this.time > this.duration) {
              this.enemyEntity.moveAble = false;
              this.time = 0x0;
              var _0x2cb3e2 = this.node.getComponent(_0x4f81a0);
              if (_0x2cb3e2) {
                _0x2cb3e2.moveAble = false;
              }
              this.state = 0x1;
              var _0x2213ff = this.node.convertToWorldSpaceAR(cc.Vec2.ZERO);
              var _0x501fdc = this.enemyEntity.player.node.convertToWorldSpaceAR(cc.Vec2.ZERO);
              this.node.angle = cc.misc.radiansToDegrees(_0x501fdc.sub(_0x2213ff).signAngle(cc.v2(0x0, -0x1)));
              this.playXuliAnim();
            }
          } else if (0x2 == this.state) {
            this.vomitTime += _0x18385c;
            if (this.vomitTime >= this.vomitDuration && this.vomitCount < this.count) {
              this.vomitTime = 0x0;
              this.vomitEnemys();
              this.vomitCount++;
              if (this.vomitCount >= this.count && this.endCall) {
                this.endCall();
              }
            }
          }
        },
        'playXuliAnim': function () {
          var _0x224aa3 = this;
          var _0x5236fd = _0x536828.GConfig.actionFrameTime;
          var _0x2f52e0 = this.node.getChildByName('ui');
          var _0x33c46f = _0x2f52e0.getChildByName("mouth");
          var _0x1c1ae1 = _0x33c46f.getChildByName("light");
          var _0x4197f3 = _0x2f52e0.getChildByName("line");
          var _0x396c14 = _0x2f52e0.getChildByName("skel");
          var _0x2b373f = _0x396c14.getComponent(sp.Skeleton);
          if (_0x2b373f) {
            _0x396c14.opacity = 0xff;
            _0x2b373f.setAnimation(0x0, "vomit", false);
          }
          var _0x1b722c = _0x2f52e0.getChildByName("eye");
          _0x1b722c.opacity = 0xff;
          _0x1b722c.runAction(cc.repeatForever(cc.sequence(cc.fadeTo(0x6 * _0x5236fd, 0x80), cc.fadeTo(0x6 * _0x5236fd, 0xff))));
          var _0x3c1500 = cc.moveBy(0x2 * _0x5236fd, cc.v2(-0x8, -0x8));
          var _0x3659a8 = cc.moveBy(0x2 * _0x5236fd, cc.v2(0x8, 0x8));
          var _0xd6b59a = cc.sequence(_0x3c1500, _0x3659a8);
          var _0x4b72f9 = cc.repeat(_0xd6b59a, 0x4);
          _0x2f52e0.runAction(cc.sequence(_0x4b72f9, cc.callFunc(function () {
            _0x2f52e0.stopAllActions();
            var _0x360845 = _0x2f52e0.getChildByName("mandible");
            var _0x242eb3 = _0x360845.getComponent(cc.Sprite);
            var _0x22c3d8 = cc.scaleTo(0x4 * _0x5236fd, 1.25, 0.8);
            var _0x410c87 = cc.scaleTo(0x2 * _0x5236fd, 0x1, 1.5);
            var _0x26c084 = cc.callFunc(function () {
              _0x242eb3.spriteFrame = _0x3fff17.GValue.Atlas_Enemy.getSpriteFrame("e_5_2");
              _0x224aa3.enemyEntity.shadow.getComponent(cc.Sprite).spriteFrame = _0x224aa3.shadowVomit;
              _0x33c46f.scale = 0x1;
              _0x33c46f.opacity = 0xff;
              _0x4197f3.runAction(cc.fadeOut(0xc * _0x5236fd));
            });
            var _0x2bd5fb = cc.scaleTo(0x7 * _0x5236fd, 0x1, 0x1);
            _0x2f52e0.runAction(cc.sequence(_0x22c3d8, _0x410c87, _0x26c084, cc.callFunc(function () {
              _0x360845.stopAllActions();
              var _0x31f170 = cc.scaleTo(0x2 * _0x5236fd, 0x1, 1.15);
              var _0x3f327e = cc.scaleTo(0x3 * _0x5236fd, 0x1, 0x1);
              var _0x124bc2 = cc.scaleTo(0x5 * _0x5236fd, 0x1, 1.08);
              var _0x3f002b = cc.scaleTo(0x7 * _0x5236fd, 0x1, 0x1);
              _0x360845.runAction(cc.repeatForever(cc.sequence(_0x31f170, _0x3f327e, _0x124bc2, _0x3f002b)));
              _0x1c1ae1.scale = 1.1;
              var _0x268449 = cc.scaleTo(0x5 * _0x5236fd, 0x1);
              var _0x456ec7 = cc.fadeTo(0x5 * _0x5236fd, 0x66);
              var _0x3e339a = cc.spawn(_0x268449, _0x456ec7);
              var _0x1667b4 = cc.scaleTo(0x5 * _0x5236fd, 1.1);
              var _0x2f3a0e = cc.fadeTo(0x5 * _0x5236fd, 0xcc);
              var _0x40a6b6 = cc.spawn(_0x1667b4, _0x2f3a0e);
              _0x1c1ae1.runAction(cc.repeatForever(cc.sequence(_0x3e339a, _0x40a6b6)));
              _0x224aa3.state = 0x2;
              _0x224aa3.vomitCount = 0x0;
              _0x224aa3.vomitTime = 0x0;
              _0x224aa3.endCall = function () {
                _0x360845.stopAllActions();
                var _0xff64ad = cc.scaleTo(0x3 * _0x5236fd, 0x1, 0.4);
                var _0xe872d8 = cc.callFunc(function () {
                  _0x360845.scale = 0x1;
                  _0x242eb3.spriteFrame = _0x3fff17.GValue.Atlas_Enemy.getSpriteFrame("e_5_1");
                  _0x224aa3.enemyEntity.shadow.getComponent(cc.Sprite).spriteFrame = _0x224aa3.shadowNormal;
                });
                var _0x97f836 = cc.sequence(_0xff64ad, _0xe872d8, cc.delayTime(0.2), cc.callFunc(function () {
                  _0x224aa3.state = 0x0;
                  _0x224aa3.enemyEntity.moveAble = true;
                  _0x1c1ae1.stopAllActions();
                }));
                _0x360845.runAction(_0x97f836);
                _0x33c46f.runAction(cc.sequence(_0xff64ad.clone(), cc.fadeOut(0x0)));
                _0x1b722c.stopAllActions();
                _0x1b722c.opacity = 0x0;
              };
            }), _0x2bd5fb));
          })));
          _0x4197f3.runAction(cc.fadeIn(0x4 * _0x5236fd));
        },
        'vomitEnemys': function () {
          _0x536828.GConfig.actionFrameTime;
          var _0x14907f = _0x3fff17.GValue.EntityWorld.addEntitySys.AddEnemy(this.configData, 0x1, cc.rect(this.node.position.x, this.node.position.y, 0x0, 0x0));
          _0x3fff17.GValue.EntityWorld.addEnemys(_0x14907f);
          var _0x1afd92 = cc.v2(0x0, -0x1).rotate(cc.misc.degreesToRadians(-this.node.angle));
          var _0x82b970 = this.node.position.add(_0x1afd92.mul(0x1e));
          var _0x35d2ee = function (_0x5d45c2) {
            var _0x521a54 = _0x14907f[_0x5d45c2];
            var _0x5476e3 = _0x521a54.node;
            _0x5476e3.position = _0x82b970.add(_0x18238c.DYTools.getRandomVec2(cc.v2(-0xa, 0xa), cc.v2(-0xa, 0xa)));
            _0x5476e3.opacity = 0x0;
            _0x5476e3.zIndex = 0x2;
            _0x521a54.actionAble = false;
            _0x521a54.changeGroup("default");
            _0x5476e3.emit("updateState", _0x338786.EnemyAction.None);
            _0x521a54.setCurDir(_0x1afd92);
            _0x3d080f.scheduleOnce(function () {
              _0x5476e3.opacity = 0xff;
            });
            _0x521a54.startGame();
            _0x521a54.setCurDir(_0x1afd92);
            _0x521a54.actionAble = true;
            _0x5476e3.emit("updateState", _0x338786.EnemyAction.Action);
            _0x521a54.changeGroup("enemy");
          };
          var _0x3d080f = this;
          for (var _0xdc2eca = 0x0; _0xdc2eca < _0x14907f.length; _0xdc2eca++) {
            _0x35d2ee(_0xdc2eca);
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'CommonValue': "CommonValue",
      'ConfigData': "ConfigData",
      'EnemyAttrBaseCom': "EnemyAttrBaseCom",
      'EnemyAttrTrackCom': 'EnemyAttrTrackCom',
      'Tools': "Tools",
      'Types': "Types"
    }],
    'EnemyBaseComponent': [function (_0x493000, _0x5bd60a, _0x510f89) {
      'use strict';
  
      cc._RF.push(_0x5bd60a, "cebd78+sVxCr7xXywebUU97", "EnemyBaseComponent");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {},
        'preLoad': function () {}
      });
      cc._RF.pop();
    }, {}],
    'EnemyBase': [function (_0x8a0ee3, _0x3507f4, _0x8cff10) {
      'use strict';
  
      cc._RF.push(_0x3507f4, "eb1d5aBkBRAmrBJg9D5I7Vs", "EnemyBase");
      var _0x5db220 = _0x8a0ee3("CEntityBase");
      var _0x75f1e1 = _0x8a0ee3('Types');
      cc.Class({
        'extends': _0x5db220,
        'properties': {},
        'ctor': function () {
          this.type = _0x75f1e1.EnemyType.Normal;
          Object.defineProperty(this, "isSnake", {
            'get': function () {
              return this.type === _0x75f1e1.EnemyType.Snake;
            },
            'enumerable': true,
            'configurable': true
          });
          Object.defineProperty(this, "isCircle", {
            'get': function () {
              return this.type === _0x75f1e1.EnemyType.Circle;
            },
            'enumerable': true,
            'configurable': true
          });
          Object.defineProperty(this, "isFire", {
            'get': function () {
              return this.type === _0x75f1e1.EnemyType.Fire;
            },
            'enumerable': true,
            'configurable': true
          });
        },
        'isFullBlood': function () {
          return false;
        }
      });
      cc._RF.pop();
    }, {
      'CEntityBase': "CEntityBase",
      'Types': "Types"
    }],
    'EnemyBuffComponent': [function (_0x5e8f45, _0x340a45, _0x5dced0) {
      'use strict';
  
      cc._RF.push(_0x340a45, "2db2dus7VdMRZWlgtK2OUJ1", "EnemyBuffComponent");
      var _0x3fd1d7 = _0x5e8f45("Tools");
      var _0x6d8393 = _0x5e8f45("Types");
      var _0x5d398e = _0x5e8f45("CommonConfig");
      var _0x522183 = _0x5e8f45("GameData");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.entity = null;
          this.isSlowDown = false;
          this.slowDownTime = 0x0;
          this.slowDownDuration = 0.2;
          this.isFrozen = false;
          this.frozenTime = 0x0;
          this.frozenDuration = 0x0;
          this.isFiring = false;
          this.firingTime = 0x0;
          this.firingDuration = 0x2;
          this.firingHurt = 0x2;
          this.firingHurtTime = 0x0;
          this.firingHurtDuration = 0.1;
          this.treatCount = 0x0;
          this.frozenAnim = null;
          this.isDirty = false;
        },
        'init': function (_0x54adcb) {
          this.entity = _0x54adcb;
          this.reset();
          var _0x31fbfc = _0x5d398e.GConfig.getPropertyData_Sub(_0x522183.TData.getCurSubFun());
          if (_0x31fbfc) {
            try {
              var _0x49f2c8 = _0x31fbfc["var"];
              this.frozenDuration = _0x3fd1d7.DYTools.stringToNumber(_0x49f2c8, _0x5d398e.GConfig.SeparatorII)[0x0];
              this.firingDuration = _0x3fd1d7.DYTools.stringToNumber(_0x49f2c8, _0x5d398e.GConfig.SeparatorII)[0x0];
            } catch (_0x3f2517) {
              _0x3fd1d7.DYTools.error('副武器参数错误', _0x3f2517);
              this.frozenDuration = 0x2;
              this.firingDuration = 0x2;
            }
            if (_0x31fbfc.fun == _0x6d8393.DWType.Fire) {
              try {
                _0x49f2c8 = _0x31fbfc["var"];
                this.firingHurt = _0x3fd1d7.DYTools.stringToNumber(_0x49f2c8, _0x5d398e.GConfig.SeparatorII)[0x1] * this.firingHurtDuration;
              } catch (_0x29c029) {
                _0x3fd1d7.DYTools.error('火武器参数错误', _0x29c029);
                this.firingHurt = 0x2;
              }
            }
          }
        },
        'reset': function () {
          this.isSlowDown = false;
          this.slowDownTime = -0x1;
          this.isFrozen = false;
          this.frozenTime = -0x1;
          this.isFiring = false;
          this.firingTime = -0x1;
          this.treatCount = 0x0;
          this.isDirty = true;
        },
        'updateGameLogic': function (_0x57a275) {
          if (this.slowDownTime >= 0x0) {
            this.slowDownTime += _0x57a275;
            if (this.slowDownTime >= this.slowDownDuration) {
              this.removeBuff(_0x6d8393.EnemyBuff.SlowDown);
            }
          }
          if (this.frozenTime >= 0x0) {
            this.frozenTime += _0x57a275;
            if (this.frozenTime >= this.frozenDuration) {
              this.removeBuff(_0x6d8393.EnemyBuff.Frozen);
            }
          }
          if (this.firingTime >= 0x0) {
            this.firingTime += _0x57a275;
            this.firingHurtTime += _0x57a275;
            if (this.firingHurtTime > this.firingHurtDuration) {
              this.firingHurtTime = 0x0;
              if (this.entity) {
                this.entity.bloodChange(-this.firingHurt);
              }
            }
            if (this.firingTime >= this.firingDuration) {
              this.removeBuff(_0x6d8393.EnemyBuff.Firing);
            }
          }
        },
        'addBuff': function (_0x1aca3f) {
          switch (_0x1aca3f) {
            case _0x6d8393.EnemyBuff.SlowDown:
              if (!this.isSlowDown) {
                this.isSlowDown = true;
                this.isDirty = true;
              }
              this.slowDownTime = 0x0;
              break;
            case _0x6d8393.EnemyBuff.Frozen:
              if (!this.isFrozen) {
                this.isFrozen = true;
                this.isDirty = true;
              }
              this.frozenTime = 0x0;
              break;
            case _0x6d8393.EnemyBuff.Firing:
              if (!this.isFiring) {
                this.firingHurtTime = 0x0;
                this.isFiring = true;
                this.isDirty = true;
              }
              this.firingTime = 0x0;
              break;
            case _0x6d8393.EnemyBuff.Treat:
              this.treatCount++;
              this.isDirty = true;
          }
        },
        'removeBuff': function (_0x1aadd4) {
          switch (_0x1aadd4) {
            case _0x6d8393.EnemyBuff.SlowDown:
              if (this.isSlowDown) {
                this.isSlowDown = false;
                this.slowDownTime = -0x1;
                this.isDirty = true;
              }
              break;
            case _0x6d8393.EnemyBuff.Frozen:
              if (this.isFrozen) {
                this.isFrozen = false;
                this.frozenTime = -0x1;
                this.isDirty = true;
              }
              break;
            case _0x6d8393.EnemyBuff.Firing:
              if (this.isFiring) {
                this.isFiring = false;
                this.firingTime = -0x1;
                this.isDirty = true;
              }
              break;
            case _0x6d8393.EnemyBuff.Treat:
              this.treatCount--;
              this.isDirty = true;
          }
        },
        'hasBuff': function (_0x4e38df) {
          switch (_0x4e38df) {
            case _0x6d8393.EnemyBuff.SlowDown:
              return this.isSlowDown;
            case _0x6d8393.EnemyBuff.Frozen:
              return this.isFrozen;
            case _0x6d8393.EnemyBuff.Firing:
              return this.isFiring;
            case _0x6d8393.EnemyBuff.Treat:
              return this.treatCount > 0x0;
          }
          return false;
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'GameData': "GameData",
      'Tools': "Tools",
      'Types': 'Types'
    }],
    'EnemyCollisionBlockListener': [function (_0x363f51, _0x17411e, _0x4e237e) {
      'use strict';
  
      cc._RF.push(_0x17411e, "ebb5eN+fX1I/KPc+6WbuJwZ", "EnemyCollisionBlockListener");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'onCollisionExit': function (_0x22b6f6, _0x3ba418) {
          if (0xa == _0x22b6f6.node.groupIndex) {
            this.noticeBlockLeave(_0x22b6f6);
          }
        },
        'onCollisionEnter': function (_0x307fee, _0x4cac0b) {
          if (0xa == _0x307fee.node.groupIndex) {
            this.noticeBlockCollision(_0x307fee);
          }
        },
        'noticeBlockCollision': function (_0x378233) {
          this.node.parent.emit("blockCollision", _0x378233);
        },
        'noticeBlockLeave': function (_0x3172ac) {
          this.node.parent.emit("blockLeave", _0x3172ac);
        }
      });
      cc._RF.pop();
    }, {}],
    'EnemyCollisionWallListener': [function (_0x76c46e, _0x48dc56, _0x4dc210) {
      'use strict';
  
      cc._RF.push(_0x48dc56, "b78dbE/KJ5Kj6f2O5Zk4z/f", "EnemyCollisionWallListener");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'onCollisionExit': function (_0x86fb1e, _0x2e6c62) {
          if (0x4 == _0x86fb1e.node.groupIndex) {
            this.noticeWallLeave(_0x86fb1e);
          }
        },
        'onCollisionEnter': function (_0x3633d3, _0x430443) {
          if (0x4 == _0x3633d3.node.groupIndex) {
            this.noticeWallCollision(_0x3633d3);
          }
        },
        'noticeWallCollision': function (_0x5f50c4) {
          this.node.parent.emit("wallCollision", _0x5f50c4);
        },
        'noticeWallLeave': function (_0x38e389) {
          this.node.parent.emit('wallLeave', _0x38e389);
        }
      });
      cc._RF.pop();
    }, {}],
    'EnemyDropComponent': [function (_0x4a4a1a, _0x1b601c, _0xd9f4da) {
      'use strict';
  
      cc._RF.push(_0x1b601c, "88228/4UKxA6pBu/TgmC6A1", 'EnemyDropComponent');
      var _0x599903 = _0x4a4a1a("Tools");
      var _0x29eb8f = _0x4a4a1a("CommonValue");
      var _0x215d87 = _0x4a4a1a("CommonConfig");
      var _0x55c40b = _0x4a4a1a("Types");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this._data = null;
          this._player = null;
        },
        'init': function (_0x398745, _0x55be6e) {
          this._data = _0x398745;
          this._player = _0x55be6e;
        },
        'die': function () {
          var _0x30bcc9 = this._data.cData.dropKParam.split(_0x215d87.GConfig.SeparatorI);
          for (var _0x4bc878 = 0x0; _0x4bc878 < _0x30bcc9.length; _0x4bc878++) {
            var _0xac8415 = _0x599903.DYTools.stringToNumber(_0x30bcc9[_0x4bc878], _0x215d87.GConfig.SeparatorII);
            switch (_0xac8415[0x0]) {
              case _0x55c40b.DropType.Weapon:
                if (_0x599903.DYTools.getEnemyDropAble() && (_0x4c9ccf = _0xac8415[0x2]) > _0x599903.DYTools.random_int(0x0, 0x63)) {
                  var _0x3c01aa = this._player.node.position.sub(_0x29eb8f.GValue.EntityWorld.mapMgr.mapTop.position);
                  var _0x43514c = this.node.position.sub(_0x3c01aa);
                  var _0xab6911 = 0x0;
                  for (var _0x23f8c2 = _0x29eb8f.GValue.EntityWorld.addEntitySys.addDropKnife(0x1, this.node.position, _0x43514c); _0xab6911 < _0x23f8c2.length; _0xab6911++) {
                    var _0x3fb9f4 = _0x23f8c2[_0xab6911];
                    _0x3fb9f4.changeSkin(this._player.knifeImage);
                    _0x29eb8f.GValue.EntityWorld.addKnife(_0x3fb9f4);
                  }
                  _0x29eb8f.GValue.EntityWorld.enemyDropNumber += 0x1;
                }
                break;
              case _0x55c40b.DropType.Prop:
                var _0x4c9ccf = _0xac8415[0x2];
                if (_0x599903.DYTools.random_int(0x0, 0x63) < _0x4c9ccf) {
                  var _0x1eb082 = _0x29eb8f.GValue.EntityWorld.addProp(_0xac8415[0x1]);
                  _0x1eb082.node.position = this.node.position.add(_0x29eb8f.GValue.EntityWorld.mapMgr.mapTop.position);
                  _0x1eb082.node.opacity = 0xff;
                  _0x29eb8f.GValue.EntityWorld.enemyDropPropNumber += 0x1;
                }
            }
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': 'CommonConfig',
      'CommonValue': "CommonValue",
      'Tools': 'Tools',
      'Types': "Types"
    }],
    'EnemyMoveBaseComponent': [function (_0x15718b, _0x4fe3d6, _0x158313) {
      'use strict';
  
      cc._RF.push(_0x4fe3d6, "411aa3RdH5M+r1AF5qxLrw5", 'EnemyMoveBaseComponent');
      var _0x4288c7 = _0x15718b('Types');
      var _0x3dda4b = _0x15718b('GameData');
      var _0x50901e = _0x15718b('CommonValue');
      var _0x721fef = _0x15718b("Tools");
      var _0x2b9c9a = _0x15718b("CommonConfig");
      var _0x5cab1e = _0x15718b("CommonFunc");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.actState = _0x4288c7.EnemyAction.None;
          this.moveType = _0x4288c7.EnemyMoveType.Follow;
          this.initMoveSpeed = 0x64;
          this.curMoveSpeed = 0x0;
          this.speedSlowParam = 0.8;
          this.playerInSpeed = 0x1;
          this.rotateTime = 0x0;
          this.adjustDuration = 0x0;
          this.curDir = cc.Vec2.ZERO;
          this.posDelta = cc.Vec2.ZERO;
          this.curSpeedRatio = 0x1;
          this.hurtType = -0x1;
          this.firstInScreen = false;
          this.canChangeDir = true;
          this.randomDirTime = 0x0;
        },
        'init': function (_0x2fd864, _0x20522c, _0x32f5ce) {
          this.player = _0x2fd864;
          this.enemy = _0x20522c;
          this.initMoveSpeed = _0x32f5ce.moveSpeed;
          this.curMoveSpeed = this.initMoveSpeed;
          this.adjustDuration = _0x32f5ce.adjustDuration;
          this.rotateTime = 0x186a0;
          this.moveType = _0x32f5ce.cData.moveType;
          this.curDir = cc.Vec2.ZERO;
          this.posDelta = cc.Vec2.ZERO;
          this.curSpeedRatio = 0x1;
          this.hurtType = -0x1;
          this.speedSlowParam = _0x32f5ce.cData.hurtSpeed;
          this.playerInSpeed = _0x32f5ce.cData.playerInSpeed;
          this.firstInScreen = false;
          this.canChangeDir = true;
          if (this.checkInitDir()) {
            this.canChangeDir = false;
            var _0x381c0e = this.enemy.getAttrParam(_0x4288c7.EnemyAttr.RanDir);
            if (!(_0x381c0e && _0x381c0e.param)) {
              _0x721fef.DYTools.error("1111");
            }
            var _0x32567a = _0x721fef.DYTools.stringToNumber(_0x381c0e.param, _0x2b9c9a.GConfig.SeparatorII);
            this.randomDirTime = _0x721fef.DYTools.random_int(0x64 * _0x32567a[0x0], 0x64 * _0x32567a[0x1]) / 0x64;
          }
          this.node.on('changeDir', this.setCurDir, this);
        },
        'updateGameLogic': function (_0x4c5dc6) {
          if (this.randomDirTime > 0x0) {
            this.randomDirTime -= _0x4c5dc6;
            if (this.randomDirTime <= 0x0) {
              this.canChangeDir = true;
            }
          }
          if (this.enemy.hasBuff(_0x4288c7.EnemyBuff.Frozen)) {
            try {
              this.curMoveSpeed = this.initMoveSpeed * this.enemy.player.dwParam[0x1];
            } catch (_0x96608f) {
              this.curMoveSpeed = this.initMoveSpeed;
            }
          } else {
            if (this.enemy.hasBuff(_0x4288c7.EnemyBuff.SlowDown)) {
              this.curMoveSpeed = this.initMoveSpeed * this.speedSlowParam;
            } else {
              var _0xe59a42 = this.player.getPositionForMap();
              var _0xaaef43 = this.node.position.sub(_0xe59a42);
              var _0x543cf5 = this.player.radius;
              if (Math.abs(_0xaaef43.x) < _0x543cf5 && Math.abs(_0xaaef43.y) < _0x543cf5 && _0xaaef43.magSqr() < _0x543cf5 * _0x543cf5) {
                this.curMoveSpeed = this.initMoveSpeed * this.playerInSpeed;
              } else {
                this.curMoveSpeed = this.initMoveSpeed;
              }
            }
          }
        },
        'checkInitDir': function () {
          return !!this.enemy.hasAttribution(_0x4288c7.EnemyAttr.RanDir) && (this.setCurDir(_0x5cab1e.GFunc.getEnemyRandomDir(this.node)), true);
        },
        'adjustDirToPlayer': function () {
          var _0x17a092 = this.player.getPositionForMap().sub(this.node.position);
          this.setCurDir(_0x17a092.normalize());
        },
        'setCurDir': function (_0x4c073c) {
          this.curDir = _0x4c073c;
          this.setRotate(this.curDir);
        },
        'setRotate': function (_0x46915f) {
          var _0x1a7927 = cc.v2(0x0, -0x1);
          var _0x21b067 = _0x46915f.signAngle(_0x1a7927);
          var _0x4a7c35 = cc.misc.radiansToDegrees(_0x21b067);
          this.node.angle = _0x4a7c35;
        },
        'updatePosition': function (_0x269eb1) {
          if (_0x50901e.GValue.PropMgr.hasProp(_0x4288c7.PropType.Slow)) {
            _0x269eb1 *= _0x50901e.GValue.SlowRatio;
          }
          var _0x59bd84 = this.curDir;
          var _0x5c7434 = this.curMoveSpeed * _0x59bd84.x;
          var _0x1ce750 = this.curMoveSpeed * _0x59bd84.y;
          switch (this.moveType) {
            case _0x4288c7.EnemyMoveType.Follow:
            case _0x4288c7.EnemyMoveType.Elastic:
            case _0x4288c7.EnemyMoveType.SpeedUp:
              this.posDelta = cc.v2(_0x5c7434 * _0x269eb1, _0x1ce750 * _0x269eb1);
          }
          var _0x28b00a = this.checkHurtDelta();
          this.posDelta = this.posDelta.add(_0x28b00a);
          this.node.position = this.node.position.add(this.posDelta);
          this.hurtType = -0x1;
          this.posDelta = cc.v2(0x0, 0x0);
        },
        'checkHurtDelta': function () {
          var _0x17623b = cc.Vec2.ZERO;
          if (_0x50901e.GValue.PlayerTouching && !this.enemy.isBoss && 0x0 != this.moveType) {
            switch (this.hurtType) {
              case _0x4288c7.EnemyHurtState.Normal:
                _0x17623b = this.node.position.sub(this.player.getPositionForMap()).normalize().rotate(-cc.misc.degreesToRadians(0x5a + _0x3dda4b.TData.EnemyOffsetDegree)).mul(_0x3dda4b.TData.EnemyOffset);
                break;
              case _0x4288c7.EnemyHurtState.Knife:
              case _0x4288c7.EnemyHurtState.Laser:
              case _0x4288c7.EnemyHurtState.Frozen:
              case _0x4288c7.EnemyHurtState.Fire:
                _0x17623b = this.node.position.sub(this.player.getPositionForMap()).normalize().rotate(cc.misc.degreesToRadians(0x5a + _0x3dda4b.TData.EnemyOffsetDegree)).mul(_0x3dda4b.TData.EnemyOffset);
            }
          }
          return _0x17623b;
        },
        'hurt': function (_0x42e908) {
          this.hurtType = _0x42e908;
          switch (_0x42e908) {
            case _0x4288c7.EnemyHurtState.Normal:
            case _0x4288c7.EnemyHurtState.Knife:
            case _0x4288c7.EnemyHurtState.Laser:
            case _0x4288c7.EnemyHurtState.Ele:
              this.enemy.buffCom.addBuff(_0x4288c7.EnemyBuff.SlowDown);
              break;
            case _0x4288c7.EnemyHurtState.Frozen:
              this.enemy.buffCom.addBuff(_0x4288c7.EnemyBuff.Frozen);
              break;
            case _0x4288c7.EnemyHurtState.Fire:
              this.enemy.buffCom.addBuff(_0x4288c7.EnemyBuff.Firing);
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': 'CommonConfig',
      'CommonFunc': 'CommonFunc',
      'CommonValue': 'CommonValue',
      'GameData': "GameData",
      'Tools': 'Tools',
      'Types': "Types"
    }],
    'EnemyMoveFix': [function (_0xb88a21, _0x47ce35, _0x24d500) {
      'use strict';
  
      cc._RF.push(_0x47ce35, "d45ddCbLd9LepNMKYljTzNp", "EnemyMoveFix");
      var _0x1a42fe = _0xb88a21("Tools");
      var _0x353fcd = _0xb88a21("CommonValue");
      var _0x1cafd1 = _0xb88a21('Types');
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this._entity = null;
          this._moveType = 0x0;
          this._collider = null;
          this._actionCom = null;
          this._moveCom = null;
          this._stateCom = null;
          this._radius = 0x0;
          this._offset = 0x6;
          this._hasCollision = false;
          this.collisionWalls = [];
          this.collisionBlocks = [];
          this.colWallAble = false;
          this._minX = null;
          this._maxX = null;
          this._minY = null;
          this._maxY = null;
          this.colingWalls = [];
          this._minViewX = 0x0;
          this._maxViewX = 0x0;
          this._minViewY = 0x0;
          this._maxViewY = 0x0;
          this._screenOutRect = null;
          this._dxDirty = false;
          this._dyDirty = false;
          this.curDir = cc.Vec2.ZERO;
          this.initialCol = false;
          this.changeDirTimes = 0x0;
          this.colTotalCount = 0x0;
        },
        'init': function (_0x1306db) {
          this._entity = _0x1306db;
          if (this._entity) {
            this._collider = this._entity.colliderNode.getComponent(cc.CircleCollider);
            this._actionCom = this._entity.node.getComponent("EnemyActionMoveComponent");
            this._moveCom = this._entity.moveCom;
            this._stateCom = this._entity.stateCom;
          }
          this.initProperty();
        },
        'initByMoveType': function (_0x4559f5, _0x5c17f8) {
          this._moveCom = null;
          this._moveType = _0x4559f5;
          this._collider = _0x5c17f8.getComponent(cc.CircleCollider);
          this._actionCom = _0x5c17f8.getComponent("EnemyActionMoveComponent");
          this._stateCom = _0x5c17f8.getComponent("EnemyStateComponent");
          this.initProperty();
        },
        'initProperty': function () {
          this.colWallAble = false;
          this._hasCollision = false;
          this._dxDirty = false;
          this._dyDirty = false;
          this.initialCol = true;
          this.changeDirTimes = 0x0;
          this.collisionWalls.splice(0x0);
          this.collisionBlocks.splice(0x0);
          this.colingWalls.splice(0x0);
          this.resetRadius();
          if (this._entity && this._entity.hasAttribution(_0x1cafd1.EnemyAttr.bulScreen)) {
            var _0x24d4f0 = this._entity.getAttrParam(_0x1cafd1.EnemyAttr.bulScreen);
            this.colTotalCount = parseInt(_0x24d4f0.param);
          }
          this.node.on("wallCollision", this.collisionWall, this);
          this.node.on("wallLeave", this.leaveWall, this);
          this.node.on('blockCollision', this.collisionBlock, this);
          this.node.on("blockLeave", this.leaveBlock, this);
        },
        'resetRadius': function () {
          this._radius = this._collider.radius * this.node.scale;
          this._minViewX = this._radius;
          this._maxViewX = _0x353fcd.GValue.Size_View.width - this._radius;
          this._minViewY = this._radius;
          this._maxViewY = _0x353fcd.GValue.Size_View.height - this._radius;
          this._screenOutRect = cc.rect(-this._radius, -this._radius, _0x353fcd.GValue.Size_View.width + 0x2 * this._radius, _0x353fcd.GValue.Size_View.height + 0x2 * this._radius);
        },
        'updateGameLogic': function (_0x421527) {
          if (this._collider) {
            if (this._moveCom) {
              this.curDir = this._moveCom.curDir;
            }
            var _0x5b341b = this._moveType;
            if (this._entity) {
              _0x5b341b = this._entity.data.cData.moveType;
            }
            switch (_0x5b341b) {
              case _0x1cafd1.EnemyMoveType.Follow:
                this.fixPositionByBlock();
                break;
              case _0x1cafd1.EnemyMoveType.Elastic:
                if (!this._moveCom.firstInScreen) {
                  return void (this.initialCol && this.collisionWalls.length > 0x0 && (this.initialCol = false));
                }
                if (0x0 == this.collisionWalls.length) {
                  this.initialCol = true;
                }
                if (this._stateCom.state == _0x1cafd1.EnemyAction.Action) {
                  if (this._entity && this._entity.hasAttribution(_0x1cafd1.EnemyAttr.bulScreen) && this.isCollideWallTimesEnd()) {
                    if (this.node) {
                      var _0x1afc99 = false;
                      var _0x24ca29 = this.node.position.add(_0x353fcd.GValue.EntityWorld.mapMgr.mapTop.position).mul(_0x353fcd.GValue.MapScale);
                      if (!this._screenOutRect.contains(_0x24ca29)) {
                        _0x1afc99 = true;
                      }
                      if (_0x1afc99) {
                        this._entity.removeSelf();
                      }
                    }
                  } else {
                    var _0x219a9f = false;
                    if (this.initialCol) {
                      _0x219a9f = this.fixPositionByWall();
                    }
                    if (!_0x219a9f) {
                      this.fixPositionByScreen();
                    }
                    if (this._dxDirty || this._dyDirty) {
                      this.changeDirTimes++;
                    }
                    if (this._hasCollision || !this._dxDirty && !this._dyDirty) {
                      if (this._dxDirty) {
                        this.curDir = cc.v2(-this.curDir.x, this.curDir.y);
                        this._moveCom.setCurDir(this.curDir);
                        this._dxDirty = false;
                      }
                      if (this._dyDirty) {
                        this.curDir = cc.v2(this.curDir.x, -this.curDir.y);
                        this._moveCom.setCurDir(this.curDir);
                        this._dyDirty = false;
                      }
                    } else {
                      this._hasCollision = true;
                      var _0x41bcc4 = _0x1a42fe.DYTools.random_int(0x34, 0x69) / 0x64;
                      var _0x4280f9 = cc.v2(0x0, -0x1).rotate(_0x41bcc4);
                      var _0x54b2c4 = this.curDir;
                      if (this._dyDirty && this._dxDirty) {
                        _0x4280f9.x = _0x54b2c4.x < 0x0 ? _0x4280f9.x : -_0x4280f9.x;
                        _0x4280f9.y = _0x54b2c4.y < 0x0 ? -_0x4280f9.y : _0x4280f9.y;
                      } else if (this._dxDirty) {
                        _0x4280f9.x = _0x54b2c4.x < 0x0 ? _0x4280f9.x : -_0x4280f9.x;
                        _0x4280f9.y = _0x54b2c4.y < 0x0 ? _0x4280f9.y : -_0x4280f9.y;
                      } else if (this._dyDirty) {
                        _0x4280f9.x = _0x54b2c4.x < 0x0 ? -_0x4280f9.x : _0x4280f9.x;
                        _0x4280f9.y = _0x54b2c4.y < 0x0 ? -_0x4280f9.y : _0x4280f9.y;
                      }
                      this.node.emit("changeDir", _0x4280f9);
                      this._dxDirty = false;
                      this._dyDirty = false;
                    }
                  }
                }
                break;
              case _0x1cafd1.EnemyMoveType.SpeedUp:
            }
          }
        },
        'isCollideWallTimesEnd': function () {
          return this.changeDirTimes >= this.colTotalCount;
        },
        'fixPositionByScreen': function () {
          var _0x305ca7 = this.node.position.add(_0x353fcd.GValue.EntityWorld.mapMgr.mapTop.position).mul(_0x353fcd.GValue.MapScale);
          if (_0x305ca7.x < this._minViewX) {
            this.node.x = this.node.parent.convertToNodeSpaceAR(cc.v2(this._minViewX, 0x0)).x;
            if (this.curDir.x < 0x0) {
              this._dxDirty = true;
            }
          } else if (_0x305ca7.x > this._maxViewX) {
            this.node.x = this.node.parent.convertToNodeSpaceAR(cc.v2(this._maxViewX, 0x0)).x;
            if (this.curDir.x > 0x0) {
              this._dxDirty = true;
            }
          }
          if (_0x305ca7.y < this._minViewY) {
            this.node.y = this.node.parent.convertToNodeSpaceAR(cc.v2(0x0, this._minViewY)).y;
            if (this.curDir.y < 0x0) {
              this._dyDirty = true;
            }
          } else if (_0x305ca7.y > this._maxViewY) {
            this.node.y = this.node.parent.convertToNodeSpaceAR(cc.v2(0x0, this._maxViewY)).y;
            if (this.curDir.y > 0x0) {
              this._dyDirty = true;
            }
          }
        },
        'fixPositionByWall': function () {
          if (0x0 == this.collisionWalls.length && 0x0 == this.collisionBlocks.length) {
            return false;
          }
          for (var _0x5de1b6 = 0x0; _0x5de1b6 < this.collisionWalls.length; _0x5de1b6++) {
            var _0x386971 = this.collisionWalls[_0x5de1b6];
            this._collider;
            var _0x3fe439 = _0x386971.node.parent;
            var _0x461413 = this.node.parent;
            var _0x2c21b0 = _0x3fe439.position;
            switch (_0x386971.tag) {
              case 0x0:
                var _0x191afa = _0x386971.size.height;
                this._maxY = _0x2c21b0.y - _0x386971.offset.y - 0.5 * _0x191afa - this._radius;
                if (this.node.y > this._maxY) {
                  this.node.y = this._maxY;
                  this._dyDirty = true;
                }
                break;
              case 0x1:
                _0x191afa = _0x386971.size.height;
                this._minY = _0x2c21b0.y + _0x386971.offset.y + 0.5 * _0x191afa + this._radius;
                if (this.node.y < this._minY) {
                  this.node.y = this._minY;
                  this._dyDirty = true;
                }
                break;
              case 0x2:
                _0x191afa = _0x386971.size.height;
                this._minX = _0x2c21b0.x + _0x386971.offset.y + 0.5 * _0x191afa + this._radius;
                if (this.node.x < this._minX) {
                  this.node.x = this._minX;
                  this._dxDirty = true;
                }
                break;
              case 0x3:
                _0x191afa = _0x386971.size.height;
                this._maxX = _0x2c21b0.x - _0x386971.offset.y - 0.5 * _0x191afa - this._radius;
                if (this.node.x > this._maxX) {
                  this.node.x = this._maxX;
                  this._dxDirty = true;
                }
                break;
              case 0x4:
                _0x2c21b0 = _0x2c21b0.add(_0x386971.node.position);
                if ((_0x19e52b = (_0x5a0430 = this.node.position.sub(_0x2c21b0)).mag()) < (_0x2b473f = this._radius + _0x386971.radius)) {
                  var _0x205768 = _0x5a0430.x / _0x19e52b;
                  var _0x2d0dae = _0x5a0430.y / _0x19e52b;
                  var _0x156b45 = _0x2c21b0.add(cc.v2(_0x2b473f * _0x205768, _0x2b473f * _0x2d0dae));
                  this.node.position = _0x156b45;
                  this._dyDirty = true;
                  this._dxDirty = true;
                }
                break;
              case 0x5:
                _0x2c21b0.addSelf(_0x386971.node.position);
                if ((_0x19e52b = (_0x5a0430 = this.node.position.sub(_0x2c21b0)).mag()) < (_0x2b473f = this._radius + _0x386971.radius)) {
                  _0x205768 = _0x5a0430.x / _0x19e52b;
                  _0x2d0dae = _0x5a0430.y / _0x19e52b;
                  _0x156b45 = _0x2c21b0.add(cc.v2(_0x2b473f * _0x205768, _0x2b473f * _0x2d0dae));
                  this.node.position = _0x156b45;
                  this._dyDirty = true;
                  this._dxDirty = true;
                }
                break;
              case 0x6:
                var _0x5a0430;
                var _0x19e52b;
                _0x2c21b0 = _0x386971.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
                _0x2c21b0 = _0x461413.convertToNodeSpaceAR(_0x2c21b0);
                if ((_0x19e52b = (_0x5a0430 = this.node.position.sub(_0x2c21b0)).mag()) < (_0x2b473f = this._radius + 0.5 * _0x386971.size.width)) {
                  _0x205768 = _0x5a0430.x / _0x19e52b;
                  _0x2d0dae = _0x5a0430.y / _0x19e52b;
                  _0x156b45 = _0x2c21b0.add(cc.v2(_0x2b473f * _0x205768, _0x2b473f * _0x2d0dae));
                  this.node.position = _0x156b45;
                  this._dyDirty = true;
                  this._dxDirty = true;
                }
            }
          }
          for (_0x5de1b6 = 0x0; _0x5de1b6 < this.collisionBlocks.length; _0x5de1b6++) {
            _0x2c21b0 = (_0x3fe439 = (_0x386971 = this.collisionBlocks[_0x5de1b6]).node.parent).position;
            switch (_0x386971.tag) {
              case 0x65:
                if (_0x1a42fe.DYTools.arrContain(this.colingWalls, _0x386971)) {
                  break;
                }
                this.colingWalls.push(_0x386971);
                var _0x2b473f = _0x386971.size.width;
                var _0xaab1ed = _0x386971.size.height;
                var _0x4d5fbc = Math.abs(_0x3fe439.angle);
                if (_0x4d5fbc > 0x50 && _0x4d5fbc < 0x64 || _0x4d5fbc > 0x104 && _0x4d5fbc < 0x118) {
                  _0x2b473f = _0x386971.size.height;
                  _0xaab1ed = _0x386971.size.width;
                }
                _0x2c21b0.addSelf(_0x386971.node.position);
                if (_0x1a42fe.DYTools.isNumberDiffRange(this.node.y, _0x2c21b0.y, _0xaab1ed / 0x2)) {
                  if (this.curDir.x > 0x0) {
                    if (this.node.x < _0x2c21b0.x) {
                      this._dxDirty = true;
                    }
                  } else if (this.node.x > _0x2c21b0.x) {
                    this._dxDirty = true;
                  }
                } else if (_0x1a42fe.DYTools.isNumberDiffRange(this.node.x, _0x2c21b0.x, _0x2b473f / 0x2)) {
                  if (this.curDir.y > 0x0) {
                    if (this.node.y < _0x2c21b0.y) {
                      this._dyDirty = true;
                    }
                  } else if (this.node.y > _0x2c21b0.y) {
                    this._dyDirty = true;
                  }
                } else if (this.node.x > _0x2c21b0.x && this.node.y > _0x2c21b0.y) {
                  if (this.curDir.x < 0x0 && this.curDir.y < 0x0) {
                    this._dyDirty = true;
                    this._dxDirty = true;
                  } else if (this.curDir.x < 0x0) {
                    this._dxDirty = true;
                  } else if (this.curDir.y < 0x0) {
                    this._dyDirty = true;
                  }
                } else if (this.node.x > _0x2c21b0.x && this.node.y < _0x2c21b0.y) {
                  if (this.curDir.x < 0x0 && this.curDir.y > 0x0) {
                    this._dyDirty = true;
                    this._dxDirty = true;
                  } else if (this.curDir.x < 0x0) {
                    this._dxDirty = true;
                  } else if (this.curDir.y > 0x0) {
                    this._dyDirty = true;
                  }
                } else if (this.node.x < _0x2c21b0.x && this.node.y < _0x2c21b0.y) {
                  if (this.curDir.x > 0x0 && this.curDir.y > 0x0) {
                    this._dyDirty = true;
                    this._dxDirty = true;
                  } else if (this.curDir.x > 0x0) {
                    this._dxDirty = true;
                  } else if (this.curDir.y > 0x0) {
                    this._dyDirty = true;
                  }
                } else if (this.curDir.x > 0x0 && this.curDir.y < 0x0) {
                  this._dyDirty = true;
                  this._dxDirty = true;
                } else if (this.curDir.x > 0x0) {
                  this._dxDirty = true;
                } else if (this.curDir.y < 0x0) {
                  this._dyDirty = true;
                }
            }
          }
          return true;
        },
        'fixPositionByBlock': function () {
          if (0x0 == this.collisionBlocks.length) {
            return false;
          }
          for (var _0x4dd669 = 0x0; _0x4dd669 < this.collisionBlocks.length; _0x4dd669++) {
            var _0x252bef = this.collisionBlocks[_0x4dd669];
            var _0x11db9b = _0x252bef.node.parent;
            var _0x2e7b5b = _0x11db9b.position;
            switch (_0x252bef.tag) {
              case 0x65:
                if (_0x1a42fe.DYTools.arrContain(this.colingWalls, _0x252bef)) {
                  this._moveCom.adjustDir();
                } else {
                  this.colingWalls.push(_0x252bef);
                }
                var _0x4a0fb7 = _0x252bef.size.width;
                var _0x25d473 = _0x252bef.size.height;
                var _0x363c49 = Math.abs(_0x11db9b.angle);
                if (_0x363c49 > 0x50 && _0x363c49 < 0x64 || _0x363c49 > 0x104 && _0x363c49 < 0x118) {
                  _0x4a0fb7 = _0x252bef.size.height;
                  _0x25d473 = _0x252bef.size.width;
                }
                _0x2e7b5b.addSelf(_0x252bef.node.position);
                var _0x3b059c = _0x2e7b5b.x - _0x4a0fb7 / 0x2 - this._radius + this._offset;
                var _0x283ebd = _0x2e7b5b.x + _0x4a0fb7 / 0x2 + this._radius - this._offset;
                var _0xf990b4 = _0x2e7b5b.y - _0x25d473 / 0x2 - this._radius + this._offset;
                var _0x32a1ad = _0x2e7b5b.y + _0x25d473 / 0x2 + this._radius - this._offset;
                if (_0x1a42fe.DYTools.isNumberDiffRange(this.node.x, _0x2e7b5b.x, _0x4a0fb7 / 0x2 - 0.5 * _0x25d473)) {
                  if (this.node.y < _0x2e7b5b.y - _0x25d473 / 0x2) {
                    if (this.node.y > _0xf990b4) {
                      this.node.y = _0xf990b4;
                    }
                  } else if (this.node.y > _0x2e7b5b.y + _0x25d473 / 0x2) {
                    if (this.node.y < _0x32a1ad) {
                      this.node.y = _0x32a1ad;
                    }
                  } else if (this.node.x < _0x2e7b5b.x) {
                    if (this.node.x > _0x3b059c) {
                      this.node.x = _0x3b059c;
                    }
                  } else if (this.node.x < _0x283ebd) {
                    this.node.x = _0x283ebd;
                  }
                } else {
                  var _0xc0c0dd = this.node.position.sub(_0x2e7b5b);
                  var _0x3e106d = cc.Vec2.ZERO;
                  var _0x5bd725 = 0x0;
                  if (_0x4a0fb7 > _0x25d473) {
                    if (_0x1a42fe.DYTools.isNumberDiffRange(this.node.x, _0x2e7b5b.x, _0x4a0fb7 / 0x2 - 0.5 * _0x25d473)) {
                      if (this.node.y < _0x2e7b5b.y - _0x25d473 / 0x2) {
                        if (this.node.y > _0xf990b4) {
                          this.node.y = _0xf990b4;
                        }
                      } else if (this.node.y > _0x2e7b5b.y + _0x25d473 / 0x2) {
                        if (this.node.y < _0x32a1ad) {
                          this.node.y = _0x32a1ad;
                        }
                      } else if (this.node.x < _0x2e7b5b.x) {
                        if (this.node.x > _0x3b059c) {
                          this.node.x = _0x3b059c;
                        }
                      } else if (this.node.x < _0x283ebd) {
                        this.node.x = _0x283ebd;
                      }
                    } else {
                      _0x5bd725 = _0x25d473 / 0x2;
                      if (_0xc0c0dd.x < 0x0) {
                        _0x3e106d = _0x2e7b5b.add(cc.v2(0.5 * -_0x4a0fb7 + 0.5 * _0x25d473, 0x0));
                      } else if (_0xc0c0dd.x > 0x0) {
                        _0x3e106d = _0x2e7b5b.add(cc.v2(0.5 * _0x4a0fb7 - 0.5 * _0x25d473, 0x0));
                      }
                    }
                  } else if (_0x1a42fe.DYTools.isNumberDiffRange(this.node.y, _0x2e7b5b.y, _0x25d473 / 0x2 - 0.5 * _0x4a0fb7)) {
                    if (this.node.x < _0x2e7b5b.x - _0x4a0fb7 / 0x2) {
                      if (this.node.x > _0x3b059c) {
                        this.node.x = _0x3b059c;
                      }
                    } else if (this.node.x > _0x2e7b5b.x + _0x4a0fb7 / 0x2) {
                      if (this.node.x < _0x283ebd) {
                        this.node.x = _0x283ebd;
                      }
                    } else if (this.node.y < _0x2e7b5b.y) {
                      if (this.node.y > _0xf990b4) {
                        this.node.y = _0xf990b4;
                      }
                    } else if (this.node.y < _0x32a1ad) {
                      this.node.y = _0x32a1ad;
                    }
                  } else {
                    _0x5bd725 = _0x4a0fb7 / 0x2;
                    if (_0xc0c0dd.y < 0x0) {
                      _0x3e106d = _0x2e7b5b.add(cc.v2(0x0, 0.5 * -_0x25d473 + 0.5 * _0x4a0fb7));
                    } else if (_0xc0c0dd.y > 0x0) {
                      _0x3e106d = _0x2e7b5b.add(cc.v2(0x0, 0.5 * _0x25d473 - 0.5 * _0x4a0fb7));
                    }
                  }
                  if (_0x5bd725 > 0x0) {
                    var _0x4e6fd2 = this.node.position.sub(_0x3e106d);
                    var _0x3c517e = _0x4e6fd2.mag();
                    var _0x5dfec8 = this._radius + _0x5bd725 - this._offset;
                    if (_0x3c517e < _0x5dfec8) {
                      var _0x49b47e = _0x4e6fd2.x / _0x3c517e;
                      var _0x1ea399 = _0x4e6fd2.y / _0x3c517e;
                      var _0x1f67cf = _0x3e106d.add(cc.v2(_0x5dfec8 * _0x49b47e, _0x5dfec8 * _0x1ea399));
                      this.node.position = _0x1f67cf;
                    }
                  }
                }
            }
          }
        },
        'collisionWall': function (_0xce2ccc) {
          if (!_0x1a42fe.DYTools.arrContains(this.collisionWalls, _0xce2ccc)) {
            this.collisionWalls.push(_0xce2ccc);
          }
        },
        'leaveWall': function (_0x184564) {
          _0x1a42fe.DYTools.arrRemove(this.collisionWalls, _0x184564);
          _0x1a42fe.DYTools.arrRemove(this.colingWalls, _0x184564);
        },
        'collisionBlock': function (_0x20d640) {
          if (!_0x1a42fe.DYTools.arrContains(this.collisionBlocks, _0x20d640)) {
            this.collisionBlocks.push(_0x20d640);
          }
        },
        'leaveBlock': function (_0x5573b3) {
          _0x1a42fe.DYTools.arrRemove(this.collisionBlocks, _0x5573b3);
          _0x1a42fe.DYTools.arrRemove(this.colingWalls, _0x5573b3);
        }
      });
      cc._RF.pop();
    }, {
      'CommonValue': 'CommonValue',
      'Tools': "Tools",
      'Types': 'Types'
    }],
    'EnemySpeedUpMoveComponent': [function (_0x218a45, _0x130336, _0x2f3af5) {
      'use strict';
  
      cc._RF.push(_0x130336, "d289eNVq2ZG05YmefwXRT3d", 'EnemySpeedUpMoveComponent');
      var _0x1f6e12 = _0x218a45('EnemyMoveBaseComponent');
      cc.Class({
        'extends': _0x1f6e12,
        'properties': {},
        'ctor': function () {
          this.acceleration = 0xa;
          this.moveState = 0x0;
          this.maxSpeed = 0xc8;
          this.destPos = cc.Vec2.ZERO;
          this.destDis = 0x0;
        },
        'updateGameLogic': function (_0x1e7801) {
          switch (this.moveState) {
            case 0x0:
              this.updateMoveState(0x1);
              break;
            case 0x1:
              break;
            case 0x2:
              this.curMoveSpeed += this.acceleration;
              if (this.curMoveSpeed >= this.maxSpeed) {
                this.curMoveSpeed = this.maxSpeed;
                this.updateMoveState(0x3);
              }
              break;
            case 0x3:
              break;
            case 0x4:
              this.curMoveSpeed -= this.acceleration;
              if (this.curMoveSpeed <= 0x0) {
                this.curMoveSpeed = 0x0;
                this.updateMoveState(0x0);
              }
          }
          this.curMoveSpeed *= this.curSpeedRatio;
          this.updatePosition(_0x1e7801);
          if (0x2 == this.moveState || 0x3 == this.moveState) {
            var _0x5cac70 = this.player.getPositionForMap().sub(this.node.position);
            if (_0x5cac70.x * this.curDir.x < 0x0 || _0x5cac70.y * this.curDir.y < 0x0) {
              this.updateMoveState(0x4);
            }
          }
        },
        'setRotate': function (_0x17b1ff) {
          var _0x4cbeb0 = cc.v2(0x0, -0x1);
          var _0x32e6fb = _0x17b1ff.signAngle(_0x4cbeb0);
          var _0x52f56d = cc.misc.radiansToDegrees(_0x32e6fb);
          var _0x3e505d = this;
          var _0x14ba59 = cc.rotateTo(0.1, _0x52f56d);
          var _0x4ad716 = cc.sequence(_0x14ba59, cc.callFunc(function () {
            _0x3e505d.updateMoveState(0x2);
          }));
          this.node.runAction(_0x4ad716);
        },
        'updateMoveState': function (_0x247ff5) {
          this.moveState = _0x247ff5;
        },
        'hurt': function (_0x4cb32e) {}
      });
      cc._RF.pop();
    }, {
      'EnemyMoveBaseComponent': "EnemyMoveBaseComponent"
    }],
    'EnemyStateComponent': [function (_0x2a9ec6, _0x32e941, _0x30a759) {
      'use strict';
  
      cc._RF.push(_0x32e941, "f19cfKdPxdNZZNDqiIu/Z9M", "EnemyStateComponent");
      var _0x2389ec = _0x2a9ec6("Types");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.enemyEntity = null;
          this.state = _0x2389ec.EnemyAction.None;
        },
        'init': function (_0x3cc7b7) {
          this.enemyEntity = _0x3cc7b7;
          this.node.on("updateState", this.updateState, this);
        },
        'initState': function () {},
        'updateState': function (_0x4b1e71) {
          this.state = _0x4b1e71;
          this.refreshDisplay();
        },
        'refreshDisplay': function () {
          switch (this.state) {
            case _0x2389ec.EnemyAction.Action:
              break;
            case _0x2389ec.EnemyAction.Sleep:
              this.enemyEntity.uiNode.opacity = 0x64;
              break;
            case _0x2389ec.EnemyAction.Awaking:
              if (!this.enemyEntity.hasAttribution(_0x2389ec.EnemyAttr.Gold)) {
                var _0x47de26 = this;
                var _0x4266da = cc.sequence(cc.fadeIn(0.5), cc.callFunc(function () {
                  _0x47de26.updateState(_0x2389ec.EnemyAction.Action);
                }));
                this.enemyEntity.uiNode.runAction(_0x4266da);
              }
          }
        },
        'updateGameLogic': function (_0x4edc16) {}
      });
      cc._RF.pop();
    }, {
      'Types': "Types"
    }],
    'EnemyUIComponent': [function (_0x356f19, _0x33a8df, _0x4edbd8) {
      'use strict';
  
      cc._RF.push(_0x33a8df, "febc9albJxHpKGeWceWoX3+", "EnemyUIComponent");
      var _0x28f8b3 = _0x356f19('EnemyBaseComponent');
      var _0xa135c = _0x356f19("Tools");
      var _0x116d24 = _0x356f19('CommonValue');
      var _0x5996cb = _0x356f19("CommonEnum");
      var _0x289030 = _0x356f19('Types');
      var _0x198893 = _0x356f19("CommonConfig");
      cc.Class({
        'extends': _0x28f8b3,
        'properties': {},
        'ctor': function () {
          this.entity = null;
          this.skinId = 0x0;
          this._uiNode = null;
          this._bloodNode = null;
          this._skinSpr = null;
          this.bloodNum = null;
          this.goldEyeArr = [];
          this.goldEyeNum = 0x2;
        },
        'preLoad': function () {
          for (var _0x337fe8 = 0x0; _0x337fe8 < 0x2; _0x337fe8++) {
            var _0x34ff0b = new cc.Node();
            _0x34ff0b.addComponent(cc.Sprite).spriteFrame = _0x116d24.GValue.Atlas_Enemy.getSpriteFrame('goldEye');
            this.goldEyeArr.push(_0x34ff0b);
            _0x34ff0b.opacity = 0x0;
          }
        },
        'init': function (_0x517a76, _0x39a7c6, _0x1adb42, _0x23b787, _0x2fa868) {
          this.entity = _0x517a76;
          this.skinId = _0x39a7c6;
          this._uiNode = _0x1adb42;
          this._bloodNode = _0x23b787;
          this._skinSpr = _0x2fa868;
          if (!this.bloodNum) {
            this.bloodNum = _0xa135c.DYTools.createPrefabCom(this._bloodNode, _0x116d24.GValue.pf_num, 'PfNum');
            this.bloodNum.setParam(_0x5996cb.Enum_Num.Blood, cc.v2(0.5, 0.5), 0x0, _0x116d24.GValue.Atlas_Enemy);
            this.bloodNum.setString('11111');
          }
          this._uiNode.y = 0x0;
          this._bloodNode.opacity = 0xff;
          this.refreshSkinSpr('e_' + _0x39a7c6);
          this.setSkinColor(cc.color(0xff, 0xff, 0xff));
          switch (this.skinId) {
            case 0x1:
              this._bloodNode.y = 0x2;
              this.bloodNum.node.scale = 0.8;
              break;
            case 0x2:
              this._bloodNode.y = -0x14;
              this._uiNode.y = 0x18;
              this.bloodNum.node.scale = 0.7;
              var _0x368726 = new cc.Node();
              _0x368726.name = "tail";
              _0x368726.zIndex = -0x1;
              this._uiNode.addChild(_0x368726);
              _0x368726.addComponent(cc.Sprite).spriteFrame = _0x116d24.GValue.Atlas_Enemy.getSpriteFrame('tail_' + this.skinId);
              _0x368726.position = cc.v2(0x2, 0x66);
              break;
            case 0x3:
              this._bloodNode.y = -0xa;
              this._uiNode.y = 0xc;
              this.bloodNum.node.scale = 0.8;
              break;
            case 0x4:
              this._bloodNode.y = 0x0;
              this.bloodNum.node.scale = 0.4;
              break;
            case 0x5:
              this._uiNode.y = 0x18;
              this.initVomitUI();
              this._bloodNode.y = 0x0;
              this.bloodNum.node.scale = 0.8;
              break;
            case 0x6:
              this._uiNode.y = 0xa;
              this._bloodNode.y = 0x0;
              this.bloodNum.node.scale = 0.5;
              break;
            case 0x8:
              this.goldEyeNum = 0x1;
              this._uiNode.y = 0xa;
              this._bloodNode.y = 0x0;
              this.bloodNum.node.scale = 0.5;
              break;
            case 0x9:
              this.goldEyeNum = 0x1;
              this._bloodNode.y = -0xc;
              this.bloodNum.node.scale = 0.7;
              break;
            case 0xa:
              this._bloodNode.y = 0xc;
              this.bloodNum.node.scale = 0.7;
              break;
            case 0xb:
              this._bloodNode.y = 0xa;
              this.bloodNum.node.scale = 0.7;
              break;
            case 0x68:
              this._uiNode.y = 0x18;
              this._bloodNode.y = -0x10;
              this.bloodNum.node.scale = 0.75;
              break;
            case 0x6a:
              this._bloodNode.y = 0x6;
              this.bloodNum.node.scale = 0.75;
              break;
            case 0xc8:
              this._bloodNode.y = -0x10;
              this.bloodNum.node.scale = 0.65;
              this._uiNode.y = 0x8;
              break;
            case 0xc9:
              this._bloodNode.y = -0xa;
              this.bloodNum.node.scale = 0.56;
              this._uiNode.y = 0x8;
              break;
            case 0xca:
            case 0xcb:
              this._bloodNode.y = -0x18;
              this.bloodNum.node.scale = 0.5;
              this._uiNode.y = 0xa;
              break;
            case 0x3e9:
              this._bloodNode.y = -0x16;
              this.bloodNum.node.scale = 0.65;
              break;
            case 0x3ea:
              this._bloodNode.y = -0x4;
              this.bloodNum.node.scale = 0.8;
          }
          if (this.entity.hasAttribution(_0x289030.EnemyAttr.bulScreen)) {
            this._bloodNode.opacity = 0x0;
          }
          var _0x526557 = _0x198893.GConfig.enemyGoldEyePos[this.skinId].x;
          var _0x2f480e = _0x198893.GConfig.enemyGoldEyePos[this.skinId].y;
          for (var _0x2ccc2e = 0x0; _0x2ccc2e < this.goldEyeNum; _0x2ccc2e++) {
            var _0x297191 = this.goldEyeArr[_0x2ccc2e];
            if (!_0x297191.parent) {
              _0x297191.parent = _0x2fa868.node;
            }
            _0x297191.x = 0x0 == _0x2ccc2e ? _0x526557 : -_0x526557;
            _0x297191.y = _0x2f480e;
            _0x297191.scale = _0x198893.GConfig.enemyGoldEyeScale[this.skinId];
          }
        },
        'initVomitUI': function () {
          var _0x55f619 = new cc.Node();
          _0x55f619.opacity = 0x0;
          _0x55f619.y = -0x46;
          _0x55f619.name = "mouth";
          this._uiNode.addChild(_0x55f619, -0x2);
          _0x55f619.addComponent(cc.Sprite).spriteFrame = _0x116d24.GValue.Atlas_Enemy.getSpriteFrame("e_5_0");
          var _0x34b2de = new cc.Node();
          _0x34b2de.y = 0x14;
          _0x34b2de.name = "light";
          _0x55f619.addChild(_0x34b2de);
          _0x34b2de.addComponent(cc.Sprite).spriteFrame = _0x116d24.GValue.Atlas_Enemy.getSpriteFrame('e_5_light');
          var _0x463f9c = new cc.Node();
          _0x463f9c.anchorY = 0x1;
          _0x463f9c.y = -0xc;
          _0x463f9c.name = "mandible";
          this._uiNode.addChild(_0x463f9c);
          _0x463f9c.addComponent(cc.Sprite).spriteFrame = _0x116d24.GValue.Atlas_Enemy.getSpriteFrame("e_5_1");
          var _0x5f323a = new cc.Node();
          _0x5f323a.opacity = 0x0;
          _0x5f323a.y = -0x20;
          _0x5f323a.name = "eye";
          this._uiNode.addChild(_0x5f323a, 0x3);
          var _0x4a32e6 = new cc.Node();
          _0x4a32e6.x = -0x23;
          _0x4a32e6.scale = 1.2;
          _0x5f323a.addChild(_0x4a32e6);
          _0x4a32e6.addComponent(cc.Sprite).spriteFrame = _0x116d24.GValue.Atlas_Enemy.getSpriteFrame('eye_5');
          var _0x375bb9 = new cc.Node();
          _0x5f323a.addChild(_0x375bb9);
          _0x375bb9.scaleX = -1.1;
          _0x375bb9.scaleY = 1.2;
          _0x375bb9.x = 0x23;
          _0x375bb9.addComponent(cc.Sprite).spriteFrame = _0x116d24.GValue.Atlas_Enemy.getSpriteFrame('eye_5');
          var _0x4cf576 = new cc.Node();
          _0x4cf576.anchorY = 0x1;
          _0x4cf576.scaleY = 0x1e;
          _0x4cf576.name = "line";
          _0x4cf576.y = -0x1e;
          _0x4cf576.opacity = 0x0;
          this._uiNode.addChild(_0x4cf576, -0x3);
          _0x4cf576.addComponent(cc.Sprite).spriteFrame = _0x116d24.GValue.Atlas_Enemy.getSpriteFrame("e_5_line");
          var _0x476381 = this;
          (function () {
            var _0x1a6b03 = new cc.Node();
            _0x1a6b03.opacity = 0x0;
            _0x1a6b03.y = -0x14;
            _0x1a6b03.name = 'skel';
            _0x476381._uiNode.addChild(_0x1a6b03, 0x5);
            var _0x30efc9 = _0x1a6b03.addComponent(sp.Skeleton);
            cc.loader.loadRes("skel/skel_boss_fire_effect/skel_boss_fire_effect", sp.SkeletonData, function (_0x197185, _0x205373) {
              if (!_0x197185) {
                _0x30efc9.skeletonData = _0x205373;
                _0x30efc9.premultipliedAlpha = false;
              }
            });
          })();
        },
        'refreshBloodDisplay': function (_0x18ecf8) {
          _0x18ecf8 = Math.ceil(_0x18ecf8);
          this.bloodNum.setString(_0xa135c.DYTools.numberToString(_0x18ecf8));
        },
        'refreshSkinSpr': function (_0x536e14) {
          this._skinSpr.spriteFrame = _0x116d24.GValue.Atlas_Enemy.getSpriteFrame(_0x536e14);
        },
        'refreshSkinSprFrame': function (_0x4ea8ff) {
          this._skinSpr.spriteFrame = _0x4ea8ff;
        },
        'setSkinColor': function (_0x36f403) {
          this._skinSpr.node.color = _0x36f403;
          if (0x5 == this.skinId) {
            var _0x2fdf39 = this._uiNode.getChildByName('mouth');
            if (_0x2fdf39) {
              _0x2fdf39.color = _0x36f403;
            }
            var _0x370a7c = this._uiNode.getChildByName("mandible");
            if (_0x370a7c) {
              _0x370a7c.color = _0x36f403;
            }
          }
        },
        'setGoldEyeShow': function (_0x4e3b09) {
          for (var _0xf4d3dc = 0x0; _0xf4d3dc < this.goldEyeNum; _0xf4d3dc++) {
            this.goldEyeArr[_0xf4d3dc].opacity = _0x4e3b09 ? 0xff : 0x0;
          }
        },
        'die': function () {
          _0xa135c.DYTools.removeChildByName(this._uiNode, "mouth");
          _0xa135c.DYTools.removeChildByName(this._uiNode, 'mandible');
          _0xa135c.DYTools.removeChildByName(this._uiNode, "line");
          _0xa135c.DYTools.removeChildByName(this._uiNode, "eye");
          _0xa135c.DYTools.removeChildByName(this._uiNode, "skel");
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'CommonEnum': "CommonEnum",
      'CommonValue': "CommonValue",
      'EnemyBaseComponent': "EnemyBaseComponent",
      'Tools': "Tools",
      'Types': "Types"
    }],
    'EntityAddSys': [function (_0x231563, _0x14ef93, _0x4c28e1) {
      'use strict';
  
      cc._RF.push(_0x14ef93, 'a59a0oY7N5AlYR2LC+JxEGt', "EntityAddSys");
      var _0x1b3093 = _0x231563("Tools");
      var _0xca0cca = _0x231563("EntityEnemy");
      var _0x3d8af7 = _0x231563("CommonValue");
      var _0x3c8a6d = _0x231563("ConfigData");
      var _0x3e73bc = _0x231563('CommonConfig');
      var _0xd63615 = _0x231563("Types");
      var _0xebb3d4 = _0x231563("CEntitySnake");
      var _0xc4219a = _0x231563('GameData');
      var _0x216067 = _0x231563("EntityPlayerDeputyFollow");
      var _0x1d7688 = _0x231563('EntityDWKnife');
      var _0x466852 = _0x231563("CEntityBossCircle");
      var _0x277767 = _0x231563('CEntityBossFire');
      var _0x31f34f = _0x231563("CEntityBossElectr");
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'mapNode': cc.Node,
          'mapBg': cc.Node,
          'shieldNode': cc.Node,
          'mapWall': cc.Node,
          'shadowNode': cc.Node,
          'itemNode': cc.Node,
          'propNode': cc.Node,
          'enemyNode': cc.Node,
          'effectNode': cc.Node,
          'playerNode': cc.Node,
          'weaponNode': cc.Node,
          'heroPrefab': cc.Prefab,
          'heroFollowPrefab': cc.Prefab,
          'knifePrefab': cc.Prefab
        },
        'onLoad': function () {},
        'init': function (_0xbbfc13) {
          this.poolMgr = _0xbbfc13;
          this.player = null;
          this.enemyPool = [];
          this.knifePool = [];
          this.preLoadCall = null;
          this.preLoadOver = true;
          this.preLoadEnemyCount = 0x0;
          this.preLoadDropKnifeCount = 0x0;
        },
        'clear': function () {
          this.mapNode.removeAllChildren();
          this.mapWall.removeAllChildren();
          this.shadowNode.removeAllChildren();
          this.itemNode.removeAllChildren();
          this.propNode.removeAllChildren();
          this.enemyNode.removeAllChildren();
          this.weaponNode.removeAllChildren();
        },
        'update': function (_0x8fbadf) {
          if (!this.preLoadOver) {
            if (this.preLoadEnemyCount > 0x0) {
              for (var _0x147511 = 0x0; _0x147511 < 0xa; _0x147511++) {
                (_0x40a25f = this.poolMgr.getEnemy()).getComponent("EntityEnemy").preLoad();
                this.enemyPool.push(_0x40a25f);
                _0x40a25f.parent = this.enemyNode;
                _0x40a25f.position = cc.v2(-0x2710, -0x2710);
                _0x40a25f.active = false;
              }
              this.preLoadEnemyCount -= 0xa;
            } else {
              if (this.preLoadDropKnifeCount > 0x0) {
                for (_0x147511 = 0x0; _0x147511 < 0xa; _0x147511++) {
                  var _0x40a25f;
                  (_0x40a25f = this.poolMgr.getKnife()).parent = this.itemNode;
                  _0x40a25f.position = cc.v2(-0x2710, -0x2710);
                  this.knifePool.push(_0x40a25f);
                }
                this.preLoadDropKnifeCount -= 0xa;
              } else {
                this.preLoadOver = true;
                if (this.preLoadCall) {
                  this.preLoadCall();
                }
              }
            }
          }
        },
        'preLoadStart': function (_0x2d8783) {
          this.preLoadCall = _0x2d8783;
          this.preLoadEnemyCount = 0x3c;
          this.preLoadDropKnifeCount = 0x1e;
          this.preLoadOver = false;
        },
        '_addEntityPlayer': function (_0x26691d, _0x1c1b0b) {
          var _0x108d35 = _0xc4219a.TData.getCurSubFun();
          var _0x1ca2d5 = this.poolMgr.getPlayer();
          var _0x2338ea = _0x1ca2d5.getComponent('CEntityPlayer');
          _0x1ca2d5.parent = this.playerNode;
          _0x1ca2d5.position = cc.v2(_0x26691d, _0x1c1b0b);
          var _0x4a6603 = new cc.Node();
          _0x4a6603.parent = this.shadowNode;
          _0x4a6603.addComponent(cc.Sprite).spriteFrame = _0x3d8af7.GValue.Atlas_Shadow.getSpriteFrame("sh_" + _0x108d35);
          _0x1b3093.DYTools.addScript(_0x4a6603, 'ShadowOwnerComponent').init(_0x2338ea.node, _0x4a6603, 0x0);
          var _0x48eaa9 = this.poolMgr.getPlayerMainFollow();
          _0x48eaa9.parent = this.weaponNode;
          _0x48eaa9.zIndex = 0x1;
          var _0x30102f = _0x48eaa9.getComponent("CEntityFollowPlayer");
          _0x30102f.init(_0x2338ea);
          var _0x299343 = this.poolMgr.getPlayerDWFollow();
          _0x299343.parent = this.weaponNode;
          var _0x27dcc9 = _0x299343.getComponent(_0x216067);
          _0x2338ea.init(_0x30102f, _0x27dcc9, _0x108d35, _0x4a6603);
          _0x27dcc9.init(_0x2338ea);
          return _0x2338ea;
        },
        'addPlayer': function () {
          var _0x1005c8 = this._addEntityPlayer(0.5 * _0x3d8af7.GValue.Size_View.width, 0.33 * _0x3d8af7.GValue.Size_View.height);
          this.player = _0x1005c8;
          return _0x1005c8;
        },
        'addDWKnife': function (_0x965fc, _0x2b9491) {
          var _0x1ac4b1 = [];
          for (var _0x49df75 = 0x0; _0x49df75 < _0x965fc; _0x49df75++) {
            var _0x4e70ae = this.poolMgr.getDWKnife();
            var _0x7c3886 = _0x4e70ae.getComponent(_0x1d7688);
            var _0x450e70 = this.createDWShadow(_0x4e70ae, _0x2b9491);
            _0x7c3886.init(_0x2b9491, _0x450e70);
            _0x1ac4b1.push(_0x7c3886);
          }
          return _0x1ac4b1;
        },
        'createDWShadow': function (_0xe8d963, _0x2b4d76) {
          var _0x224ed3 = new cc.Node();
          _0x224ed3.parent = this.shadowNode;
          _0x224ed3.addComponent(cc.Sprite).spriteFrame = _0x3d8af7.GValue.Atlas_Shadow.getSpriteFrame("sdw_" + _0x2b4d76);
          _0x1b3093.DYTools.addScript(_0x224ed3, "ShadowOwnerComponent").init(_0xe8d963, _0x224ed3, 0x2);
          return _0x224ed3;
        },
        '_addEntityKnife': function (_0x16baa9, _0x42279c) {
          if (undefined === _0x42279c) {
            _0x42279c = false;
          }
          var _0x5609f1 = this.knifePool.pop();
          if (!(undefined != _0x5609f1 && null != _0x5609f1)) {
            (_0x5609f1 = this.poolMgr.getKnife()).parent = this.itemNode;
          }
          var _0x2aa1df = _0x5609f1.getComponent('CEntityKnife');
          _0x2aa1df.init(_0x16baa9, this.itemNode, _0x42279c);
          return _0x2aa1df;
        },
        'removeKnife': function (_0xefa3ef) {
          _0xefa3ef.position = cc.v2(-0x2710, -0x2710);
          this.knifePool.push(_0xefa3ef);
        },
        'AddKnife': function (_0x4b4f49, _0x3cea1e, _0x2b8570) {
          if (undefined === _0x3cea1e) {
            _0x3cea1e = -0x1;
          }
          if (undefined === _0x2b8570) {
            _0x2b8570 = true;
          }
          var _0x4d23ec = [];
          for (var _0x285653 = 0x0; _0x285653 < _0x4b4f49; _0x285653++) {
            var _0x103a0b = this._addEntityKnife(_0x3cea1e, _0x2b8570);
            _0x103a0b.node.position = cc.v2(_0x1b3093.DYTools.random_int(0x0, 0x2d0) - 0x168, _0x1b3093.DYTools.random_int(0x0, 0x500) - 0x280);
            _0x103a0b.node.angle = -_0x1b3093.DYTools.random_int(0x0, 0x168);
            _0x4d23ec[_0x285653] = _0x103a0b;
          }
          return _0x4d23ec;
        },
        '_createDropKnife': function (_0x4872a7) {
          var _0x27a12d = this.knifePool.pop();
          if (!(undefined != _0x27a12d && null != _0x27a12d)) {
            (_0x27a12d = this.poolMgr.getKnife()).parent = this.itemNode;
          }
          var _0x10c1d7 = _0x27a12d.getComponent("CEntityKnife");
          _0x10c1d7.initDrop(_0x4872a7);
          return _0x10c1d7;
        },
        'addDropKnife': function (_0x186bae, _0x28cad6, _0x4cec60) {
          var _0x540d5f = [];
          for (var _0x45da68 = 0x0; _0x45da68 < _0x186bae; _0x45da68++) {
            var _0x1d24fe = this._createDropKnife(_0x4cec60);
            _0x1d24fe.node.position = _0x28cad6;
            _0x1d24fe.node.angle = -_0x1b3093.DYTools.random_int(0x0, 0x168);
            _0x540d5f[_0x45da68] = _0x1d24fe;
          }
          return _0x540d5f;
        },
        'createMainKnifeShadow': function (_0x4a5754, _0x338fcc) {
          var _0x336258 = new cc.Node();
          _0x336258.parent = this.shadowNode;
          _0x336258.addComponent(cc.Sprite).spriteFrame = _0x3d8af7.GValue.Atlas_Shadow.getSpriteFrame("sw_" + _0x338fcc);
          _0x1b3093.DYTools.addScript(_0x336258, "ShadowOwnerComponent").init(_0x4a5754, _0x336258, 0x1);
          return _0x336258;
        },
        '_addEntityEnemy': function (_0x5ece49, _0x17f8dd, _0x490a86) {
          if (undefined === _0x17f8dd) {
            _0x17f8dd = cc.Vec2.ZERO;
          }
          if (undefined === _0x490a86) {
            _0x490a86 = 0x3;
          }
          if (_0x3d8af7.GValue.StageFailFinish) {
            _0x5ece49.blood *= _0x3d8af7.GValue.FailRatio;
          }
          var _0x3f1b63 = null;
          switch (this.getEnemyType(_0x5ece49)) {
            case _0xd63615.EnemyType.Normal:
              var _0x5cacc9 = this.enemyPool.pop();
              if (!(undefined != _0x5cacc9 && null != _0x5cacc9)) {
                (_0x3f1b63 = (_0x5cacc9 = this.poolMgr.getEnemy()).getComponent(_0xca0cca)).preLoad();
                _0x1b3093.DYTools.error('缓存怪不足');
              }
              _0x5cacc9.active = true;
              _0x3f1b63 = _0x5cacc9.getComponent(_0xca0cca);
              _0x5cacc9.parent = this.enemyNode;
              _0x5cacc9.zIndex = 0x0;
              _0x5cacc9.position = _0x17f8dd;
              if (_0x3f1b63.uiNode) {
                var _0x2713d5 = _0x3f1b63.uiNode.getChildByName("role_shine");
                if (_0x2713d5) {
                  _0x2713d5.destroyAllChildren();
                }
              }
              var _0x249fa5 = _0x3f1b63.shadow;
              if (_0x249fa5) {
                _0x249fa5.active = true;
                _0x249fa5.position = cc.v2(-0x3e8, -0x3e8);
                var _0xf606d2 = _0x249fa5.getComponent(cc.Sprite);
                if (!_0xf606d2) {
                  _0xf606d2 = _0x249fa5.addComponent(cc.Sprite);
                }
                _0xf606d2.spriteFrame = _0x3d8af7.GValue.Atlas_Shadow.getSpriteFrame("se_" + _0x5ece49.cData.imageId);
              } else {
                _0x249fa5 = this.createEnemyShadow(_0x5cacc9, _0x5ece49.cData.imageId, _0x490a86);
              }
              _0x3f1b63.init(_0x5ece49, this.player, _0x249fa5);
              break;
            case _0xd63615.EnemyType.Connect:
          }
          return _0x3f1b63;
        },
        '_removeEntityEnemy': function (_0x217fb8) {
          _0x217fb8.position = cc.v2(-0x2710, -0x2710);
          this.enemyPool.push(_0x217fb8);
        },
        'createEnemyShadow': function (_0x3b1fa6, _0x1336ae, _0x576d9b) {
          if (undefined === _0x576d9b) {
            _0x576d9b = 0x3;
          }
          var _0x5ca34c = new cc.Node();
          _0x5ca34c.parent = this.shadowNode;
          _0x5ca34c.addComponent(cc.Sprite).spriteFrame = _0x3d8af7.GValue.Atlas_Shadow.getSpriteFrame("se_" + _0x1336ae);
          _0x1b3093.DYTools.addScript(_0x5ca34c, "ShadowOwnerComponent").init(_0x3b1fa6, _0x5ca34c, _0x576d9b);
          return _0x5ca34c;
        },
        'createEnemy': function (_0x3d91ad) {
          var _0x27a0ca = new _0x3c8a6d.EnemyData();
          _0x27a0ca.id = _0x3d91ad.id;
          _0x27a0ca.blood = _0x1b3093.DYTools.random_int(_0x3d91ad.blood.x, _0x3d91ad.blood.y);
          _0x27a0ca.moveSpeed = _0x1b3093.DYTools.random_int(_0x3d91ad.speed.x, _0x3d91ad.speed.y);
          _0x27a0ca.scale = _0x1b3093.DYTools.random_int(_0x3d91ad.size.x, _0x3d91ad.size.y) / 0x64;
          _0x27a0ca.adjustDuration = _0x1b3093.DYTools.random_int(_0x3d91ad.adjustDuration.x, _0x3d91ad.adjustDuration.y) / 0xa;
          _0x27a0ca.cData = _0x3d91ad;
          return this._addEntityEnemy(_0x27a0ca);
        },
        'AddEnemy': function (_0x427fce, _0x445326, _0x5cf0dd) {
          if (undefined === _0x5cf0dd) {
            _0x5cf0dd = null;
          }
          var _0x4a3a51 = [];
          for (var _0x30a6fb = 0x0; _0x30a6fb < _0x445326; _0x30a6fb++) {
            var _0x2bf3c5 = new _0x3c8a6d.EnemyData();
            _0x2bf3c5.id = _0x427fce.id;
            _0x2bf3c5.blood = _0x1b3093.DYTools.random_int(_0x427fce.blood.x, _0x427fce.blood.y);
            _0x2bf3c5.moveSpeed = _0x1b3093.DYTools.random_int(_0x427fce.speed.x, _0x427fce.speed.y);
            _0x2bf3c5.scale = _0x1b3093.DYTools.random_int(_0x427fce.size.x, _0x427fce.size.y) / 0x64;
            _0x2bf3c5.adjustDuration = _0x1b3093.DYTools.random_int(_0x427fce.adjustDuration.x, _0x427fce.adjustDuration.y) / 0xa;
            _0x2bf3c5.cData = _0x427fce;
            var _0xdeaa87 = cc.Vec2.ZERO;
            if (_0x5cf0dd) {
              _0xdeaa87 = cc.v2(_0x1b3093.DYTools.random_int(_0x5cf0dd.xMin, _0x5cf0dd.xMax), _0x1b3093.DYTools.random_int(_0x5cf0dd.yMin, _0x5cf0dd.yMax));
            } else {
              var _0x31dc82 = _0x1b3093.DYTools.random_int(0x1, 0x3);
              _0xdeaa87 = 0x1 == _0x31dc82 ? cc.v2(_0x1b3093.DYTools.random_int(-0x50, 0x2d0), _0x1b3093.DYTools.random_int(0x5c8, 0x79e)) : 0x2 == _0x31dc82 ? cc.v2(_0x1b3093.DYTools.random_int(-0x1f4, -0xc8), _0x1b3093.DYTools.random_int(0x280, 0x500)) : cc.v2(_0x1b3093.DYTools.random_int(0x348, 0x474), _0x1b3093.DYTools.random_int(0x280, 0x500));
            }
            var _0x100038 = this._addEntityEnemy(_0x2bf3c5, _0xdeaa87);
            _0x100038.node.angle = -_0x1b3093.DYTools.random_int(0x0, 0x168);
            _0x4a3a51[_0x30a6fb] = _0x100038;
          }
          return _0x4a3a51;
        },
        'removeEnemy': function (_0x4d3e8c) {
          this._removeEntityEnemy(_0x4d3e8c);
        },
        'addBossFireEnemys': function (_0x361bbe, _0x2728f1, _0x559cf6) {
          var _0x43d2e8 = [];
          var _0x5b01b3 = _0x3e73bc.GConfig.getEnemyData(_0x361bbe);
          var _0x5b6a3d = new _0x3c8a6d.EnemyData();
          _0x5b6a3d.id = _0x5b01b3.id;
          _0x5b6a3d.blood = _0x1b3093.DYTools.random_int(_0x5b01b3.blood.x, _0x5b01b3.blood.y);
          _0x5b6a3d.moveSpeed = _0x1b3093.DYTools.random_int(_0x5b01b3.speed.x, _0x5b01b3.speed.y);
          _0x5b6a3d.scale = _0x1b3093.DYTools.random_int(_0x5b01b3.size.x, _0x5b01b3.size.y) / 0x64;
          _0x5b6a3d.adjustDuration = _0x1b3093.DYTools.random_int(_0x5b01b3.adjustDuration.x, _0x5b01b3.adjustDuration.y) / 0xa;
          _0x5b6a3d.cData = _0x5b01b3;
          var _0x336c05 = this._addEntityEnemy(_0x5b6a3d, _0x559cf6);
          _0x336c05.startGame();
          _0x336c05.setCurDir(_0x2728f1);
          _0x43d2e8.push(_0x336c05);
          _0x3d8af7.GValue.EntityWorld.addEnemys(_0x43d2e8);
        },
        'addContinueEnemys': function (_0x4db864, _0x23cd81) {
          var _0x55ff87 = [];
          var _0x16c5cd = _0x4db864.split('*');
          for (var _0x19c87f = 0x0; _0x19c87f < _0x16c5cd.length; _0x19c87f++) {
            var _0x164e2e = _0x1b3093.DYTools.stringToPoint(_0x16c5cd[_0x19c87f], ',');
            var _0x11f869 = _0x3e73bc.GConfig.getEnemyData(_0x164e2e.x);
            if (_0x11f869) {
              var _0x5e84d1 = 0x0;
              for (var _0x6d13d3 = this._addContinueEnemys(_0x11f869, _0x164e2e.y, _0x23cd81); _0x5e84d1 < _0x6d13d3.length; _0x5e84d1++) {
                var _0x5766a2 = _0x6d13d3[_0x5e84d1];
                _0x55ff87.push(_0x5766a2);
              }
            }
          }
          return _0x55ff87;
        },
        '_addContinueEnemys': function (_0x4c2822, _0x520d1b, _0x186ffb) {
          var _0x14c214 = [];
          for (var _0x449644 = 0x0; _0x449644 < _0x520d1b; _0x449644++) {
            var _0x16ce8c = new _0x3c8a6d.EnemyData();
            _0x16ce8c.id = _0x4c2822.id;
            _0x16ce8c.blood = _0x1b3093.DYTools.random_int(_0x4c2822.blood.x, _0x4c2822.blood.y);
            _0x16ce8c.moveSpeed = _0x1b3093.DYTools.random_int(_0x4c2822.speed.x, _0x4c2822.speed.y);
            _0x16ce8c.scale = _0x1b3093.DYTools.random_int(_0x4c2822.size.x, _0x4c2822.size.y) / 0x64;
            _0x16ce8c.adjustDuration = _0x1b3093.DYTools.random_int(_0x4c2822.adjustDuration.x, _0x4c2822.adjustDuration.y) / 0xa;
            _0x16ce8c.cData = _0x4c2822;
            var _0x3f5694 = cc.v2(_0x1b3093.DYTools.random_int(_0x186ffb.xMin, _0x186ffb.xMax), _0x1b3093.DYTools.random_int(_0x186ffb.yMin, _0x186ffb.yMax));
            switch (_0x3d8af7.GValue.EntityWorld.mapMgr.curDirTag) {
              case 0x1:
                _0x3f5694 = this.enemyNode.convertToNodeSpaceAR(cc.v2(_0x3d8af7.GValue.ViewCenter.x + _0x1b3093.DYTools.random_int(_0x186ffb.xMin, _0x186ffb.xMax), _0x3d8af7.GValue.Size_View.height + 0x96 + _0x1b3093.DYTools.random_int(0x5, 0x1e)));
                break;
              case 0x2:
                _0x3f5694 = this.enemyNode.convertToNodeSpaceAR(cc.v2(_0x3d8af7.GValue.ViewCenter.x + _0x1b3093.DYTools.random_int(_0x186ffb.xMin, _0x186ffb.xMax), -0x96 - _0x1b3093.DYTools.random_int(0x5, 0x1e)));
                break;
              case 0x3:
                _0x3f5694 = this.enemyNode.convertToNodeSpaceAR(cc.v2(-0x96 - _0x1b3093.DYTools.random_int(0x5, 0x1e), _0x3d8af7.GValue.ViewCenter.y + _0x1b3093.DYTools.random_int(_0x186ffb.yMin, _0x186ffb.yMax)));
                break;
              case 0x4:
                _0x3f5694 = this.enemyNode.convertToNodeSpaceAR(cc.v2(_0x3d8af7.GValue.Size_View.width + 0x96 + _0x1b3093.DYTools.random_int(0x5, 0x1e), _0x3d8af7.GValue.ViewCenter.y + _0x1b3093.DYTools.random_int(_0x186ffb.yMin, _0x186ffb.yMax)));
            }
            var _0x393b2d = this._addEntityEnemy(_0x16ce8c, _0x3f5694);
            _0x393b2d.node.angle = -_0x1b3093.DYTools.random_int(0x0, 0x168);
            _0x393b2d.startGame();
            _0x14c214.push(_0x393b2d);
          }
          return _0x14c214;
        },
        'addSleepEnemys': function (_0x23c25d, _0x14a371, _0x3f5fac) {
          var _0x5a27f9 = _0x3e73bc.GConfig.getEnemyData(_0x23c25d);
          var _0x1e2e30 = new _0x3c8a6d.EnemyData();
          _0x1e2e30.id = _0x5a27f9.id;
          _0x1e2e30.blood = _0x1b3093.DYTools.random_int(_0x5a27f9.blood.x, _0x5a27f9.blood.y);
          _0x1e2e30.moveSpeed = _0x1b3093.DYTools.random_int(_0x5a27f9.speed.x, _0x5a27f9.speed.y);
          _0x1e2e30.scale = _0x1b3093.DYTools.random_int(_0x5a27f9.size.x, _0x5a27f9.size.y) / 0x64;
          _0x1e2e30.adjustDuration = _0x1b3093.DYTools.random_int(_0x5a27f9.adjustDuration.x, _0x5a27f9.adjustDuration.y) / 0xa;
          _0x1e2e30.cData = _0x5a27f9;
          var _0xe8e1e2 = this._addEntityEnemy(_0x1e2e30, _0x14a371);
          _0xe8e1e2.node.angle = -_0x3f5fac;
          return _0xe8e1e2;
        },
        'addPauseEnemy': function (_0x334790, _0x5794be, _0x274b20, _0x12e85b) {
          var _0x88d634 = [];
          var _0x438027 = _0x3e73bc.GConfig.getEnemyData(_0x334790);
          for (var _0x34dafc = 0x0; _0x34dafc < _0x5794be; _0x34dafc++) {
            var _0xdd0f62 = new _0x3c8a6d.EnemyData();
            _0xdd0f62.id = _0x438027.id;
            _0xdd0f62.blood = _0x1b3093.DYTools.random_int(_0x438027.blood.x, _0x438027.blood.y);
            _0xdd0f62.moveSpeed = _0x1b3093.DYTools.random_int(_0x438027.speed.x, _0x438027.speed.y);
            _0xdd0f62.scale = _0x1b3093.DYTools.random_int(_0x438027.size.x, _0x438027.size.y) / 0x64;
            _0xdd0f62.adjustDuration = _0x1b3093.DYTools.random_int(_0x438027.adjustDuration.x, _0x438027.adjustDuration.y) / 0xa;
            _0xdd0f62.cData = _0x438027;
            var _0x35bb2c = cc.v2(0x0, 0x0);
            switch (_0x274b20) {
              case 0x1:
                _0x35bb2c = this.enemyNode.convertToNodeSpaceAR(cc.v2(_0x3d8af7.GValue.ViewCenter.x + _0x1b3093.DYTools.random_int(_0x12e85b[0x0].x, _0x12e85b[0x0].y), _0x3d8af7.GValue.Size_View.height + 0x96 + _0x1b3093.DYTools.random_int(_0x12e85b[0x1].x, _0x12e85b[0x1].y)));
                break;
              case 0x2:
                _0x35bb2c = this.enemyNode.convertToNodeSpaceAR(cc.v2(_0x3d8af7.GValue.ViewCenter.x + _0x1b3093.DYTools.random_int(_0x12e85b[0x0].x, _0x12e85b[0x0].y), -0x96 - _0x1b3093.DYTools.random_int(_0x12e85b[0x1].x, _0x12e85b[0x1].y)));
                break;
              case 0x3:
                _0x35bb2c = this.enemyNode.convertToNodeSpaceAR(cc.v2(-0x96 - _0x1b3093.DYTools.random_int(_0x12e85b[0x0].x, _0x12e85b[0x0].y), _0x3d8af7.GValue.ViewCenter.y + _0x1b3093.DYTools.random_int(_0x12e85b[0x1].x, _0x12e85b[0x1].y)));
                break;
              case 0x4:
                _0x35bb2c = this.enemyNode.convertToNodeSpaceAR(cc.v2(_0x3d8af7.GValue.Size_View.width + 0x96 + _0x1b3093.DYTools.random_int(_0x12e85b[0x0].x, _0x12e85b[0x0].y), _0x3d8af7.GValue.ViewCenter.y + _0x1b3093.DYTools.random_int(_0x12e85b[0x1].x, _0x12e85b[0x1].y)));
            }
            var _0x88d2b1 = this._addEntityEnemy(_0xdd0f62, _0x35bb2c);
            _0x88d634.push(_0x88d2b1);
            _0x88d2b1.startGame();
          }
          return _0x88d634;
        },
        'addBoss': function (_0x11f9cb, _0xe93a74, _0x3cb919, _0x24542f) {
          switch (_0x11f9cb) {
            case _0xd63615.BossType.Knife:
              this.addBossKnife(_0xe93a74, _0x3cb919);
              break;
            case _0xd63615.BossType.Snake:
              this.addBossSnake(_0xe93a74, _0x3cb919, _0x24542f);
              break;
            case _0xd63615.BossType.Circle:
              this.addBossCircle(_0xe93a74, _0x3cb919);
              break;
            case _0xd63615.BossType.Fire:
              this.addBossFire(_0xe93a74, _0x3cb919);
              break;
            case _0xd63615.BossType.Electr:
              this.addBossElectr(_0xe93a74, _0x3cb919);
          }
        },
        'addBossKnife': function (_0x4d02f0, _0x4e5f23) {
          if (undefined === _0x4e5f23) {
            _0x4e5f23 = null;
          }
          var _0x24a834 = _0x3e73bc.GConfig.getKnifeBossData(_0x4d02f0);
          var _0x579510 = _0x3e73bc.GConfig.getEnemyData(_0x24a834.enemyId);
          var _0x4522f2 = new _0x3c8a6d.EnemyData();
          _0x4522f2.id = _0x579510.id;
          _0x4522f2.blood = _0x1b3093.DYTools.random_int(_0x579510.blood.x, _0x579510.blood.y);
          _0x4522f2.moveSpeed = _0x1b3093.DYTools.random_int(_0x579510.speed.x, _0x579510.speed.y);
          _0x4522f2.scale = _0x1b3093.DYTools.random_int(_0x579510.size.x, _0x579510.size.y) / 0x64;
          _0x4522f2.adjustDuration = _0x1b3093.DYTools.random_int(_0x579510.adjustDuration.x, _0x579510.adjustDuration.y) / 0xa;
          _0x4522f2.cData = _0x579510;
          _0x4522f2.kData = _0x24a834;
          if (_0x3d8af7.GValue.StageFailFinish) {
            _0x4522f2.blood *= _0x3d8af7.GValue.FailRatio;
          }
          var _0x418a6f = this.poolMgr.getEnemy();
          var _0xe206fd = _0x418a6f.getComponent('EntityEnemy');
          _0xe206fd.preLoad();
          _0x418a6f.parent = this.enemyNode;
          _0x418a6f.zIndex = 0x2710;
          var _0x4ec148 = this.createEnemyShadow(_0x418a6f, _0x579510.imageId);
          _0xe206fd.init(_0x4522f2, this.player, _0x4ec148);
          var _0x2e001f = this.poolMgr.getFollowEnemy();
          _0x2e001f.parent = this.enemyNode;
          _0x2e001f.zIndex = 0x270f;
          var _0x1a6116 = _0x2e001f.getComponent("EntityFollowEnemy");
          _0x1a6116.init(_0xe206fd);
          _0xe206fd.actionAble = false;
          _0xe206fd.isBoss = true;
          _0xe206fd.node.angle = 0x0;
          _0xe206fd.setFollow(_0x1a6116);
          _0xe206fd.node.position = this.enemyNode.convertToNodeSpaceAR(_0x24a834.start);
          _0xe206fd.startGame();
          _0x3d8af7.GValue.EntityWorld.addEnemy(_0xe206fd);
          var _0x8eef3b = _0x24a834.knifeCount;
          var _0x52cebd = 0x0;
          for (var _0x2f29ad = this.AddKnife(_0x8eef3b, _0xd63615.EntityTag.Enemy); _0x52cebd < _0x2f29ad.length; _0x52cebd++) {
            var _0x5ab620 = _0x2f29ad[_0x52cebd];
            var _0x3a8d83 = new cc.Node();
            _0x3a8d83.name = "tail";
            _0x3a8d83.position = cc.v2(0x5, -0x3c);
            _0x3a8d83.angle = -0x5a;
            _0x3a8d83.addComponent(cc.Sprite).spriteFrame = _0x3d8af7.GValue.Atlas_Enemy.getSpriteFrame("ektail_1001");
            _0x5ab620.node.addChild(_0x3a8d83, -0x1);
            _0x3d8af7.GValue.EntityWorld.addKnife(_0x5ab620);
            _0x5ab620.changeSkin("ew1");
            _0x5ab620.node.emit("changeKnifeAttackGroup", "otherKnife");
            _0x5ab620.node.emit('changeTag', _0xd63615.EntityTag.Enemy);
            _0x5ab620.node.emit("updateState", _0xd63615.KnifeState.Init);
            _0xe206fd.followCtrl.addKnife(_0x5ab620.node);
          }
          var _0x35e981 = this.enemyNode.convertToNodeSpaceAR(_0x24a834.end);
          var _0x19018b = cc.moveTo(0x1, _0x35e981).easing(cc.easeIn(0x1));
          var _0x549f23 = cc.callFunc(function () {
            if (_0x4e5f23) {
              _0x4e5f23(_0xe206fd);
            }
          });
          var _0x1a809d = cc.sequence(_0x19018b, _0x549f23);
          _0xe206fd.node.runAction(_0x1a809d);
        },
        'addBossSnake': function (_0x9a0bde, _0x4a3d52, _0x41bd71) {
          var _0x283b0e = _0x3e73bc.GConfig.getMapBossSnakeData(_0x9a0bde);
          if (_0x283b0e) {
            var _0x28da35 = new cc.Node();
            var _0x1e50a2 = _0x28da35.addComponent(_0xebb3d4);
            _0x3d8af7.GValue.EntityWorld.SnakeEnemys[_0x9a0bde] = _0x1e50a2;
            _0x28da35.parent = this.enemyNode;
            _0x28da35.zIndex = 0x270f;
            _0x1e50a2.node.position = this.enemyNode.convertToNodeSpaceAR(cc.v2(0.5 * _0x3d8af7.GValue.Size_View.width, 0.5 * _0x3d8af7.GValue.Size_View.height));
            _0x1e50a2.init(_0x283b0e, _0x4a3d52, _0x41bd71);
          }
        },
        'addBossCircle': function (_0xb899dc, _0xb6d1e7) {
          if (undefined === _0xb6d1e7) {
            _0xb6d1e7 = null;
          }
          var _0x26aa61 = _0x3e73bc.GConfig.getMapBossCircleData(_0xb899dc);
          if (_0x26aa61) {
            var _0x5627cf = new cc.Node();
            var _0x5ed189 = _0x5627cf.addComponent(_0x466852);
            _0x3d8af7.GValue.EntityWorld.CircleEnemys[_0xb899dc] = _0x5ed189;
            _0x5627cf.parent = this.enemyNode;
            _0x5ed189.init(_0x26aa61, _0xb6d1e7);
            var _0x6dd4cf = cc.v2(0.5 * _0x3d8af7.GValue.Size_View.width, 0.5 * _0x3d8af7.GValue.Size_View.height);
            _0x5ed189.node.position = this.enemyNode.convertToNodeSpaceAR(_0x6dd4cf.add(_0x26aa61.start_pos));
          } else if (_0xb6d1e7) {
            _0xb6d1e7();
          }
        },
        'addBossFire': function (_0x180f56, _0x333054, _0x1a5b0c) {
          if (undefined === _0x333054) {
            _0x333054 = null;
          }
          if (undefined === _0x1a5b0c) {
            _0x1a5b0c = null;
          }
          var _0x5a6223 = _0x3e73bc.GConfig.getMapBossFireData(_0x180f56);
          if (_0x5a6223) {
            var _0x2baebd = new cc.Node();
            var _0x2b7460 = _0x2baebd.addComponent(_0x277767);
            _0x3d8af7.GValue.EntityWorld.FireEnemys[_0x180f56] = _0x2b7460;
            _0x2baebd.parent = this.mapWall;
            _0x2baebd.zIndex = 0x3e7;
            _0x2b7460.node.position = this.enemyNode.convertToNodeSpaceAR(cc.v2(0.5 * _0x3d8af7.GValue.Size_View.width, 0.5 * _0x3d8af7.GValue.Size_View.height));
            _0x2b7460.init(_0x5a6223, _0x333054, _0x1a5b0c);
            var _0x364c9d = cc.v2(0.5 * _0x3d8af7.GValue.Size_View.width, 0.5 * _0x3d8af7.GValue.Size_View.height);
            _0x2b7460.node.position = this.enemyNode.convertToNodeSpaceAR(_0x364c9d.add(_0x5a6223.end_pos));
          } else if (_0x333054) {
            _0x333054();
          }
        },
        'addBossElectr': function (_0x449a15, _0x3c2368, _0x1acc37) {
          if (undefined === _0x3c2368) {
            _0x3c2368 = null;
          }
          if (undefined === _0x1acc37) {
            _0x1acc37 = null;
          }
          var _0x30bd31 = _0x3e73bc.GConfig.getMapBossElectrData(_0x449a15);
          if (_0x30bd31) {
            var _0x37f721 = new cc.Node();
            var _0x49bd4c = _0x37f721.addComponent(_0x31f34f);
            _0x37f721.parent = this.enemyNode;
            _0x37f721.zIndex = 0x3e7;
            _0x49bd4c.node.position = this.enemyNode.convertToNodeSpaceAR(cc.v2(0.5 * _0x3d8af7.GValue.Size_View.width, 0.5 * _0x3d8af7.GValue.Size_View.height));
            _0x49bd4c.init(_0x30bd31, _0x3c2368);
            var _0xb53a9c = cc.v2(0.5 * _0x3d8af7.GValue.Size_View.width, 0.5 * _0x3d8af7.GValue.Size_View.height);
            _0x49bd4c.node.position = this.enemyNode.convertToNodeSpaceAR(_0xb53a9c.add(_0x30bd31.target_pos));
          } else if (_0x3c2368) {
            _0x3c2368();
          }
        },
        'addProp': function (_0x49acf1) {
          var _0x1889f9 = this.poolMgr.getProp();
          var _0x36ebe6 = _0x1889f9.getComponent("EntityProp");
          _0x1889f9.parent = this.propNode;
          _0x36ebe6.create(_0x49acf1);
          return _0x36ebe6;
        },
        'removeProp': function (_0x2b47f6) {
          this.poolMgr.putProp(_0x2b47f6);
        },
        '_addEntityCollisionEffect': function (_0x19f896) {
          var _0x5e9bfd = this.poolMgr.getCollEffect();
          _0x5e9bfd.parent = this.effectNode;
          var _0x3b9677 = this.effectNode.convertToNodeSpaceAR(_0x19f896);
          _0x5e9bfd.position = _0x3b9677;
          return _0x5e9bfd;
        },
        'addCollisionEffect': function (_0x23a02b) {
          return this._addEntityCollisionEffect(_0x23a02b);
        },
        'getEnemyType': function (_0x147012) {
          var _0x4f0613 = [];
          var _0x35939e = _0x147012.cData.attr;
          for (var _0x3e40b1 = 0x0; _0x3e40b1 < _0x35939e.length; _0x3e40b1++) {
            var _0x20218f = _0x35939e[_0x3e40b1];
            var _0x56eb9e = _0x3e73bc.GConfig.getAttrData(_0x20218f);
            if (_0x56eb9e) {
              _0x4f0613.push(_0x56eb9e.attr);
            }
          }
          return _0x1b3093.DYTools.arrContain(_0x4f0613, _0xd63615.EnemyAttr.Connect) ? _0xd63615.EnemyType.Connect : _0xd63615.EnemyType.Normal;
        }
      });
      cc._RF.pop();
    }, {
      'CEntityBossCircle': 'CEntityBossCircle',
      'CEntityBossElectr': "CEntityBossElectr",
      'CEntityBossFire': "CEntityBossFire",
      'CEntitySnake': "CEntitySnake",
      'CommonConfig': 'CommonConfig',
      'CommonValue': "CommonValue",
      'ConfigData': "ConfigData",
      'EntityDWKnife': "EntityDWKnife",
      'EntityEnemy': "EntityEnemy",
      'EntityPlayerDeputyFollow': "EntityPlayerDeputyFollow",
      'GameData': "GameData",
      'Tools': "Tools",
      'Types': 'Types'
    }],
    'EntityBlock': [function (_0x4e6ad8, _0x45e9f0, _0x36cff0) {
      'use strict';
  
      cc._RF.push(_0x45e9f0, '7d6a1ye7/dObYpxCQJ7IL+S', 'EntityBlock');
      var _0x478807 = _0x4e6ad8("CEntityBase");
      var _0x1a9b4f = _0x4e6ad8("CommonValue");
      cc.Class({
        'extends': _0x478807,
        'properties': {
          'skinSpr': cc.Sprite,
          'colNode': cc.Node,
          'colCollider': cc.BoxCollider
        },
        'ctor': function () {
          this.width = 0x0;
          this.height = 0x0;
        },
        'init': function (_0x10018c, _0x2bbe04) {
          this.colCollider.tag = 0x65;
          this.node.scaleX = _0x10018c.sx;
          this.node.scaleY = _0x10018c.sy;
          this.node.angle = _0x10018c.rt;
          this.skinSpr.spriteFrame = _0x1a9b4f.GValue.Atlas_Wall.getSpriteFrame('b' + _0x2bbe04 + '_' + _0x10018c.id);
          var _0x4fd90c = cc.Vec2.ZERO;
          switch (_0x10018c.id) {
            case 0x1:
              this.width = 0x182;
              this.height = 0x6a;
              _0x4fd90c = cc.v2(-0x7, 0x7);
              break;
            case 0x2:
              this.width = 0x100;
              this.height = 0x6a;
              _0x4fd90c = cc.v2(-0x7, 0x7);
              break;
            case 0x3:
              this.width = 0x7e;
              this.height = 0x6a;
              _0x4fd90c = cc.v2(-0x7, 0x7);
              break;
            case 0x4:
              this.width = 0x3f;
              this.height = 0x1b4;
              _0x4fd90c = cc.v2(-0x8, 0xa);
              break;
            case 0x5:
              this.width = 0x3f;
              this.height = 0x12e;
              _0x4fd90c = cc.v2(-0x8, 0xa);
              break;
            case 0x6:
              this.width = 0x3f;
              this.height = 0xac;
              _0x4fd90c = cc.v2(-0x8, 0xa);
          }
          this.colCollider.node.position = _0x4fd90c;
          this.colCollider.size.width = this.width;
          this.colCollider.size.height = this.height;
        }
      });
      cc._RF.pop();
    }, {
      'CEntityBase': "CEntityBase",
      'CommonValue': 'CommonValue'
    }],
    'EntityDWBase': [function (_0x459d37, _0x5a3f23, _0x5f15c3) {
      'use strict';
  
      cc._RF.push(_0x5a3f23, "d395fhLhd9LCquOkgxWxKnL", "EntityDWBase");
      var _0x21f6ec = _0x459d37("CEntityBase");
      cc.Class({
        'extends': _0x21f6ec
      });
      cc._RF.pop();
    }, {
      'CEntityBase': 'CEntityBase'
    }],
    'EntityDWKnife': [function (_0x3342e3, _0x8ece85, _0xdf9128) {
      'use strict';
  
      cc._RF.push(_0x8ece85, "955b2fpZBdOoId49j0bd/yx", 'EntityDWKnife');
      var _0x38495e = _0x3342e3("EntityDWBase");
      var _0x262642 = _0x3342e3('CNodeCollider');
      var _0x7ac3ec = _0x3342e3("Tools");
      var _0x2416df = _0x3342e3("CommonValue");
      var _0x367f3f = _0x3342e3('Types');
      cc.Class({
        'extends': _0x38495e,
        'properties': {
          'spr_knife': cc.Sprite,
          'node_collision': cc.Node
        },
        'ctor': function () {
          this.shadow = null;
        },
        'init': function (_0xff3f7b, _0x2f7615) {
          this.shadow = _0x2f7615;
          this.colliderCom = _0x7ac3ec.DYTools.addScript(this.node_collision, _0x262642);
          this.colliderCom.init(this.node, true);
          this.spr_knife.spriteFrame = _0x2416df.GValue.Atlas_Game.getSpriteFrame('dw' + _0xff3f7b);
          switch (_0xff3f7b) {
            case _0x367f3f.DWType.Knife:
              this.node_collision.angle = -0x46;
              this.spr_knife.node.angle = -0x46;
              break;
            case _0x367f3f.DWType.Laser:
              this.spr_knife.node.anchorX = 0x1;
              this.node_collision.y = 0x32;
              this.node_collision.angle = 0x5a;
              this.spr_knife.node.angle = 0x5a;
              break;
            case _0x367f3f.DWType.Ice:
            case _0x367f3f.DWType.Fire:
            case _0x367f3f.DWType.Electricity:
              this.node_collision.angle = -0x5a;
              this.spr_knife.node.angle = -0x5a;
          }
        }
      });
      cc._RF.pop();
    }, {
      'CNodeCollider': 'CNodeCollider',
      'CommonValue': "CommonValue",
      'EntityDWBase': "EntityDWBase",
      'Tools': "Tools",
      'Types': "Types"
    }],
    'EntityEnemy': [function (_0x4b56bd, _0xdcc6de, _0x1a3b94) {
      'use strict';
  
      cc._RF.push(_0xdcc6de, "6c74feV+mpMnZzilID2YtAH", "EntityEnemy");
      var _0x1e1c31 = _0x4b56bd("Tools");
      var _0x30217b = _0x4b56bd('CommonValue');
      var _0x3e67dd = _0x4b56bd('Types');
      var _0x55ff17 = _0x4b56bd("CommonConfig");
      var _0x144ab7 = _0x4b56bd('CommonAudio');
      var _0xfa8e9b = _0x4b56bd("GameData");
      var _0x3cc543 = _0x4b56bd("CommonSdk");
      _0x4b56bd("EnemyUIComponent");
      var _0x4bdfb7 = _0x4b56bd("EnemyBase");
      var _0x5bac82 = _0x4b56bd('EnemyCollisionWallListener');
      cc.Class({
        'extends': _0x4bdfb7,
        'properties': {
          'uiNode': cc.Node,
          'animNode': cc.Node,
          'colliderNode': cc.Node,
          'roleSpr': cc.Sprite,
          'bloodNum': cc.Node,
          'hurtLightNode': cc.Node,
          'knifeLightNode': cc.Node,
          'dieSprArr': cc.Sprite,
          'pf_num': cc.Prefab
        },
        'ctor': function () {
          this.radius = 0x0;
          this.isDead = false;
          this.isDieOver = true;
          this.skinColor = cc.color();
          this._curBlood = 0xa;
          this.actionAble = true;
          this.moveAble = true;
          this.isBoss = false;
          this.isItem = false;
        },
        'onLoad': function () {
          this.type = _0x3e67dd.EnemyType.Normal;
        },
        'preLoad': function () {
          this._animCom = _0x1e1c31.DYTools.addScript(this.node, "EnemyAnimComponent");
          this._animCom.preLoad();
          this.uiCom = _0x1e1c31.DYTools.addScript(this.node, "EnemyUIComponent");
          this.uiCom.preLoad();
          _0x1e1c31.DYTools.addScript(this.colliderNode, "CNodeCollider").init(this.node, true, false);
          _0x1e1c31.DYTools.addScript(this.node, "EnemyStateComponent");
          _0x1e1c31.DYTools.addScript(this.node, 'EnemyAttrComponent');
          _0x1e1c31.DYTools.addScript(this.node, "EnemyMoveFix");
          _0x1e1c31.DYTools.addScript(this.node, "EnemyAnimComponent");
          _0x1e1c31.DYTools.addScript(this.node, "EnemyDropComponent");
          _0x1e1c31.DYTools.addScript(this.node, 'EnemyBuffComponent');
        },
        'resetAttr': function () {
          this.skinColor = cc.color(0xff, 0xff, 0xff);
          this.isDead = false;
          this.actionAble = true;
          this.moveAble = true;
          this.isBoss = false;
          this.uiNode.active = true;
          this.uiNode.scale = 0x1;
          switch (this.data.cData.imageId) {
            case 0x68:
              this.skinColor = cc.color(0xc3, 0x34, 0x34);
              break;
            case 0x6a:
              this.skinColor = cc.color(0xff, 0xd6, 0x27);
              break;
            case 0xc8:
            case 0xc9:
            case 0xca:
            case 0xcb:
              this.skinColor = cc.color(0xf, 0x94, 0xff);
              break;
            case 0x3e9:
              this.skinColor = cc.color(0xf5, 0x87, 0xe);
              break;
            case 0x3ea:
              this.skinColor = cc.color(0xff, 0x52, 0x83);
          }
        },
        'init': function (_0x21d87d, _0x528a4e, _0x8ce2f2) {
          this.data = _0x21d87d;
          this.resetAttr();
          this.player = _0x528a4e;
          this.shadow = _0x8ce2f2;
          this._curBlood = this.data.blood;
          this.node.scale = this.data.scale;
          var _0xa23d9d = this.getColRadiusForImage(this.data.cData.imageId);
          this.setRadius(_0xa23d9d);
          this.colliderNode.getComponent(cc.CircleCollider).radius = _0xa23d9d;
          var _0x8f8b9c = 0x0;
          for (var _0x62ad99 = this.dieSprArr; _0x8f8b9c < _0x62ad99.length; _0x8f8b9c++) {
            _0x62ad99[_0x8f8b9c].spriteFrame = _0x30217b.GValue.Atlas_Enemy.getSpriteFrame("die3");
          }
          if (this.data.cData.moveType == _0x3e67dd.EnemyMoveType.SpeedUp) {
            this.moveCom = _0x1e1c31.DYTools.addScript(this.node, "EnemySpeedUpMoveComponent");
          } else {
            this.moveCom = _0x1e1c31.DYTools.addScript(this.node, 'EnemyActionMoveComponent');
          }
          this.attrCom = _0x1e1c31.DYTools.addScript(this.node, "EnemyAttrComponent");
          this.attrCom.init(this);
          this.uiCom.init(this, this.data.cData.imageId, this.uiNode, this.bloodNum, this.roleSpr);
          _0x1e1c31.DYTools.addScript(this.colliderNode, "CNodeCollider").init(this.node, true, false);
          this.stateCom = _0x1e1c31.DYTools.addScript(this.node, "EnemyStateComponent");
          this.stateCom.init(this);
          this.moveFixCom = _0x1e1c31.DYTools.addScript(this.node, "EnemyMoveFix");
          this.moveFixCom.init(this);
          if (this.data.cData.moveType == _0x3e67dd.EnemyMoveType.Elastic) {
            _0x1e1c31.DYTools.addScript(this.colliderNode, 'EnemyCollisionWallListener');
          } else {
            this.colliderNode.removeComponent(_0x5bac82);
          }
          _0x1e1c31.DYTools.addScript(this.colliderNode, 'EnemyCollisionBlockListener');
          this._animCom = _0x1e1c31.DYTools.addScript(this.node, "EnemyAnimComponent");
          this._animCom.init(this, this.data, this.roleSpr.node, this.bloodNum, this.hurtLightNode, this.knifeLightNode, this.node.getChildByName("anim").getChildByName('die'));
          this._dropCom = _0x1e1c31.DYTools.addScript(this.node, "EnemyDropComponent");
          this._dropCom.init(this.data, this.player);
          this.buffCom = _0x1e1c31.DYTools.addScript(this.node, 'EnemyBuffComponent');
          this.buffCom.init(this);
          this.initRole();
          this.uiCom.refreshBloodDisplay(this._curBlood);
          this.refreshSkinColor();
          this.node.on("hurt", this.hurt, this);
        },
        'setFollow': function (_0x56d1e2) {
          this.followWeapon = _0x56d1e2;
          this.followCtrl = _0x1e1c31.DYTools.addScript(this.node, "BossKnivesCtrl");
          this.followCtrl.init(this, _0x56d1e2);
          this.logicEnemy = _0x1e1c31.DYTools.addScript(this.node, "CLoginEnemy");
          this.logicEnemy.init(this);
          this.knifeDropCtrl = _0x1e1c31.DYTools.addScript(this.node, "BossKnivesDropCtrl");
          this.knifeDropCtrl.init(this);
        },
        'setRadius': function (_0x340b9c) {
          this.radius = _0x340b9c * this.node.scale;
          this.colliderNode.getComponent(cc.CircleCollider).radius = _0x340b9c;
        },
        'initRole': function () {
          if (this.hasAttribution(_0x3e67dd.EnemyAttr.Gold)) {
            var _0x75b80c = new cc.Node();
            _0x75b80c.y = this.roleSpr.node.y;
            _0x75b80c.name = 'gold';
            this.uiNode.addChild(_0x75b80c);
            var _0x300b8f = new cc.Node();
            _0x75b80c.addChild(_0x300b8f);
            _0x300b8f.y = 0x46;
            _0x300b8f.addComponent(cc.Sprite).spriteFrame = _0x30217b.GValue.Atlas_Enemy.getSpriteFrame("e_101_0");
            var _0x19e08d = new cc.Node();
            _0x75b80c.addChild(_0x19e08d);
            _0x19e08d.y = -0x2c;
            _0x19e08d.addComponent(cc.Sprite).spriteFrame = _0x30217b.GValue.Atlas_Enemy.getSpriteFrame("eye_101");
            _0x75b80c.active = false;
            var _0x313ca1 = cc.v2(0x3a, 0x50).add(this.roleSpr.node.position);
            var _0x1c8c9b = new cc.Node();
            _0x1c8c9b.position = _0x313ca1;
            _0x1c8c9b.name = "sleep1";
            this.node.addChild(_0x1c8c9b);
            _0x1c8c9b.addComponent(cc.Sprite).spriteFrame = _0x30217b.GValue.Atlas_Enemy.getSpriteFrame('fz');
            var _0x429555 = cc.scaleTo(0.7089, 1.65);
            var _0x2e5722 = cc.fadeOut(0.7089);
            var _0x569ee1 = cc.moveBy(0.7089, cc.v2(0x2e, 0x1f));
            var _0x520572 = cc.spawn(_0x429555, _0x2e5722, _0x569ee1);
            var _0x305c75 = cc.delayTime(0.1251);
            var _0x447a3e = cc.fadeIn(0x0);
            var _0x428844 = cc.scaleTo(0x0, 0x1);
            var _0x28a30b = cc.place(_0x313ca1);
            var _0x31eb7b = cc.spawn(_0x428844, _0x447a3e, _0x28a30b);
            var _0x3c44be = cc.sequence(_0x31eb7b, _0x520572, _0x305c75);
            _0x1c8c9b.runAction(cc.repeatForever(_0x3c44be));
            var _0x299d46 = this;
            (function () {
              var _0x33f417 = cc.v2(0x3a, 0x50).add(_0x299d46.roleSpr.node.position);
              var _0x222794 = new cc.Node();
              _0x222794.position = cc.v2(0x3a, 0x4e).add(_0x299d46.roleSpr.node.position);
              _0x222794.name = "sleep2";
              _0x222794.opacity = 0xff;
              _0x299d46.node.addChild(_0x222794);
              _0x222794.addComponent(cc.Sprite).spriteFrame = _0x30217b.GValue.Atlas_Enemy.getSpriteFrame('fz');
              var _0x30ea01 = cc.scaleTo(0.7089, 1.65);
              var _0x259c4c = cc.fadeOut(0.7089);
              var _0x2bd316 = cc.moveBy(0.7089, cc.v2(0x2e, 0x1f));
              var _0x14c080 = cc.spawn(_0x30ea01, _0x259c4c, _0x2bd316);
              var _0x1e74ae = cc.fadeIn(0x0);
              var _0x2eaf9d = cc.place(_0x33f417);
              var _0x112fa3 = cc.scaleTo(0x0, 0x1);
              var _0xa558ff = cc.spawn(_0x112fa3, _0x1e74ae, _0x2eaf9d);
              var _0x231dab = cc.sequence(_0xa558ff, _0x14c080, cc.delayTime(0.1251));
              _0x222794.runAction(cc.sequence(cc.delayTime(0.41700000000000004), cc.callFunc(function () {
                _0x222794.stopAllActions();
                _0x222794.runAction(cc.repeatForever(_0x231dab));
              })));
            })();
          }
        },
        'onAnimCompleted': function (_0x4a0ad5) {
          this._animCom.onAnimCompleted(_0x4a0ad5);
        },
        'startGame': function () {
          this.moveCom.init(this.player, this, this.data);
          if (this.followCtrl) {
            this.followCtrl.node.emit('startGame');
          }
        },
        'changeGroup': function (_0x224908) {
          this.colliderNode.group = _0x224908;
        },
        'awake': function (_0xa7226b) {
          if (undefined === _0xa7226b) {
            _0xa7226b = null;
          }
          if (_0xa7226b) {
            this.player = _0xa7226b;
          }
          this._dropCom.init(this.data, this.player);
          this.moveCom.init(this.player, this, this.data);
          this.node.emit('updateState', _0x3e67dd.EnemyAction.Awaking);
          if (this.hasAttribution(_0x3e67dd.EnemyAttr.Gold)) {
            var _0x485ea6 = this;
            var _0x1cffa1 = cc.scaleTo(0.0834, 1.1);
            var _0x5a5a10 = cc.moveTo(0.0834, cc.v2(0x1, -0xa));
            var _0x1aaba3 = cc.spawn(_0x1cffa1, _0x5a5a10);
            var _0x397dce = cc.scaleTo(0.0834, 0x1);
            var _0x25f799 = cc.moveTo(0.0834, cc.v2(-0x10, 0x11));
            var _0x39337e = cc.spawn(_0x397dce, _0x25f799);
            var _0x3e2ad3 = cc.moveTo(0.0834, cc.v2(0x1, -0x5));
            var _0x2be015 = cc.moveTo(0.1251, cc.v2(0x0, 0x0));
            var _0x5a37bb = cc.delayTime(0.0834);
            var _0x5b69db = cc.callFunc(function () {
              var _0x56ab5b = _0x485ea6.uiNode.getChildByName('gold');
              if (_0x56ab5b) {
                _0x56ab5b.active = true;
              }
              var _0x158031 = _0x485ea6.node.getChildByName("black");
              if (_0x158031) {
                _0x158031.removeFromParent();
              }
              var _0x5af794 = _0x485ea6.node.getChildByName('sleep1');
              if (_0x5af794) {
                _0x5af794.removeFromParent();
              }
              var _0x190b05 = _0x485ea6.node.getChildByName('sleep2');
              if (_0x190b05) {
                _0x190b05.removeFromParent();
              }
              _0x485ea6.uiNode.scale = 0.75;
              _0x485ea6.uiNode.opacity = 0xff;
            });
            var _0x50b542 = cc.scaleTo(0.1251, 1.15);
            var _0x446718 = cc.scaleTo(0.1251, 0x1);
            var _0x57f84a = cc.callFunc(function () {
              _0x485ea6.node.emit("updateState", _0x3e67dd.EnemyAction.Action);
              _0x485ea6._animCom.addAnimAct(_0x3e67dd.EnemyAnim.Idle);
            });
            var _0x5a56af = cc.sequence(_0x1aaba3, _0x39337e, _0x3e2ad3, _0x2be015, _0x5a37bb, _0x5b69db, _0x50b542, _0x446718, cc.delayTime(0.2919), _0x57f84a);
            this.uiNode.runAction(_0x5a56af);
            var _0x5b7705 = cc.v2(-0x3c, 0x58);
            var _0x1522f7 = new cc.Node();
            this.node.addChild(_0x1522f7);
            _0x1522f7.position = _0x5b7705.add(cc.v2(-0x1, -0x1a));
            _0x1522f7.addComponent(cc.Sprite).spriteFrame = _0x30217b.GValue.Atlas_Enemy.getSpriteFrame('icon_101');
            _0x1522f7.scale = 0.4;
            _0x1522f7.opacity = 0x0;
            _0x1cffa1 = cc.scaleTo(0.1251, 1.7);
            _0x5a5a10 = cc.moveTo(0.1251, _0x5b7705.add(cc.v2(0x2, 0x13)));
            _0x1aaba3 = cc.spawn(_0x1cffa1, _0x5a5a10);
            _0x397dce = cc.scaleTo(0.20850000000000002, 0x1);
            _0x25f799 = cc.moveTo(0.20850000000000002, _0x5b7705);
            _0x39337e = cc.spawn(_0x397dce, _0x25f799);
            var _0x2b4b59 = cc.scaleTo(0.20850000000000002, 1.5);
            _0x3e2ad3 = cc.moveTo(0.20850000000000002, _0x5b7705.add(cc.v2(0x1, 0x10)));
            var _0x33218d = cc.spawn(_0x2b4b59, _0x3e2ad3);
            _0x5a56af = cc.sequence(cc.delayTime(0.0834), cc.fadeIn(0x0), _0x1aaba3, _0x39337e, _0x33218d, _0x39337e.clone(), cc.removeSelf());
            _0x1522f7.runAction(_0x5a56af);
          }
        },
        'updateGameLogic': function (_0x8329d6) {
          if (!this.isDieOver) {
            this._animCom.updateGameLogic(_0x8329d6);
          }
          if (!this.isDead) {
            if (this.actionAble) {
              this.moveCom.updateGameLogic(_0x8329d6);
              this.stateCom.updateGameLogic(_0x8329d6);
              this.attrCom.updateGameLogic(_0x8329d6);
              this._animCom.updateGameLogic(_0x8329d6);
              this.moveFixCom.updateGameLogic(_0x8329d6);
              this.buffCom.updateGameLogic(_0x8329d6);
            }
            if (this.logicEnemy) {
              this.logicEnemy.updateLogic(_0x8329d6);
            }
            if (this.followWeapon) {
              this.followWeapon.updateGameLogic(_0x8329d6);
            }
          }
        },
        'refreshSkinColor': function () {
          if (this.data.cData.imageId < 0x64) {
            this.skinColor = _0x30217b.GValue.EntityWorld.getSkinColor(this._curBlood);
            this.uiCom.setSkinColor(this.skinColor);
          }
        },
        'hurt': function (_0x25163c, _0x54a6ba, _0x1be446) {
          if (undefined === _0x1be446) {
            _0x1be446 = null;
          }
          if (!this.player.isDead && !this.isDead && !this.hasAttribution(_0x3e67dd.EnemyAttr.bulScreen) && this.stateCom.state == _0x3e67dd.EnemyAction.Action) {
            var _0x270fc4 = _0x3e67dd.EnemyHurtState.Normal;
            var _0x501b1b = this.moveCom.curDir;
            if (0x0 == _0x25163c) {
              var _0x4f28f0 = this.player.radius;
              var _0x45e21f = this.node.position;
              var _0x27dba9 = this.player.node.position.sub(_0x30217b.GValue.EntityWorld.mapMgr.mapTop.position);
              if (this.isItem) {
                _0x27dba9 = this.node.parent.convertToNodeSpaceAR(this.player.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0)));
              }
              var _0x5eff92 = (_0xe581ee = _0x45e21f.sub(_0x27dba9)).normalize().mul(_0x4f28f0);
              var _0x46f923 = _0x27dba9.add(_0x5eff92).sub(this.node.position);
              _0x46f923 = _0x46f923.rotate(cc.misc.degreesToRadians(this.node.angle));
              var _0x5b5e7b = _0x501b1b.signAngle(_0x27dba9.sub(_0x45e21f));
              this._animCom.addAnimAct(_0x3e67dd.EnemyAnim.HurtNormal, _0x46f923, cc.misc.radiansToDegrees(_0x5b5e7b));
              _0x144ab7.GAudio.playEnemyHurtSound();
              if (!this.isItem) {
                this.moveCom.hurt(_0x270fc4);
              }
            } else {
              if (0x1 == _0x25163c) {
                _0x144ab7.GAudio.playEnemyHurtSound();
                this._animCom.playDeputyHurtAnim(cc.v2(0x0, 0x0));
                switch (_0xfa8e9b.TData.getCurSubFun()) {
                  case _0x3e67dd.DWType.Knife:
                    _0x270fc4 = _0x3e67dd.EnemyHurtState.Knife;
                    break;
                  case _0x3e67dd.DWType.Laser:
                    _0x270fc4 = _0x3e67dd.EnemyHurtState.Laser;
                    break;
                  case _0x3e67dd.DWType.Ice:
                    _0x270fc4 = _0x3e67dd.EnemyHurtState.Frozen;
                    break;
                  case _0x3e67dd.DWType.Fire:
                    _0x270fc4 = _0x3e67dd.EnemyHurtState.Fire;
                }
                if (!this.isItem) {
                  this.moveCom.hurt(_0x270fc4);
                }
              } else {
                if (0x2 == _0x25163c) {
                  switch (_0xfa8e9b.TData.getCurSubFun()) {
                    case _0x3e67dd.DWType.Laser:
                      _0x45e21f = this.node.position;
                      _0x27dba9 = this.player.node.position.sub(_0x30217b.GValue.EntityWorld.mapMgr.mapTop.position);
                      if (this.isItem) {
                        _0x27dba9 = this.node.convertToNodeSpaceAR(this.player.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0)));
                      }
                      _0x5b5e7b = this.moveCom.curDir.signAngle(_0x27dba9.sub(_0x45e21f));
                      var _0xe581ee = this.player.getPositionForMap().sub(this.node.position).normalize();
                      this._animCom.addAnimAct(_0x3e67dd.EnemyAnim.HurtLaser, _0xe581ee, cc.misc.radiansToDegrees(_0x5b5e7b));
                      break;
                    case _0x3e67dd.DWType.Electricity:
                      this._animCom.playElectricityAct(_0x1be446);
                  }
                  this.buffCom.addBuff(_0x3e67dd.EnemyBuff.SlowDown);
                  this.buffCom.addBuff(_0x3e67dd.EnemyBuff.SlowDown);
                }
              }
            }
            this.checkHurtAffect(_0x54a6ba);
            this.bloodChange(-_0x54a6ba);
          }
        },
        'bloodChange': function (_0xfd187e) {
          if (!this.hasAttribution(_0x3e67dd.EnemyAttr.bulScreen)) {
            this._curBlood += _0xfd187e;
            this.refreshSkinColor();
            this.uiCom.refreshBloodDisplay(this._curBlood);
            if (this.knifeDropCtrl) {
              this.knifeDropCtrl.bloodChange(this._curBlood);
            }
            if (this._curBlood <= 0x0) {
              this.die();
              this._curBlood = 0x0;
            }
          }
        },
        'checkHurtAffect': function (_0x20c617) {
          if (this.hasAttribution(_0x3e67dd.EnemyAttr.Gold)) {
            var _0x549d20 = this.attrCom.attrData[_0x3e67dd.EnemyAttr.Gold];
            var _0x5beb6a = this.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
            _0x30217b.GValue.EntityWorld.playGoldFlyEffect(0x1, parseInt(_0x549d20.param), _0x5beb6a);
          }
          if (_0x30217b.GValue.PropMgr.hasProp(_0x3e67dd.PropType.Gold)) {
            var _0xdb307e = Math.floor(_0x20c617 * _0x30217b.GValue.GoldCount);
            if (_0xdb307e > 0x0) {
              _0x5beb6a = this.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
              _0x30217b.GValue.EntityWorld.playGoldFlyEffect(0x1, _0xdb307e, _0x5beb6a);
            }
          }
        },
        'die': function (_0x50923b) {
          if (undefined === _0x50923b) {
            _0x50923b = true;
          }
          if (!this.isDead) {
            this.isDead = true;
            this.isDieOver = false;
            this.node.stopAllActions();
            _0x30217b.GValue.EntityWorld.addKillCount();
            _0x30217b.GValue.EntityWorld.removeEnemy(this, this.isBoss);
            this.moveCom.player = null;
            this.shadow.active = false;
            this.attrCom.die();
            var _0x48de5b = this;
            this.uiNode.runAction(cc.sequence(cc.scaleTo(0x3 * _0x55ff17.GConfig.actionFrameTime, 0.4), cc.callFunc(function () {
              var _0x301148 = _0x48de5b.uiNode.getChildByName("tail");
              if (_0x301148) {
                _0x301148.removeFromParent();
              }
              var _0x216e48 = _0x48de5b.node.position.add(_0x30217b.GValue.EntityWorld.mapMgr.mapTop.position);
              _0x216e48 = _0x216e48.mul(_0x30217b.GValue.MapScale);
              if (!_0x48de5b.hasAttribution(_0x3e67dd.EnemyAttr.Gold) && _0x48de5b.data.cData.dropGold > 0x0) {
                _0x30217b.GValue.EntityWorld.playGoldFlyEffect(0x3, _0x48de5b.data.cData.dropGold, _0x216e48);
              }
              _0x48de5b.uiNode.stopAllActions();
              _0x48de5b.uiNode.active = false;
              _0x48de5b.uiCom.die();
            })));
            this._animCom.addAnimAct(_0x3e67dd.EnemyAnim.Die, cc.Vec2.ZERO, 0x0, function () {
              _0x48de5b.isDieOver = true;
              if (_0x48de5b.followWeapon) {
                _0x48de5b.followWeapon.node.removeFromParent();
              }
              _0x30217b.GValue.EntityWorld.addEntitySys.removeEnemy(_0x48de5b.node);
            });
            _0x30217b.GValue.EntityWorld.shake();
            _0x3cc543.GSDK.virbrate(false);
            _0x144ab7.GAudio.playSound(_0x144ab7.Enum_Audio.enemyDie);
            if (_0x50923b) {
              this._dropCom.die();
            }
            var _0x468817 = this.uiNode.getChildByName("gold");
            if (_0x468817) {
              _0x468817.removeFromParent();
            }
            if (this.callback_bossDie) {
              this.callback_bossDie();
            }
          }
        },
        'removeSelf': function () {
          this.isDead = true;
          this.node.stopAllActions();
          _0x30217b.GValue.EntityWorld.addKillCount();
          _0x30217b.GValue.EntityWorld.removeEnemy(this, this.isBoss);
          this.moveCom.player = null;
          this.shadow.active = false;
          this.uiNode.active = false;
          var _0x2bcd3f = this.uiNode.getChildByName("gold");
          if (_0x2bcd3f) {
            _0x2bcd3f.removeFromParent();
          }
          var _0x38149f = this.uiNode.getChildByName("tail");
          if (_0x38149f) {
            _0x38149f.removeFromParent();
          }
          if (this.followWeapon) {
            this.followWeapon.node.removeFromParent();
          }
          _0x30217b.GValue.EntityWorld.addEntitySys.removeEnemy(this.node);
        },
        'getColRadiusForImage': function (_0x2ef1fc) {
          var _0x21661e = 0x42;
          switch (_0x2ef1fc) {
            case 0x5:
              _0x21661e = 0x5a;
              break;
            case 0x6:
              _0x21661e = 0x26;
              break;
            case 0xc8:
              _0x21661e = 0x4c;
              break;
            case 0xc9:
              _0x21661e = 0x3a;
              break;
            case 0xca:
            case 0xcb:
              _0x21661e = 0x32;
              break;
            case 0x3e9:
              _0x21661e = 0x64;
          }
          return _0x21661e;
        },
        'isFullBlood': function () {
          return this._curBlood >= this.data.blood;
        },
        'thronShow': function (_0x3844ed) {
          this._animCom.setThronShow(_0x3844ed);
        },
        'isSleep': function () {
          return this.stateCom.state == _0x3e67dd.EnemyAction.Sleep;
        },
        'removeAnim': function (_0x1bf01e) {
          this._animCom.removeAnimAct(_0x1bf01e);
        },
        'addAnim': function (_0x59cdb4) {
          this._animCom.addAnimAct(_0x59cdb4);
        },
        'hasAttribution': function (_0x1baa46) {
          return !!this.attrCom && _0x1e1c31.DYTools.arrContain(this.attrCom.attr, _0x1baa46);
        },
        'getAttrParam': function (_0xbdb42) {
          return this.attrCom ? this.attrCom.attrData[_0xbdb42] : null;
        },
        'hasBuff': function (_0xca8e53) {
          return this.buffCom.hasBuff(_0xca8e53);
        },
        'addBuff': function (_0x4ffabf) {
          this.buffCom.addBuff(_0x4ffabf);
        },
        'removeBuff': function (_0x271612) {
          this.buffCom.removeBuff(_0x271612);
        },
        'setCurDir': function (_0x31881b) {
          if (this.moveCom) {
            this.moveCom.setCurDir(_0x31881b.normalize());
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonAudio': "CommonAudio",
      'CommonConfig': "CommonConfig",
      'CommonSdk': "CommonSdk",
      'CommonValue': "CommonValue",
      'EnemyBase': 'EnemyBase',
      'EnemyCollisionWallListener': "EnemyCollisionWallListener",
      'EnemyUIComponent': "EnemyUIComponent",
      'GameData': "GameData",
      'Tools': "Tools",
      'Types': 'Types'
    }],
    'EntityFollowEnemy': [function (_0x205b79, _0x27cd43, _0x4b8c89) {
      'use strict';
  
      cc._RF.push(_0x27cd43, "87190XkaThPTrgCStEmIQXY", "EntityFollowEnemy");
      var _0x58d8ff = _0x205b79("CEntityBase");
      var _0x56b355 = _0x205b79("Tools");
      var _0x5868ec = _0x205b79("CEntityKnife");
      cc.Class({
        'extends': _0x58d8ff,
        'properties': {},
        'ctor': function () {
          this.enemy = null;
          this.knivesCmp = null;
          this.heroRotate = null;
        },
        'init': function (_0x534b33) {
          this.enemy = _0x534b33;
          _0x56b355.DYTools.addScript(this.node, "CMoveWithOwnerNode").init(this.node.parent, this, this.enemy, cc.v2(0x0, -0x6));
          this.knivesCmp = _0x56b355.DYTools.addScript(this.node, "BossKnivesComponent");
          this.knivesCmp.init(_0x534b33);
          this.heroRotate = _0x56b355.DYTools.addScript(this.node, 'CHRotate');
          this.heroRotate.setRotateSpeed(-0x12c);
        },
        'die': function () {
          this.node.active = false;
          var _0x4321dc = 0x0;
          for (var _0x4b1577 = this.knivesCmp.knives; _0x4321dc < _0x4b1577.length; _0x4321dc++) {
            _0x4b1577[_0x4321dc].getComponent(_0x5868ec.CEntityKnife).shadow.active = false;
          }
        },
        'updateGameLogic': function (_0x4fb0ec) {
          this.heroRotate.updateGameLogic(_0x4fb0ec);
        }
      });
      cc._RF.pop();
    }, {
      'CEntityBase': "CEntityBase",
      'CEntityKnife': 'CEntityKnife',
      'Tools': "Tools"
    }],
    'EntityPlayerDeputyFollow': [function (_0x3a8427, _0x116286, _0xa0fbe9) {
      'use strict';
  
      cc._RF.push(_0x116286, "f2fe65HvD5EZKnPLQak7TzD", "EntityPlayerDeputyFollow");
      var _0xfe5d2b = _0x3a8427("CEntityBase");
      var _0x25351b = _0x3a8427('GameData');
      var _0x4aee71 = _0x3a8427("Tools");
      var _0x4667a3 = _0x3a8427("CommonConfig");
      var _0x56ae55 = _0x3a8427("Types");
      cc.Class({
        'extends': _0xfe5d2b,
        'properties': {},
        'ctor': function () {},
        'init': function (_0x149e2c) {
          this.dwId = 0x0;
          this.rotateAble = true;
          this.player = _0x149e2c;
          _0x4aee71.DYTools.addScript(this.node, "CMoveWithOwnerNode").init(this.node.parent, this, this.player);
          this.setWeapon(_0x25351b.TData.getCurSubFun());
          this.node.on("enterStrong", this.enterStrong, this);
        },
        'setWeapon': function (_0x3c6711) {
          if (this.dwId != _0x3c6711) {
            this.dwId = _0x3c6711;
            var _0x136cc5 = false;
            if (this.dwCom) {
              this.dwCom.removeSelf();
              this.dwCom = null;
              _0x136cc5 = true;
            }
            var _0x484432 = this;
            var _0xfb6a81 = function () {
              switch (_0x484432.dwId) {
                case _0x56ae55.DWType.Knife:
                  _0x484432.dwCom = _0x4aee71.DYTools.addScript(_0x484432.node, "PlayerDWKnifeComponent");
                  _0x484432.dwCom.init(_0x484432, _0x484432.dwId);
                  break;
                case _0x56ae55.DWType.Laser:
                  console.log('Laser');
                  _0x484432.dwCom = _0x4aee71.DYTools.addScript(_0x484432.node, 'PlayerDWLaserComponent');
                  _0x484432.dwCom.init(_0x484432);
                  break;
                case _0x56ae55.DWType.Ice:
                  console.log("Ice");
                  _0x484432.dwCom = _0x4aee71.DYTools.addScript(_0x484432.node, "PlayerDWIceComponent");
                  _0x484432.dwCom.init(_0x484432, _0x484432.dwId);
                  break;
                case _0x56ae55.DWType.Fire:
                  console.log("Fire");
                  _0x484432.dwCom = _0x4aee71.DYTools.addScript(_0x484432.node, "PlayerDWFireComponent");
                  _0x484432.dwCom.init(_0x484432, _0x484432.dwId);
                  break;
                case _0x56ae55.DWType.Electricity:
                  _0x484432.dwCom = _0x4aee71.DYTools.addScript(_0x484432.node, "PlayerDWElectricityComponent");
                  _0x484432.dwCom.init(_0x484432);
              }
              _0x484432.setRotateSpeed(-_0x25351b.TData.HRotateSpeedIn);
            };
            if (_0x136cc5) {
              this.scheduleOnce(_0xfb6a81, 0.1);
            } else {
              _0xfb6a81();
            }
          }
        },
        'updateGameLogic': function (_0x356eaf) {
          if (this.dwCom && this.rotateAble) {
            this.dwCom.updateGameLogic(_0x356eaf);
          }
        },
        'enterStrong': function (_0x376271) {
          if (this.dwCom) {
            this.dwCom.enterStrong(_0x376271);
          }
        },
        'die': function () {
          this.node.active = false;
          if (this.dwCom) {
            this.dwCom.die();
          }
        },
        'revive': function () {
          this.node.active = true;
          if (this.dwCom) {
            this.dwCom.die();
          }
          this.node.scale = 0.7;
          this.node.runAction(cc.scaleTo(0x4 * _0x4667a3.GConfig.actionFrameTime, 0x1));
        },
        'setRotateSpeed': function (_0x1d275c) {
          if (this.dwCom) {
            this.dwCom.setRotateSpeed(_0x1d275c);
          }
        },
        'setHurtRatio': function (_0x2b57b8) {
          if (this.dwCom) {
            this.dwCom.setHurtRatio(_0x2b57b8);
          }
        },
        'addKnife': function (_0x3b3131) {
          if (!this.dwCom) {
            this.dwCom = _0x4aee71.DYTools.addScript(this.node, 'PlayerDWKnifeComponent');
            this.dwCom.init(this, this.dwId, true);
            this.setRotateSpeed(-_0x25351b.TData.HRotateSpeedIn);
          }
          if (this.dwCom) {
            this.dwCom.addKnife(_0x3b3131);
          }
        },
        'getKnives': function () {
          return this.dwCom ? this.dwCom.getKnives() : [];
        },
        'setShadowOpacity': function (_0x481973) {
          if (this.dwCom) {
            this.dwCom.setShadowOpacity(_0x481973);
          }
        }
      });
      cc._RF.pop();
    }, {
      'CEntityBase': "CEntityBase",
      'CommonConfig': "CommonConfig",
      'GameData': "GameData",
      'Tools': "Tools",
      'Types': "Types"
    }],
    'EntityProp': [function (_0x52c9ce, _0x4c64c9, _0x2ad299) {
      'use strict';
  
      cc._RF.push(_0x4c64c9, "7b64aFT0CZD77qSgyBBysC2", "EntityProp");
      var _0x533a93 = _0x52c9ce('CommonValue');
      var _0x4921d1 = _0x52c9ce("CEntityBase");
      var _0x57a81e = _0x52c9ce("Tools");
      cc.Class({
        'extends': _0x4921d1,
        'properties': {
          'propSpr': cc.Sprite
        },
        'ctor': function () {
          this.propSpr = null;
          this.propId = 0x0;
          this._moveFixCom = null;
        },
        'create': function (_0x255cfc) {
          this.propId = _0x255cfc;
          this.propSpr.spriteFrame = _0x533a93.GValue.Atlas_Game.getSpriteFrame("prop" + _0x255cfc);
          _0x57a81e.DYTools.addScript(this.node, "PropCollisionWallListener");
          this._moveFixCom = _0x57a81e.DYTools.addScript(this.node, "PropMoveFix");
          this._moveFixCom.init(this, 0x190, cc.v2(0x1, 0x1), 0xa);
        },
        'updateGameLogic': function (_0x63c693) {
          if (this._moveFixCom) {
            this._moveFixCom.updateGameLogic(_0x63c693);
          }
        },
        'willRemove': function () {
          this.node.stopAllActions();
          this._moveFixCom = null;
          this.node.removeComponent("PropMoveFix");
        }
      });
      cc._RF.pop();
    }, {
      'CEntityBase': 'CEntityBase',
      'CommonValue': 'CommonValue',
      'Tools': "Tools"
    }],
    'GameData': [function (_0x40d785, _0x34327c, _0x307b62) {
      'use strict';
  
      cc._RF.push(_0x34327c, "be1affDQMtL55AvBHAk4LwI", "GameData");
      var _0x580b92 = _0x34327c.exports;
      var _0x1795d2 = _0x40d785("CommonConfig");
      var _0x2ed1f9 = _0x40d785('CommonEnum');
      var _0x13ff72 = _0x40d785('CommonValue');
      var _0x30ac8b = _0x40d785("CommonFunc");
      var _0x3e480c = _0x40d785("Tools");
      var _0x1b96ef = _0x40d785('CommonSdk');
      var _0x4eae25 = _0x40d785("Types");
      var _0x4f62a8 = function () {
        function _0x500ee7() {
          this.loginTime = 0x0;
          this.stage = 0x1;
          this.gold = 0x0;
          this.power = 0x0;
          this.time_power = 0x0;
          this.offlineGold = 0x0;
          this.time_offlineGold = 0x0;
          this.time_offlineGoldGet = 0x0;
          this.propertys = {};
          this.propertys_sub = {};
          this.list_sub = [];
          this.list_newsub = [];
          this.cur_sub = 0x0;
          this.list_guide = [];
          this.passStage = 0x0;
          this.hasGiftGold = 0x0;
          this.hasGiftPower = 0x0;
          this.todayGiftGoldCount = 0x0;
          this.todayGiftPowerCount = 0x0;
          this.todayArmsSubTryCount = 0x0;
          this.addProgram_hasGet = 0x0;
          this.addProgram_enter = 0x0;
          this.official_timestamp = 0x0;
        }
        _0x500ee7.prototype.loadData = function (_0x41bc5a) {
          if (_0x41bc5a.hasOwnProperty("loginTime")) {
            this.loginTime = Number(_0x41bc5a.loginTime);
          }
          if (_0x41bc5a.hasOwnProperty("stage")) {
            this.stage = parseInt(_0x41bc5a.stage);
          }
          if (_0x41bc5a.hasOwnProperty("gold")) {
            this.gold = parseInt(_0x41bc5a.gold);
          }
          if (_0x41bc5a.hasOwnProperty("power")) {
            this.power = parseInt(_0x41bc5a.power);
          }
          if (_0x41bc5a.hasOwnProperty("time_power")) {
            this.time_power = parseInt(_0x41bc5a.time_power);
          }
          if (_0x41bc5a.hasOwnProperty("offlineGold")) {
            this.offlineGold = parseInt(_0x41bc5a.offlineGold);
          }
          if (_0x41bc5a.hasOwnProperty("time_offlineGold")) {
            this.time_offlineGold = parseInt(_0x41bc5a.time_offlineGold);
          }
          if (_0x41bc5a.hasOwnProperty("time_offlineGoldGet")) {
            this.time_offlineGoldGet = parseInt(_0x41bc5a.time_offlineGoldGet);
          }
          if (_0x41bc5a.hasOwnProperty("propertys")) {
            this.propertys = {};
            var _0x4eaa57 = _0x41bc5a.propertys;
            for (var _0x3162d1 in _0x4eaa57) {
              var _0x7fe494 = parseInt(_0x3162d1);
              var _0x1a778b = parseInt(_0x4eaa57[_0x3162d1]);
              this.propertys[_0x7fe494] = _0x1a778b;
            }
          }
          if (_0x41bc5a.hasOwnProperty("propertys_sub")) {
            this.propertys_sub = {};
            for (var _0x3162d1 in _0x4eaa57 = _0x41bc5a.propertys_sub) {
              var _0x396380 = parseInt(_0x3162d1);
              _0x1a778b = parseInt(_0x4eaa57[_0x3162d1]);
              this.propertys_sub[_0x396380] = _0x1a778b;
            }
          }
          if (_0x41bc5a.hasOwnProperty("list_sub")) {
            this.list_sub = [];
            var _0x2420db = _0x41bc5a.list_sub;
            for (var _0x162b3d = 0x0; _0x162b3d < _0x2420db.length; _0x162b3d++) {
              this.list_sub.push(parseInt(_0x2420db[_0x162b3d]));
            }
          }
          if (_0x41bc5a.hasOwnProperty("list_newsub")) {
            this.list_newsub = [];
            _0x2420db = _0x41bc5a.list_newsub;
            for (_0x162b3d = 0x0; _0x162b3d < _0x2420db.length; _0x162b3d++) {
              this.list_newsub.push(parseInt(_0x2420db[_0x162b3d]));
            }
          }
          if (_0x41bc5a.hasOwnProperty("cur_sub")) {
            this.cur_sub = parseInt(_0x41bc5a.cur_sub);
          }
          if (_0x41bc5a.hasOwnProperty("list_guide")) {
            this.list_guide = [];
            _0x2420db = _0x41bc5a.list_guide;
            for (_0x162b3d = 0x0; _0x162b3d < _0x2420db.length; _0x162b3d++) {
              this.list_guide.push(parseInt(_0x2420db[_0x162b3d]));
            }
          }
          if (_0x41bc5a.hasOwnProperty("passStage")) {
            this.passStage = parseInt(_0x41bc5a.passStage);
          }
          if (_0x41bc5a.hasOwnProperty("hasGiftGold")) {
            this.hasGiftGold = parseInt(_0x41bc5a.hasGiftGold);
          }
          if (_0x41bc5a.hasOwnProperty('hasGiftPower')) {
            this.hasGiftPower = parseInt(_0x41bc5a.hasGiftPower);
          }
          if (_0x41bc5a.hasOwnProperty("todayGiftGoldCount")) {
            this.todayGiftGoldCount = parseInt(_0x41bc5a.todayGiftGoldCount);
          }
          if (_0x41bc5a.hasOwnProperty("todayGiftPowerCount")) {
            this.todayGiftPowerCount = parseInt(_0x41bc5a.todayGiftPowerCount);
          }
          if (_0x41bc5a.hasOwnProperty("todayArmsSubTryCount")) {
            this.todayArmsSubTryCount = parseInt(_0x41bc5a.todayArmsSubTryCount);
          }
          if (_0x41bc5a.hasOwnProperty('addProgram_hasGet')) {
            this.addProgram_hasGet = parseInt(_0x41bc5a.addProgram_hasGet);
          }
          if (_0x41bc5a.hasOwnProperty("addProgram_enter")) {
            this.addProgram_enter = parseInt(_0x41bc5a.addProgram_enter);
          }
          if (_0x41bc5a.hasOwnProperty('official_timestamp')) {
            this.official_timestamp = parseInt(_0x41bc5a.official_timestamp);
          }
        };
        return _0x500ee7;
      }();
      _0x580b92.LastData = _0x4f62a8;
      var _0x229475 = function () {
        function _0x269282() {
          this.shake = 0x0;
          this.sound = 0x1;
          this.music = 0x1;
        }
        _0x269282.prototype.loadData = function (_0x46d30b) {
          if (_0x46d30b.hasOwnProperty("shake")) {
            this.shake = parseInt(_0x46d30b.shake);
          }
          if (_0x46d30b.hasOwnProperty("sound")) {
            this.sound = parseInt(_0x46d30b.sound);
          }
          if (_0x46d30b.hasOwnProperty("music")) {
            this.music = parseInt(_0x46d30b.music);
          }
        };
        return _0x269282;
      }();
      _0x580b92.SettingData = _0x229475;
      var _0xfb0a7a = function () {
        function _0x208c6d() {
          this.WeaponCount = 0x6;
          this.HeroRaduis = 0x8c;
          this.HeroRotateSpeed = 0x140;
          this.EnemyOffset = 0xa;
          this.EnemyOffsetDegree = 0x5;
          this.ThemeId = 0x1;
          this.HRotateSpeedIn = 0x140;
          this.HWeaponCountIn = 0x6;
          this.HeroAttackIn = 0x8;
          this.HeroRaduisIn = 0x5a;
          this.userId = '';
          this.cidCode = '';
          this.isNewPlayer = false;
          this.registerTime = 0x0;
          this.guideStep = 0x0;
          this.firstRevive = 0x0;
          this.name_version = "version";
          this.name_cid = "cid";
          this.name_UserId = "UserID";
          this.name_RegisterTime = "RegisterTime";
          this.name_FirstRevive = 'FirstRevive';
          this.name_LastData = "SpinMaster_LastData";
          this.name_guideStep = 'guideStep';
          this.LastData = new _0x4f62a8();
          this.official_enter = 0x0;
          this.SettingData = new _0x229475();
        }
        _0x208c6d.prototype.initData = function () {
          this.checkVersion();
          this.isNewPlayer = false;
          this.userId = this.getUserID();
          this.readLastData();
          this.readSettingData();
          if (this.isNewPlayer) {
            this.setTimeOfflineGoldGet(_0x30ac8b.GFunc.getCurTime(), true);
          }
        };
        _0x208c6d.prototype.checkVersion = function () {
          var _0x345bcd = this.getData(this.name_version);
          if (_0x345bcd && '' != _0x345bcd) {
            if (parseInt(_0x345bcd) < _0x1795d2.GConfig.VersionCode) {
              this.saveData(this.name_version, _0x1795d2.GConfig.VersionCode.toString());
            }
          } else {
            this.saveData(this.name_version, _0x1795d2.GConfig.VersionCode.toString());
          }
        };
        _0x208c6d.prototype.saveCid = function (_0xd3975f) {
          this.cidCode = _0xd3975f;
          this.saveData(this.name_cid, this.cidCode);
        };
        _0x208c6d.prototype.getCid = function () {
          if ('' == this.cidCode) {
            var _0x15f47e = this.getData(this.name_cid);
            if (_0x15f47e && '' != _0x15f47e) {
              this.cidCode = _0x15f47e;
            }
          }
          return this.cidCode;
        };
        _0x208c6d.prototype.newDayRefresh = function () {
          if (_0x3e480c.DYTools.isLaterDay(0x3e8 * this.LastData.loginTime)) {
            console.warn("隔天刷新");
            this.LastData.todayArmsSubTryCount = 0x0;
            this.LastData.todayGiftGoldCount = 0x0;
            this.LastData.todayGiftPowerCount = 0x0;
            this.LastData.hasGiftGold = 0x0;
            this.LastData.hasGiftPower = 0x0;
          }
          this.LastData.loginTime = _0x30ac8b.GFunc.getCurTime();
          this.saveLastData();
        };
        _0x208c6d.prototype.dwAdjustStage = function () {
          var _0x2797d5 = _0x13ff72.GValue.Dic_Sub_Level[_0x4eae25.DWType.Fire];
          if (this.getStage() > _0x2797d5) {
            this.addListSub(_0x4eae25.DWType.Fire);
          }
          _0x2797d5 = _0x13ff72.GValue.Dic_Sub_Level[_0x4eae25.DWType.Ice];
          if (this.getStage() > _0x2797d5) {
            this.addListSub(_0x4eae25.DWType.Ice);
          }
          _0x2797d5 = _0x13ff72.GValue.Dic_Sub_Level[_0x4eae25.DWType.Laser];
          if (this.getStage() > _0x2797d5) {
            this.addListSub(_0x4eae25.DWType.Laser);
          }
          _0x2797d5 = _0x13ff72.GValue.Dic_Sub_Level[_0x4eae25.DWType.Knife];
          if (this.getStage() > _0x2797d5) {
            this.addListSub(_0x4eae25.DWType.Knife);
          }
        };
        _0x208c6d.prototype.saveData = function (_0x66f03e, _0xffe8a6) {
          try {
            cc.sys.localStorage.setItem(_0x66f03e, _0xffe8a6);
          } catch (_0x6d0f7e) {
            _0x1b96ef.GSDK.saveData(_0x66f03e, _0xffe8a6);
            _0x3e480c.DYTools.error('保存数据出错了--' + _0x6d0f7e, _0x66f03e, _0xffe8a6);
            _0x1b96ef.GSDK.sendSaveDataErr(_0x66f03e);
          }
        };
        _0x208c6d.prototype.getData = function (_0x846a44) {
          return cc.sys.localStorage.getItem(_0x846a44);
        };
        _0x208c6d.prototype.readLastData = function () {
          var _0x21d057 = this.getData(this.name_LastData);
          if (_0x21d057 && '' != _0x21d057) {
            var _0xab5ca5 = JSON.parse(_0x21d057);
            this.LastData.loadData(_0xab5ca5);
          }
          if ((_0x21d057 = this.getData(this.name_RegisterTime)) && '' != _0x21d057) {
            this.registerTime = Number(_0x21d057);
          }
          if ((_0x21d057 = this.getData(this.name_FirstRevive)) && '' != _0x21d057) {
            this.firstRevive = parseInt(_0x21d057);
          }
          if ((_0x21d057 = this.getData(this.name_guideStep)) && '' != _0x21d057) {
            this.guideStep = parseInt(_0x21d057);
          }
        };
        _0x208c6d.prototype.saveLastData = function () {
          var _0x11d50e = JSON.stringify(this.LastData);
          this.saveData(this.name_LastData, _0x11d50e);
          if ('' != this.userId) {
            this.saveData(this.name_UserId, this.userId);
          }
        };
        _0x208c6d.prototype.clearLastData = function () {
          this.LastData = new _0x4f62a8();
          this.saveLastData();
          this.firstRevive = 0x0;
          this.saveData(this.name_FirstRevive, this.firstRevive.toString());
          this.guideStep = 0x0;
          this.saveData(this.name_guideStep, this.guideStep.toString());
          this.userId = '';
          this.saveData(this.name_UserId, this.userId);
        };
        _0x208c6d.prototype.saveUserID = function (_0x513c57) {
          this.userId = _0x513c57;
          this.saveData(this.name_UserId, this.userId);
        };
        _0x208c6d.prototype.getUserID = function () {
          if ('' == this.userId) {
            var _0x55a080 = this.getData(this.name_UserId);
            if (_0x55a080) {
              this.userId = _0x55a080;
              _0x3e480c.DYTools.warn("uabc = " + this.userId);
            }
          }
          if ('' == this.userId) {
            this.isNewPlayer = true;
            this.saveUserID(_0x3e480c.DYTools.getRandomUserId());
            this.saveRegisterTime();
            _0x3e480c.DYTools.warn("uabc = " + this.userId);
          }
          return this.userId;
        };
        _0x208c6d.prototype.saveRegisterTime = function () {
          this.registerTime = new Date().getTime();
          this.saveData(this.name_RegisterTime, this.registerTime.toString());
        };
        _0x208c6d.prototype.getRegisterTime = function () {
          var _0x27734c = this.getData(this.name_RegisterTime);
          return _0x27734c && '' != _0x27734c ? Number(_0x27734c) : 0x0;
        };
        _0x208c6d.prototype.setGuideStep = function (_0xeefdec) {
          this.guideStep = _0xeefdec;
          this.saveData(this.name_guideStep, this.guideStep.toString());
        };
        _0x208c6d.prototype.getGuideStep = function () {
          return this.guideStep;
        };
        _0x208c6d.prototype.isFirstRevive = function () {
          return 0x0 == this.firstRevive;
        };
        _0x208c6d.prototype.setFirstRevive = function () {
          this.firstRevive = 0x1;
          this.saveData(this.name_FirstRevive, this.firstRevive.toString());
        };
        _0x208c6d.prototype.getHasGiftGold = function () {
          return !!this.LastData.hasGiftGold;
        };
        _0x208c6d.prototype.setHasGiftGold = function (_0x10d19f, _0xe26c3d) {
          if (undefined === _0xe26c3d) {
            _0xe26c3d = false;
          }
          var _0x488c65 = _0x10d19f ? 0x1 : 0x0;
          this.LastData.hasGiftGold = _0x488c65;
          if (_0xe26c3d) {
            this.saveLastData();
          }
        };
        _0x208c6d.prototype.getTodayGiftGoldCount = function () {
          return this.LastData.todayGiftGoldCount;
        };
        _0x208c6d.prototype.setTodayGiftGoldCount = function (_0x28b7f6, _0x41aaeb) {
          if (undefined === _0x41aaeb) {
            _0x41aaeb = false;
          }
          this.LastData.todayGiftGoldCount = _0x28b7f6;
          if (_0x41aaeb) {
            this.saveLastData();
          }
        };
        _0x208c6d.prototype.getHasGiftPower = function () {
          return !!this.LastData.hasGiftPower;
        };
        _0x208c6d.prototype.setHasGiftPower = function (_0x109744, _0x23d5b0) {
          if (undefined === _0x23d5b0) {
            _0x23d5b0 = false;
          }
          var _0x5b70c3 = _0x109744 ? 0x1 : 0x0;
          this.LastData.hasGiftPower = _0x5b70c3;
          if (_0x23d5b0) {
            this.saveLastData();
          }
        };
        _0x208c6d.prototype.getTodayGiftPowerCount = function () {
          return this.LastData.todayGiftPowerCount;
        };
        _0x208c6d.prototype.setTodayGiftPowerCount = function (_0x512dc8, _0x2514ca) {
          if (undefined === _0x2514ca) {
            _0x2514ca = false;
          }
          this.LastData.todayGiftPowerCount = _0x512dc8;
          if (_0x2514ca) {
            this.saveLastData();
          }
        };
        _0x208c6d.prototype.getTodayArmsSubTryCount = function () {
          return this.LastData.todayArmsSubTryCount;
        };
        _0x208c6d.prototype.setTodayArmsSubTryCount = function (_0x3c7ee6, _0x46bdfb) {
          if (undefined === _0x46bdfb) {
            _0x46bdfb = false;
          }
          this.LastData.todayArmsSubTryCount = _0x3c7ee6;
          if (_0x46bdfb) {
            this.saveLastData();
          }
        };
        _0x208c6d.prototype.getGold = function () {
          return this.LastData.gold;
        };
        _0x208c6d.prototype.setGold = function (_0x140a66, _0x294f4c, _0x124e99) {
          if (undefined === _0x294f4c) {
            _0x294f4c = false;
          }
          if (undefined === _0x124e99) {
            _0x124e99 = false;
          }
          if (_0x140a66 < 0x0) {
            _0x140a66 = 0x0;
          }
          this.LastData.gold = _0x140a66;
          if (_0x294f4c) {
            this.saveLastData();
          }
          if (_0x13ff72.GValue.HomeUI) {
            _0x13ff72.GValue.HomeUI.refresh_gift_gold();
          }
          if (_0x124e99 && _0x13ff72.GValue.HomeUI) {
            _0x13ff72.GValue.HomeUI.refreshGold();
          }
        };
        _0x208c6d.prototype.isPowerFull = function () {
          var _0x4d4509 = parseInt(_0x1795d2.GConfig.getGbData(_0x2ed1f9.Enum_Gb.PowerMax));
          return this.LastData.power >= _0x4d4509;
        };
        _0x208c6d.prototype.getPower = function () {
          return this.LastData.power;
        };
        _0x208c6d.prototype.setPower = function (_0x58f8c5, _0x5a5acf, _0x3ac5fb) {
          if (undefined === _0x5a5acf) {
            _0x5a5acf = false;
          }
          if (undefined === _0x3ac5fb) {
            _0x3ac5fb = false;
          }
          this.LastData.power = _0x58f8c5;
          if (_0x5a5acf) {
            this.saveLastData();
          }
          if (_0x13ff72.GValue.HomeUI) {
            _0x13ff72.GValue.HomeUI.refresh_gift_power();
          }
          if (_0x3ac5fb && _0x13ff72.GValue.HomeUI) {
            _0x13ff72.GValue.HomeUI.refreshPower();
          }
        };
        _0x208c6d.prototype.usePower = function (_0x52a62c, _0x527498) {
          if (undefined === _0x527498) {
            _0x527498 = false;
          }
          var _0x25fc01 = false;
          if (this.LastData.power >= _0x52a62c) {
            _0x25fc01 = true;
            var _0x49d5e8 = parseInt(_0x1795d2.GConfig.getGbData(_0x2ed1f9.Enum_Gb.PowerMax));
            var _0x1c93b8 = this.LastData.power >= _0x49d5e8;
            this.LastData.power -= _0x52a62c;
            if (_0x1c93b8 && !(_0x1c93b8 = this.LastData.power >= _0x49d5e8)) {
              _0x13ff72.GValue.PowerTime = parseInt(_0x1795d2.GConfig.getGbData(_0x2ed1f9.Enum_Gb.PowerRecoverTime));
              this.LastData.time_power = _0x30ac8b.GFunc.getCurTime();
            }
            if (_0x527498) {
              this.saveLastData();
            }
          }
          if (_0x13ff72.GValue.HomeUI) {
            _0x13ff72.GValue.HomeUI.refresh_gift_power();
          }
          return _0x25fc01;
        };
        _0x208c6d.prototype.getTimePower = function () {
          return this.LastData.time_power;
        };
        _0x208c6d.prototype.setTimePower = function (_0x100e56, _0x486492) {
          if (undefined === _0x486492) {
            _0x486492 = false;
          }
          this.LastData.time_power = _0x100e56;
          if (_0x486492) {
            this.saveLastData();
          }
        };
        _0x208c6d.prototype.getOfflineGold = function () {
          return this.LastData.offlineGold;
        };
        _0x208c6d.prototype.setOfflineGold = function (_0x52c335, _0x327985) {
          if (undefined === _0x327985) {
            _0x327985 = false;
          }
          this.LastData.offlineGold = _0x52c335;
          if (_0x327985) {
            this.saveLastData();
          }
        };
        _0x208c6d.prototype.getTimeOfflineGold = function () {
          return this.LastData.time_offlineGold;
        };
        _0x208c6d.prototype.setTimeOfflineGold = function (_0x409692, _0x433c24) {
          if (undefined === _0x433c24) {
            _0x433c24 = false;
          }
          this.LastData.time_offlineGold = _0x409692;
          if (_0x433c24) {
            this.saveLastData();
          }
        };
        _0x208c6d.prototype.getTimeOfflineGoldGet = function () {
          return this.LastData.time_offlineGoldGet;
        };
        _0x208c6d.prototype.setTimeOfflineGoldGet = function (_0x346886, _0x34cf37) {
          if (undefined === _0x34cf37) {
            _0x34cf37 = false;
          }
          this.LastData.time_offlineGoldGet = _0x346886;
          if (_0x34cf37) {
            this.saveLastData();
          }
        };
        _0x208c6d.prototype.getStage = function () {
          return this.LastData.stage;
        };
        _0x208c6d.prototype.setStage = function (_0x5db347, _0x3e6481) {
          if (undefined === _0x3e6481) {
            _0x3e6481 = false;
          }
          var _0x226a15 = false;
          if (_0x1795d2.GConfig.getLevelData(_0x5db347) && this.LastData.stage != _0x5db347) {
            this.LastData.stage = _0x5db347;
            _0x226a15 = true;
          }
          if (_0x3e6481) {
            this.saveLastData();
          }
          return _0x226a15;
        };
        _0x208c6d.prototype.getMaxPassStage = function () {
          return this.LastData.passStage;
        };
        _0x208c6d.prototype.setMaxPassStage = function (_0x30986) {
          this.LastData.passStage = _0x30986;
        };
        _0x208c6d.prototype.getPropertyLv = function (_0xf124b8) {
          var _0x3677bb = this.LastData.propertys[_0xf124b8];
          return _0x3677bb || 0x1;
        };
        _0x208c6d.prototype.setPropertyLv = function (_0x2e0ab9, _0x434368, _0x91e2d2) {
          if (undefined === _0x91e2d2) {
            _0x91e2d2 = false;
          }
          this.LastData.propertys[_0x2e0ab9] = _0x434368;
          if (_0x91e2d2) {
            this.saveLastData();
          }
        };
        _0x208c6d.prototype.getPropertyLv_Sub = function (_0x55bfee) {
          var _0x214548 = this.LastData.propertys_sub[_0x55bfee];
          return _0x214548 || 0x1;
        };
        _0x208c6d.prototype.setPropertyLv_Sub = function (_0xc46a5d, _0x28fb41, _0x2801a5) {
          if (undefined === _0x2801a5) {
            _0x2801a5 = false;
          }
          this.LastData.propertys_sub[_0xc46a5d] = _0x28fb41;
          if (_0x2801a5) {
            this.saveLastData();
          }
        };
        _0x208c6d.prototype.getListSub = function () {
          return this.LastData.list_sub;
        };
        _0x208c6d.prototype.getListNewSub = function () {
          return this.LastData.list_newsub;
        };
        _0x208c6d.prototype.clearListNewSub = function (_0x546f2d) {
          if (undefined === _0x546f2d) {
            _0x546f2d = false;
          }
          this.LastData.list_newsub = [];
          if (_0x546f2d) {
            this.saveLastData();
          }
        };
        _0x208c6d.prototype.addListSub = function (_0x3c0eb0, _0x131f65) {
          if (undefined === _0x131f65) {
            _0x131f65 = false;
          }
          if (!_0x3e480c.DYTools.arrContain(this.LastData.list_sub, _0x3c0eb0)) {
            var _0x40b842 = false;
            for (var _0x148004 = 0x0; _0x148004 < this.LastData.list_sub.length; _0x148004++) {
              if (_0x3c0eb0 < this.LastData.list_sub[_0x148004]) {
                this.LastData.list_sub.splice(_0x148004, 0x0, _0x3c0eb0);
                _0x40b842 = true;
                break;
              }
            }
            if (!_0x40b842) {
              this.LastData.list_sub.push(_0x3c0eb0);
            }
            if (!_0x3e480c.DYTools.arrContain(this.LastData.list_newsub, _0x3c0eb0)) {
              if (0x1 != this.LastData.list_sub.length) {
                this.LastData.list_newsub.push(_0x3c0eb0);
              }
            }
            if (0x1 == this.LastData.list_sub.length) {
              this.LastData.cur_sub = _0x3c0eb0;
              _0x13ff72.GValue.FirstGetSub = true;
            }
            if (_0x131f65) {
              this.saveLastData();
            }
          }
        };
        _0x208c6d.prototype.getCurSubFun = function () {
          return this.LastData.cur_sub;
        };
        _0x208c6d.prototype.setCurSubFun = function (_0x4af4c8, _0x1dded6) {
          if (undefined === _0x1dded6) {
            _0x1dded6 = false;
          }
          this.LastData.cur_sub = _0x4af4c8;
          _0x3e480c.DYTools.arrRemove(this.LastData.list_newsub, _0x4af4c8);
          if (_0x1dded6) {
            this.saveLastData();
          }
        };
        _0x208c6d.prototype.getCurSubIndex = function () {
          return this.LastData.list_sub.indexOf(this.LastData.cur_sub);
        };
        _0x208c6d.prototype.getSubFunByIndex = function (_0x47a657) {
          return _0x47a657 >= 0x0 && _0x47a657 < this.LastData.list_sub.length ? this.LastData.list_sub[_0x47a657] : -0x1;
        };
        _0x208c6d.prototype.finishGuide = function (_0xbed579, _0x258708) {
          if (undefined === _0x258708) {
            _0x258708 = false;
          }
          if (!this.isGuideFinish(_0xbed579)) {
            this.LastData.list_guide.push(_0xbed579);
          }
          if (_0x258708) {
            this.saveLastData();
          }
        };
        _0x208c6d.prototype.isGuideFinish = function (_0x31cbae) {
          return -0x1 != this.LastData.list_guide.indexOf(_0x31cbae);
        };
        _0x208c6d.prototype.get_addProgram_hasGet = function () {
          return this.LastData.addProgram_hasGet;
        };
        _0x208c6d.prototype.set_addProgram_hasGet = function (_0x513091) {
          this.LastData.addProgram_hasGet = _0x513091;
          this.saveLastData();
        };
        _0x208c6d.prototype.get_addProgram_enter = function () {
          return this.LastData.addProgram_enter;
        };
        _0x208c6d.prototype.set_addProgram_enter = function (_0x502af1) {
          this.LastData.addProgram_enter = _0x502af1;
        };
        _0x208c6d.prototype.get_official_enter = function () {
          return 0x1 == this.official_enter;
        };
        _0x208c6d.prototype.set_official_enter = function (_0x43c710) {
          this.official_enter = _0x43c710;
        };
        _0x208c6d.prototype.get_official_time = function () {
          return this.LastData.official_timestamp;
        };
        _0x208c6d.prototype.set_official_time = function (_0x29bfa3) {
          this.LastData.official_timestamp = _0x29bfa3;
          this.saveLastData();
        };
        _0x208c6d.prototype.readSettingData = function () {
          var _0x31f5a4 = this.getData('SettingData');
          if (_0x31f5a4 && '' != _0x31f5a4) {
            var _0x43602c = JSON.parse(_0x31f5a4);
            this.SettingData.loadData(_0x43602c);
          }
        };
        _0x208c6d.prototype.saveSettingData = function () {
          var _0x125c11 = JSON.stringify(this.SettingData);
          this.saveData("SettingData", _0x125c11);
        };
        _0x208c6d.prototype.setSettingShake = function (_0x34a5c2) {
          this.SettingData.shake = _0x34a5c2;
        };
        _0x208c6d.prototype.setSettingSound = function (_0x5463c6) {
          this.SettingData.sound = _0x5463c6;
        };
        _0x208c6d.prototype.setSettingMusic = function (_0x3d6639) {
          this.SettingData.music = _0x3d6639;
        };
        _0x208c6d.instance = new _0x208c6d();
        return _0x208c6d;
      }();
      _0x580b92.GameData = _0xfb0a7a;
      _0x580b92.TData = _0xfb0a7a.instance;
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'CommonEnum': "CommonEnum",
      'CommonFunc': "CommonFunc",
      'CommonSdk': "CommonSdk",
      'CommonValue': "CommonValue",
      'Tools': "Tools",
      'Types': "Types"
    }],
    'GameUI': [function (_0x282570, _0x3dd7f5, _0x2b3513) {
      'use strict';
  
      var _0x338fb1;
      function _0x2b7e75(_0x3d8b53, _0x2bccdc, _0x30bfb9) {
        if (_0x2bccdc in _0x3d8b53) {
          Object.defineProperty(_0x3d8b53, _0x2bccdc, {
            'value': _0x30bfb9,
            'enumerable': true,
            'configurable': true,
            'writable': true
          });
        } else {
          _0x3d8b53[_0x2bccdc] = _0x30bfb9;
        }
        return _0x3d8b53;
      }
      cc._RF.push(_0x3dd7f5, '25b77zckYRCDoPhDJYRsk1r', "GameUI");
      var _0x1b5df6 = _0x282570('CommonValue');
      var _0x362ce3 = _0x282570("Tools");
      var _0x33c1bb = _0x282570("CommonEnum");
      var _0x1aeed7 = _0x282570("CommonFunc");
      var _0x22fc54 = _0x282570('CommonConfig');
      var _0x19a4aa = _0x282570("CommonAudio");
      var _0x1d14d0 = _0x282570('Types');
      _0x338fb1 = {
        'gameNode': cc.Node,
        'topNode': cc.Node,
        'progNode': cc.Node,
        'goldNode': cc.Node,
        'goldIcon': cc.Node,
        'goldNum': cc.Node,
        'effectNode': cc.Node,
        'backNode': cc.Node,
        'curLevNum': cc.Node,
        'proNode': cc.Node,
        'proSpr': cc.Sprite,
        'curPro': cc.Node,
        'propNode': cc.Node,
        'strongNode': cc.Node,
        'strongSpr': cc.Sprite,
        'slowNode': cc.Node,
        'slowSpr': cc.Sprite,
        'goldPNode': cc.Node,
        'goldPSpr': cc.Sprite,
        'fingerNode': cc.Node,
        'skel_finger': sp.Skeleton,
        'enemyNode': cc.Node,
        'enemyBg': cc.Node,
        'enemyFont': cc.Node,
        'enemyIconWarn': {
          'default': [],
          'type': [cc.Node]
        }
      };
      _0x2b7e75(_0x338fb1, 'propNode', cc.Node);
      _0x2b7e75(_0x338fb1, "enemyFontShadow", cc.Node);
      _0x2b7e75(_0x338fb1, "bossNode", cc.Node);
      _0x2b7e75(_0x338fb1, "bossTipNode", cc.Node);
      _0x2b7e75(_0x338fb1, "bossTips", cc.Label);
      _0x2b7e75(_0x338fb1, "blackNode", cc.Node);
      _0x2b7e75(_0x338fb1, "pf_num", cc.Prefab);
      _0x2b7e75(_0x338fb1, 'atlas_ui', cc.SpriteAtlas);
      cc.Class({
        'extends': cc.Component,
        'properties': _0x338fb1,
        'onLoad': function () {
          this.enemyIconWarn = [];
          this.killCount = 0x0;
          this.goldCount = 0x0;
          this._goldNum = null;
          this._goldList = [];
          this._pauseArr = [];
          this.fingerCall = null;
          this._bossTipOver = false;
          this._bossTipCall = null;
          this._blockList = [];
          this.backNode.active = _0x22fc54.GConfig.isCheat;
          this.goldPos = [cc.v2(-0x3c, 0x50), cc.v2(-0x46, 0x3c), cc.v2(-0x50, 0x46), cc.v2(-0x3c, -0x50), cc.v2(-0x4c, -0x46), cc.v2(-0x50, -0x3c), cc.v2(0x3c, 0x50), cc.v2(0x46, 0x3c), cc.v2(0x50, 0x46), cc.v2(0x3c, -0x50), cc.v2(0x4c, -0x46), cc.v2(0x50, -0x3c)];
        },
        'start': function () {
          _0x1aeed7.GFunc.adjustScreen(this.node);
          this.topNode.y = 0.5 * _0x1b5df6.GValue.Size_View.height / this.node.scale;
          this.progNode.y = 0.5 * _0x1b5df6.GValue.Size_View.height / this.node.scale - 0x8c;
          this.goldNode.y = 0.5 * _0x1b5df6.GValue.Size_View.height / this.node.scale - 0xbe;
          this.propNode.y = 0.5 * _0x1b5df6.GValue.Size_View.height / this.node.scale - 0xbe;
          this.curLevNum.parent.y = 0.5 * _0x1b5df6.GValue.Size_View.height / this.node.scale - 0x46;
          this._goldNum = _0x362ce3.DYTools.createPrefabCom(this.goldNum, this.pf_num, 'PfNum');
          this._goldNum.setParam(_0x33c1bb.Enum_Num.Blood, cc.v2(0.5, 0.5), 0x2, this.atlas_ui);
          this._goldNum.node.scale = 0.5;
          this.refreshKillCountDisplay();
          this.refreshGoldNumDisplay();
          var _0x34f36e = _0x362ce3.DYTools.createPrefabCom(this.curLevNum, this.pf_num, "PfNum");
          _0x34f36e.setParam(_0x33c1bb.Enum_Num.Level, cc.v2(0.5, 0.5), 0x2, this.atlas_ui);
          _0x34f36e.setNum(_0x1b5df6.GValue.EntityWorld.curLevel);
          this.curLevNum.width = _0x34f36e.size.width;
          if (_0x1b5df6.GValue.Has_TopBar) {
            this.topNode.y -= 0x2c;
            this.progNode.y -= 0x2c;
            this.goldNode.y -= 0x2c;
            this.curLevNum.parent.y -= 0x2c;
            this.propNode.y -= 0x2c;
          }
        },
        'onGameBack': function () {
          if (_0x1b5df6.GValue.DDSDK) {
            _0x1b5df6.GValue.DDSDK.parent = null;
          }
          _0x1b5df6.GValue.HomeUI = null;
          cc.director.loadScene('Game');
        },
        'onStopMap': function () {
          _0x1b5df6.GValue.EntityWorld.mapStop = !_0x1b5df6.GValue.EntityWorld.mapStop;
        },
        'onBtnTip': function () {
          if (this._bossTipOver) {
            this.hideBossTips();
          }
        },
        'startGame': function (_0x8a1939) {
          var _0x3dabbf = _0x1b5df6.GValue.EntityWorld.mapMgr.totalDistance;
          for (var _0x588f2f = 0x0; _0x588f2f < _0x8a1939.length; _0x588f2f++) {
            var _0x502d42 = new cc.Node();
            _0x502d42.x = this.proSpr.node.x + this.proSpr.node.width * (_0x8a1939[_0x588f2f].x / _0x3dabbf - 0.5);
            this.proNode.addChild(_0x502d42);
            _0x502d42.addComponent(cc.Sprite).spriteFrame = this.atlas_ui.getSpriteFrame('pause' + _0x8a1939[_0x588f2f].y);
            this._pauseArr.push(_0x502d42);
          }
        },
        'pauseEnemyFinish': function (_0x3c49ac) {
          if (this._pauseArr[_0x3c49ac - 0x1]) {
            var _0x360318 = new cc.Node();
            this._pauseArr[_0x3c49ac - 0x1].addChild(_0x360318);
            _0x360318.addComponent(cc.Sprite).spriteFrame = this.atlas_ui.getSpriteFrame("pFinish");
            this._pauseArr.push(_0x360318);
          }
        },
        'addKillCount': function () {
          this.killCount++;
          this.refreshKillCountDisplay();
        },
        'refreshKillCountDisplay': function () {},
        'addGoldCount': function (_0x360212) {
          this.goldCount += _0x360212;
          this.refreshGoldNumDisplay();
        },
        'refreshGoldNumDisplay': function () {
          this._goldNum.setNum(this.goldCount);
          this.goldNum.width = this._goldNum.size.width * this._goldNum.node.scale;
        },
        'refreshDisPro': function (_0x1d5d60) {
          this.proSpr.fillRange = _0x1d5d60;
          this.curPro.x = this.proSpr.node.x + this.proSpr.node.width * (-0.5 + _0x1d5d60);
        },
        'showPropProgress': function (_0x4a133a) {
          switch (_0x4a133a) {
            case _0x1d14d0.PropType.Strong:
              this.strongNode.active = true;
              this.strongSpr.fillRange = 0x1;
              break;
            case _0x1d14d0.PropType.Slow:
              this.slowNode.active = true;
              this.slowSpr.fillRange = 0x1;
              break;
            case _0x1d14d0.PropType.Gold:
              this.goldPNode.active = true;
              this.goldPSpr.fillRange = 0x1;
          }
        },
        'refreshPropProgress': function (_0x519bc8, _0x541443) {
          switch (_0x519bc8) {
            case _0x1d14d0.PropType.Strong:
              this.strongNode.active = true;
              this.strongSpr.fillRange = _0x541443;
              if (_0x541443 <= 0x0) {
                this.strongNode.active = false;
              }
              break;
            case _0x1d14d0.PropType.Slow:
              this.slowNode.active = true;
              this.slowSpr.fillRange = _0x541443;
              if (_0x541443 <= 0x0) {
                this.slowNode.active = false;
              }
              break;
            case _0x1d14d0.PropType.Gold:
              this.goldPNode.active = true;
              this.goldPSpr.fillRange = _0x541443;
              if (_0x541443 <= 0x0) {
                this.goldPNode.active = false;
              }
          }
        },
        'initEnterMapAct': function () {
          this.topNode.active = false;
          this.curLevNum.parent.active = false;
          this.progNode.active = false;
          this.goldNode.active = false;
        },
        'playGameStartAct': function (_0x46757d) {
          this.initEnterMapAct();
          var _0x5f58e3 = _0x22fc54.GConfig.actionFrameTime;
          this.blackNode.active = true;
          this.blackNode.opacity = 0x0;
          var _0x985abd = cc.fadeIn(0x5 * _0x5f58e3);
          var _0x2fc67b = cc.callFunc(function () {
            if (_0x46757d) {
              _0x46757d();
            }
          });
          var _0xe497cc = cc.sequence(_0x985abd, _0x2fc67b);
          this.blackNode.runAction(_0xe497cc);
          this.playLevelShowAct();
        },
        'playBlackHideAct': function () {
          this.blackNode.runAction(cc.sequence(cc.fadeOut(0x6 * _0x22fc54.GConfig.actionFrameTime), cc.hide()));
        },
        'playLevelShowAct': function () {
          var _0x12bcdd = this.curLevNum.parent;
          _0x12bcdd.active = true;
          _0x12bcdd.opacity = 0x0;
          _0x12bcdd.runAction(cc.fadeIn(0x7 * _0x22fc54.GConfig.actionFrameTime));
        },
        'playProgressShowAct': function () {
          this.progNode.active = true;
          this.progNode.opacity = 0x0;
          this.progNode.runAction(cc.fadeIn(0x5 * _0x22fc54.GConfig.actionFrameTime));
          this.goldNode.active = true;
          this.goldNode.opacity = 0x0;
          this.goldNode.runAction(cc.fadeIn(0x5 * _0x22fc54.GConfig.actionFrameTime));
          this.topNode.active = true;
          this.topNode.opacity = 0x0;
          this.topNode.runAction(cc.fadeIn(0x5 * _0x22fc54.GConfig.actionFrameTime));
        },
        'showFingerGuide': function (_0x49e783) {
          this.fingerCall = _0x49e783;
          this.fingerNode.active = true;
          this.skel_finger.setAnimation(0x0, "play", true);
        },
        'hideFingerGuide': function () {
          this.skel_finger.node.active = false;
          this.fingerNode.active = false;
        },
        'showEnemyCome': function (_0x511c6d) {
          var _0xf4ab05 = this;
          var _0x359cb6 = _0x22fc54.GConfig.actionFrameTime;
          this.enemyBg.active = false;
          this.enemyNode.active = true;
          this.enemyFontShadow.active = false;
          this.enemyFont.opacity = 0x0;
          this.enemyFont.scale = 2.7;
          var _0x465fd6 = cc.scaleTo(0x4 * _0x359cb6, 0.8);
          var _0x3da6f7 = cc.fadeIn(0x4 * _0x359cb6);
          var _0x4cb6aa = cc.spawn(_0x465fd6, _0x3da6f7);
          var _0x19284c = cc.scaleTo(0x3 * _0x359cb6, 0x1);
          var _0x6c9601 = cc.callFunc(function () {
            _0xf4ab05.enemyFontShadow.active = true;
            _0xf4ab05.enemyFontShadow.opacity = 0xff;
            _0xf4ab05.enemyFontShadow.runAction(cc.spawn(cc.scaleTo(0x5 * _0x359cb6, 1.4), cc.fadeOut(0x5 * _0x359cb6)));
          });
          var _0xc28abe = cc.sequence(_0x4cb6aa, _0x19284c, _0x6c9601);
          this.enemyFont.runAction(_0xc28abe);
          var _0x3f4513 = 0x0;
          for (var _0x3482bd = _0xf4ab05.enemyIconWarn; _0x3f4513 < _0x3482bd.length; _0x3f4513++) {
            _0x3482bd[_0x3f4513].runAction(cc.sequence(_0x4cb6aa.clone(), _0x19284c.clone()));
          }
          this.scheduleOnce(function () {
            _0xf4ab05.enemyBg.active = true;
            _0xf4ab05.enemyBg.scaleY = 1.75;
            var _0x37c5b6 = cc.scaleTo(0x3 * _0x359cb6, 0x1, 0x1);
            _0xf4ab05.enemyBg.runAction(_0x37c5b6);
          }, 0x2 * _0x359cb6);
          this.scheduleOnce(function () {
            if (_0x511c6d) {
              _0x511c6d();
            }
            var _0x4a4daa = cc.scaleTo(0x6 * _0x359cb6, 1.08);
            var _0x494f01 = cc.fadeTo(0x6 * _0x359cb6, 0x99);
            var _0x15659 = cc.spawn(_0x4a4daa, _0x494f01);
            var _0x8a3136 = cc.scaleTo(0xb * _0x359cb6, 0x1);
            var _0x4f64ec = cc.fadeTo(0xb * _0x359cb6, 0xff);
            var _0x24af47 = cc.spawn(_0x8a3136, _0x4f64ec);
            var _0x5ba71f = cc.repeat(cc.sequence(_0x15659, _0x24af47), 0x2);
            var _0xc83c44 = cc.sequence(_0x5ba71f, cc.callFunc(function () {
              _0xf4ab05.enemyFont.stopAllActions();
              var _0x3d0e54 = cc.scaleTo(0x3 * _0x359cb6, 1.37);
              var _0x1fabde = cc.scaleTo(0x4 * _0x359cb6, 0.7);
              var _0x3d93fe = cc.sequence(_0x3d0e54, _0x1fabde);
              _0xf4ab05.enemyFont.runAction(cc.sequence(_0x3d93fe, cc.callFunc(function () {
                var _0x29808b = cc.scaleTo(0x4 * _0x359cb6, 0x1, 0.3);
                _0xf4ab05.enemyBg.runAction(cc.sequence(_0x29808b, cc.fadeOut(_0x359cb6), cc.callFunc(function () {
                  _0xf4ab05.enemyNode.active = false;
                })));
              }), cc.fadeOut(_0x359cb6)));
              var _0x5f2f5d = 0x0;
              for (var _0x4e74a1 = _0xf4ab05.enemyIconWarn; _0x5f2f5d < _0x4e74a1.length; _0x5f2f5d++) {
                _0x4e74a1[_0x5f2f5d].runAction(cc.sequence(_0x3d93fe.clone(), cc.fadeOut(_0x359cb6)));
              }
            }));
            _0xf4ab05.enemyFont.runAction(_0xc83c44);
            var _0x2013c5 = 0x0;
            for (var _0x2d444b = _0xf4ab05.enemyIconWarn; _0x2013c5 < _0x2d444b.length; _0x2013c5++) {
              _0x2d444b[_0x2013c5].runAction(_0x5ba71f.clone());
            }
          }, 0xf * _0x359cb6);
          _0x19a4aa.GAudio.playSound(_0x19a4aa.Enum_Audio.warning);
        },
        'showBossCome': function (_0x30b3fd) {
          this.bossNode.active = true;
          var _0x371b37 = _0x22fc54.GConfig.actionFrameTime;
          var _0x619c76 = this;
          var _0x23ae0e = this.bossNode.getChildByName('bg');
          _0x23ae0e.active = false;
          var _0x319d9e = this.bossNode.getChildByName("font");
          _0x319d9e.opacity = 0x0;
          _0x319d9e.scale = 2.7;
          var _0x2491e7 = cc.scaleTo(0x4 * _0x371b37, 0.8);
          var _0x2b04f6 = cc.fadeIn(0x4 * _0x371b37);
          var _0x48094c = cc.spawn(_0x2491e7, _0x2b04f6);
          var _0x622d08 = cc.scaleTo(0x3 * _0x371b37, 0x1);
          var _0x5bd131 = cc.callFunc(function () {
            var _0x4bf6c4 = new cc.Node();
            _0x4bf6c4.parent = _0x619c76.bossNode;
            _0x4bf6c4.addComponent(cc.Sprite).spriteFrame = _0x319d9e.getComponent(cc.Sprite).spriteFrame;
            var _0x40fffd = cc.scaleTo(0x5 * _0x371b37, 1.5);
            var _0x2099b3 = cc.fadeOut(0x5 * _0x371b37);
            var _0x12bffa = cc.spawn(_0x40fffd, _0x2099b3);
            var _0x28837e = cc.sequence(_0x12bffa, cc.removeSelf());
            _0x4bf6c4.runAction(_0x28837e);
          });
          var _0x20ba51 = cc.delayTime(0x5 * _0x371b37);
          var _0x11f6b8 = cc.callFunc(function () {
            _0x319d9e.stopAllActions();
            var _0x546fa7 = cc.scaleTo(0x3 * _0x371b37, 1.08);
            var _0x2ab553 = cc.scaleTo(0x8 * _0x371b37, 0x1);
            var _0x57310b = cc.fadeTo(0x8 * _0x371b37, 0xcc);
            var _0x2492dd = cc.spawn(_0x2ab553, _0x57310b);
            var _0x48d1f9 = cc.fadeTo(0x4 * _0x371b37, 0xff);
            var _0x3ab7f0 = cc.sequence(_0x546fa7, _0x2492dd, _0x48d1f9);
            _0x319d9e.runAction(cc.repeat(_0x3ab7f0, 0x2));
          });
          var _0x3df05e = cc.sequence(_0x48094c, _0x622d08, _0x5bd131, _0x20ba51, _0x11f6b8);
          _0x319d9e.runAction(_0x3df05e);
          this.scheduleOnce(function () {
            _0x23ae0e.active = true;
            _0x23ae0e.scaleY = 1.75;
            var _0x325b72 = cc.scaleTo(0x3 * _0x371b37, 0x1);
            var _0x42d80d = cc.callFunc(function () {
              _0x23ae0e.stopAllActions();
              var _0x391dcc = cc.place(cc.v2(0x0, 0x0));
              var _0x5276b1 = cc.moveBy(0x4 * _0x371b37, cc.v2(0x46, 0x0));
              var _0x48f899 = cc.sequence(_0x391dcc, _0x5276b1);
              _0x23ae0e.runAction(cc.repeatForever(_0x48f899));
            });
            _0x23ae0e.runAction(cc.sequence(_0x325b72, _0x42d80d));
          }, 0x2 * _0x371b37);
          this.scheduleOnce(function () {
            _0x319d9e.stopAllActions();
            var _0x27b60b = cc.scaleTo(0x3 * _0x371b37, 1.54);
            var _0x409838 = cc.scaleTo(0x2 * _0x371b37, 1.8);
            var _0x230ed4 = cc.scaleTo(0x4 * _0x371b37, 0.75);
            var _0x3c060c = cc.fadeOut(_0x371b37);
            var _0x388e3a = cc.sequence(_0x27b60b, _0x409838, _0x230ed4, _0x3c060c);
            _0x319d9e.runAction(_0x388e3a);
          }, 0x2a * _0x371b37);
          this.scheduleOnce(function () {
            _0x23ae0e.stopAllActions();
            var _0x2c4d84 = cc.scaleTo(0x4 * _0x371b37, 0x1, 0.18);
            var _0xac3e32 = cc.fadeTo(0x4 * _0x371b37, 0x33);
            var _0x5284f9 = cc.spawn(_0x2c4d84, _0xac3e32);
            var _0x554dda = cc.fadeOut(_0x371b37);
            var _0x5c3b51 = cc.sequence(_0x5284f9, _0x554dda);
            _0x23ae0e.runAction(_0x5c3b51);
          }, 0x31 * _0x371b37);
          this.scheduleOnce(function () {
            if (_0x30b3fd) {
              _0x30b3fd();
            }
          }, 0x24 * _0x371b37);
          this.showStoneDrop();
          this.scheduleOnce(function () {
            _0x619c76.showStoneDrop();
          }, 0x5 * _0x371b37);
          this.scheduleOnce(function () {
            _0x619c76.showStoneDrop();
          }, 0x19 * _0x371b37);
          this.scheduleOnce(function () {
            _0x619c76.showStoneDrop();
          }, 0x1b * _0x371b37);
          _0x19a4aa.GAudio.playSound(_0x19a4aa.Enum_Audio.warning);
        },
        'showBossTips': function (_0x5e4e0c, _0x7ec6b6) {
          this._bossTipCall = _0x7ec6b6;
          this.bossTips.string = _0x5e4e0c;
          var _0x343272 = this;
          this._bossTipOver = false;
          var _0x41a0a8 = _0x22fc54.GConfig.actionFrameTime;
          this.bossTipNode.active = true;
          var _0x75dccc = this.bossTipNode.getChildByName("layer");
          _0x75dccc.zIndex = -0xa;
          var _0x28cc7d = this.bossTipNode.getChildByName('top');
          var _0x5cebf5 = this.bossTipNode.getChildByName("bot");
          var _0x220edb = this.bossTipNode.getChildByName("click");
          _0x28cc7d.zIndex = 0xa;
          _0x5cebf5.zIndex = 0xa;
          _0x220edb.zIndex = 0x1;
          _0x75dccc.active = false;
          _0x220edb.opacity = 0x0;
          this.gameNode.runAction(cc.fadeOut(0x5 * _0x41a0a8));
          _0x28cc7d.y = _0x28cc7d.y / this.node.scale;
          var _0x447b5f = _0x28cc7d.position;
          _0x28cc7d.y = 0x2ee / this.node.scale;
          _0x28cc7d.runAction(cc.moveTo(0x4 * _0x41a0a8, _0x447b5f));
          _0x5cebf5.y = _0x5cebf5.y / this.node.scale;
          _0x447b5f = _0x5cebf5.position;
          _0x5cebf5.y = -0x2ee / this.node.scale;
          _0x5cebf5.runAction(cc.moveTo(0x4 * _0x41a0a8, _0x447b5f));
          this.scheduleOnce(function () {
            _0x75dccc.active = true;
          }, 0x4 * _0x41a0a8);
          var _0x2b362a = this.bossTipNode.getChildByName("tips");
          _0x2b362a.zIndex = 0x1;
          var _0x3f3ce6 = _0x2b362a.getChildByName('p');
          var _0x4b3a03 = _0x2b362a.getChildByName('l');
          var _0x3f4916 = _0x2b362a.getChildByName('k');
          var _0x23e0a6 = _0x3f4916.getChildByName('f');
          _0x3f3ce6.active = false;
          _0x4b3a03.scaleY = 0x0;
          _0x3f4916.active = false;
          _0x23e0a6.opacity = 0x0;
          this.scheduleOnce(function () {
            _0x3f3ce6.active = true;
            _0x3f3ce6.runAction(cc.sequence(cc.scaleTo(0x3 * _0x41a0a8, 1.1), cc.scaleTo(0x4 * _0x41a0a8, 0x1)));
          }, 0x6 * _0x41a0a8);
          this.scheduleOnce(function () {
            _0x4b3a03.runAction(cc.scaleTo(0x3 * _0x41a0a8, 0x1));
          }, 0x9 * _0x41a0a8);
          this.scheduleOnce(function () {
            _0x3f4916.active = true;
            _0x3f4916.scaleX = 0.1;
            _0x3f4916.scaleY = 0.9;
            var _0x405ba6 = cc.scaleTo(0x4 * _0x41a0a8, 1.03, 0x1);
            var _0xd6dcf6 = cc.scaleTo(0x3 * _0x41a0a8, 0x1);
            _0x3f4916.runAction(cc.sequence(_0x405ba6, _0xd6dcf6));
          }, 0xc * _0x41a0a8);
          this.scheduleOnce(function () {
            _0x23e0a6.runAction(cc.fadeIn(0x4 * _0x41a0a8));
          }, 0x13 * _0x41a0a8);
          this.scheduleOnce(function () {
            var _0x2e67ba = cc.sequence(cc.fadeIn(0x4 * _0x41a0a8), cc.callFunc(function () {
              _0x343272._bossTipOver = true;
            }));
            _0x220edb.runAction(_0x2e67ba);
          }, 0x1f * _0x41a0a8);
        },
        'hideBossTips': function () {
          var _0x45e04a = this;
          var _0x4bcbcb = this;
          var _0x4acdce = _0x22fc54.GConfig.actionFrameTime;
          var _0x404085 = this.bossTipNode.getChildByName("click");
          var _0x25e67f = this.bossTipNode.getChildByName("top");
          var _0x37a36f = this.bossTipNode.getChildByName("bot");
          var _0x3158a4 = this.bossTipNode.getChildByName("tips");
          var _0x45141c = _0x3158a4.getChildByName('p');
          var _0x56588c = _0x3158a4.getChildByName('l');
          var _0x346b4d = _0x3158a4.getChildByName('k');
          _0x404085.opacity = 0x0;
          var _0x382eee = cc.scaleTo(0x3 * _0x4acdce, 1.25, 1.15);
          var _0xf3fed3 = cc.scaleTo(0x3 * _0x4acdce, 0.15, 0.8);
          _0x346b4d.runAction(cc.sequence(_0x382eee, _0xf3fed3, cc.fadeOut(0x0)));
          this.scheduleOnce(function () {
            _0x56588c.runAction(cc.sequence(cc.scaleTo(0x3 * _0x4acdce, 0x1, 0x0), cc.callFunc(function () {
              _0x45141c.active = false;
            })));
            var _0x55e7d2 = cc.scaleTo(0x3 * _0x4acdce, 0x1, 1.1);
            var _0x1dcb3f = cc.moveTo(0x4 * _0x4acdce, cc.v2(0x0, 0x2ee / _0x45e04a.node.scale));
            _0x25e67f.runAction(cc.sequence(_0x55e7d2, _0x1dcb3f));
            _0x55e7d2 = cc.scaleTo(0x3 * _0x4acdce, 0x1, 1.1);
            _0x1dcb3f = cc.moveTo(0x4 * _0x4acdce, cc.v2(0x0, -0x2ee / _0x45e04a.node.scale));
            _0x37a36f.runAction(cc.sequence(_0x55e7d2, _0x1dcb3f));
          }, 0x7 * _0x4acdce);
          this.scheduleOnce(function () {
            _0x4bcbcb.bossTipNode.getChildByName("layer").active = false;
            _0x4bcbcb.gameNode.runAction(cc.sequence(cc.fadeIn(0x5 * _0x4acdce), cc.callFunc(function () {
              if (_0x4bcbcb._bossTipCall) {
                _0x4bcbcb._bossTipCall();
              }
              _0x4bcbcb.bossTipNode.active = false;
            })));
          }, 0xd * _0x4acdce);
        },
        'showStoneDrop': function () {
          var _0xc36bfc = this;
          var _0x7cb9d0 = _0x22fc54.GConfig.actionFrameTime;
          var _0x2a4bb4 = _0x1b5df6.GValue.Size_View.width / 0x2;
          var _0x470588 = _0x1b5df6.GValue.Size_View.height / 0x2;
          var _0x560cf6 = _0x362ce3.DYTools.random_int(0x4, 0x6);
          var _0x2935b8 = (0x2 * _0x2a4bb4 - 0x14) / _0x560cf6;
          var _0x1d1fe8 = function (_0x1c30b) {
            var _0x59d31e = _0x51dfc2._blockList.pop();
            if (_0x59d31e) {
              _0x59d31e.active = true;
            } else {
              _0x59d31e = new cc.Node();
              _0x51dfc2.effectNode.addChild(_0x59d31e);
              _0x59d31e.addComponent(cc.Sprite).spriteFrame = _0x51dfc2.atlas_ui.getSpriteFrame("block" + _0x1b5df6.GValue.EntityWorld.levelData.bgId);
            }
            _0x59d31e.zIndex = _0x362ce3.DYTools.random_int(0x0, 0xa);
            _0x59d31e.angle = _0x362ce3.DYTools.random_int(0x0, 0x168);
            _0x59d31e.scale = _0x362ce3.DYTools.random_int(0x6, 0xa) / 0xa;
            _0x59d31e.position = cc.v2(_0x362ce3.DYTools.random_int(0xa - _0x2a4bb4 + _0x2935b8 * _0x1c30b, 0xa - _0x2a4bb4 + _0x2935b8 * (_0x1c30b + 0x1)), _0x470588 / _0x51dfc2.node.scale + 0xa);
            var _0x177a42 = _0x362ce3.DYTools.random_int(0x14, 0x28) * _0x7cb9d0;
            var _0x1a05de = cc.delayTime(_0x362ce3.DYTools.random_int(0x3 * _0x1c30b, 0x7 * _0x1c30b) * _0x7cb9d0);
            var _0x4520ac = cc.moveBy(_0x177a42, cc.v2(0x0, 0x2 * -_0x470588 - 0x64));
            var _0x35b3fd = cc.tintTo(_0x177a42, 0x10, 0x2a, 0x47);
            _0x59d31e.runAction(cc.sequence(_0x1a05de, cc.spawn(_0x4520ac, _0x35b3fd), cc.callFunc(function () {
              _0x59d31e.active = false;
              _0xc36bfc._blockList.push(_0x59d31e);
            })));
          };
          var _0x51dfc2 = this;
          for (var _0xcdac98 = 0x0; _0xcdac98 < _0x560cf6; _0xcdac98++) {
            _0x1d1fe8(_0xcdac98);
          }
          _0x560cf6 = _0x362ce3.DYTools.random_int(0x2, 0x3);
          _0x2935b8 = (0x2 * _0x2a4bb4 - 0x64) / _0x560cf6;
          for (_0xcdac98 = 0x0; _0xcdac98 < _0x560cf6; _0xcdac98++) {
            var _0x133d9f = new cc.Node();
            _0x133d9f.zIndex = _0x362ce3.DYTools.random_int(0x0, 0xa);
            this.effectNode.addChild(_0x133d9f);
            _0x133d9f.addComponent(cc.Sprite).spriteFrame = this.atlas_ui.getSpriteFrame("dust");
            _0x133d9f.scaleY = _0x362ce3.DYTools.random_int(0x14, 0x1e) / 0xa;
            _0x133d9f.position = cc.v2(_0x362ce3.DYTools.random_int(0x32 - _0x2a4bb4 + _0x2935b8 * _0xcdac98, 0x32 - _0x2a4bb4 + _0x2935b8 * (_0xcdac98 + 0x1)), _0x470588 / this.node.scale + _0x133d9f.height * _0x133d9f.scaleY);
            var _0x21a764 = cc.delayTime(_0x362ce3.DYTools.random_int(_0xcdac98, 0x2 * _0xcdac98) * _0x7cb9d0);
            var _0x3464cb = _0x362ce3.DYTools.random_int(0x50, 0x78) / 0x64;
            var _0x5c9308 = cc.moveBy(_0x3464cb, cc.v2(0x0, -_0x470588 - _0x133d9f.height * _0x133d9f.scaleY));
            var _0x3dcb2f = cc.scaleTo(_0x3464cb, 1.8);
            var _0x115617 = cc.spawn(_0x5c9308, _0x3dcb2f);
            var _0x398a76 = cc.fadeOut(0.2);
            var _0x2b73ea = cc.moveBy(0.2, cc.v2(0x0, -_0x362ce3.DYTools.random_int(0xdc, 0x168)));
            var _0x1cf88a = cc.spawn(_0x398a76, _0x2b73ea);
            _0x133d9f.runAction(cc.sequence(_0x21a764, _0x115617, _0x1cf88a, cc.removeSelf()));
          }
        },
        'playGameOverAction': function () {
          this.curLevNum.parent.active = false;
          this.proNode.runAction(cc.fadeOut(0.2));
          this.goldNode.runAction(cc.fadeOut(0.2));
          this.propNode.active = false;
        },
        'playGoldFlyEffect': function (_0x5fce0a, _0x59fe71, _0x15d0c6) {
          var _0x7a01cf = this.goldIcon.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
          var _0x1a40dd = _0x15d0c6.y > _0x1b5df6.GValue.ViewCenter.y ? 0x7 : 0xe;
          _0x15d0c6 = this.node.convertToNodeSpaceAR(_0x15d0c6);
          _0x7a01cf = this.node.convertToNodeSpaceAR(_0x7a01cf);
          var _0x3c4033 = _0x22fc54.GConfig.actionFrameTime;
          var _0x1fd0e3 = this;
          var _0x2d0ac7 = 0x0;
          var _0x1acd99 = function (_0x1201a7) {
            var _0x2426e2 = _0xe2c5b3._goldList.pop();
            var _0x5df5e1 = null;
            if (_0x2426e2) {
              _0x2426e2.stopAllActions();
              (_0x5df5e1 = _0x2426e2.getChildByName("gold")).stopAllActions();
              _0x5df5e1.scale = 0x1;
            } else {
              _0x2426e2 = new cc.Node();
              _0xe2c5b3.node.addChild(_0x2426e2);
              (_0x5df5e1 = new cc.Node()).name = "gold";
              _0x2426e2.addChild(_0x5df5e1);
              _0x5df5e1.addComponent(cc.Sprite).spriteFrame = _0xe2c5b3.atlas_ui.getSpriteFrame('gold');
            }
            _0x2426e2.scale = 0.9;
            _0x2426e2.position = _0x15d0c6;
            var _0x5a5f4 = Math.floor(_0x59fe71 / _0x5fce0a);
            if (_0x1201a7 == _0x5fce0a - 0x1) {
              _0x5a5f4 = _0x59fe71 - _0x2d0ac7;
            }
            _0x2d0ac7 += _0x5a5f4;
            var _0x36186e = _0x1201a7 % 0x3;
            if (0x1 == _0x5fce0a) {
              _0x36186e = _0x362ce3.DYTools.random_int(0x0, 0x2);
            }
            if (0x0 == _0x36186e) {
              var _0x4036dd = cc.place(_0x15d0c6.add(cc.v2(-0x3, 0x5)));
              var _0x41dea3 = cc.moveTo(0x3 * _0x3c4033, _0x15d0c6.add(cc.v2(-0x3f, -0x28)));
              var _0x5f0375 = cc.moveTo(0x5 * _0x3c4033, _0x15d0c6.add(cc.v2(-0x74, -0x49)));
              var _0x2f725b = cc.moveTo(_0x3c4033 * _0x1a40dd, _0x7a01cf);
              var _0x1c0585 = cc.sequence(_0x4036dd, _0x41dea3, _0x5f0375, _0x2f725b, cc.callFunc(function () {
                _0x1fd0e3.addGoldCount(_0x5a5f4);
                _0x2426e2.position = cc.v2(-0x2710, -0x2710);
                _0x1fd0e3._goldList.push(_0x2426e2);
              }));
              _0x2426e2.runAction(_0x1c0585);
            } else {
              if (0x1 == _0x36186e) {
                _0x4036dd = cc.place(_0x15d0c6.add(cc.v2(0x4, -0x5)));
                _0x41dea3 = cc.moveTo(0x2 * _0x3c4033, _0x15d0c6.add(cc.v2(0x35, -0x22)));
                _0x5f0375 = cc.moveTo(0x6 * _0x3c4033, _0x15d0c6.add(cc.v2(0x47, -0x3e)));
                var _0x5761ef = cc.moveTo(_0x3c4033 * _0x1a40dd, _0x7a01cf);
                _0x1c0585 = cc.sequence(_0x4036dd, _0x41dea3, _0x5f0375, _0x5761ef, cc.callFunc(function () {
                  _0x1fd0e3.addGoldCount(_0x5a5f4);
                  _0x2426e2.position = cc.v2(-0x2710, -0x2710);
                  _0x1fd0e3._goldList.push(_0x2426e2);
                }));
                _0x2426e2.runAction(_0x1c0585);
              } else if (0x2 == _0x36186e) {
                _0x4036dd = cc.place(_0x15d0c6.add(cc.v2(0x6, 0x35)));
                _0x41dea3 = cc.moveTo(0x3 * _0x3c4033, _0x15d0c6.add(cc.v2(-0x28, 0x80)));
                _0x5f0375 = cc.moveTo(0x6 * _0x3c4033, _0x15d0c6.add(cc.v2(-0x33, 0x96)));
                _0x2f725b = cc.moveTo(_0x3c4033 * _0x1a40dd, _0x7a01cf);
                _0x1c0585 = cc.sequence(_0x4036dd, _0x41dea3, _0x5f0375, _0x2f725b, cc.callFunc(function () {
                  _0x1fd0e3.addGoldCount(_0x5a5f4);
                  _0x2426e2.position = cc.v2(-0x2710, -0x2710);
                  _0x1fd0e3._goldList.push(_0x2426e2);
                }));
                _0x2426e2.runAction(_0x1c0585);
              }
            }
            var _0x22c237 = cc.scaleTo(0x1 * _0x3c4033, 0.68, 0x1);
            var _0x45b6e3 = cc.scaleTo(0x1 * _0x3c4033, 0.38, 0x1);
            var _0x477c45 = cc.scaleTo(0x1 * _0x3c4033, 0.15, 0x1);
            var _0x182028 = cc.scaleTo(0x1 * _0x3c4033, 0.58, 0x1);
            var _0x14dbbe = cc.scaleTo(0x1 * _0x3c4033, 0x1, 0x1);
            _0x5df5e1.runAction(cc.repeat(cc.sequence(_0x22c237, _0x45b6e3, _0x477c45, _0x182028, _0x14dbbe), 0x3));
          };
          var _0xe2c5b3 = this;
          for (var _0x55c0e5 = 0x0; _0x55c0e5 < _0x5fce0a; _0x55c0e5++) {
            _0x1acd99(_0x55c0e5);
          }
        },
        'playGoldEnemyDie': function (_0x57623f, _0xdade1d) {
          var _0x4356a5 = this.node.convertToNodeSpaceAR(_0x57623f);
          var _0x3e946b = this.goldIcon.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
          _0x3e946b = this.node.convertToNodeSpaceAR(_0x3e946b);
          var _0x57405e = this;
          var _0x490f86 = [];
          var _0x16156a = function (_0x5c4fff) {
            var _0x4ea88a = _0xfb511e._goldList.pop();
            if (_0x4ea88a) {
              _0x4ea88a.active = true;
            } else {
              _0x4ea88a = new cc.Node();
              _0xfb511e.node.addChild(_0x4ea88a);
              var _0x29f462 = new cc.Node();
              _0x4ea88a.addChild(_0x29f462);
              _0x29f462.addComponent(cc.Sprite).spriteFrame = _0xfb511e.atlas_ui.getSpriteFrame("gold");
            }
            _0x490f86.push(_0x4ea88a);
            _0x4ea88a.opacity = 0x1;
            _0x4ea88a.position = _0x4356a5;
            _0x4ea88a.scale = 0x1;
            var _0x1e3e10 = Math.floor(_0xdade1d / 0xa);
            if (0x9 == _0x5c4fff) {
              _0x1e3e10 = _0xdade1d - 0x0;
            }
            _0xfb511e.playSingleGold(_0x4ea88a, _0x5c4fff, _0x3e946b, function () {
              _0x57405e.addGoldCount(_0x1e3e10);
              _0x4ea88a.active = false;
              _0x57405e._goldList.push(_0x4ea88a);
            });
          };
          var _0xfb511e = this;
          for (var _0x23531f = 0x0; _0x23531f < 0xa; _0x23531f++) {
            var _0x57405e;
            var _0x490f86;
            var _0x16156a;
            var _0xfb511e;
            var _0x23531f;
            _0x16156a(_0x23531f);
          }
        },
        'playSingleGold': function (_0x3e42e8, _0x3bc507, _0x2cba1b, _0x21f66d) {
          var _0x51361f = _0x22fc54.GConfig.actionFrameTime;
          var _0x2de69c = cc.callFunc(function () {
            if (_0x21f66d) {
              _0x21f66d();
            }
          });
          _0x3e42e8.scale = 0.8;
          var _0x1fbdd3 = cc.moveTo(0x7 * _0x51361f, _0x2cba1b);
          var _0x5c83e4 = cc.scaleTo(0x7 * _0x51361f, 0.7);
          var _0x150685 = cc.spawn(_0x1fbdd3, _0x5c83e4);
          var _0x33b4e1 = _0x3e42e8.position;
          switch (_0x3bc507) {
            case 0x0:
              _0x3e42e8.position = _0x33b4e1.add(cc.v2(-0x7, 0xd));
              _0x3e42e8.opacity = 0xff;
              _0x3e42e8.angle = 0xa2;
              var _0x30a032 = cc.scaleTo(0x3 * _0x51361f, 0x1);
              var _0x3ba1b5 = cc.moveTo(0x3 * _0x51361f, _0x33b4e1.add(cc.v2(0x0, 0x18)));
              var _0x181ef9 = cc.spawn(_0x30a032, _0x3ba1b5);
              var _0x9843c8 = cc.scaleTo(0x6 * _0x51361f, 0.8);
              var _0x2e9002 = cc.moveTo(0x6 * _0x51361f, _0x33b4e1.add(cc.v2(0x2, 0x2a)));
              var _0x3f850b = cc.spawn(_0x9843c8, _0x2e9002);
              _0x3e42e8.runAction(cc.sequence(_0x181ef9, _0x3f850b, cc.delayTime(_0x51361f), _0x150685, _0x2de69c));
              break;
            case 0x1:
              _0x3e42e8.position = _0x33b4e1.add(cc.v2(-0x6, -0x3));
              _0x3e42e8.angle = 0xa2;
              _0x3e42e8.opacity = 0xff;
              var _0x2539a9 = cc.scaleTo(0x2 * _0x51361f, 0.95);
              var _0x17a032 = cc.moveTo(0x2 * _0x51361f, _0x33b4e1.add(cc.v2(-0x1f, -0xf)));
              var _0x487348 = cc.spawn(_0x2539a9, _0x17a032);
              var _0x2b20ac = cc.scaleTo(0x9 * _0x51361f, 0.8);
              var _0x528e95 = cc.moveTo(0x9 * _0x51361f, _0x33b4e1.add(cc.v2(-0x59, -0x21)));
              var _0x39ecf2 = cc.spawn(_0x2b20ac, _0x528e95);
              _0x3e42e8.runAction(cc.sequence(_0x487348, _0x39ecf2, cc.delayTime(_0x51361f), _0x150685, _0x2de69c));
              break;
            case 0x2:
              _0x3e42e8.position = _0x33b4e1.add(cc.v2(-0xb, 0x19));
              _0x3e42e8.opacity = 0xff;
              var _0x4cd41e = cc.scaleTo(0x2 * _0x51361f, 1.02);
              var _0x5dd63e = cc.moveTo(0x2 * _0x51361f, _0x33b4e1.add(cc.v2(-0x28, 0x33)));
              var _0x5de4ef = cc.spawn(_0x4cd41e, _0x5dd63e);
              var _0x8f5095 = cc.scaleTo(0x2 * _0x51361f, 0.8);
              var _0x5bbd28 = cc.moveTo(0x2 * _0x51361f, _0x33b4e1.add(cc.v2(-0x69, 0x4b)));
              var _0x3ff6db = cc.spawn(_0x8f5095, _0x5bbd28);
              _0x3e42e8.runAction(cc.sequence(_0x5de4ef, _0x3ff6db, cc.delayTime(_0x51361f), _0x150685, _0x2de69c));
              break;
            case 0x3:
              _0x3e42e8.position = _0x33b4e1.add(cc.v2(0x5, -0x5));
              _0x3e42e8.angle = 0x31;
              _0x3e42e8.opacity = 0xff;
              var _0x2a76b9 = cc.scaleTo(0x2 * _0x51361f, 0.98);
              var _0x39a6af = cc.moveTo(0x2 * _0x51361f, _0x33b4e1.add(cc.v2(0x27, 0x7)));
              var _0x303360 = cc.spawn(_0x2a76b9, _0x39a6af);
              var _0x277889 = cc.scaleTo(0x3 * _0x51361f, 0.91);
              var _0x151e6c = cc.moveTo(0x3 * _0x51361f, _0x33b4e1.add(cc.v2(0x4d, 0x13)));
              var _0x1abfaf = cc.spawn(_0x277889, _0x151e6c);
              var _0x38003f = cc.scaleTo(0x3 * _0x51361f, 0.8);
              var _0x6d9dc8 = cc.moveTo(0x3 * _0x51361f, _0x33b4e1.add(cc.v2(0x81, 0x23)));
              var _0x3392b3 = cc.rotateTo(0x3 * _0x51361f, -0x5e);
              var _0x49b17d = cc.spawn(_0x38003f, _0x6d9dc8, _0x3392b3);
              _0x3e42e8.runAction(cc.sequence(_0x303360, _0x1abfaf, _0x49b17d, cc.delayTime(_0x51361f), _0x150685, _0x2de69c));
              break;
            case 0x4:
              _0x3e42e8.position = _0x33b4e1.add(cc.v2(0xe, 0xe));
              _0x3e42e8.angle = 0xa2;
              _0x3e42e8.opacity = 0xff;
              var _0x5c84e9 = cc.scaleTo(0x2 * _0x51361f, 0x1);
              var _0x1338dc = cc.moveTo(0x2 * _0x51361f, _0x33b4e1.add(cc.v2(0x1f, 0x2b)));
              var _0x35ec05 = cc.spawn(_0x5c84e9, _0x1338dc);
              var _0x218a79 = cc.scaleTo(0x4 * _0x51361f, 0.9);
              var _0x1d15df = cc.moveTo(0x4 * _0x51361f, _0x33b4e1.add(cc.v2(0x2e, 0x42)));
              var _0x262052 = cc.spawn(_0x218a79, _0x1d15df);
              var _0x38e97f = cc.scaleTo(0x5 * _0x51361f, 0.8);
              var _0x3f1754 = cc.moveTo(0x5 * _0x51361f, _0x33b4e1.add(cc.v2(0x36, 0x52)));
              var _0x3a055c = cc.spawn(_0x38e97f, _0x3f1754);
              _0x3e42e8.runAction(cc.sequence(_0x35ec05, _0x262052, _0x3a055c, cc.delayTime(_0x51361f), _0x150685, _0x2de69c));
              break;
            case 0x5:
              _0x3e42e8.position = _0x33b4e1.add(cc.v2(-0x2, 0x7));
              _0x3e42e8.angle = 0xa2;
              _0x3e42e8.opacity = 0xff;
              var _0x201e6a = cc.scaleTo(0x2 * _0x51361f, 0.92);
              var _0x1cd332 = cc.moveTo(0x2 * _0x51361f, _0x33b4e1.add(cc.v2(-0x2c, 0x18)));
              var _0x5d938f = cc.spawn(_0x201e6a, _0x1cd332);
              var _0x5c7383 = cc.scaleTo(0x3 * _0x51361f, 0.86);
              var _0x2cd2f5 = cc.moveTo(0x3 * _0x51361f, _0x33b4e1.add(cc.v2(-0x4b, 0x3c)));
              var _0x42ccec = cc.spawn(_0x5c7383, _0x2cd2f5);
              var _0x1510c6 = cc.scaleTo(0x8 * _0x51361f, 0.8);
              var _0x3815db = cc.moveTo(0x8 * _0x51361f, _0x33b4e1.add(cc.v2(-0x52, 0x4c)));
              var _0x627bcf = cc.spawn(_0x1510c6, _0x3815db);
              _0x3e42e8.runAction(cc.sequence(_0x5d938f, _0x42ccec, _0x627bcf, cc.delayTime(_0x51361f), _0x150685, _0x2de69c));
              break;
            case 0x6:
              _0x3e42e8.position = _0x33b4e1.add(cc.v2(0x16, -0x7));
              _0x3e42e8.angle = 0x56;
              _0x3e42e8.opacity = 0xff;
              var _0x5e975b = cc.scaleTo(0x2 * _0x51361f, 0.9);
              var _0x26f928 = cc.moveTo(0x2 * _0x51361f, _0x33b4e1.add(cc.v2(0x1d, -0xe)));
              var _0x28dea2 = cc.spawn(_0x5e975b, _0x26f928);
              var _0x4ef0fc = cc.scaleTo(0x4 * _0x51361f, 0.86);
              var _0x55d676 = cc.moveTo(0x4 * _0x51361f, _0x33b4e1.add(cc.v2(0x3d, -0x11)));
              var _0x484eb5 = cc.spawn(_0x4ef0fc, _0x55d676);
              var _0x4eea0d = cc.scaleTo(0x8 * _0x51361f, 0.8);
              var _0x757a20 = cc.moveTo(0x8 * _0x51361f, _0x33b4e1.add(cc.v2(0x5a, -0x14)));
              var _0x4ffcf6 = cc.spawn(_0x4eea0d, _0x757a20);
              _0x3e42e8.runAction(cc.sequence(_0x28dea2, _0x484eb5, _0x4ffcf6, cc.delayTime(_0x51361f), _0x150685, _0x2de69c));
              break;
            case 0x7:
              _0x3e42e8.position = _0x33b4e1.add(cc.v2(-0x1, -0x22));
              _0x3e42e8.angle = 0x0;
              _0x3e42e8.opacity = 0xff;
              var _0x11063f = cc.scaleTo(0x2 * _0x51361f, 0.98);
              var _0x33e250 = cc.moveTo(0x2 * _0x51361f, _0x33b4e1.add(cc.v2(0x1, -0x28)));
              var _0x74e6ac = cc.spawn(_0x11063f, _0x33e250);
              var _0x2f886d = cc.scaleTo(0x5 * _0x51361f, 0.9);
              var _0x5e64dc = cc.moveTo(0x5 * _0x51361f, _0x33b4e1.add(cc.v2(0x16, -0x4c)));
              var _0x205c48 = cc.spawn(_0x2f886d, _0x5e64dc);
              var _0x514912 = cc.scaleTo(0x5 * _0x51361f, 0.8);
              var _0x421ac0 = cc.moveTo(0x5 * _0x51361f, _0x33b4e1.add(cc.v2(0x22, -0x63)));
              var _0x1276c7 = cc.spawn(_0x514912, _0x421ac0);
              _0x3e42e8.runAction(cc.sequence(_0x74e6ac, _0x205c48, _0x1276c7, cc.delayTime(_0x51361f), _0x150685, _0x2de69c));
              break;
            case 0x8:
              _0x3e42e8.position = _0x33b4e1.add(cc.v2(-0x3, -0x10));
              _0x3e42e8.angle = 0x1e;
              _0x3e42e8.opacity = 0xff;
              var _0x30f859 = cc.scaleTo(0x2 * _0x51361f, 0.92);
              var _0x1323fe = cc.moveTo(0x2 * _0x51361f, _0x33b4e1.add(cc.v2(-0x1e, -0x14)));
              var _0x33c9cd = cc.spawn(_0x30f859, _0x1323fe);
              var _0x47ea9b = cc.scaleTo(0x4 * _0x51361f, 0.87);
              var _0x6b12eb = cc.moveTo(0x4 * _0x51361f, _0x33b4e1.add(cc.v2(-0x35, -0x2c)));
              var _0x27927b = cc.spawn(_0x47ea9b, _0x6b12eb);
              var _0x47f29c = cc.scaleTo(0x5 * _0x51361f, 0.8);
              var _0x52046a = cc.moveTo(0x5 * _0x51361f, _0x33b4e1.add(cc.v2(-0x46, -0x3e)));
              var _0x414dab = cc.spawn(_0x47f29c, _0x52046a);
              _0x3e42e8.runAction(cc.sequence(_0x33c9cd, _0x27927b, _0x414dab, cc.delayTime(_0x51361f), _0x150685, _0x2de69c));
              break;
            case 0x9:
              _0x3e42e8.position = _0x33b4e1.add(cc.v2(0x11, -0x3));
              _0x3e42e8.angle = 0x0;
              _0x3e42e8.opacity = 0xff;
              var _0x32e1f2 = cc.scaleTo(0x3 * _0x51361f, 1.03);
              var _0x30c221 = cc.moveTo(0x3 * _0x51361f, _0x33b4e1.add(cc.v2(0x22, 0x1c)));
              var _0x12bec5 = cc.spawn(_0x32e1f2, _0x30c221);
              var _0x41fc45 = cc.scaleTo(0x3 * _0x51361f, 0.95);
              var _0xa3db7b = cc.moveTo(0x3 * _0x51361f, _0x33b4e1.add(cc.v2(0x30, 0x2a)));
              var _0x32f3c1 = cc.spawn(_0x41fc45, _0xa3db7b);
              var _0x4e0832 = cc.scaleTo(0x9 * _0x51361f, 0.8);
              var _0xcbe1ef = cc.moveTo(0x9 * _0x51361f, _0x33b4e1.add(cc.v2(0x44, 0x3d)));
              var _0x4e6958 = cc.spawn(_0x4e0832, _0xcbe1ef);
              _0x3e42e8.runAction(cc.sequence(_0x12bec5, _0x32f3c1, _0x4e6958, cc.delayTime(_0x51361f), _0x150685, _0x2de69c));
              break;
            case 0xa:
              _0x3e42e8.position = _0x33b4e1.add(cc.v2(0xa, -0x10));
              _0x3e42e8.angle = 0x56;
              _0x3e42e8.opacity = 0xff;
              var _0x32b3f8 = cc.scaleTo(0x3 * _0x51361f, 0.95);
              var _0x50760f = cc.moveTo(0x3 * _0x51361f, _0x33b4e1.add(cc.v2(0x27, -0x25)));
              var _0x29ca51 = cc.spawn(_0x32b3f8, _0x50760f);
              var _0x5059c4 = cc.scaleTo(0x9 * _0x51361f, 0.8);
              var _0x52f97f = cc.moveTo(0x9 * _0x51361f, _0x33b4e1.add(cc.v2(0x72, -0x53)));
              var _0x4b324c = cc.spawn(_0x5059c4, _0x52f97f);
              _0x3e42e8.runAction(cc.sequence(_0x29ca51, _0x4b324c, cc.delayTime(_0x51361f), _0x150685, _0x2de69c));
              break;
            case 0xb:
              _0x3e42e8.position = _0x33b4e1.add(cc.v2(0x2, 0x3));
              _0x3e42e8.angle = 0x0;
              _0x3e42e8.opacity = 0xff;
              var _0xd59e3b = cc.scaleTo(0x2 * _0x51361f, 0x1);
              var _0x32f9e5 = cc.moveTo(0x2 * _0x51361f, _0x33b4e1.add(cc.v2(-0xe, 0x1c)));
              var _0x59c470 = cc.spawn(_0xd59e3b, _0x32f9e5);
              var _0x540e43 = cc.scaleTo(0x4 * _0x51361f, 0.92);
              var _0xe730e2 = cc.moveTo(0x4 * _0x51361f, _0x33b4e1.add(cc.v2(-0x25, 0x40)));
              var _0x57ad84 = cc.spawn(_0x540e43, _0xe730e2);
              var _0x45ba01 = cc.scaleTo(0x5 * _0x51361f, 0.8);
              var _0xb996b0 = cc.moveTo(0x5 * _0x51361f, _0x33b4e1.add(cc.v2(-0x33, 0x55)));
              var _0x3716d9 = cc.spawn(_0x45ba01, _0xb996b0);
              _0x3e42e8.runAction(cc.sequence(_0x59c470, _0x57ad84, _0x3716d9, cc.delayTime(_0x51361f), _0x150685, _0x2de69c));
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonAudio': "CommonAudio",
      'CommonConfig': "CommonConfig",
      'CommonEnum': "CommonEnum",
      'CommonFunc': "CommonFunc",
      'CommonValue': "CommonValue",
      'Tools': "Tools",
      'Types': 'Types'
    }],
    'GuideUI': [function (_0x5cf898, _0x34fe0b, _0x4056bf) {
      'use strict';
  
      cc._RF.push(_0x34fe0b, '87f47bgkF5Oko6Ye4+1R+Xh', "GuideUI");
      var _0x43122a = _0x5cf898("CommonFunc");
      var _0xaa47d0 = _0x5cf898("GameData");
      var _0x472abd = _0x5cf898("CommonEnum");
      var _0x35cd31 = _0x5cf898("CommonConfig");
      var _0x2a1d1e = _0x5cf898("ConfigData");
      _0x5cf898("Tools");
      var _0xbb8f66 = _0x5cf898("PanelLevelGuide");
      var _0x2ec493 = _0x5cf898('ADShareManager');
      var _0x3c5295 = _0x5cf898("CommonValue");
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'node_shield': cc.Node,
          'node_clickShield': cc.Node,
          'node_hand': cc.Node,
          'node_circle': cc.Node,
          'node_rect': cc.Node,
          'node_screen': cc.Node,
          'node_popup': cc.Node,
          'btn_clear': cc.Node,
          'pf_panelLevelGuide': cc.Prefab
        },
        'onLoad': function () {
          this.target = null;
          this.callback = null;
          this.cur_guideData = null;
          var _0x2fb350 = this;
          _0x43122a.GFunc.set_click(this.node_shield, function () {}, this);
          _0x43122a.GFunc.set_click(this.node_clickShield, function () {}, this);
          _0x43122a.GFunc.set_click(this.node_circle, function () {
            _0x2fb350.onClickGuide();
          }, this);
          _0x43122a.GFunc.set_click(this.node_rect, function () {
            _0x2fb350.onClickGuide();
          }, this);
          _0x43122a.GFunc.set_click(this.node_screen, function () {
            _0x2fb350.onClickGuide();
          }, this);
          this.btn_clear.active = _0x35cd31.GConfig.isCheat;
          _0x43122a.GFunc.set_click(this.btn_clear, function () {
            _0xaa47d0.TData.clearLastData();
            _0x2ec493.ADShareMgr.clearData();
            if (_0x3c5295.GValue.DDSDK) {
              _0x3c5295.GValue.DDSDK.parent = null;
            }
            _0x3c5295.GValue.HomeUI = null;
            cc.director.loadScene("Launcher");
          }, this);
        },
        'init': function () {},
        'checkGuide': function (_0x437f93, _0x4d7a4b, _0xf110fb) {
          var _0x20c8fb = this.isGuideTrigger(_0x437f93);
          return _0x20c8fb ? (this.cur_guideData = _0x35cd31.GConfig.getGuideData(_0x437f93), this.callback = _0xf110fb, this.target = _0x4d7a4b, this.showUI(this.cur_guideData), _0x20c8fb) : _0x20c8fb;
        },
        'isGuideTrigger': function (_0x21c5fb) {
          if (!_0x35cd31.GConfig.getGuideData(_0x21c5fb)) {
            return false;
          }
          if (this.cur_guideData) {
            return false;
          }
          if (_0xaa47d0.TData.isGuideFinish(_0x21c5fb)) {
            return false;
          }
          var _0x5e54bb = false;
          switch (_0x21c5fb) {
            case _0x2a1d1e.E_GuideId.ClickBtnSysMain:
            case _0x2a1d1e.E_GuideId.ClickBtnLvupMain:
              if (_0xaa47d0.TData.getStage() > 0x1 && 0x1 == _0xaa47d0.TData.getPropertyLv(_0x472abd.Enum_PropertyId.ArmsMain) && _0x43122a.GFunc.canPropertyLvup(_0x472abd.Enum_PropertyId.ArmsMain)) {
                _0x5e54bb = true;
              }
              break;
            case _0x2a1d1e.E_GuideId.ClickBtnSysSub:
            case _0x2a1d1e.E_GuideId.ClickBtnLvupSub:
              if (0x1 == _0xaa47d0.TData.getListSub().length && _0x43122a.GFunc.isCanPropertyArmsSubLvupCurFun()) {
                _0x5e54bb = true;
              }
          }
          return _0x5e54bb;
        },
        'showUI': function (_0x56989f) {
          var _0x3cefb0 = this;
          var _0x1e608a = _0x35cd31.GConfig.actionFrameTime;
          this.node_shield.active = true;
          this.node_clickShield.active = false;
          var _0x499ef2 = cc.v2(0x0, 0x0);
          if (_0x3cefb0.target) {
            var _0x257422 = _0x3cefb0.target.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
            _0x499ef2 = _0x3cefb0.node.convertToNodeSpaceAR(_0x257422);
          }
          this.node_rect.active = false;
          this.node_circle.active = false;
          this.node_screen.active = false;
          this.scheduleOnce(function () {
            if (_0x56989f.uiClickDelay > 0x0) {
              _0x3cefb0.node_clickShield.active = true;
              _0x3cefb0.scheduleOnce(function () {
                _0x3cefb0.node_clickShield.active = false;
              }, _0x56989f.uiClickDelay);
            }
            if (_0x56989f.uiType == _0x2a1d1e.E_GuideUIType.Circle) {
              _0x3cefb0.node_circle.active = true;
              _0x3cefb0.node_circle.stopAllActions();
              _0x3cefb0.node_circle.setPosition(_0x499ef2.add(_0x56989f.uiEnd));
              var _0x3a2a79 = cc.callFunc(function () {
                _0x3cefb0.node_rect.scale = 0x1 * _0x56989f.uiScale;
              });
              var _0x24eee2 = cc.scaleTo(0x7 * _0x1e608a, 1.1 * _0x56989f.uiScale);
              var _0x244470 = cc.scaleTo(0xd * _0x1e608a, 0x1 * _0x56989f.uiScale);
              var _0x3e47b2 = cc.sequence(_0x3a2a79, _0x24eee2, _0x244470);
              var _0x506f1c = cc.repeatForever(_0x3e47b2);
              _0x3cefb0.node_circle.runAction(_0x506f1c);
            } else if (_0x56989f.uiType == _0x2a1d1e.E_GuideUIType.Rect) {
              _0x3cefb0.node_rect.active = true;
              _0x3cefb0.node_rect.stopAllActions();
              _0x3cefb0.node_rect.setPosition(_0x499ef2.add(_0x56989f.uiEnd));
              _0x3a2a79 = cc.callFunc(function () {
                _0x3cefb0.node_rect.scale = 0x1 * _0x56989f.uiScale;
              });
              _0x24eee2 = cc.scaleTo(0x7 * _0x1e608a, 1.1 * _0x56989f.uiScale);
              _0x244470 = cc.scaleTo(0xd * _0x1e608a, 0x1 * _0x56989f.uiScale);
              _0x3e47b2 = cc.sequence(_0x3a2a79, _0x24eee2, _0x244470);
              _0x506f1c = cc.repeatForever(_0x3e47b2);
              this.node_rect.runAction(_0x506f1c);
            } else if (_0x56989f.uiType == _0x2a1d1e.E_GuideUIType.Screen) {
              _0x3cefb0.node_screen.active = true;
            } else {
              _0x3cefb0.endGuide();
            }
          }, _0x56989f.uiDelay);
          if (_0x56989f.handShow) {
            this.node_hand.active = true;
            this.node_hand.stopAllActions();
            this.node_hand.opacity = 0x0;
            this.node_hand.setPosition(_0x499ef2.add(_0x56989f.handStart));
            var _0x2bdc07 = cc.delayTime(_0x1e608a * _0x56989f.handDelay);
            var _0x448625 = cc.moveTo(_0x56989f.handMoveTime, _0x499ef2.add(_0x56989f.handEnd));
            var _0x5c43a4 = cc.fadeTo(_0x56989f.handMoveTime, 0xff);
            var _0x510d0f = cc.spawn(_0x448625, _0x5c43a4);
            var _0x3c7485 = cc.callFunc(function () {
              var _0x2ab4d5 = cc.scaleTo(0x7 * _0x1e608a, 0.85);
              var _0x4ada39 = cc.scaleTo(0x8 * _0x1e608a, 0x1);
              var _0x5b5d25 = cc.sequence(_0x2ab4d5, _0x4ada39);
              var _0x3ae625 = cc.repeatForever(_0x5b5d25);
              _0x3cefb0.node_hand.runAction(_0x3ae625);
            });
            var _0x275eb0 = cc.sequence(_0x2bdc07, _0x510d0f, _0x3c7485);
            this.node_hand.runAction(_0x275eb0);
          } else {
            this.node_hand.active = false;
          }
        },
        'endGuide': function () {
          if (this.cur_guideData) {
            for (var _0x41017b = 0x0; _0x41017b < this.cur_guideData.finishIdList.length; _0x41017b++) {
              _0xaa47d0.TData.finishGuide(this.cur_guideData.finishIdList[_0x41017b]);
            }
            this.cur_guideData = null;
          }
          this.node_circle.active = false;
          this.node_rect.active = false;
          this.node_screen.active = false;
          this.node_hand.active = false;
          this.node_shield.active = false;
          this.node_clickShield.active = false;
          if (this.callback) {
            var _0xd26bfd = this.callback;
            this.callback = null;
            _0xd26bfd();
          }
        },
        'onClickGuide': function () {
          this.endGuide();
        },
        'set_shield_state': function (_0x1d4928) {
          this.node_shield.active = _0x1d4928;
        },
        'popup_panelLevelGuide': function (_0x34de81) {
          var _0x206327 = cc.instantiate(this.pf_panelLevelGuide);
          if (_0x206327) {
            var _0x4c4b4d = _0x206327.getComponent(_0xbb8f66);
            if (_0x4c4b4d) {
              this.node_popup.addChild(_0x206327);
              _0x4c4b4d.init(_0x34de81);
            }
          }
        }
      });
      cc._RF.pop();
    }, {
      'ADShareManager': 'ADShareManager',
      'CommonConfig': "CommonConfig",
      'CommonEnum': "CommonEnum",
      'CommonFunc': "CommonFunc",
      'CommonValue': "CommonValue",
      'ConfigData': 'ConfigData',
      'GameData': "GameData",
      'PanelLevelGuide': "PanelLevelGuide",
      'Tools': 'Tools'
    }],
    'Hawkeye': [function (_0x549d19, _0x970469, _0x55f63c) {
      'use strict';
  
      cc._RF.push(_0x970469, "bfb61BOTZ9NPLn2vbxubs0+", 'Hawkeye');
      var _0x4f721b = _0x970469.exports;
      Object.defineProperty(_0x4f721b, "__esModule", {
        'value': true
      });
      var _0x4ae8cc = _0x549d19('CommonConfig');
      var _0x1fdbd2 = _0x549d19("GameData");
      var _0x2b2aa0 = _0x549d19("ConfigData");
      var _0x4199f4 = _0x549d19("ADShareManager");
      var _0x5ee93e = _0x549d19('CommonValue');
      var _0x15f4ae = function () {
        this.gameId = 0xe;
        this.userId = '';
        this.registerTime = 0x0;
        this.reportId = '';
        this.level = 0x0;
        this.cid = '';
      };
      var _0x2dd6af = function () {
        function _0x4dd27f() {
          this.Server_Report = "https://manage.dadagem.xyz/report";
          this.Server_Param = 'https://manage.dadagem.xyz/manager/getConfig';
        }
        _0x4dd27f.prototype.initParam = function () {
          var _0x53ea1a = this;
          var _0x2b066e = cc.loader.getXMLHttpRequest();
          _0x2b066e.open("POST", this.Server_Param, true);
          _0x2b066e.timeout = 0x1388;
          _0x2b066e.ontimeout = function () {}.bind(this);
          _0x2b066e.onreadystatechange = function () {
            var _0x60eff0 = _0x2b066e.readyState;
            var _0x21a0ed = _0x2b066e.status;
            if (0x4 == _0x60eff0 && 0xc8 == _0x21a0ed) {
              var _0x42e441 = _0x2b066e.responseText;
              var _0x535057 = JSON.parse(_0x42e441);
              _0x53ea1a.dealParam(_0x535057);
            }
          };
          _0x2b066e.send(JSON.stringify({
            'app': 'xuanzhuandashi'
          }));
        };
        _0x4dd27f.prototype.dealParam = function (_0x2bece6) {
          var _0x444931 = "english_" + _0x4ae8cc.GConfig.Version_Num;
          if (_0x2bece6.hasOwnProperty(_0x444931)) {
            var _0x33e4b8 = _0x2bece6[_0x444931];
            if (_0x33e4b8.hasOwnProperty("advershare")) {
              var _0x1ab56c = _0x33e4b8.advershare;
              for (var _0xf647fe = 0x0; _0xf647fe < _0x1ab56c.length; _0xf647fe++) {
                (_0x17ea34 = new _0x2b2aa0.ADShareData()).loadData(_0x1ab56c[_0xf647fe]);
                _0x4199f4.ADShareMgr.addAdShareData(_0x17ea34);
              }
            }
            if (_0x33e4b8.hasOwnProperty("share")) {
              _0x1ab56c = _0x33e4b8.share;
              for (_0xf647fe = 0x0; _0xf647fe < _0x1ab56c.length; _0xf647fe++) {
                var _0x17ea34;
                (_0x17ea34 = new _0x2b2aa0.ShareData()).loadData(_0x1ab56c[_0xf647fe]);
                _0x4199f4.ADShareMgr.addShareData(_0x17ea34);
              }
            }
            if (_0x33e4b8.hasOwnProperty("global")) {
              _0x1ab56c = _0x33e4b8.global;
              for (_0xf647fe = 0x0; _0xf647fe < _0x1ab56c.length; _0xf647fe++) {
                _0x4ae8cc.GConfig.addGbData(parseInt(_0x1ab56c[_0xf647fe].id), _0x1ab56c[_0xf647fe].ver);
              }
              _0x4199f4.ADShareMgr.initParam();
              _0x5ee93e.GValue.initCommonValue();
            }
          }
        };
        _0x4dd27f.prototype.getHKData = function () {
          var _0x10fbb2 = new _0x15f4ae();
          _0x10fbb2.userId = _0x1fdbd2.TData.getUserID();
          _0x10fbb2.registerTime = _0x1fdbd2.TData.getRegisterTime();
          _0x10fbb2.level = _0x1fdbd2.TData.getStage();
          _0x10fbb2.cid = _0x1fdbd2.TData.getCid();
          return _0x10fbb2;
        };
        _0x4dd27f.prototype.sendReport = function (_0x5dc673) {
          if (_0x5dc673) {
            var _0x1113de = JSON.stringify(_0x5dc673);
            this.sendMsg(_0x1113de);
          }
        };
        _0x4dd27f.prototype.sendLogin = function () {
          var _0xac9b15 = this.getHKData();
          _0xac9b15.reportId = '01';
          this.sendReport(_0xac9b15);
        };
        _0x4dd27f.prototype.sendOnline = function () {
          var _0x3fa715 = this.getHKData();
          _0x3fa715.reportId = '02';
          this.sendReport(_0x3fa715);
        };
        _0x4dd27f.prototype.sendStageTime = function (_0x539143, _0x2f2ad2) {
          var _0x222568 = this.getHKData();
          _0x222568.reportId = "03-" + _0x539143 + '-' + _0x2f2ad2;
          this.sendReport(_0x222568);
        };
        _0x4dd27f.prototype.sendLoading = function (_0x332fc6) {
          var _0x34045c = this.getHKData();
          _0x34045c.reportId = '04-00-' + _0x332fc6;
          this.sendReport(_0x34045c);
        };
        _0x4dd27f.prototype.sendGuide = function (_0x553bd1) {
          var _0x3de47a = this.getHKData();
          _0x3de47a.reportId = "04-01-" + _0x553bd1;
          this.sendReport(_0x3de47a);
        };
        _0x4dd27f.prototype.sendShareOut = function (_0x4ce769, _0x21e728) {
          var _0x24f74f = this.getHKData();
          _0x24f74f.reportId = "05-00-" + _0x4ce769 + '-' + _0x21e728;
          this.sendReport(_0x24f74f);
        };
        _0x4dd27f.prototype.sendShareIn = function (_0x2ed76d, _0xa9f225, _0x573182) {
          var _0xcc8045 = this.getHKData();
          _0xcc8045.reportId = "05-01-" + _0x2ed76d + '-' + _0xa9f225 + '-' + _0x573182;
          this.sendReport(_0xcc8045);
        };
        _0x4dd27f.prototype.sendVideoShow = function (_0x4b7baa) {
          var _0x4a2dc3 = this.getHKData();
          _0x4a2dc3.reportId = "06-00-" + _0x4b7baa;
          this.sendReport(_0x4a2dc3);
        };
        _0x4dd27f.prototype.sendVideoPlay = function (_0x425deb) {
          var _0x1776b8 = this.getHKData();
          _0x1776b8.reportId = "06-01-" + _0x425deb;
          this.sendReport(_0x1776b8);
        };
        _0x4dd27f.prototype.sendVideoFinish = function (_0x41f2c6) {
          var _0x225e86 = this.getHKData();
          _0x225e86.reportId = "06-02-" + _0x41f2c6;
          this.sendReport(_0x225e86);
        };
        _0x4dd27f.prototype.sendDieInfo = function (_0x494c12, _0x505b76) {
          var _0x49bcfa = this.getHKData();
          _0x49bcfa.reportId = "20-" + _0x494c12 + '-' + _0x505b76;
          this.sendReport(_0x49bcfa);
        };
        _0x4dd27f.prototype.sendStageFail = function (_0x5c5851) {
          var _0x389d21 = this.getHKData();
          _0x389d21.reportId = "21-" + _0x5c5851;
          this.sendReport(_0x389d21);
        };
        _0x4dd27f.prototype.sendWeaponLev = function (_0x256571, _0x5f5dc6, _0x49eab5, _0x165179) {
          var _0x2c26be = this.getHKData();
          _0x2c26be.reportId = "22-" + _0x256571 + '-' + _0x5f5dc6 + '-' + _0x49eab5 + '-' + _0x165179;
          this.sendReport(_0x2c26be);
        };
        _0x4dd27f.prototype.sendAdverCount = function (_0x5b4f71) {
          var _0x283f20 = this.getHKData();
          _0x283f20.reportId = "23-" + _0x5b4f71;
          this.sendReport(_0x283f20);
        };
        _0x4dd27f.prototype.sendSaveDataErr = function (_0x512ef6) {
          var _0x29360b = this.getHKData();
          _0x29360b.reportId = '9999-' + _0x512ef6;
          this.sendReport(_0x29360b);
        };
        _0x4dd27f.prototype.sendGameErr = function (_0xedb2f7) {
          console.log("游戏错误--" + _0xedb2f7);
          var _0x178338 = this.getHKData();
          _0x178338.reportId = "9998-" + _0xedb2f7;
          this.sendReport(_0x178338);
        };
        _0x4dd27f.prototype.sendMsg = function (_0x4f4e5e) {
          var _0x330a82 = cc.loader.getXMLHttpRequest();
          _0x330a82.open('POST', this.Server_Report, true);
          _0x330a82.timeout = 0x1388;
          _0x330a82.ontimeout = function () {}.bind(this);
          _0x330a82.onreadystatechange = function () {
            var _0x2e54d6 = _0x330a82.readyState;
            var _0x471944 = _0x330a82.status;
            if (0x4 == _0x2e54d6 && 0xc8 == _0x471944) {
              var _0x4849cc = _0x330a82.responseText;
              JSON.parse(_0x4849cc).msgId;
            }
          };
          _0x330a82.send(_0x4f4e5e);
        };
        _0x4dd27f.instance = new _0x4dd27f();
        return _0x4dd27f;
      }();
      _0x4f721b.Hawkeye = _0x2dd6af;
      _0x4f721b.HKReport = _0x2dd6af.instance;
      cc._RF.pop();
    }, {
      'ADShareManager': "ADShareManager",
      'CommonConfig': "CommonConfig",
      'CommonValue': "CommonValue",
      'ConfigData': 'ConfigData',
      'GameData': 'GameData'
    }],
    'HomeUI': [function (_0x1ea34b, _0x1b9d58, _0xbdc7da) {
      'use strict';
  
      var _0x5eb4e0;
      function _0x7700bd(_0x3e350c, _0x2c5729, _0x292ce9) {
        if (_0x2c5729 in _0x3e350c) {
          Object.defineProperty(_0x3e350c, _0x2c5729, {
            'value': _0x292ce9,
            'enumerable': true,
            'configurable': true,
            'writable': true
          });
        } else {
          _0x3e350c[_0x2c5729] = _0x292ce9;
        }
        return _0x3e350c;
      }
      cc._RF.push(_0x1b9d58, "6cb0b/u0CJDUaACCMQIwm9Q", "HomeUI");
      var _0x107e95 = _0x1ea34b("CommonFunc");
      var _0x5219e5 = _0x1ea34b("CommonAudio");
      var _0x32c2eb = _0x1ea34b("GameData");
      var _0x1c5e89 = _0x1ea34b("PfNum");
      var _0x5b71d4 = _0x1ea34b('CommonEnum');
      var _0x2df49d = _0x1ea34b("ConfigData");
      var _0x4fbd22 = _0x1ea34b("StageUI");
      var _0x197910 = _0x1ea34b("PropertyUI");
      var _0x2e66e3 = _0x1ea34b("CommonValue");
      var _0x4ba940 = _0x1ea34b("CommonConfig");
      var _0x28e812 = _0x1ea34b("Tools");
      var _0x36e636 = _0x1ea34b("ADShareManager");
      var _0x4ed5c1 = _0x1ea34b('PanelOffline');
      var _0x46bc19 = _0x1ea34b('PanelPower');
      var _0x1a42a0 = _0x1ea34b("PanelGold");
      var _0x14ac7a = _0x1ea34b("PfFrameAnim");
      var _0x428fcd = _0x1ea34b("PanelCheat");
      var _0x5edd88 = _0x1ea34b("PanelAddProgram");
      _0x7700bd(_0x5eb4e0 = {
        'extends': cc.Component,
        'properties': {
          'node_gray': cc.Node,
          'node_shield': cc.Node,
          'node_logo': cc.Node,
          'node_stage': cc.Node,
          'node_gold': cc.Node,
          'node_gold_num': cc.Node,
          'node_gold_icon': cc.Node,
          'node_power': cc.Node,
          'node_power_num': cc.Node,
          'node_power_recover': cc.Node,
          'label_powerTime': cc.Label,
          'node_setting': cc.Node,
          'btn_setting': cc.Node,
          'btn_audio_on': cc.Node,
          'btn_audio_off': cc.Node,
          'btn_shake_on': cc.Node,
          'btn_shake_off': cc.Node,
          'bg_setting': cc.Node,
          'node_bottom': cc.Node,
          'btn_sys_arms1': cc.Node,
          'btn_sys_arms1_bg': cc.Node,
          'show_sys_arms1': cc.Node,
          'show_sys_arms1_shadow': cc.Node,
          'btn_sys_arms2': cc.Node,
          'show_sys_arms2': cc.Node,
          'btn_sys_gold': cc.Node,
          'show_sys_gold': cc.Node,
          'gift_power': cc.Node,
          'gift_gold': cc.Node,
          'node_property': cc.Node,
          'node_right': cc.Node,
          'btn_start': cc.Node,
          'btn_start_layer': cc.Node,
          'node_offline': cc.Node,
          'btn_offline': cc.Node,
          'sp_offline_full': cc.Sprite,
          'sp_offline_recover_full': cc.Sprite,
          'node_offline_font_full': cc.Node,
          'node_offline_font_get': cc.Node,
          'node_offline_num': cc.Node,
          'icon_sys_arms1': cc.Node,
          'icon_sys_arms2': cc.Node,
          'icon_sys_gold': cc.Node,
          'node_addprogram': cc.Node,
          'pf_addprogram': cc.Prefab,
          'node_ap_gold': cc.Node,
          'node_ap_power': cc.Node,
          'node_official': cc.Node,
          'node_cheat': cc.Node,
          'node_player': cc.Node,
          'show_player': cc.Node,
          'effect_player': cc.Node,
          'skel_gold_up': sp.Skeleton,
          'skel_gold_lvup': sp.Skeleton,
          'skel_sub_lvup': sp.Skeleton,
          'pf_num': cc.Prefab,
          'pf_stage': cc.Prefab,
          'pf_property': cc.Prefab,
          'pf_panelOffline': cc.Prefab,
          'pf_panelPower': cc.Prefab,
          'pf_panelGold': cc.Prefab,
          'pf_panelCheat': cc.Prefab,
          'atlas_gameui': cc.SpriteAtlas,
          'atlas_homeui': cc.SpriteAtlas,
          'atlas_property': cc.SpriteAtlas,
          'skel_main_lvup_circle': sp.SkeletonData,
          'skel_main_lvup_shine': sp.SkeletonData
        },
        'ctor': function () {
          var _0x195ec2 = this;
          this.diffX_sys = 0x50;
          this.diffY_sys = 0x1f4;
          this.downY_propertySys = -0x32;
          this.isChangeSys = false;
          this.PlayerSlowRatioCount = 0x7;
          this.dic_sysBtnShow = {};
          this.com_property = null;
          this.isStart = true;
          setTimeout(function () {
            _0x195ec2.isStart = false;
          }, 0xfa);
        },
        'updatePlayerSlowRatio': function () {
          _0x2e66e3.GValue.PlayerSlowRatio = _0x2e66e3.GValue.PlayerSlowRatio - 0x1 / this.PlayerSlowRatioCount;
          if (_0x2e66e3.GValue.PlayerSlowRatio <= 0.1) {
            _0x2e66e3.GValue.PlayerSlowRatio = 0.1;
          }
        },
        'onLoad': function () {
          var _0x53bc45 = this;
          var _0x5a2f01 = this;
          _0x107e95.GFunc.set_click(this.node_gray, function () {
            _0x53bc45.onClickLayerGray();
          }, this);
          _0x107e95.GFunc.set_click(this.node_offline, function () {
            _0x53bc45.onClickBtnOffline();
          }, this);
          _0x107e95.GFunc.set_click(this.gift_power, function () {
            _0x53bc45.onClickBtnGiftPower();
          }, this);
          _0x107e95.GFunc.set_click(this.gift_gold, function () {
            _0x53bc45.onClickBtnGiftGold();
          }, this);
          _0x107e95.GFunc.set_click(this.btn_setting, function () {
            _0x5a2f01.onClickBtnSetting();
          }, this);
          _0x107e95.GFunc.set_click(this.btn_audio_on, function () {
            _0x5a2f01.onClickBtnAudioOn();
          }, this);
          _0x107e95.GFunc.set_click(this.btn_audio_off, function () {
            _0x5a2f01.onClickBtnAudioOff();
          }, this);
          _0x107e95.GFunc.set_click(this.btn_shake_on, function () {
            _0x5a2f01.onClickBtnShakeOn();
          }, this);
          _0x107e95.GFunc.set_click(this.btn_shake_off, function () {
            _0x5a2f01.onClickBtnShakeOff();
          }, this);
          _0x107e95.GFunc.set_click(this.btn_sys_arms1, function () {
            console.log("btn_sys_arms1");
            _0x5a2f01.onClickBtnSysArmsMain();
          }, this);
          _0x107e95.GFunc.set_click(this.btn_sys_arms2, function () {
            _0x5a2f01.onClickBtnSysArmsSub();
          }, this);
          _0x107e95.GFunc.set_click(this.btn_sys_gold, function () {
            _0x5a2f01.onClickBtnSysGold();
          }, this);
          _0x107e95.GFunc.set_click(this.btn_start_layer, function () {
            _0x5a2f01.onClickBtnStart();
          }, this);
          this.resetSysIconAction();
          _0x107e95.GFunc.set_click(this.node_addprogram, function () {
            _0x53bc45.click_addprogram();
          }, this);
          this.node_cheat.active = _0x4ba940.GConfig.isCheat;
          this.node_bottom.setPosition(cc.v2(0x0, 0.5 * -_0x2e66e3.GValue.Size_View.height));
          this.initGameAgainAction();
        },
        'start': function () {
          var _0x237749 = this;
          if (_0x2e66e3.GValue.Has_TopBar) {
            this.node_power.y -= 0x2c;
            this.node_gold.y -= 0x2c;
            this.node_setting.y -= 0x2c;
            this.scheduleOnce(function () {
              if (_0x237749.node_addprogram) {
                _0x237749.node_addprogram.position = _0x237749.node_addprogram.position.add(cc.v2(0xa, -0x28));
                _0x28e812.DYTools.log("node_addprogram", _0x237749.node_addprogram.position);
              }
            });
          }
        },
        'init': function () {
          this.initGold();
          this.initPower();
          this.initOffline();
          this.initSetting();
          this.initStage();
          this.initPropertySys();
          this.refresh_gifts();
          this.refresh_addprogram();
          this.refresh_official();
          if (this.isGameAgain()) {
            this.hidePlayer();
            if (_0x2e66e3.GValue.GameOverGold > 0x0) {
              var _0x15134d = this;
              this.playGoldEffect(_0x2e66e3.GValue.GameOverGold, function () {
                _0x15134d.playGameAgainAction();
              });
            } else {
              this.playGameAgainAction();
            }
            _0x2e66e3.GValue.GameOverGold = -0x1;
          } else {
            this.endUiINAction();
          }
        },
        'refresh_gifts': function () {
          this.refresh_gift_power();
          this.refresh_gift_gold();
        },
        'refresh_gift_power': function () {
          this.visible_gift_power(false);
          if (_0x32c2eb.TData.getHasGiftPower()) {
            this.visible_gift_power(true);
          } else {
            var _0x1c1f9a = _0x32c2eb.TData.getPower();
            var _0x471521 = parseInt(_0x4ba940.GConfig.getGbData(_0x5b71d4.Enum_Gb.GiftPowerFallDown));
            if (_0x1c1f9a <= (_0x471521 = _0x471521 || 0x0) && _0x36e636.ADShareMgr.getActualAdShare(_0x5b71d4.Enum_ADShare.AS_Power) > 0x0) {
              var _0x101777 = _0x32c2eb.TData.getTodayGiftPowerCount();
              _0x32c2eb.TData.setTodayGiftPowerCount(_0x101777 + 0x1);
              _0x32c2eb.TData.setHasGiftPower(true);
              this.visible_gift_power(true);
            }
          }
        },
        'visible_gift_power': function (_0x5c24f6) {
          if (_0x5c24f6 && this.can_popup_panelPower()) {
            this.gift_power.active = true;
          } else {
            this.gift_power.active = false;
          }
        },
        'refresh_gift_gold': function () {
          this.visible_gift_gold(false);
          if (_0x32c2eb.TData.getHasGiftGold()) {
            this.visible_gift_gold(true);
          } else {
            var _0x24569f = _0x107e95.GFunc.canPropertyLvup(_0x5b71d4.Enum_PropertyId.ArmsMain);
            var _0x56945d = _0x107e95.GFunc.getCanPropertyArmsSubLvupFun() > 0x0;
            if (!_0x24569f && !_0x56945d) {
              var _0x18a680 = parseInt(_0x4ba940.GConfig.getGbData(_0x5b71d4.Enum_Gb.GiftGoldStage));
              if (_0x32c2eb.TData.getStage() > _0x18a680 && _0x36e636.ADShareMgr.getActualAdShare(_0x5b71d4.Enum_ADShare.AS_Gold) > 0x0) {
                var _0x37951b = _0x32c2eb.TData.getTodayGiftGoldCount();
                _0x32c2eb.TData.setTodayGiftGoldCount(_0x37951b + 0x1);
                _0x32c2eb.TData.setHasGiftGold(true);
                this.visible_gift_gold(true);
              }
            }
          }
        },
        'visible_gift_gold': function (_0x49b407) {
          if (_0x49b407 && this.can_popup_panelGold()) {
            this.gift_gold.active = true;
          } else {
            this.gift_gold.active = false;
          }
        },
        'initGold': function () {
          this.node_gold_num.destroyAllChildren();
          var _0x27820b = cc.instantiate(this.pf_num);
          this.node_gold_num.addChild(_0x27820b);
          this.com_gold = _0x27820b.getComponent(_0x1c5e89);
          this.com_gold.setParam(_0x5b71d4.Enum_Num.Blood, cc.v2(0x0, 0.5), 0x4, this.atlas_gameui);
          _0x27820b.scale = 0.5;
          this.refreshGold();
        },
        'refreshGold': function (_0x31739c) {
          if (undefined === _0x31739c) {
            _0x31739c = -0x1;
          }
          if (this.com_gold) {
            var _0x2671ab = _0x32c2eb.TData.getGold();
            if (_0x31739c >= 0x0) {
              _0x2671ab = _0x31739c;
            }
            this.com_gold.setString(_0x107e95.GFunc.getNumString(_0x2671ab));
          }
        },
        'playGoldEffect': function (_0x5e6ecc, _0x5b8b4b) {
          var _0x14bf6d = this;
          this.refreshGold(_0x32c2eb.TData.getGold() - _0x5e6ecc);
          var _0x587477 = this.node_gold_icon.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
          var _0x117ff3 = this.node.convertToNodeSpaceAR(_0x587477);
          var _0x5669f5 = this.atlas_homeui.getSpriteFrame("icon_gold");
          _0x107e95.GFunc.flyGold(this.node, _0x5669f5, cc.v2(0x0, 0x0), _0x117ff3, 0x12, null, function () {
            _0x14bf6d.refreshGold();
          });
          this.scheduleOnce(function () {
            if (_0x5b8b4b) {
              _0x5b8b4b();
            }
          }, 0x15 * _0x4ba940.GConfig.actionFrameTime);
          _0x5219e5.GAudio.playSound(_0x5219e5.Enum_Audio.fly_gold);
        },
        'can_popup_panelGold': function () {
          var _0x3e7a34 = _0x36e636.ADShareMgr.getActualAdShare(_0x5b71d4.Enum_ADShare.AS_Gold);
          return _0x3e7a34 == _0x5b71d4.Enum_AdShareType.Ad || _0x3e7a34 == _0x5b71d4.Enum_AdShareType.Share;
        },
        'popup_panelGold': function (_0x48d14d, _0x23d373) {
          if (undefined === _0x23d373) {
            _0x23d373 = null;
          }
          var _0x19ffe9 = _0x36e636.ADShareMgr.getActualAdShare(_0x5b71d4.Enum_ADShare.AS_Gold);
          var _0x58b796 = cc.instantiate(this.pf_panelGold);
          _0x2e66e3.GValue.Root_Canvas.addChild(_0x58b796);
          _0x58b796.getComponent(_0x1a42a0).init(_0x48d14d, _0x19ffe9, _0x23d373);
        },
        'onClickBtnGiftGold': function (_0x3bfdda) {
          if (undefined === _0x3bfdda) {
            _0x3bfdda = null;
          }
          var _0x5eeec5 = _0x32c2eb.TData.getStage();
          var _0x328367 = _0x4ba940.GConfig.getLevelData(_0x5eeec5);
          if (_0x328367) {
            this.popup_panelGold(_0x328367.giftGold, _0x3bfdda);
          }
        },
        'goldLessPopupPanelGold': function (_0x391633) {
          if (_0x32c2eb.TData.getHasGiftGold()) {
            if (this.can_popup_panelGold()) {
              this.visible_gift_gold(true);
              this.onClickBtnGiftGold(_0x391633);
              return true;
            }
          } else {
            var _0x456082 = _0x107e95.GFunc.canPropertyLvup(_0x5b71d4.Enum_PropertyId.ArmsMain);
            var _0x512574 = _0x107e95.GFunc.getCanPropertyArmsSubLvupFun() > 0x0;
            if (!_0x456082 && !_0x512574) {
              var _0x47d629 = parseInt(_0x4ba940.GConfig.getGbData(_0x5b71d4.Enum_Gb.GiftGoldStage));
              if (_0x32c2eb.TData.getStage() > _0x47d629 && this.can_popup_panelGold()) {
                _0x32c2eb.TData.setHasGiftGold(true);
                this.visible_gift_gold(true);
                this.onClickBtnGiftGold(_0x391633);
                return true;
              }
            }
          }
          return false;
        },
        'initPower': function () {
          this.node_power_num.destroyAllChildren();
          var _0x5df55c = cc.instantiate(this.pf_num);
          this.node_power_num.addChild(_0x5df55c);
          this.com_power = _0x5df55c.getComponent(_0x1c5e89);
          this.com_power.setParam(_0x5b71d4.Enum_Num.Blood, cc.v2(0x0, 0.5), 0x2, this.atlas_gameui);
          _0x5df55c.scale = 0.5;
          this.refreshPower();
        },
        'refreshPower': function () {
          if (this.com_power) {
            var _0x1a68e9 = _0x32c2eb.TData.getPower();
            this.com_power.setString(_0x107e95.GFunc.getNumK(_0x1a68e9));
          }
          this.refreshPowerRecover();
        },
        'refreshPowerRecover': function () {
          if (_0x32c2eb.TData.isPowerFull()) {
            if (this.node_power_recover.active) {
              this.node_power_recover.active = false;
            }
          } else {
            if (!this.node_power_recover.active) {
              this.node_power_recover.active = true;
            }
            this.label_powerTime.string = _0x107e95.GFunc.getTimeSecondStr(_0x2e66e3.GValue.PowerTime) + " +1";
          }
        },
        'reducePowerAction': function (_0x339ac7, _0x2a27ac) {
          if (undefined === _0x2a27ac) {
            _0x2a27ac = true;
          }
          var _0x512838 = new cc.Node();
          _0x512838.setPosition(0x0, 0x64);
          _0x2e66e3.GValue.Root_Canvas.addChild(_0x512838);
          var _0x5edcf6 = new cc.Node();
          _0x512838.addChild(_0x5edcf6);
          var _0x45e243 = new cc.Node();
          _0x45e243.anchorX = 0x1;
          _0x5edcf6.addChild(_0x45e243);
          var _0xd66f12 = _0x45e243.addComponent(cc.Sprite);
          _0x107e95.GFunc.changeAtlasSprite(this.atlas_homeui, _0xd66f12, "icon_power");
          var _0x69ce0f = cc.instantiate(this.pf_num);
          _0x69ce0f.scale = 0.6;
          _0x5edcf6.addChild(_0x69ce0f);
          var _0x2fd85e = _0x69ce0f.addComponent(_0x1c5e89);
          _0x2fd85e.setParam(_0x5b71d4.Enum_Num.Blood, cc.v2(0x0, 0.5), 0x2, this.atlas_gameui);
          _0x2fd85e.sub_diffY = 0x14;
          _0x2fd85e.setString((_0x2a27ac ? '-' : '+') + _0x339ac7);
          _0x5edcf6.scale = 1.3;
          var _0x5b2356 = _0x4ba940.GConfig.actionFrameTime;
          var _0x5434e5 = cc.moveTo(0x5 * _0x5b2356, cc.v2(0x0, 0x55));
          var _0xed95f0 = cc.scaleTo(0x5 * _0x5b2356, 2.8);
          var _0x185e3d = cc.spawn(_0x5434e5, _0xed95f0);
          var _0x277ce1 = cc.moveTo(0x8 * _0x5b2356, cc.v2(0x0, 0x9b));
          var _0x27e098 = cc.scaleTo(0x8 * _0x5b2356, 2.3);
          var _0x297c08 = cc.fadeOut(0x8 * _0x5b2356);
          var _0x382fcc = cc.spawn(_0x277ce1, _0x27e098, _0x297c08);
          var _0x15a990 = cc.sequence(_0x185e3d, _0x382fcc, cc.removeSelf());
          _0x5edcf6.runAction(_0x15a990);
        },
        'can_popup_panelPower': function () {
          var _0x4f6b2f = _0x36e636.ADShareMgr.getActualAdShare(_0x5b71d4.Enum_ADShare.AS_Power);
          return _0x4f6b2f == _0x5b71d4.Enum_AdShareType.Ad || _0x4f6b2f == _0x5b71d4.Enum_AdShareType.Share;
        },
        'popup_panelPower': function (_0x1b9cc5) {
          var _0x4b7355 = _0x36e636.ADShareMgr.getActualAdShare(_0x5b71d4.Enum_ADShare.AS_Power);
          var _0x2a3c78 = cc.instantiate(this.pf_panelPower);
          _0x2e66e3.GValue.Root_Canvas.addChild(_0x2a3c78);
          _0x2a3c78.getComponent(_0x46bc19).init(_0x1b9cc5, _0x4b7355);
        },
        'onClickBtnGiftPower': function () {
          var _0x3bb42f = parseInt(_0x4ba940.GConfig.getGbData(_0x5b71d4.Enum_Gb.GiftPowerRecover));
          _0x3bb42f = _0x3bb42f || 0x0;
          this.popup_panelPower(_0x3bb42f);
        },
        'initSetting': function () {
          if (_0x32c2eb.TData.SettingData.music) {
            this.btn_audio_on.active = true;
            this.btn_audio_off.active = false;
          } else {
            this.btn_audio_on.active = false;
            this.btn_audio_off.active = true;
          }
          if (_0x32c2eb.TData.SettingData.shake) {
            this.btn_shake_on.active = true;
            this.btn_shake_off.active = false;
          } else {
            this.btn_shake_on.active = false;
            this.btn_shake_off.active = true;
          }
          this.bg_setting.active = false;
        },
        'onClickBtnSetting': function () {
          _0x107e95.GFunc.createPrefabByName("PanelSetting", this.node, function (_0x63cf37) {
            _0x63cf37.node.zIndex = 0x65;
          });
        },
        'onClickBtnAudioOn': function () {
          _0x5219e5.GAudio.musicOn = false;
          _0x5219e5.GAudio.soundOn = false;
          this.btn_audio_on.active = false;
          this.btn_audio_off.active = true;
        },
        'onClickBtnAudioOff': function () {
          _0x5219e5.GAudio.musicOn = true;
          _0x5219e5.GAudio.soundOn = true;
          this.btn_audio_on.active = true;
          this.btn_audio_off.active = false;
        },
        'onClickBtnShakeOn': function () {
          _0x32c2eb.TData.setSettingShake(0x0);
          this.btn_shake_on.active = false;
          this.btn_shake_off.active = true;
        },
        'onClickBtnShakeOff': function () {
          _0x32c2eb.TData.setSettingShake(0x1);
          this.btn_shake_on.active = true;
          this.btn_shake_off.active = false;
        },
        'initStage': function () {
          this.node_stage.destroyAllChildren();
          var _0x43cee3 = cc.instantiate(this.pf_stage);
          this.node_stage.addChild(_0x43cee3);
          this.com_stage = _0x43cee3.getComponent(_0x4fbd22);
          this.com_stage.init(_0x32c2eb.TData.getStage());
        },
        'initOffline': function () {
          this.node_offline_num.destroyAllChildren();
          var _0xe0f299 = cc.instantiate(this.pf_num);
          this.node_offline_num.addChild(_0xe0f299);
          this.com_offline_num = _0xe0f299.getComponent(_0x1c5e89);
          this.com_offline_num.setParam(_0x5b71d4.Enum_Num.Blood, cc.v2(0.5, 0.5), 0x2, this.atlas_gameui);
          _0xe0f299.scale = 0.5;
          this.refreshOffline();
        },
        'refreshOfflineAnim': function () {
          if (_0x32c2eb.TData.getOfflineGold() > 0x0) {
            this.node_offline.stopAllActions();
            if (!(_0x3fa697 = this.node_offline.getChildByName("anim"))) {
              (_0x3fa697 = cc.instantiate(_0x2e66e3.GValue.pf_anim)).name = "anim";
              this.node_offline.addChild(_0x3fa697);
            }
            var _0x8a0eb4 = _0x3fa697.getComponent(_0x14ac7a);
            _0x8a0eb4.init(this.atlas_homeui, 'ol', 0x4, 0x2 * _0x4ba940.GConfig.actionFrameTime, function () {
              _0x8a0eb4.stop();
            });
            var _0x1a9912 = _0x4ba940.GConfig.actionFrameTime;
            var _0x528402 = cc.scaleTo(0x3 * _0x1a9912, 1.15);
            var _0x8c0b26 = cc.scaleTo(0x3 * _0x1a9912, 0.9);
            var _0xe0306c = cc.callFunc(function () {
              _0x8a0eb4.reset();
            });
            var _0x55706f = cc.scaleTo(0x3 * _0x1a9912, 1.05);
            var _0x54b474 = cc.scaleTo(0x4 * _0x1a9912, 0x1);
            this.node_offline.runAction(cc.repeatForever(cc.sequence(_0x528402, _0x8c0b26, _0xe0306c, _0x55706f, _0x54b474, cc.delayTime(0x5))));
          } else {
            var _0x3fa697;
            this.node_offline.stopAllActions();
            if (_0x3fa697 = this.node_offline.getChildByName('anim')) {
              _0x3fa697.removeFromParent();
            }
          }
        },
        'refreshOffline': function () {
          if (this.com_offline_num) {
            var _0x2cb4ea = _0x32c2eb.TData.getOfflineGold();
            this.com_offline_num.setString(_0x107e95.GFunc.getNumK(_0x2cb4ea));
          }
          this.refreshOfflineRecover();
          this.refreshOfflineAnim();
        },
        'refreshOfflineRecover': function () {
          var _0x1ae187 = _0x32c2eb.TData.getStage();
          var _0x33513 = _0x4ba940.GConfig.getLevelData(_0x1ae187);
          var _0x32b713 = 0x0;
          if (_0x33513) {
            _0x32b713 = _0x33513.offlineGoldMax;
          }
          var _0x448555 = _0x32c2eb.TData.getOfflineGold();
          if (_0x32b713 > 0x0) {
            if (_0x2e66e3.GValue.OfflineGoldOnceRecoverTime > 0x0) {
              var _0x4ada91 = _0x2e66e3.GValue.OfflineGoldTime / _0x2e66e3.GValue.OfflineGoldOnceRecoverTime;
              this.sp_offline_recover_full.fillRange = 0x1 - _0x4ada91;
            }
            var _0x11ceb1 = _0x448555 / _0x32b713;
            this.sp_offline_full.fillRange = _0x11ceb1;
            if (_0x11ceb1 >= 0x1) {
              this.node_offline_font_full.opacity = 0xff;
              this.sp_offline_recover_full.fillRange = 0x1;
            } else {
              this.node_offline_font_full.opacity = 0x0;
            }
            this.node_offline_font_get.opacity = _0x448555 > 0x0 ? 0xff : 0x0;
          }
        },
        'onClickBtnOffline': function () {
          var _0x3b3e56 = _0x32c2eb.TData.getOfflineGold();
          if (_0x3b3e56 > 0x0) {
            var _0x2a7c7e = _0x36e636.ADShareMgr.getActualAdShare(_0x5b71d4.Enum_ADShare.AS_Offline);
            _0x28e812.DYTools.error("离线收益类型 = " + _0x2a7c7e);
            if (_0x2a7c7e == _0x5b71d4.Enum_AdShareType.Free || _0x2a7c7e == _0x5b71d4.Enum_AdShareType.None) {
              this.getOfflineGoldValue(_0x3b3e56);
            } else {
              var _0x119c2f = _0x107e95.GFunc.getGoldOfflineCurTime();
              var _0x218f93 = _0x4ba940.GConfig.getGbData(_0x5b71d4.Enum_Gb.OfflineTimes);
              var _0x41af93 = _0x28e812.DYTools.stringToNumber(_0x218f93, _0x4ba940.GConfig.SeparatorII);
              var _0x23b48d = 0xe10 * _0x41af93[0x0];
              var _0x58b6ff = 0x1;
              if (_0x119c2f >= 0xe10 * _0x41af93[0x1]) {
                _0x58b6ff = 0x3;
              } else if (_0x119c2f >= _0x23b48d) {
                _0x58b6ff = 0x2;
              }
              _0x28e812.DYTools.error("离线收益间隔 = " + _0x119c2f, _0x58b6ff);
              if (0x1 == _0x58b6ff) {
                this.getOfflineGoldValue(_0x3b3e56);
              } else {
                var _0x41aa6e = cc.instantiate(this.pf_panelOffline);
                _0x2e66e3.GValue.Root_Canvas.addChild(_0x41aa6e);
                _0x41aa6e.getComponent(_0x4ed5c1).init(_0x3b3e56, _0x58b6ff, _0x2a7c7e);
              }
            }
          } else {
            _0x107e95.GFunc.showFloatTips('', this.atlas_homeui, "tip_font_offline");
          }
        },
        'getOfflineGoldValue': function (_0x25eb3a) {
          var _0x9f920 = _0x32c2eb.TData.getGold();
          _0x32c2eb.TData.setGold(_0x9f920 + _0x25eb3a);
          _0x32c2eb.TData.setOfflineGold(0x0);
          _0x32c2eb.TData.setTimeOfflineGold(_0x107e95.GFunc.getCurTime());
          if (this.node_offline_font_full.active) {
            _0x2e66e3.GValue.OfflineGoldTime = _0x2e66e3.GValue.OfflineGoldOnceRecoverTime;
          }
          this.refreshOffline();
          this.playGoldEffect(_0x25eb3a, null);
          this.com_property.show(this.cur_sysBtn, false);
          _0x32c2eb.TData.setTimeOfflineGoldGet(_0x107e95.GFunc.getCurTime());
        },
        'moveupOffline': function () {
          this.node_right.stopAllActions();
          var _0x2ad98d = cc.moveBy(0x2 * _0x4ba940.GConfig.actionFrameTime, cc.v2(0x0, 0xc8));
          this.node_right.runAction(_0x2ad98d);
        },
        'movedownOffline': function () {
          this.node_right.stopAllActions();
          var _0x20cbf2 = cc.moveBy(0x2 * _0x4ba940.GConfig.actionFrameTime, cc.v2(0x0, -0xc8));
          this.node_right.runAction(_0x20cbf2);
        },
        'initPropertySys': function () {
          var _0x5bbb04 = _0x4ba940.GConfig.actionFrameTime;
          this.cur_sysBtn = _0x5b71d4.Enum_PropertySys.None;
          this.dic_sysBtnShow = {};
          this.dic_sysBtnShow[_0x5b71d4.Enum_PropertySys.ArmsMain] = this.show_sys_arms1;
          this.dic_sysBtnShow[_0x5b71d4.Enum_PropertySys.ArmsSub] = this.show_sys_arms2;
          this.dic_sysBtnShow[_0x5b71d4.Enum_PropertySys.Gold] = this.show_sys_gold;
          this.dic_sysBtnPosDiff = {};
          this.dic_sysBtnPosDiff[_0x5b71d4.Enum_PropertySys.ArmsMain] = cc.v2(0x82, 0x0);
          this.dic_sysBtnPosDiff[_0x5b71d4.Enum_PropertySys.ArmsSub] = cc.v2(0xc8, -0x1f4);
          this.dic_sysBtnPosDiff[_0x5b71d4.Enum_PropertySys.Gold] = cc.v2(0x0, 0x0);
          var _0xa77e7b = function (_0xd49134) {
            _0x5ef27f.dic_sysBtnShow[_0xd49134].y = _0x5ef27f.downY_propertySys;
            var _0xcbafe4 = new cc.Node();
            _0xcbafe4.name = "lvuptip";
            _0xcbafe4.setPosition(0x0, 0x10e);
            _0x5ef27f.dic_sysBtnShow[_0xd49134].addChild(_0xcbafe4, -0x1);
            var _0x2edd8c = new cc.Node();
            _0xcbafe4.addChild(_0x2edd8c);
            var _0x50434f = _0x2edd8c.addComponent(cc.Sprite);
            _0x107e95.GFunc.changeAtlasSprite(_0x5ef27f.atlas_homeui, _0x50434f, 'arrow_lvup');
            var _0x448ae3 = new cc.Node();
            _0xcbafe4.addChild(_0x448ae3);
            var _0xff732a = _0x448ae3.addComponent(cc.Sprite);
            _0x107e95.GFunc.changeAtlasSprite(_0x5ef27f.atlas_homeui, _0xff732a, "arrow_lvup");
            _0x448ae3.setAnchorPoint(0.5, 0.5);
            _0x107e95.GFunc.set_click(_0x448ae3, function () {}, _0x5ef27f);
            var _0x333ffe = cc.moveBy(0x7 * _0x5bbb04, cc.v2(0x0, 0x2));
            var _0xa92c47 = cc.moveBy(0x5 * _0x5bbb04, cc.v2(0x0, -0x2));
            var _0x3e6e93 = cc.sequence(_0x333ffe, _0xa92c47);
            var _0x2a3732 = cc.delayTime(0x7 * _0x5bbb04);
            var _0x3f6678 = cc.callFunc(function () {
              _0x2edd8c.stopAllActions();
              _0x2edd8c.y = _0x448ae3.y;
              _0x2edd8c.scale = _0x448ae3.scale;
              _0x2edd8c.opacity = 0xff;
              var _0x3ff31a = cc.scaleBy(0x5 * _0x5bbb04, 1.4);
              var _0x2ddb9f = cc.fadeTo(0x5 * _0x5bbb04, 0x0);
              var _0x5c8133 = cc.spawn(_0x3ff31a, _0x2ddb9f);
              _0x2edd8c.runAction(_0x5c8133);
            });
            var _0x2a32a3 = cc.sequence(_0x2a3732, _0x3f6678);
            var _0x9c5f18 = cc.repeatForever(cc.spawn(_0x3e6e93, _0x2a32a3));
            _0x448ae3.runAction(_0x9c5f18);
            if (parseInt(_0xd49134) == _0x5b71d4.Enum_PropertySys.ArmsSub) {
              var _0x48d360 = new cc.Node();
              _0x48d360.name = "newsub";
              _0x48d360.setPosition(-0x50, 0x118);
              _0x5ef27f.dic_sysBtnShow[_0xd49134].addChild(_0x48d360);
              var _0x4fba86 = new cc.Node();
              _0x48d360.addChild(_0x4fba86);
              var _0x4520e4 = _0x4fba86.addComponent(cc.Sprite);
              _0x107e95.GFunc.changeAtlasSprite(_0x5ef27f.atlas_homeui, _0x4520e4, "arrow_newsub");
              _0x4fba86.setAnchorPoint(0x0, 0.5);
              _0x107e95.GFunc.set_click(_0x4fba86, function () {}, _0x5ef27f);
              var _0x34c920 = cc.moveBy(0x7 * _0x5bbb04, cc.v2(0x0, 0x2));
              var _0x2bb01b = cc.moveBy(0x5 * _0x5bbb04, cc.v2(0x0, -0x2));
              var _0x5c218e = cc.sequence(_0x34c920, _0x2bb01b);
              var _0x3b3bb3 = cc.delayTime(0x7 * _0x5bbb04);
              var _0x15230a = cc.callFunc(function () {
                _0x2edd8c.stopAllActions();
                _0x2edd8c.y = _0x4fba86.y;
                _0x2edd8c.scale = _0x4fba86.scale;
                _0x2edd8c.opacity = 0xff;
                var _0x2edeb9 = cc.scaleBy(0x5 * _0x5bbb04, 1.4);
                var _0x5db5e6 = cc.fadeTo(0x5 * _0x5bbb04, 0x0);
                var _0x40e3b1 = cc.spawn(_0x2edeb9, _0x5db5e6);
                _0x2edd8c.runAction(_0x40e3b1);
              });
              var _0x3f640a = cc.sequence(_0x3b3bb3, _0x15230a);
              var _0x4fea4e = cc.repeatForever(cc.spawn(_0x5c218e, _0x3f640a));
              _0x4fba86.runAction(_0x4fea4e);
              if (_0x2e66e3.GValue.ArmsSub_TryWill > 0x0) {
                var _0x5c07f4 = new cc.Node();
                _0x5c07f4.name = "try";
                _0x5c07f4.setPosition(0x3, 0x104);
                _0x5ef27f.dic_sysBtnShow[_0xd49134].addChild(_0x5c07f4);
                var _0x50693c = new cc.Node();
                _0x5c07f4.addChild(_0x50693c);
                var _0x3ad5a7 = _0x50693c.addComponent(cc.Sprite);
                _0x107e95.GFunc.changeAtlasSprite(_0x5ef27f.atlas_homeui, _0x3ad5a7, "arrow_try");
                _0x50693c.setAnchorPoint(0.5, 0x0);
                _0x107e95.GFunc.set_click(_0x50693c, function () {}, _0x5ef27f);
                var _0x4dc268 = cc.moveBy(0x7 * _0x5bbb04, cc.v2(0x0, 0x2));
                var _0x11f691 = cc.moveBy(0x5 * _0x5bbb04, cc.v2(0x0, -0x2));
                var _0x3cce60 = cc.sequence(_0x4dc268, _0x11f691);
                var _0x323346 = cc.repeatForever(_0x3cce60);
                _0x50693c.runAction(_0x323346);
              }
            }
          };
          var _0x5ef27f = this;
          for (var _0x2db401 in this.dic_sysBtnShow) _0xa77e7b(_0x2db401);
          this.node_property.destroyAllChildren();
          var _0x3a6d73 = cc.instantiate(this.pf_property);
          _0x107e95.GFunc.adjustScreen(_0x3a6d73);
          this.node_property.addChild(_0x3a6d73);
          this.com_property = _0x3a6d73.getComponent(_0x197910);
          this.com_property.init();
          this.com_property.show(_0x5b71d4.Enum_PropertySys.None);
          if (0x0 == _0x32c2eb.TData.getListSub().length) {
            this.btn_sys_arms1.position = this.btn_sys_arms1.position.add(this.dic_sysBtnPosDiff[_0x5b71d4.Enum_PropertySys.ArmsMain]);
            this.btn_sys_arms2.position = this.btn_sys_arms2.position.add(this.dic_sysBtnPosDiff[_0x5b71d4.Enum_PropertySys.ArmsSub]);
            this.btn_sys_gold.position = this.btn_sys_gold.position.add(this.dic_sysBtnPosDiff[_0x5b71d4.Enum_PropertySys.Gold]);
          } else if (_0x2e66e3.GValue.FirstGetSub) {
            this.btn_sys_arms1.position = this.btn_sys_arms1.position.add(this.dic_sysBtnPosDiff[_0x5b71d4.Enum_PropertySys.ArmsMain]);
            this.btn_sys_arms2.position = this.btn_sys_arms2.position.add(this.dic_sysBtnPosDiff[_0x5b71d4.Enum_PropertySys.ArmsSub]);
            this.btn_sys_gold.position = this.btn_sys_gold.position.add(this.dic_sysBtnPosDiff[_0x5b71d4.Enum_PropertySys.Gold]);
          }
          this.refresh_sys_lvuptip(true);
          this.change_arms1bg();
          this.change_arms1();
          this.change_Sublogo();
        },
        'unlock_syssub': function (_0x4e949f) {
          var _0x1fa085 = 0x5 * _0x4ba940.GConfig.actionFrameTime;
          this.btn_sys_arms1_bg.getComponent(cc.Sprite).spriteFrame = this.atlas_homeui.getSpriteFrame("btn_sys_l");
          var _0x3c6ec3 = this.btn_sys_arms1.getPosition().sub(this.dic_sysBtnPosDiff[_0x5b71d4.Enum_PropertySys.ArmsMain]);
          var _0x3da81a = cc.moveTo(_0x1fa085, _0x3c6ec3);
          this.btn_sys_arms1.runAction(_0x3da81a);
          var _0x1a6133 = this.btn_sys_gold.getPosition().sub(this.dic_sysBtnPosDiff[_0x5b71d4.Enum_PropertySys.Gold]);
          var _0x5550d7 = cc.moveTo(_0x1fa085, _0x1a6133);
          this.btn_sys_gold.runAction(_0x5550d7);
          var _0x243476 = this.btn_sys_arms2.getPosition().sub(this.dic_sysBtnPosDiff[_0x5b71d4.Enum_PropertySys.ArmsSub]);
          var _0x59b42b = cc.delayTime(_0x1fa085);
          var _0x21075e = cc.moveTo(_0x1fa085, _0x243476);
          var _0x30ae3e = cc.callFunc(function () {
            if (_0x4e949f) {
              _0x4e949f();
            }
          });
          var _0x3abb69 = cc.sequence(_0x59b42b, _0x21075e, _0x30ae3e);
          this.btn_sys_arms2.runAction(_0x3abb69);
        }
      }, "unlock_syssub", function (_0x44ab8f) {
        var _0x14641d = 0x5 * _0x4ba940.GConfig.actionFrameTime;
        this.btn_sys_arms1_bg.getComponent(cc.Sprite).spriteFrame = this.atlas_homeui.getSpriteFrame("btn_sys_l");
        var _0x498a39 = this.btn_sys_arms1.getPosition().sub(this.dic_sysBtnPosDiff[_0x5b71d4.Enum_PropertySys.ArmsMain]);
        var _0x655ca3 = cc.moveTo(_0x14641d, _0x498a39);
        this.btn_sys_arms1.runAction(_0x655ca3);
        var _0x39ca83 = this.btn_sys_gold.getPosition().sub(this.dic_sysBtnPosDiff[_0x5b71d4.Enum_PropertySys.Gold]);
        var _0x3421d4 = cc.moveTo(_0x14641d, _0x39ca83);
        this.btn_sys_gold.runAction(_0x3421d4);
        var _0x2ff419 = this.btn_sys_arms2.getPosition().sub(this.dic_sysBtnPosDiff[_0x5b71d4.Enum_PropertySys.ArmsSub]);
        var _0x100d0e = cc.delayTime(_0x14641d);
        var _0x2fcfba = cc.moveTo(_0x14641d, _0x2ff419);
        var _0x2e069b = cc.callFunc(function () {
          if (_0x44ab8f) {
            _0x44ab8f();
          }
        });
        var _0x54ae8b = cc.sequence(_0x100d0e, _0x2fcfba, _0x2e069b);
        this.btn_sys_arms2.runAction(_0x54ae8b);
      });
      _0x7700bd(_0x5eb4e0, "refresh_sys_lvuptip", function (_0x51f45e) {
        if (this.cur_sysBtn != _0x5b71d4.Enum_PropertySys.None) {
          _0x51f45e = false;
        }
        for (var _0x288af1 in this.dic_sysBtnShow) {
          var _0x41fa0c = this.dic_sysBtnShow[_0x288af1];
          var _0x28ade8 = false;
          if (parseInt(_0x288af1) == _0x5b71d4.Enum_PropertySys.ArmsSub) {
            var _0x2daf5d = _0x41fa0c.getChildByName("try");
            if (_0x2daf5d) {
              _0x2daf5d.active = false;
              if (_0x51f45e && _0x2e66e3.GValue.ArmsSub_TryWill > 0x0) {
                _0x2daf5d.active = true;
                _0x28ade8 = true;
              }
            }
            var _0x4dbb25 = _0x41fa0c.getChildByName("newsub");
            if (_0x4dbb25) {
              _0x4dbb25.active = false;
              if (_0x51f45e && !_0x28ade8 && _0x32c2eb.TData.getListNewSub().length > 0x0) {
                _0x4dbb25.active = true;
                _0x28ade8 = true;
              }
            }
          }
          var _0x380635 = _0x41fa0c.getChildByName('lvuptip');
          if (_0x380635) {
            _0x380635.active = false;
            if (_0x51f45e) {
              if (parseInt(_0x288af1) == _0x5b71d4.Enum_PropertySys.ArmsMain) {
                if (_0x107e95.GFunc.canPropertyLvup(_0x5b71d4.Enum_PropertyId.ArmsMain)) {
                  _0x380635.active = true;
                }
              } else if (parseInt(_0x288af1) == _0x5b71d4.Enum_PropertySys.ArmsSub) {
                if (!_0x28ade8) {
                  if (_0x107e95.GFunc.isCanPropertyArmsSubLvupCurFun()) {
                    _0x380635.active = true;
                  }
                }
              } else {
                parseInt(_0x288af1);
                _0x5b71d4.Enum_PropertySys.Gold;
              }
            }
          }
        }
      });
      _0x7700bd(_0x5eb4e0, "setSysBtnShowScale", function (_0x11bb3c) {
        for (var _0x3a3c5c in this.dic_sysBtnShow) this.dic_sysBtnShow[_0x3a3c5c].scale = _0x11bb3c;
      });
      _0x7700bd(_0x5eb4e0, "openBtnSys", function (_0x391149, _0x151de8) {
        var _0x2d6d5a = this.dic_sysBtnShow[_0x391149];
        _0x2d6d5a.stopAllActions();
        var _0xf0c781 = cc.moveTo(0.2, cc.v2(_0x2d6d5a.x, 0x0));
        var _0x35917b = cc.callFunc(function () {
          if (_0x151de8) {
            _0x151de8();
          }
        });
        var _0x55421b = cc.sequence(_0xf0c781, _0x35917b);
        _0x2d6d5a.runAction(_0x55421b);
      });
      _0x7700bd(_0x5eb4e0, "closeBtnSys", function (_0x32411c, _0x1764ac) {
        var _0x4ec8da = this.dic_sysBtnShow[_0x32411c];
        _0x4ec8da.stopAllActions();
        var _0x144fda = cc.moveTo(0.2, cc.v2(_0x4ec8da.x, this.downY_propertySys));
        var _0x1b69ea = cc.callFunc(function () {
          if (_0x1764ac) {
            _0x1764ac();
          }
        });
        var _0x518f70 = cc.sequence(_0x144fda, _0x1b69ea);
        _0x4ec8da.runAction(_0x518f70);
      });
      _0x7700bd(_0x5eb4e0, "change_arms1bg", function () {
        if (_0x32c2eb.TData.getStage() > 0x5) {
          this.btn_sys_arms1_bg.getComponent(cc.Sprite).spriteFrame = this.atlas_homeui.getSpriteFrame("btn_sys_l");
          this.com_property.moveArrowdown(-0x82);
        }
      });
      _0x7700bd(_0x5eb4e0, "change_arms1", function () {
        var _0x58d429 = _0x107e95.GFunc.getCurMainChange();
        var _0x20a892 = 'k' + _0x58d429.imageId;
        var _0x2506a7 = "sw_" + _0x58d429.imageId;
        try {
          var _0x495add = this.icon_sys_arms1.getComponent(cc.Sprite);
          var _0x369982 = this.show_sys_arms1_shadow.getComponent(cc.Sprite);
          _0x495add.spriteFrame = _0x2e66e3.GValue.Atlas_Game.getSpriteFrame(_0x20a892);
          _0x369982.spriteFrame = _0x2e66e3.GValue.Atlas_Game.getSpriteFrame(_0x2506a7);
        } catch (_0x5c8c3f) {
          console.log("换图失败，获取的节点为空");
        }
      });
      _0x7700bd(_0x5eb4e0, 'change_Sublogo', function () {
        var _0x3f70b3 = "arms_sub_" + _0x32c2eb.TData.getCurSubFun();
        try {
          this.icon_sys_arms2.getChildByName("arms2").getComponent(cc.Sprite).spriteFrame = this.atlas_property.getSpriteFrame(_0x3f70b3);
        } catch (_0x37de0d) {
          console.log("获取节点或者精灵失败");
        }
      });
      _0x7700bd(_0x5eb4e0, "changeBtnSys", function (_0x46e1b9) {
        var _0x5ef41b = this;
        if (!this.isChangeSys) {
          this.isChangeSys = true;
          this.scheduleOnce(function () {
            _0x5ef41b.isChangeSys = false;
          }, 0x1);
          this.node_shield.active = true;
          this.node_gray.active = true;
          this.btn_start.active = false;
          if (this.cur_sysBtn == _0x5b71d4.Enum_PropertySys.None) {
            this.openBtnSys(_0x46e1b9, function () {
              _0x5ef41b.node_shield.active = false;
              _0x5ef41b.dic_sysBtnShow[_0x46e1b9];
              _0x5ef41b.com_property.show(_0x46e1b9);
            });
            this.cur_sysBtn = _0x46e1b9;
            this.moveupPlayer();
            this.refresh_sys_lvuptip(false);
            _0x5219e5.GAudio.playSound(_0x5219e5.Enum_Audio.lvup_open_close);
          } else {
            if (this.cur_sysBtn == _0x46e1b9) {
              this.closeBtnSys(_0x46e1b9, function () {
                _0x5ef41b.node_shield.active = false;
                _0x5ef41b.node_gray.active = false;
                _0x5ef41b.btn_start.active = true;
              });
              this.cur_sysBtn = _0x5b71d4.Enum_PropertySys.None;
              this.com_property.show(_0x5b71d4.Enum_PropertySys.None);
              this.movedownPlayer();
              this.refresh_sys_lvuptip(true);
              _0x5219e5.GAudio.playSound(_0x5219e5.Enum_Audio.lvup_open_close);
              this.com_property.resetSub();
            } else {
              this.openBtnSys(_0x46e1b9, function () {
                _0x5ef41b.node_shield.active = false;
                _0x5ef41b.dic_sysBtnShow[_0x46e1b9];
                _0x5ef41b.com_property.show(_0x46e1b9);
              });
              _0x5219e5.GAudio.playSound(_0x5219e5.Enum_Audio.lvup_open_close);
              for (var _0x51e852 in this.dic_sysBtnShow) {
                var _0x59c93c = parseInt(_0x51e852);
                if (_0x59c93c != _0x46e1b9) {
                  this.closeBtnSys(_0x59c93c, null);
                }
              }
              this.cur_sysBtn = _0x46e1b9;
              this.com_property.resetSub();
            }
          }
          this.change_Sublogo();
          this.change_arms1();
          this.changeSysEffectPlayer(this.cur_sysBtn);
        }
      });
      _0x7700bd(_0x5eb4e0, "onClickBtnSysArmsMain", function () {
        this.changeBtnSys(_0x5b71d4.Enum_PropertySys.ArmsMain);
      });
      _0x7700bd(_0x5eb4e0, "onClickBtnSysArmsSub", function () {
        this.changeBtnSys(_0x5b71d4.Enum_PropertySys.ArmsSub);
      });
      _0x7700bd(_0x5eb4e0, "onClickBtnSysGold", function () {
        this.changeBtnSys(_0x5b71d4.Enum_PropertySys.Gold);
      });
      _0x7700bd(_0x5eb4e0, "onClickLayerGray", function () {
        if (this.cur_sysBtn == _0x5b71d4.Enum_PropertySys.ArmsMain) {
          this.onClickBtnSysArmsMain();
        } else if (this.cur_sysBtn == _0x5b71d4.Enum_PropertySys.ArmsSub) {
          this.onClickBtnSysArmsSub();
        } else if (this.cur_sysBtn == _0x5b71d4.Enum_PropertySys.Gold) {
          this.onClickBtnSysGold();
        }
      });
      _0x7700bd(_0x5eb4e0, "resetSysIconAction", function () {
        this.icon_sys_arms1.stopAllActions();
        this.icon_sys_arms2.stopAllActions();
        this.icon_sys_gold.stopAllActions();
        var _0x6064c6 = cc.moveBy(0.8, cc.v2(0x0, -0xa));
        var _0x3f2f7e = cc.moveBy(0.8, cc.v2(0x0, 0xa));
        var _0x38141c = cc.sequence(_0x6064c6, _0x3f2f7e);
        var _0x3eac9e = cc.repeatForever(_0x38141c);
        this.icon_sys_arms1.runAction(_0x3eac9e);
        this.icon_sys_arms2.runAction(_0x3eac9e.clone());
        this.icon_sys_gold.runAction(_0x3eac9e.clone());
      });
      _0x7700bd(_0x5eb4e0, "hidePlayer", function () {
        _0x107e95.GFunc.setPlayerVisible(false);
      });
      _0x7700bd(_0x5eb4e0, "showPlayer", function () {
        _0x107e95.GFunc.setPlayerVisible(true);
      });
      _0x7700bd(_0x5eb4e0, 'moveupPlayer', function () {
        _0x107e95.GFunc.changePlayerParentToUI(this.show_player);
        this.node_player.stopAllActions();
        var _0x3e10d8 = cc.moveBy(0x5 * _0x4ba940.GConfig.actionFrameTime, cc.v2(0x0, 0x96));
        this.node_player.runAction(_0x3e10d8);
      });
      _0x7700bd(_0x5eb4e0, "movedownPlayer", function () {
        this.node_player.stopAllActions();
        var _0x302664 = cc.moveTo(0x5 * _0x4ba940.GConfig.actionFrameTime, cc.v2(0x0, 0x0));
        this.node_player.runAction(_0x302664);
      });
      _0x7700bd(_0x5eb4e0, "changeSysEffectPlayer", function (_0x2d6b57) {
        this.unschedule(this.updatePlayerSlowRatio);
        if (_0x2d6b57 == _0x5b71d4.Enum_PropertySys.ArmsMain) {
          this.schedule(this.updatePlayerSlowRatio, 0.1, this.PlayerSlowRatioCount, 0x0);
        } else {
          _0x2e66e3.GValue.PlayerSlowRatio = 0x1;
        }
        if (_0x2d6b57 == _0x5b71d4.Enum_PropertySys.Gold) {
          this.skel_gold_up.setAnimation(0x0, "play", true);
        } else {
          this.skel_gold_up.setAnimation(0x0, 'idle', false);
        }
        var _0x56a8a3 = _0x2e66e3.GValue.EntityWorld.player.followPlayerOut.node;
        var _0x5c66f = _0x2e66e3.GValue.EntityWorld.player.followPlayerIn.node;
        var _0x3a220d = _0x2e66e3.GValue.EntityWorld.player.node;
        if (_0x2d6b57 == _0x5b71d4.Enum_PropertySys.ArmsMain) {
          _0x56a8a3.opacity = 0xff;
          _0x2e66e3.GValue.EntityWorld.player.followPlayerOut.setShadowOpacity(0xff);
          _0x5c66f.opacity = 0x0;
          _0x2e66e3.GValue.EntityWorld.player.followPlayerIn.setShadowOpacity(0x0);
          _0x3a220d.opacity = 0x64;
        } else if (_0x2d6b57 == _0x5b71d4.Enum_PropertySys.ArmsSub) {
          _0x56a8a3.opacity = 0x0;
          _0x2e66e3.GValue.EntityWorld.player.followPlayerOut.setShadowOpacity(0x0);
          _0x5c66f.opacity = 0xff;
          _0x2e66e3.GValue.EntityWorld.player.followPlayerIn.setShadowOpacity(0xff);
          _0x3a220d.opacity = 0xff;
        } else if (_0x2d6b57 == _0x5b71d4.Enum_PropertySys.Gold) {
          _0x56a8a3.opacity = 0x0;
          _0x2e66e3.GValue.EntityWorld.player.followPlayerOut.setShadowOpacity(0x0);
          _0x5c66f.opacity = 0x0;
          _0x2e66e3.GValue.EntityWorld.player.followPlayerIn.setShadowOpacity(0x0);
          _0x3a220d.opacity = 0x64;
        } else {
          _0x56a8a3.opacity = 0xff;
          _0x2e66e3.GValue.EntityWorld.player.followPlayerOut.setShadowOpacity(0xff);
          _0x5c66f.opacity = 0xff;
          _0x2e66e3.GValue.EntityWorld.player.followPlayerIn.setShadowOpacity(0xff);
          _0x3a220d.opacity = 0xff;
        }
      });
      _0x7700bd(_0x5eb4e0, "effect_gold_lvup", function () {
        this.skel_gold_lvup.setAnimation(0x0, "play", false);
      });
      _0x7700bd(_0x5eb4e0, "effect_sub_lvup", function () {
        this.skel_sub_lvup.setAnimation(0x0, "play", false);
      });
      _0x7700bd(_0x5eb4e0, "effect_main_lvup", function () {
        var _0x422684 = this;
        var _0xba8b22 = new cc.Node();
        _0xba8b22.setPosition(cc.v2(0x0, -0x1e));
        _0xba8b22.scale = 0.9;
        this.effect_player.addChild(_0xba8b22);
        var _0x2d6bc8 = _0xba8b22.addComponent(sp.Skeleton);
        _0x2d6bc8.skeletonData = this.skel_main_lvup_circle;
        _0x2d6bc8.premultipliedAlpha = false;
        _0x2d6bc8.setAnimation(0x0, 'play', false);
        _0x2d6bc8.setCompleteListener(function (_0x397c91, _0x437694) {
          if ("play" == (_0x397c91.animation ? _0x397c91.animation.name : '')) {
            _0xba8b22.destroy();
          }
        });
        var _0x5b6715 = _0x4ba940.GConfig.actionFrameTime;
        this.scheduleOnce(function () {
          var _0x29d1fe = _0x2e66e3.GValue.EntityWorld.player.followPlayerOut.knivesCmp.knives;
          var _0x51372c = function (_0x51be0f) {
            var _0x14d26c = _0x29d1fe[_0x51be0f];
            var _0x4ad5b2 = new cc.Node();
            _0x14d26c.addChild(_0x4ad5b2);
            var _0x180a2f = _0x4ad5b2.addComponent(sp.Skeleton);
            _0x180a2f.skeletonData = _0x422684.skel_main_lvup_shine;
            _0x180a2f.premultipliedAlpha = false;
            _0x180a2f.setAnimation(0x0, "play", false);
            _0x180a2f.setCompleteListener(function (_0x42dd9c, _0x8d6e18) {
              if ("play" == (_0x42dd9c.animation ? _0x42dd9c.animation.name : '')) {
                _0x4ad5b2.destroy();
              }
            });
          };
          for (var _0x2a1902 = 0x0; _0x2a1902 < _0x29d1fe.length; _0x2a1902++) {
            _0x51372c(_0x2a1902);
          }
        }, 0x2 * _0x5b6715);
      });
      _0x7700bd(_0x5eb4e0, "changeSubEffect", function (_0x506a32) {
        var _0x25b8b8 = this;
        var _0x220995 = this;
        var _0x37d189 = _0x4ba940.GConfig.actionFrameTime;
        if (_0x28e812.DYTools.arrContain(_0x32c2eb.TData.getListSub(), _0x506a32)) {
          _0x32c2eb.TData.setCurSubFun(_0x506a32);
        }
        var _0x2bb23e = "change_sub_" + _0x506a32;
        _0x5219e5.GAudio.playSound(_0x2bb23e);
        var _0x1ef186 = _0x2e66e3.GValue.EntityWorld.player.node;
        var _0xd8fd7a = _0x1ef186.scale;
        var _0x3ce4f1 = _0x2e66e3.GValue.EntityWorld.player.followPlayerIn.node;
        var _0x356986 = _0x3ce4f1.scale;
        this.node_shield.active = true;
        _0x3ce4f1.stopAllActions();
        var _0x342486 = cc.scaleTo(0x5 * _0x37d189, 0x0);
        var _0x53fb8c = cc.fadeTo(0x0 * _0x37d189, 0x0);
        var _0x1c9fcd = cc.sequence(_0x342486, _0x53fb8c);
        _0x3ce4f1.runAction(_0x1c9fcd);
        _0x1ef186.stopAllActions();
        var _0x306c16 = cc.delayTime(0x3 * _0x37d189);
        var _0x7bdf43 = cc.scaleTo(0x3 * _0x37d189, 0.7 * _0xd8fd7a);
        var _0x33a449 = cc.fadeTo(0x0 * _0x37d189, 0x0);
        var _0x247878 = cc.callFunc(function () {
          _0x107e95.GFunc.changePlayerTheme(_0x506a32);
          setTimeout(function () {
            var _0x3df0dd = new cc.Node();
            _0x3df0dd.setPosition(0x0, -0x1e);
            _0x25b8b8.effect_player.addChild(_0x3df0dd);
            var _0x477ac1 = _0x3df0dd.addComponent(sp.Skeleton);
            var _0x192b76 = "skel_changesub_" + _0x506a32;
            var _0x5306b3 = "skel/" + _0x192b76 + '/' + _0x192b76;
            cc.loader.loadRes(_0x5306b3, sp.SkeletonData, function (_0x26bfd0, _0x16c53f) {
              if (!_0x26bfd0) {
                _0x477ac1.skeletonData = _0x16c53f;
                _0x477ac1.premultipliedAlpha = false;
                _0x477ac1.setAnimation(0x0, "play", false);
                _0x477ac1.setCompleteListener(function (_0x1e9c05, _0x494d9e) {
                  if ("play" == (_0x1e9c05.animation ? _0x1e9c05.animation.name : '')) {
                    _0x3df0dd.destroy();
                  }
                });
              }
            });
          }, 0x0);
        });
        var _0x5b1e13 = cc.delayTime(0x4 * _0x37d189);
        var _0x3dc046 = cc.scaleTo(0x0 * _0x37d189, 0.6 * _0xd8fd7a);
        var _0x582abd = cc.fadeTo(0x0 * _0x37d189, 0xff);
        var _0x4e4080 = cc.scaleTo(0x3 * _0x37d189, 1.05 * _0xd8fd7a);
        var _0x15acd2 = cc.scaleTo(0x4 * _0x37d189, _0xd8fd7a);
        var _0x52ea71 = cc.callFunc(function () {
          _0x3ce4f1.stopAllActions();
          _0x3ce4f1.opacity = 0xff;
          _0x3ce4f1.scale = 0.5 * _0x356986;
          var _0x58d130 = cc.scaleTo(0x3 * _0x37d189, 0.7 * _0x356986);
          var _0x4bb174 = cc.scaleTo(0x2 * _0x37d189, 0.9 * _0x356986);
          var _0x47bbd4 = cc.scaleTo(0x4 * _0x37d189, 1.3 * _0x356986);
          var _0x2360e9 = cc.scaleTo(0xa * _0x37d189, _0x356986);
          var _0x5b50a2 = cc.callFunc(function () {
            _0x220995.node_shield.active = false;
          });
          var _0x1829d5 = cc.sequence(_0x58d130, _0x4bb174, _0x47bbd4, _0x2360e9, _0x5b50a2);
          _0x3ce4f1.runAction(_0x1829d5);
        });
        var _0xc5bad2 = cc.sequence(_0x306c16, _0x7bdf43, _0x33a449, _0x247878, _0x5b1e13, _0x3dc046, _0x582abd, _0x4e4080, _0x15acd2, _0x52ea71);
        _0x1ef186.runAction(_0xc5bad2);
      });
      _0x7700bd(_0x5eb4e0, "onClickBtnStart", function () {
        console.log('onClickBtnStart...');
        if (!this.isStart) {
          if (_0x32c2eb.TData.usePower(parseInt(_0x4ba940.GConfig.getGbData(_0x5b71d4.Enum_Gb.PowerUse)))) {
            _0x107e95.GFunc.changePlayerParentToMap();
            this.refreshPower();
            var _0x44dcf0 = this;
            this.node_shield.active = true;
            this.isStart = true;
            this.playHideAction(function () {
              _0x44dcf0.node_shield.active = false;
              _0x44dcf0.node.active = false;
              _0x2e66e3.GValue.EntityWorld.gameStart(_0x32c2eb.TData.getStage());
            });
            // if (typeof wsdk !== "undefined" && typeof wsdk.showAd !== "undefined") {
            //   wsdk.showAd();
            // }
          } else if (_0x32c2eb.TData.getHasGiftPower() && this.can_popup_panelPower()) {
            this.onClickBtnGiftPower();
          } else {
            _0x107e95.GFunc.showFloatTips('', this.atlas_homeui, "tip_font_power");
          }
        }
      });
      _0x7700bd(_0x5eb4e0, "playHideAction", function (_0x37e098) {
        var _0x389469 = this;
        var _0xfecefc = _0x4ba940.GConfig.actionFrameTime;
        this.btn_start.active = false;
        var _0x48c06e = this.node_logo.position;
        var _0x34b631 = cc.moveTo(0x4 * _0xfecefc, _0x48c06e.add(cc.v2(0x0, -0x12)));
        var _0x13f9f1 = cc.moveTo(0x5 * _0xfecefc, _0x48c06e.add(cc.v2(0x0, 0x104)));
        var _0x4c674f = cc.fadeOut(0x5 * _0xfecefc);
        var _0x17e6d3 = cc.spawn(_0x13f9f1, _0x4c674f);
        this.node_logo.runAction(cc.sequence(_0x34b631, _0x17e6d3));
        _0x48c06e = this.node_stage.position;
        _0x34b631 = cc.moveTo(0x4 * _0xfecefc, _0x48c06e.add(cc.v2(0x0, -0x24)));
        _0x13f9f1 = cc.moveTo(0x5 * _0xfecefc, _0x48c06e.add(cc.v2(0x0, 0x136)));
        _0x4c674f = cc.fadeOut(0x5 * _0xfecefc);
        _0x17e6d3 = cc.spawn(_0x13f9f1, _0x4c674f);
        this.node_stage.runAction(cc.sequence(_0x34b631, _0x17e6d3));
        setTimeout(function () {
          _0x389469.reducePowerAction(parseInt(_0x4ba940.GConfig.getGbData(_0x5b71d4.Enum_Gb.PowerUse)));
        }, 0x3e8 * _0xfecefc * 0x5);
        _0x48c06e = this.node_bottom.position;
        _0x34b631 = cc.moveTo(0x4 * _0xfecefc, _0x48c06e.add(cc.v2(0x0, 0x12)));
        _0x13f9f1 = cc.moveTo(0x5 * _0xfecefc, _0x48c06e.add(cc.v2(0x0, -0x12c)));
        this.node_bottom.runAction(cc.sequence(_0x34b631, _0x13f9f1, cc.callFunc(function () {
          _0x389469.node.active = false;
          if (_0x37e098) {
            _0x37e098();
          }
        })));
        _0x48c06e = this.node_right.position;
        _0x34b631 = cc.moveTo(0x4 * _0xfecefc, _0x48c06e.add(cc.v2(-0x6, 0x0)));
        _0x13f9f1 = cc.moveTo(0x5 * _0xfecefc, _0x48c06e.add(cc.v2(0x2d0, 0x0)));
        this.node_right.runAction(cc.sequence(_0x34b631, _0x13f9f1, cc.callFunc(function () {})));
      });
      _0x7700bd(_0x5eb4e0, "initGameAgainAction", function () {
        if (this.isGameAgain()) {
          this.node_shield.active = true;
          this.node_logo.active = false;
          this.btn_start.active = false;
          this.node_stage.active = false;
          this.node_right.active = false;
        }
      });
      _0x7700bd(_0x5eb4e0, 'isGameAgain', function () {
        return _0x2e66e3.GValue.GameOverGold >= 0x0;
      });
      _0x7700bd(_0x5eb4e0, 'playGameAgainAction', function () {
        console.log('playGameAgainAction');
        var _0x223a3c = this;
        _0x223a3c.showPlayer();
        this.node_logo.active = true;
        _0x223a3c.btn_start.active = true;
        _0x223a3c.btn_start_layer.active = true;
        this.node_right.active = true;
        var _0xa60f9a = _0x4ba940.GConfig.actionFrameTime;
        this.node_stage.active = true;
        this.node_stage.opacity = 0x0;
        this.node_stage.runAction(cc.sequence(cc.fadeIn(0x5 * _0xa60f9a), cc.delayTime(_0xa60f9a), cc.callFunc(function () {
          if (_0x2e66e3.GValue.ChangeStage) {
            _0x2e66e3.GValue.ChangeStage = false;
            _0x223a3c.scheduleOnce(function () {
              _0x223a3c.endUiINAction();
            }, _0xa60f9a);
          } else {
            _0x223a3c.endUiINAction();
          }
        })));
      });
      _0x7700bd(_0x5eb4e0, "endUiINAction", function () {
        var _0x57a1fa = this;
        this.node_shield.active = false;
        if (_0x2e66e3.GValue.FirstGetSub) {
          _0x2e66e3.GValue.FirstGetSub = false;
          this.node_shield.active = true;
          this.unlock_syssub(function () {
            _0x57a1fa.node_shield.active = false;
            _0x57a1fa.checkGuide();
          });
        } else {
          _0x57a1fa.checkGuide();
        }
      });
      _0x7700bd(_0x5eb4e0, "checkGuide", function () {
        var _0x39a14c = this;
        _0x2e66e3.GValue.GuideUI.checkGuide(_0x2df49d.E_GuideId.ClickBtnSysMain, this.btn_sys_arms1, function () {
          _0x39a14c.onClickBtnSysArmsMain();
        });
        _0x2e66e3.GValue.GuideUI.checkGuide(_0x2df49d.E_GuideId.ClickBtnSysSub, _0x39a14c.btn_sys_arms2, function () {
          _0x39a14c.onClickBtnSysArmsSub();
        });
      });
      _0x7700bd(_0x5eb4e0, 'onBtnCheat', function () {
        var _0x4e700b = cc.instantiate(this.pf_panelCheat);
        _0x107e95.GFunc.adjustScreen(_0x4e700b);
        this.node.addChild(_0x4e700b, 0x6f);
        _0x4e700b.getComponent(_0x428fcd);
      });
      _0x7700bd(_0x5eb4e0, "refresh_addprogram", function () {
        if (this.node_addprogram) {
          if (_0x4ba940.GConfig.isWx) {
            if (_0x32c2eb.TData.get_addProgram_hasGet()) {
              this.node_addprogram.destroy();
              this.node_addprogram = null;
            } else {
              this.node_addprogram.active = true;
            }
          } else {
            this.node_addprogram.destroy();
            this.node_addprogram = null;
          }
        }
      });
      _0x7700bd(_0x5eb4e0, "click_addprogram", function () {
        var _0x5cbd3e = cc.instantiate(this.pf_addprogram);
        _0x2e66e3.GValue.Root_Canvas.addChild(_0x5cbd3e);
        _0x5cbd3e.getComponent(_0x5edd88.PanelAddProgram).init();
      });
      _0x7700bd(_0x5eb4e0, "refresh_official", function () {
        if (this.node_official && _0x28e812.DYTools.isLaterDay(0x3e8 * _0x32c2eb.TData.get_official_time()) && _0x32c2eb.TData.get_official_enter()) {
          this.node_official.active = true;
        }
      });
      _0x7700bd(_0x5eb4e0, "checkOfficial", function () {
        if (_0x28e812.DYTools.isLaterDay(0x3e8 * _0x32c2eb.TData.get_official_time()) && _0x32c2eb.TData.get_official_enter()) {
          _0x28e812.DYTools.log("公众奖励");
          var _0x117857 = 0x0;
          var _0x6d984 = _0x4ba940.GConfig.getGbData(_0x5b71d4.Enum_Gb.officialEnter);
          if (_0x6d984) {
            var _0x344b41 = _0x6d984.split('#');
            for (var _0x247817 = 0x0; _0x247817 < _0x344b41.length; _0x247817++) {
              var _0x2821b9 = _0x28e812.DYTools.stringToNumber(_0x344b41[_0x247817], '*');
              if (0x2 == _0x2821b9.length) {
                var _0x14c0f1 = _0x2821b9[0x0];
                var _0x274cda = _0x2821b9[0x1];
                if (!(_0x14c0f1 == _0x5b71d4.Enum_Reward.Gold)) {
                  if (_0x14c0f1 == _0x5b71d4.Enum_Reward.Power) {
                    _0x117857 = _0x274cda;
                  }
                }
              }
            }
          }
          var _0x4508be = _0x32c2eb.TData.getPower() + _0x117857;
          this.reducePowerAction(_0x117857, false);
          _0x32c2eb.TData.setPower(_0x4508be, true);
          this.refresh_official();
          this.refreshPower();
        }
        _0x32c2eb.TData.set_official_enter(0x0);
      });
      cc.Class(_0x5eb4e0);
      cc._RF.pop();
    }, {
      'ADShareManager': "ADShareManager",
      'CommonAudio': 'CommonAudio',
      'CommonConfig': "CommonConfig",
      'CommonEnum': "CommonEnum",
      'CommonFunc': "CommonFunc",
      'CommonValue': "CommonValue",
      'ConfigData': "ConfigData",
      'GameData': "GameData",
      'PanelAddProgram': "PanelAddProgram",
      'PanelCheat': "PanelCheat",
      'PanelGold': "PanelGold",
      'PanelOffline': "PanelOffline",
      'PanelPower': "PanelPower",
      'PfFrameAnim': "PfFrameAnim",
      'PfNum': "PfNum",
      'PropertyUI': "PropertyUI",
      'StageUI': "StageUI",
      'Tools': "Tools"
    }],
    'ItemProperty': [function (_0x5779f6, _0x385eb4, _0x145efa) {
      'use strict';
  
      cc._RF.push(_0x385eb4, "8f7571kDeNEy7VNB5voKqxj", 'ItemProperty');
      var _0x232c4c = _0x5779f6("PfNum");
      var _0xd97d58 = _0x5779f6("CommonEnum");
      var _0xa60e2b = _0x5779f6("CommonFunc");
      var _0xc94d1c = _0x5779f6("CommonConfig");
      var _0x756c66 = _0x5779f6("GameData");
      var _0x18d74a = _0x5779f6("CommonValue");
      var _0x9159d9 = _0x5779f6("ConfigData");
      var _0x10117e = _0x5779f6("CommonAudio");
      var _0xe8fd46 = _0x5779f6("Tools");
      var _0x3fb758 = _0x5779f6("CommonSdk");
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'node_content': cc.Node,
          'node_op': cc.Node,
          'sp_icon': cc.Sprite,
          'sp_font': cc.Sprite,
          'node_level': cc.Node,
          'node_lvNum': cc.Node,
          'node_value': cc.Node,
          'node_max': cc.Node,
          'node_btn_max': cc.Node,
          'node_btn': cc.Node,
          'btn_lvup': cc.Node,
          'sp_btn_lvup': cc.Sprite,
          'node_cost': cc.Node,
          'sp_icon_gold': cc.Sprite,
          'node_costNum': cc.Node,
          'node_shine': cc.Node,
          'node_label': cc.Node,
          'label_tip': cc.Label,
          'node_level_main': cc.Node,
          'sp_main_icon': cc.Sprite,
          'node_main_lv': cc.Node,
          'pf_num': cc.Prefab,
          'atlas_property': cc.SpriteAtlas,
          'atlas_game': cc.SpriteAtlas,
          'atlas_homeui': cc.SpriteAtlas
        },
        'onLoad': function () {
          this.color_value = cc.color(0xf0, 0xf0, 0x96);
          this.color_cost = cc.color(0x55, 0x2d, 0xa);
          this.scale_value = 0x1;
          this.isLvup = false;
          var _0x3a9061 = this;
          var _0x2a0573 = cc.instantiate(this.pf_num);
          this.node_lvNum.addChild(_0x2a0573);
          this.com_lv = _0x2a0573.getComponent(_0x232c4c);
          this.com_lv.setParam(_0xd97d58.Enum_Num.Property, cc.v2(0x0, 0.5), 0x2, this.atlas_property);
          this.com_lv.setNum(0x0);
          var _0x4387ef = cc.instantiate(this.pf_num);
          this.node_value.addChild(_0x4387ef);
          this.com_value = _0x4387ef.getComponent(_0x232c4c);
          this.com_value.setParam(_0xd97d58.Enum_Num.Blood, cc.v2(0x0, 0.5), 0x2, this.atlas_game);
          this.com_value.setNum(0x0);
          this.node_value.scale = this.scale_value;
          var _0x44d103 = cc.instantiate(this.pf_num);
          this.node_costNum.addChild(_0x44d103);
          this.com_cost = _0x44d103.getComponent(_0x232c4c);
          this.com_cost.setParam(_0xd97d58.Enum_Num.Blood, cc.v2(0x0, 0.5), 0x2, this.atlas_game);
          this.com_cost.setNum(0x0);
          _0x44d103.scale = 0.5;
          _0xa60e2b.GFunc.set_click(this.btn_lvup, function () {
            _0x3a9061.onClickBtnLvup();
          }, this);
          _0xa60e2b.GFunc.set_click(this.node_btn_max, function () {
            _0xa60e2b.GFunc.showFloatTips('', _0x3a9061.atlas_homeui, "tip_font_lvfull");
          }, this);
        },
        'init': function (_0x520b2d, _0x1c71a7, _0x2f7540, _0x219efd) {
          if (undefined === _0x219efd) {
            _0x219efd = 0x0;
          }
          this.propertyId = _0x520b2d;
          this.fun = _0x219efd;
          if (_0x1c71a7.length > 0x0) {
            _0xa60e2b.GFunc.changeAtlasSprite(this.atlas_property, this.sp_font, _0x1c71a7);
          }
          if (_0x2f7540.length > 0x0) {
            _0xa60e2b.GFunc.changeAtlasSprite(this.atlas_property, this.sp_icon, _0x2f7540);
          } else {
            this.sp_icon.node.active = false;
          }
          this.refresh();
        },
        'hide_op': function () {
          this.node_op.active = false;
        },
        'show_op': function () {
          var _0x33c30e = _0xc94d1c.GConfig.actionFrameTime;
          this.node_op.active = true;
          this.node_op.stopAllActions();
          this.node_op.scale = 0.7;
          var _0x49505a = cc.scaleTo(0x3 * _0x33c30e, 1.05);
          var _0x3214ad = cc.scaleTo(0x3 * _0x33c30e, 0x1);
          var _0x2c1eee = cc.sequence(_0x49505a, _0x3214ad);
          this.node_op.runAction(_0x2c1eee);
        },
        'lvupAction': function () {
          var _0x59bcc5 = this;
          var _0x5243c2 = this;
          var _0x3d6a83 = _0xc94d1c.GConfig.actionFrameTime;
          this.node_value.stopAllActions();
          var _0x50b695 = cc.scaleTo(0x3 * _0x3d6a83, 1.5 * this.scale_value);
          var _0x21838e = cc.scaleTo(0x5 * _0x3d6a83, 0x1 * this.scale_value);
          var _0x44b696 = cc.sequence(_0x50b695, _0x21838e);
          this.node_value.runAction(_0x44b696);
          this.node_level.stopAllActions();
          this.node_level.scale = 1.2;
          var _0x29c928 = cc.scaleTo(0x3 * _0x3d6a83, 0x1);
          this.node_level.runAction(_0x29c928);
          this.node_shine.active = true;
          this.node_shine.opacity = 0xff;
          this.node_shine.scale = 0x1;
          this.node_shine.stopAllActions();
          var _0x3008fd = cc.scaleTo(0x4 * _0x3d6a83, 1.9, 1.8);
          var _0x566396 = cc.scaleTo(0x4 * _0x3d6a83, 2.2, 3.6);
          var _0x3f0900 = cc.fadeTo(0x4 * _0x3d6a83, 0x0);
          var _0x4dc8c1 = cc.spawn(_0x566396, _0x3f0900);
          var _0x4b1ad7 = cc.sequence(_0x3008fd, _0x4dc8c1);
          this.node_shine.runAction(_0x4b1ad7);
          if (this.propertyId == _0xd97d58.Enum_PropertyId.GoldKill || this.propertyId == _0xd97d58.Enum_PropertyId.GoldOffline) {
            _0x18d74a.GValue.HomeUI.effect_gold_lvup();
          } else if (this.propertyId == _0xd97d58.Enum_PropertyId.ArmsSub) {
            _0x18d74a.GValue.HomeUI.effect_sub_lvup();
          } else if (this.propertyId == _0xd97d58.Enum_PropertyId.ArmsMain) {
            _0x18d74a.GValue.HomeUI.effect_main_lvup();
          }
          this.scheduleOnce(function () {
            if (_0x59bcc5.propertyId == _0xd97d58.Enum_PropertyId.ArmsMain) {
              var _0x49d5fc = _0x5243c2.sp_main_icon.node;
              var _0x293d59 = new cc.Node();
              _0x49d5fc.addChild(_0x293d59);
              var _0x3f9124 = _0x293d59.addComponent(cc.Sprite);
              _0xa60e2b.GFunc.changeAtlasSprite(_0x5243c2.atlas_property, _0x3f9124, "main_shine_2");
              var _0x1f4084 = cc.scaleTo(0x2 * _0x3d6a83, 1.1, 1.1);
              var _0x214290 = cc.scaleTo(0x5 * _0x3d6a83, 2.3, 1.9);
              var _0x431c02 = cc.fadeTo(0x5 * _0x3d6a83, 0x0);
              var _0x1ee37e = cc.spawn(_0x214290, _0x431c02);
              var _0xa95555 = cc.sequence(_0x1f4084, _0x1ee37e, cc.removeSelf());
              _0x293d59.runAction(_0xa95555);
              var _0x44608f = new cc.Node();
              _0x49d5fc.addChild(_0x44608f);
              _0x44608f.addComponent(cc.Sprite).spriteFrame = _0x5243c2.sp_main_icon.spriteFrame;
              _0x44608f.color = cc.Color.BLACK;
              _0x44608f.scale = 0.8;
              var _0x206e55 = cc.scaleTo(0x3 * _0x3d6a83, 2.4);
              var _0xf442ec = cc.scaleTo(0x3 * _0x3d6a83, 0x1);
              var _0x21e6e2 = cc.fadeTo(0x3 * _0x3d6a83, 0x0);
              var _0x48e711 = cc.spawn(_0xf442ec, _0x21e6e2);
              var _0x5732f4 = cc.sequence(_0x206e55, _0x48e711, cc.removeSelf());
              _0x44608f.runAction(_0x5732f4);
              var _0xf69c04 = new cc.Node();
              _0x49d5fc.addChild(_0xf69c04);
              var _0x1b5dc1 = _0xf69c04.addComponent(cc.Sprite);
              _0xa60e2b.GFunc.changeAtlasSprite(_0x5243c2.atlas_property, _0x1b5dc1, "main_shine_1");
              _0xf69c04.opacity = 0x0;
              var _0x4c4749 = cc.delayTime(0x3 * _0x3d6a83);
              var _0x2890d9 = cc.fadeIn(0x0);
              var _0x513560 = cc.scaleTo(0x3 * _0x3d6a83, 2.05, 0.55);
              var _0x8b96a1 = cc.scaleTo(0x5 * _0x3d6a83, 3.05, 0.8);
              var _0x1a17ce = cc.fadeTo(0x5 * _0x3d6a83, 0x0);
              var _0x1c8efd = cc.spawn(_0x8b96a1, _0x1a17ce);
              var _0x2cf185 = cc.sequence(_0x4c4749, _0x2890d9, _0x513560, _0x1c8efd, cc.removeSelf());
              _0xf69c04.runAction(_0x2cf185);
            }
          }, 0x8 * _0x3d6a83);
        },
        'play_audio_lvup': function () {
          if (this.propertyId == _0xd97d58.Enum_PropertyId.ArmsMain || this.propertyId == _0xd97d58.Enum_PropertyId.ArmsSub) {
            _0x10117e.GAudio.playSound(_0x10117e.Enum_Audio.lvup_arms);
          } else {
            _0x10117e.GAudio.playSound(_0x10117e.Enum_Audio.lvup_gold);
          }
        },
        'refresh': function () {
          var _0x575ad1 = false;
          var _0x13c4e5 = false;
          if (this.propertyId == _0xd97d58.Enum_PropertyId.ArmsMain) {
            if (_0x9b278c = _0xc94d1c.GConfig.getPropertyData_Main()) {
              this.lv = _0x9b278c.lv;
              this.value = _0x9b278c.atk;
              this.cost = _0x9b278c.gd;
            }
            if (!_0xc94d1c.GConfig.getPropertyArmsMainData(this.lv + 0x1)) {
              _0x575ad1 = true;
            }
            this.node_op.y = 0x0;
            this.node_content.x = -0x2d;
            this.node_content.y = 0x0;
            this.node_level_main.active = true;
            _0xa60e2b.GFunc.changeAtlasSprite(_0x18d74a.GValue.Atlas_Game, this.sp_main_icon, 'k' + _0x9b278c.imageId);
            _0x18d74a.GValue.HomeUI.change_arms1();
            var _0x5e5102 = this.node_main_lv.getComponent(_0x232c4c);
            if (!_0x5e5102) {
              (_0x5e5102 = this.node_main_lv.addComponent(_0x232c4c)).setParam(_0xd97d58.Enum_Num.SubLv, cc.v2(0.5, 0.5), 0x0, this.atlas_property);
            }
            _0x5e5102.setString('l' + this.lv);
          } else {
            if (this.propertyId == _0xd97d58.Enum_PropertyId.ArmsSub) {
              if (_0xe8fd46.DYTools.arrContain(_0x756c66.TData.getListSub(), this.fun)) {
                this.node_label.active = false;
                this.node_content.active = true;
                this.node_op.active = true;
                if (_0x9b278c = _0xc94d1c.GConfig.getPropertyData_Sub(this.fun)) {
                  this.lv = _0x9b278c.lv;
                  this.value = _0x9b278c.atk;
                  this.cost = _0x9b278c.gd;
                }
                if (!_0xc94d1c.GConfig.getPropertyArmsSubData(this.fun, this.lv + 0x1)) {
                  _0x575ad1 = true;
                }
                if (_0x18d74a.GValue.ArmsSub_TryFinish == _0x9b278c.fun) {
                  _0x13c4e5 = true;
                }
                this.node_op.x = 0x15e;
                this.node_op.y = 0xf0;
                this.node_content.x = 0x14;
                this.node_content.y = 0xf0;
              } else {
                this.node_label.active = true;
                this.node_content.active = false;
                this.node_op.active = false;
                var _0x41cbc7 = _0x18d74a.GValue.Dic_Sub_Level[this.fun];
                _0x41cbc7 = _0x41cbc7 || 0x0;
                this.label_tip.string = _0x41cbc7 + " stage unlock";
              }
              if (_0x18d74a.GValue.HomeUI.com_property) {
                _0x18d74a.GValue.HomeUI.com_property.refresh_sublv();
              }
            } else {
              if (this.propertyId == _0xd97d58.Enum_PropertyId.GoldKill) {
                if (_0x9b278c = _0xc94d1c.GConfig.getPropertyData_GoldKill()) {
                  this.lv = _0x9b278c.lv;
                  this.value = _0x9b278c.val;
                  this.cost = _0x9b278c.gd;
                }
                if (!_0xc94d1c.GConfig.getPropertyGoldKillData(this.lv + 0x1)) {
                  _0x575ad1 = true;
                }
              } else {
                if (this.propertyId == _0xd97d58.Enum_PropertyId.GoldOffline) {
                  var _0x9b278c;
                  if (_0x9b278c = _0xc94d1c.GConfig.getPropertyData_GoldOffline()) {
                    this.lv = _0x9b278c.lv;
                    this.value = _0x9b278c.out;
                    this.cost = _0x9b278c.gd;
                  }
                  if (!_0xc94d1c.GConfig.getPropertyGoldOfflineData(this.lv + 0x1)) {
                    _0x575ad1 = true;
                  }
                }
              }
            }
          }
          if (this.com_lv) {
            this.com_lv.setNum(this.lv);
          }
          if (this.com_value) {
            this.com_value.setNum(this.value);
            this.com_value.color = this.color_value;
            if (_0x13c4e5) {
              this.node_max.active = true;
              this.com_value.node.active = false;
            } else {
              this.node_max.active = false;
              this.com_value.node.active = true;
            }
          }
          if (this.com_cost) {
            this.com_cost.setString(_0xa60e2b.GFunc.getNumK(this.cost));
            var _0x17dd03 = this.com_cost.size;
            var _0x25e9b1 = this.node_costNum.x + _0x17dd03.width * this.com_cost.node.scale;
            this.node_cost.x = 0.5 * -_0x25e9b1;
            this.com_cost.color = this.color_cost;
          }
          if (_0x575ad1 || _0x13c4e5) {
            this.node_btn.active = false;
            this.node_btn_max.active = true;
          } else {
            this.node_btn.active = true;
            this.node_btn_max.active = false;
          }
          this.refreshBtns();
        },
        'refreshBtns': function () {
          if (_0x756c66.TData.getGold() >= this.cost) {
            _0xa60e2b.GFunc.changeAtlasSprite(this.atlas_property, this.sp_btn_lvup, "board_btn");
            _0xa60e2b.GFunc.changeAtlasSprite(this.atlas_property, this.sp_icon_gold, "icon_gold");
            if (this.com_cost) {
              this.com_cost.color = this.color_cost;
            }
          } else {
            _0xa60e2b.GFunc.changeAtlasSprite(this.atlas_property, this.sp_btn_lvup, 'board_btn_gray');
            _0xa60e2b.GFunc.changeAtlasSprite(this.atlas_property, this.sp_icon_gold, "icon_gold_gray");
            if (this.com_cost) {
              this.com_cost.color = cc.color(0x33, 0x33, 0x33);
            }
          }
        },
        'onClickBtnLvup': function () {
          if (!this.isLvup) {
            var _0x4bf163 = this;
            var _0x50a7c2 = _0xc94d1c.GConfig.actionFrameTime;
            this.node_op.stopAllActions();
            var _0x33a673 = cc.scaleTo(0x2 * _0x50a7c2, 0.8);
            var _0x32a5f8 = cc.scaleTo(0x3 * _0x50a7c2, 0x1);
            var _0x595f27 = cc.sequence(_0x33a673, _0x32a5f8);
            this.node_op.runAction(_0x595f27);
            if (_0x756c66.TData.getGold() >= this.cost) {
              this.isLvup = true;
              this.scheduleOnce(function () {
                _0x4bf163.isLvup = false;
              }, 0.5);
              if (this.propertyId == _0xd97d58.Enum_PropertyId.ArmsSub) {
                _0x756c66.TData.setPropertyLv_Sub(this.fun, this.lv + 0x1);
                _0x3fb758.GSDK.sendSubLvup(this.fun, this.lv + 0x1);
                if (_0x756c66.TData.getGuideStep() < _0xd97d58.Enum_GuideStep.SubUp) {
                  _0x756c66.TData.setGuideStep(_0xd97d58.Enum_GuideStep.SubUp);
                }
              } else {
                if (this.propertyId == _0xd97d58.Enum_PropertyId.ArmsMain) {
                  var _0x7c4c72 = _0xa60e2b.GFunc.getCurMainChange();
                  _0x756c66.TData.setPropertyLv(this.propertyId, this.lv + 0x1);
                  _0x3fb758.GSDK.sendMainLvup(this.lv + 0x1);
                  var _0x46e4df = _0xa60e2b.GFunc.getCurMainChange();
                  if (_0x7c4c72 != _0x46e4df) {
                    _0xa60e2b.GFunc.changePlayerMainWeapon();
                    _0x18d74a.GValue.HomeUI.com_property.changeMain(_0x7c4c72, _0x46e4df);
                  }
                  if (_0x756c66.TData.getGuideStep() < _0xd97d58.Enum_GuideStep.MainUp) {
                    _0x756c66.TData.setGuideStep(_0xd97d58.Enum_GuideStep.MainUp);
                  }
                } else {
                  _0x756c66.TData.setPropertyLv(this.propertyId, this.lv + 0x1);
                }
              }
              _0x756c66.TData.setGold(_0x756c66.TData.getGold() - this.cost);
              _0x18d74a.GValue.HomeUI.refreshGold();
              this.refresh();
              this.play_audio_lvup();
              this.lvupAction();
            } else {
              if (!_0x18d74a.GValue.HomeUI.goldLessPopupPanelGold(function () {
                _0x4bf163.refreshBtns();
              })) {
                var _0x2bcfd8 = this.node_op.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
                _0x2bcfd8.addSelf(cc.v2(0x0, 0x46));
                _0xa60e2b.GFunc.showFloatTips('', this.atlas_homeui, "tip_font_gold", _0x2bcfd8);
              }
            }
          }
        },
        'checkGuide': function () {
          var _0x3c516d = this;
          if (this.propertyId == _0xd97d58.Enum_PropertyId.ArmsMain) {
            _0x18d74a.GValue.GuideUI.checkGuide(_0x9159d9.E_GuideId.ClickBtnLvupMain, this.btn_lvup, function () {
              _0x3c516d.onClickBtnLvup();
            });
          } else if (this.propertyId == _0xd97d58.Enum_PropertyId.ArmsSub) {
            _0x18d74a.GValue.GuideUI.checkGuide(_0x9159d9.E_GuideId.ClickBtnLvupSub, this.btn_lvup, function () {
              _0x3c516d.onClickBtnLvup();
            });
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonAudio': "CommonAudio",
      'CommonConfig': "CommonConfig",
      'CommonEnum': "CommonEnum",
      'CommonFunc': 'CommonFunc',
      'CommonSdk': 'CommonSdk',
      'CommonValue': 'CommonValue',
      'ConfigData': "ConfigData",
      'GameData': "GameData",
      'PfNum': "PfNum",
      'Tools': "Tools"
    }],
    'KnifeDropCollisionWallListener': [function (_0x448485, _0x50f61e, _0x6a6dd1) {
      'use strict';
  
      cc._RF.push(_0x50f61e, "623a4bTZ6FNf7mpCOEFjb+c", 'KnifeDropCollisionWallListener');
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'label': cc.Label
        },
        'ctor': function () {},
        'onCollisionExit': function (_0x1e9ac7, _0x509db6) {
          if (!(0x4 != _0x1e9ac7.node.groupIndex && 0xa != _0x1e9ac7.node.groupIndex)) {
            this.noticeWallLeave(_0x1e9ac7);
          }
        },
        'onCollisionEnter': function (_0x332c0a, _0x34ac93) {
          if (!(0x4 != _0x332c0a.node.groupIndex && 0xa != _0x332c0a.node.groupIndex)) {
            this.noticeWallCollision(_0x332c0a);
          }
        },
        'noticeWallCollision': function (_0x5626e4) {
          this.node.parent.emit("wallCollision", _0x5626e4);
        },
        'noticeWallLeave': function (_0x14dd77) {
          this.node.parent.emit('wallLeave', _0x14dd77);
        }
      });
      cc._RF.pop();
    }, {}],
    'KnifeRivalEffect': [function (_0xece7c2, _0x3a18ad, _0x2ae0aa) {
      'use strict';
  
      cc._RF.push(_0x3a18ad, "c98b1YXMwhBbKIOggW393ZL", "KnifeRivalEffect");
      var _0x455f41 = _0xece7c2('CommonValue');
      var _0x3e3c65 = _0xece7c2('Types');
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'anim': cc.Animation
        },
        'ctor': function () {},
        'onLoad': function () {
          this.anim.on("finished", this.animEnd, this);
        },
        'animEnd': function () {
          this.anim.off("finished", this.animEnd, this);
          _0x455f41.GValue.EntityWorld.addEntitySys.poolMgr.put(_0x3e3c65.PoolType.EFFECT, this.node);
        }
      });
      cc._RF.pop();
    }, {
      'CommonValue': "CommonValue",
      'Types': "Types"
    }],
    'KnifeThrowCtrl': [function (_0x314ecd, _0x2d5fdc, _0xd23767) {
      'use strict';
  
      cc._RF.push(_0x2d5fdc, "32e2f8arjtENpfgT3bLt+Lx", "KnifeThrowCtrl");
      var _0x3487dd = _0x314ecd('Tools');
      var _0x32fba5 = _0x314ecd("CommonValue");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this._knife = null;
          this._collider = null;
          this._initSpeed = 0x0;
          this._speed = 0x0;
          this._dir = cc.Vec2.ZERO;
          this._checkCol = true;
          this._minViewX = 0x0;
          this._maxViewX = 0x0;
          this._minViewY = 0x0;
          this._maxViewY = 0x0;
          this._minX = null;
          this._maxX = null;
          this._minY = null;
          this._maxY = null;
          this._collisionWalls = [];
          this.colingWalls = [];
          this._dxDirty = false;
          this._dyDirty = false;
        },
        'init': function (_0x3900a3, _0x1ae10d, _0x4273d4, _0x30ca23) {
          if (undefined === _0x30ca23) {
            _0x30ca23 = true;
          }
          this._knife = _0x3900a3;
          this._collider = _0x3900a3.landNode.getComponent(cc.BoxCollider);
          this._initSpeed = _0x1ae10d;
          this._speed = _0x1ae10d;
          this._dir = _0x4273d4.normalize();
          this._checkCol = _0x30ca23;
          this._minViewX = 0x0;
          this._maxViewX = _0x32fba5.GValue.Size_View.width;
          this._minViewY = 0x0;
          this._maxViewY = _0x32fba5.GValue.Size_View.height;
          this.node.on("wallCollision", this.collisionWall, this);
          this.node.on("wallLeave", this.leaveWall, this);
        },
        'updateGameLogic': function (_0x5d994d) {
          if (this._collider) {
            var _0x270bd5 = this._speed * _0x5d994d;
            var _0x588fbd = this._dir.mul(_0x270bd5);
            this.node.position = this.node.position.add(_0x588fbd);
            this.node.angle += 0x3 * _0x270bd5;
            if (this._checkCol) {
              if (!this.fixPositionByWall()) {
                this.fixPositionByScreen();
              }
              if (this._dxDirty) {
                this._dir.x = -this._dir.x;
                this._dxDirty = false;
              }
              if (this._dyDirty) {
                this._dir.y = -this._dir.y;
                this._dyDirty = false;
              }
              this._speed -= 0xf;
            } else {
              this._speed -= 0xa;
            }
            if (this._speed > 0.7 * this._initSpeed) {
              this.node.scale = 0x2 - (this._speed - 0.7 * this._initSpeed) / this._initSpeed;
            } else {
              this.node.scale = 0x1 + this._speed / this._initSpeed * 0.7;
            }
            if (this._speed < 0x0) {
              this._speed = 0x0;
              this.node.emit("dropOver");
            }
          }
        },
        'fixPositionByScreen': function () {
          var _0x579042 = this.node.position.add(_0x32fba5.GValue.EntityWorld.mapMgr.mapTop.position).mul(_0x32fba5.GValue.MapScale);
          if (_0x579042.x < this._minViewX) {
            this.node.x = this.node.parent.convertToNodeSpaceAR(cc.v2(this._minViewX, 0x0)).x;
            this._dxDirty = true;
          } else if (_0x579042.x > this._maxViewX) {
            this.node.x = this.node.parent.convertToNodeSpaceAR(cc.v2(this._maxViewX, 0x0)).x;
            this._dxDirty = true;
          }
          if (_0x579042.y < this._minViewY) {
            this.node.y = this.node.parent.convertToNodeSpaceAR(cc.v2(0x0, this._minViewY)).y;
            this._dyDirty = true;
          } else if (_0x579042.y > this._maxViewY) {
            this.node.y = this.node.parent.convertToNodeSpaceAR(cc.v2(0x0, this._maxViewY)).y;
            this._dyDirty = true;
          }
        },
        'fixPositionByWall': function () {
          if (0x0 == this._collisionWalls.length) {
            return false;
          }
          for (var _0x3e3b42 = 0x0; _0x3e3b42 < this._collisionWalls.length; _0x3e3b42++) {
            var _0x8907ef = this._collisionWalls[_0x3e3b42];
            this._collider;
            var _0x18a4a8 = _0x8907ef.node.parent;
            var _0x591779 = this.node.parent;
            var _0x2ce752 = _0x18a4a8.position;
            switch (_0x8907ef.tag) {
              case 0x0:
                var _0x35bd97 = _0x8907ef.size.height;
                this._maxY = _0x2ce752.y - _0x8907ef.offset.y - 0.5 * _0x35bd97;
                if (this.node.y > this._maxY) {
                  this.node.y = this._maxY;
                  this._dyDirty = true;
                }
                break;
              case 0x1:
                _0x35bd97 = _0x8907ef.size.height;
                this._minY = _0x2ce752.y + _0x8907ef.offset.y + 0.5 * _0x35bd97;
                if (this.node.y < this._minY) {
                  this.node.y = this._minY;
                  this._dyDirty = true;
                }
                break;
              case 0x2:
                _0x35bd97 = _0x8907ef.size.height;
                this._minX = _0x2ce752.x + _0x8907ef.offset.y + 0.5 * _0x35bd97;
                if (this.node.x < this._minX) {
                  this.node.x = this._minX;
                  this._dxDirty = true;
                }
                break;
              case 0x3:
                _0x35bd97 = _0x8907ef.size.height;
                this._maxX = _0x2ce752.x - _0x8907ef.offset.y - 0.5 * _0x35bd97;
                if (this.node.x > this._maxX) {
                  this.node.x = this._maxX;
                  this._dxDirty = true;
                }
                break;
              case 0x4:
                _0x2ce752 = _0x2ce752.add(_0x8907ef.node.position);
                if ((_0x4abdc4 = (_0x2d01de = this.node.position.sub(_0x2ce752)).mag()) < (_0x2f68a8 = _0x8907ef.radius - 0x6)) {
                  var _0xa46ba2 = _0x2d01de.x / _0x4abdc4;
                  var _0x50f88c = _0x2d01de.y / _0x4abdc4;
                  var _0xfb9c00 = _0x2ce752.add(cc.v2(_0x2f68a8 * _0xa46ba2, _0x2f68a8 * _0x50f88c));
                  this.node.position = _0xfb9c00;
                  this._dyDirty = true;
                  this._dxDirty = true;
                }
                break;
              case 0x5:
                _0x2ce752.addSelf(_0x8907ef.node.position);
                if ((_0x4abdc4 = (_0x2d01de = this.node.position.sub(_0x2ce752)).mag()) < (_0x2f68a8 = _0x8907ef.radius - 0x6)) {
                  _0xa46ba2 = _0x2d01de.x / _0x4abdc4;
                  _0x50f88c = _0x2d01de.y / _0x4abdc4;
                  _0xfb9c00 = _0x2ce752.add(cc.v2(_0x2f68a8 * _0xa46ba2, _0x2f68a8 * _0x50f88c));
                  this.node.position = _0xfb9c00;
                  this._dyDirty = true;
                  this._dxDirty = true;
                }
                break;
              case 0x6:
                var _0x2d01de;
                var _0x4abdc4;
                _0x2ce752 = _0x8907ef.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
                _0x2ce752 = _0x591779.convertToNodeSpaceAR(_0x2ce752);
                if ((_0x4abdc4 = (_0x2d01de = this.node.position.sub(_0x2ce752)).mag()) < (_0x2f68a8 = 0.5 * _0x8907ef.size.width + 0x23 - 0x6)) {
                  _0xa46ba2 = _0x2d01de.x / _0x4abdc4;
                  _0x50f88c = _0x2d01de.y / _0x4abdc4;
                  _0xfb9c00 = _0x2ce752.add(cc.v2(_0x2f68a8 * _0xa46ba2, _0x2f68a8 * _0x50f88c));
                  this.node.position = _0xfb9c00;
                  this._dyDirty = true;
                  this._dxDirty = true;
                }
                break;
              case 0x65:
                if (_0x3487dd.DYTools.arrContain(this.colingWalls, _0x8907ef)) {
                  break;
                }
                this.colingWalls.push(_0x8907ef);
                var _0x2f68a8 = _0x8907ef.size.width;
                var _0x16c378 = _0x8907ef.size.height;
                var _0x48efaa = Math.abs(_0x18a4a8.angle);
                if (_0x48efaa > 0x50 && _0x48efaa < 0x64 || _0x48efaa > 0x104 && _0x48efaa < 0x118) {
                  _0x2f68a8 = _0x8907ef.size.height;
                  _0x16c378 = _0x8907ef.size.width;
                }
                _0x2ce752.addSelf(_0x8907ef.node.position);
                if (_0x3487dd.DYTools.isNumberDiffRange(this.node.y, _0x2ce752.y, _0x16c378 / 0x2)) {
                  this._dxDirty = true;
                } else if (_0x3487dd.DYTools.isNumberDiffRange(this.node.x, _0x2ce752.x, _0x2f68a8 / 0x2)) {
                  this._dyDirty = true;
                } else if (this.node.x > _0x2ce752.x && this.node.y > _0x2ce752.y) {
                  if (this._dir.x < 0x0 && this._dir.y < 0x0) {
                    this._dyDirty = true;
                    this._dxDirty = true;
                  } else if (this._dir.x < 0x0) {
                    this._dxDirty = true;
                  } else if (this._dir.y < 0x0) {
                    this._dyDirty = true;
                  }
                } else if (this.node.x > _0x2ce752.x && this.node.y < _0x2ce752.y) {
                  if (this._dir.x < 0x0 && this._dir.y > 0x0) {
                    this._dyDirty = true;
                    this._dxDirty = true;
                  } else if (this._dir.x < 0x0) {
                    this._dxDirty = true;
                  } else if (this._dir.y > 0x0) {
                    this._dyDirty = true;
                  }
                } else if (this.node.x < _0x2ce752.x && this.node.y < _0x2ce752.y) {
                  if (this._dir.x > 0x0 && this._dir.y > 0x0) {
                    this._dyDirty = true;
                    this._dxDirty = true;
                  } else if (this._dir.x > 0x0) {
                    this._dxDirty = true;
                  } else if (this._dir.y > 0x0) {
                    this._dyDirty = true;
                  }
                } else if (this._dir.x > 0x0 && this._dir.y < 0x0) {
                  this._dyDirty = true;
                  this._dxDirty = true;
                } else if (this._dir.x > 0x0) {
                  this._dxDirty = true;
                } else if (this._dir.y < 0x0) {
                  this._dyDirty = true;
                }
            }
          }
          return true;
        },
        'collisionWall': function (_0x7b0962) {
          if (!_0x3487dd.DYTools.arrContains(this._collisionWalls, _0x7b0962)) {
            this._collisionWalls.push(_0x7b0962);
          }
        },
        'leaveWall': function (_0x5a8f5e) {
          _0x3487dd.DYTools.arrRemove(this._collisionWalls, _0x5a8f5e);
          _0x3487dd.DYTools.arrRemove(this.colingWalls, _0x5a8f5e);
        }
      });
      cc._RF.pop();
    }, {
      'CommonValue': "CommonValue",
      'Tools': 'Tools'
    }],
    'LaserComponent': [function (_0x29dafc, _0x1f4d2c, _0x116f25) {
      'use strict';
  
      cc._RF.push(_0x1f4d2c, "4099eJXeE5FeIRnOYMIGFJE", "LaserComponent");
      var _0x415c0e = _0x29dafc("Tools");
      var _0x70a37 = _0x29dafc("CommonConfig");
      var _0x3b70cc = _0x29dafc("CommonValue");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.followEntity = null;
          this.frameList = [];
          this.frameTime = [];
          this.frameNum = [];
          this.frameCount = [];
          this.frameImage = [];
          this.laserNode = null;
          this.startNode = null;
          this.lightNode = null;
        },
        'init': function (_0x307ec2, _0x134dd2) {
          this.followEntity = _0x307ec2;
          var _0x5a9f28;
          var _0x11f0e8 = 'dw' + _0x134dd2 + "_1_";
          this.laserNode = new cc.Node();
          this.laserNode.anchorY = 0x0;
          this.node.addChild(this.laserNode);
          (_0x5a9f28 = this.laserNode.addComponent(cc.Sprite)).spriteFrame = _0x3b70cc.GValue.Atlas_Game.getSpriteFrame(_0x11f0e8 + 0x0);
          _0x11f0e8 = 'dw' + _0x134dd2 + "_2_";
          this.startNode = new cc.Node();
          this.startNode.position = cc.v2(0x0, 0x5);
          this.node.addChild(this.startNode, 0x1);
          (_0x5a9f28 = this.startNode.addComponent(cc.Sprite)).spriteFrame = _0x3b70cc.GValue.Atlas_Game.getSpriteFrame(_0x11f0e8 + 0x0);
          this.addFrameAnim(_0x5a9f28, _0x11f0e8, 0x2);
          _0x11f0e8 = 'dw' + _0x134dd2 + '_3_';
          this.lightNode = new cc.Node();
          this.lightNode.position = cc.v2(0x0, 0x36);
          this.node.addChild(this.lightNode, 0x2);
          (_0x5a9f28 = this.lightNode.addComponent(cc.Sprite)).spriteFrame = _0x3b70cc.GValue.Atlas_Game.getSpriteFrame(_0x11f0e8 + 0x0);
          this.addFrameAnim(_0x5a9f28, _0x11f0e8, 0x3);
        },
        'enterStrong': function (_0x2ebaff) {
          this.laserNode.getComponent(cc.Sprite).spriteFrame = 0x0 == _0x2ebaff ? _0x3b70cc.GValue.Atlas_Game.getSpriteFrame("dw2_1_0") : _0x3b70cc.GValue.Atlas_Game.getSpriteFrame("dw2_1_1");
        },
        'setEnemy': function (_0x1e0d30, _0x2b0501) {
          var _0x1b6193 = cc.v2(0x0, 0x0);
          var _0x4f4bdf = cc.v2(0x0, 0x0);
          var _0x5a1519 = _0x1e0d30.radius;
          if (_0x1e0d30.isSnake) {
            _0x1b6193 = _0x1e0d30.node_tail.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
            _0x4f4bdf = this.node.parent.convertToNodeSpaceAR(_0x1b6193);
          } else if (_0x1e0d30.isFire) {
            _0x1b6193 = _0x1e0d30.node_collider.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
            _0x4f4bdf = this.node.parent.convertToNodeSpaceAR(_0x1b6193);
            _0x5a1519 -= 0x64;
          } else {
            _0x1b6193 = _0x1e0d30.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
            _0x4f4bdf = this.node.parent.convertToNodeSpaceAR(_0x1b6193);
          }
          var _0x27b9ec = cc.v2(0x0, 0x32).signAngle(_0x4f4bdf);
          var _0x108ca5 = cc.v2(0x0, _0x2b0501).rotate(_0x27b9ec);
          var _0x4760fd = _0x108ca5.sub(_0x4f4bdf).mag() - _0x5a1519;
          _0x27b9ec = cc.v2(0x0, 0x32).signAngle(_0x4f4bdf.sub(_0x108ca5));
          this.node.position = _0x108ca5;
          this.node.angle = -cc.misc.radiansToDegrees(_0x27b9ec);
          this.node.opacity = 0xff;
          this.laserNode.scaleY = _0x4760fd / 0x32;
          this.lightNode.position = cc.v2(0x0, _0x4760fd);
          return this.node.angle;
        },
        'updateGameLogic': function (_0x598ee7) {
          for (var _0x34662f = 0x0; _0x34662f < this.frameList.length; _0x34662f++) {
            this.frameTime[_0x34662f] = this.frameTime[_0x34662f] + _0x598ee7;
            if (this.frameTime[_0x34662f] > _0x70a37.GConfig.actionFrameTime) {
              this.frameCount[_0x34662f]++;
              var _0x1bf5d5 = this.frameList[_0x34662f];
              if (this.frameCount[_0x34662f] >= this.frameNum[_0x34662f]) {
                this.frameCount[_0x34662f] = 0x0;
              }
              var _0x1a3d35 = this.frameCount[_0x34662f];
              _0x1bf5d5.spriteFrame = this.frameImage[_0x34662f][_0x1a3d35];
            }
          }
        },
        'addFrameAnim': function (_0x1aff7a, _0x5bdcdf, _0x41ab46) {
          if (!_0x415c0e.DYTools.arrContains(this.frameList, _0x1aff7a)) {
            this.frameList.push(_0x1aff7a);
            this.frameNum.push(_0x41ab46);
            this.frameCount.push(0x0);
            this.frameTime.push(0x0);
            var _0x24f8b9 = [];
            for (var _0x488021 = 0x0; _0x488021 < _0x41ab46; _0x488021++) {
              _0x24f8b9.push(_0x3b70cc.GValue.Atlas_Game.getSpriteFrame(_0x5bdcdf + _0x488021));
            }
            this.frameImage.push(_0x24f8b9);
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'CommonValue': "CommonValue",
      'Tools': "Tools"
    }],
    'Launcherr': [function (_0x24f00e, _0x181ffd, _0x48040a) {
      'use strict';
  
      cc._RF.push(_0x181ffd, "8b9c9QBhRVFJ5u3nhn9BRgi", 'Launcherr');
      var _0x4cac81 = _0x24f00e('CommonValue');
      var _0x7a3ec1 = _0x24f00e("GameData");
      var _0x51d5fd = _0x24f00e('Tools');
      var _0x491b00 = _0x24f00e("ConfigData");
      var _0x43098b = _0x24f00e("CommonConfig");
      var _0x442a3f = _0x24f00e("CommonFunc");
      _0x24f00e("GuideUI");
      var _0x223d75 = _0x24f00e("CommonAudio");
      var _0x148f87 = _0x24f00e("CommonEnum");
      var _0x196910 = _0x24f00e("CommonSdk");
      var _0x2abcb9 = _0x24f00e("ADShareManager");
      _0x24f00e("AndroidManager");
      _0x24f00e('NetUp');
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'node_label_tip': cc.Node,
          'node_out': cc.Node,
          'node_in': cc.Node,
          'node_load': cc.Node,
          'node_role': cc.Node
        },
        'onLoad': function () {
          this._jsonCount = 0x0;
          this._totalJsonNum = 0x15;
          this.loginSuccess = false;
          this.jsonOver = false;
          this.isLoading = true;
          this.loadTime = 0x0;
          this.reLoad = false;
          this.minWaitTime = 0x3;
          this.sdkWaitTime = 0x3;
          cc.macro.DOWNLOAD_MAX_CONCURRENT = 0x2;
        },
        'start': function () {
          var _0x5e2bfa = this;
          _0x7a3ec1.TData.initData();
          this.reLoad = false;
          this.isLoading = true;
          this.loadTime = 0x0;
          this._jsonCount = 0x0;
          this.jsonOver = false;
          Date.now();
          var _0x9c2a6e = this.node_load.getComponent(cc.Sprite);
          cc.director.preloadScene("Game", function (_0x4ff437, _0x22c6ba) {
            var _0x1bb620 = Math.floor(_0x4ff437 / _0x22c6ba * 0x64);
            _0x9c2a6e.fillRange = Math.floor(_0x4ff437 / _0x22c6ba * 0x64) / 0x64;
            _0x5e2bfa.loginSuccess = true;
            _0x5e2bfa.node_label_tip.getComponent(cc.Label).string = "Loading " + _0x1bb620 + '%.....';
          }, function (_0x332280, _0x708cd8) {});
          this.ui_action();
          _0x43098b.GConfig.isDevelop;
          this.loadConfig();
          _0x4cac81.GValue.Size_View = cc.view.getVisibleSize();
          _0x4cac81.GValue.WorldRect = cc.rect(0x0, 0x0, _0x4cac81.GValue.Size_View.width, _0x4cac81.GValue.Size_View.height);
          _0x4cac81.GValue.ViewCenter = cc.v2(0.5 * _0x4cac81.GValue.Size_View.width, 0.5 * _0x4cac81.GValue.Size_View.height);
        },
        'ui_action': function () {
          var _0x3d120b = cc.rotateBy(0x4, 0x168);
          var _0xead794 = cc.repeatForever(_0x3d120b);
          this.node_out.runAction(_0xead794);
          var _0xb05fce = cc.rotateBy(0x4, -0x168);
          var _0x375a5a = cc.repeatForever(_0xb05fce);
          this.node_in.runAction(_0x375a5a);
        },
        'update': function (_0x2b767d) {
          this.minWaitTime -= _0x2b767d;
          this.sdkWaitTime -= _0x2b767d;
          this.loadTime += _0x2b767d;
          if (!(this.minWaitTime > 0x0)) {
            this.sdkWaitTime;
            if (this._jsonCount >= this._totalJsonNum) {
              this.jsonOver = true;
              if (this.loginSuccess) {
                _0x7a3ec1.TData.newDayRefresh();
                _0x2abcb9.ADShareMgr.initAdShare();
                this._jsonCount = -0x1;
                _0x4cac81.GValue.initCommonValue();
                if (_0x7a3ec1.TData.isNewPlayer) {
                  _0x7a3ec1.TData.setPower(parseInt(_0x43098b.GConfig.getGbData(_0x148f87.Enum_Gb.PowerMax)), true, false);
                }
                cc.director.loadScene('Game', function () {});
              }
            }
            if (this.isLoading && this.loadTime > 0x1e) {
              this.isLoading = false;
              this.loadTime = 0x0;
              if (!_0x43098b.GConfig.isDevelop) {
                _0x196910.GSDK.sendGameErr(_0x148f87.Enum_ReportErr.MainSceneLoad);
                _0x196910.GSDK.show_model('提示', '网络连接似乎有问题，请尝试重新加载', function () {
                  _0x4cac81.GValue.FirstMain = true;
                  _0x4cac81.GValue.DDSDK = null;
                  _0x4cac81.GValue.DDSDKUI = null;
                  cc.director.loadScene('Launcher');
                }, function () {});
              }
            }
          }
        },
        'preLoadScene': function () {
          var _0xa390ee = this;
          cc.director.preloadScene("Game", function () {}, function (_0x2a11a7, _0x3036b7) {
            if (_0x3036b7) {
              if (_0xa390ee.jsonOver) {
                cc.director.loadScene("Game");
              }
            } else {
              _0x51d5fd.DYTools.error("场景加载失败", _0x2a11a7);
            }
          });
        },
        'loadConfig': function () {
          _0x223d75.GAudio.init();
          _0x442a3f.GFunc.preLoadMap(_0x7a3ec1.TData.getStage());
          this.loadLevel();
          this.loadEnemy();
          this.loadAttr();
          this.loadEnemyOut();
          this.loadEnemyCon();
          this.loadMapPause();
          this.loadMapEnemy();
          this.loadMapBoss();
          this.loadConfigKnifeBoss();
          this.loadMapBossSnake();
          this.loadMapBossCircle();
          this.loadMapBossFire();
          this.loadMapBossElectr();
          this.loadPropertyArmsMain();
          this.loadPropertyArmsSub();
          this.loadPropertyGoldKill();
          this.loadPropertyGoldOffline();
          this.loadGb();
          this.loadGuide();
          this.loadAdShare();
          this.loadShare();
          _0x442a3f.GFunc.initEnemySkinDict();
        },
        'loadLevel': function () {
          this.loadJson('config/level', function (_0x2d6a98) {
            _0x4cac81.GValue.Dic_Sub_Level = {};
            var _0x579d90 = _0x2d6a98.json;
            for (var _0x23518a = 0x0; _0x23518a < _0x579d90.length; _0x23518a++) {
              var _0x44a1d9 = new _0x491b00.ConfigLevelData();
              _0x44a1d9.loadData(_0x579d90[_0x23518a]);
              _0x43098b.GConfig.addLevelData(_0x44a1d9);
              if (_0x44a1d9.fun > 0x0) {
                _0x4cac81.GValue.Dic_Sub_Level[_0x44a1d9.fun] = _0x44a1d9.level;
              }
            }
            _0x7a3ec1.TData.dwAdjustStage();
          });
        },
        'loadEnemy': function () {
          this.loadJson("config/showupspot", function (_0x57be1a) {
            var _0x43221e = _0x57be1a.json;
            for (var _0x454e82 = 0x0; _0x454e82 < _0x43221e.length; _0x454e82++) {
              var _0x14a6ce = new _0x491b00.ConfigEnemyOutData();
              _0x14a6ce.loadData(_0x43221e[_0x454e82]);
              _0x43098b.GConfig.addEnemyOutData(_0x14a6ce);
            }
          });
        },
        'loadAttr': function () {
          this.loadJson("config/skill", function (_0x213dc2) {
            var _0x19c3ce = _0x213dc2.json;
            for (var _0x5e20fd = 0x0; _0x5e20fd < _0x19c3ce.length; _0x5e20fd++) {
              var _0x4fd77b = new _0x491b00.ConfigAttrData();
              _0x4fd77b.loadData(_0x19c3ce[_0x5e20fd]);
              _0x43098b.GConfig.addAttrData(_0x4fd77b);
            }
          });
        },
        'loadEnemyOut': function () {
          this.loadJson('config/moster', function (_0x4a7c85) {
            var _0x5aa525 = _0x4a7c85.json;
            for (var _0x4dac42 = 0x0; _0x4dac42 < _0x5aa525.length; _0x4dac42++) {
              var _0x4d8f86 = new _0x491b00.ConfigEnemyData();
              _0x4d8f86.loadData(_0x5aa525[_0x4dac42]);
              _0x43098b.GConfig.addEnemyData(_0x4d8f86);
            }
          });
        },
        'loadEnemyCon': function () {
          this.loadJson('config/suc', function (_0x50e392) {
            var _0x30b019 = _0x50e392.json;
            for (var _0xeec961 = 0x0; _0xeec961 < _0x30b019.length; _0xeec961++) {
              var _0x1d9c19 = new _0x491b00.ConfigEnemyConData();
              _0x1d9c19.loadData(_0x30b019[_0xeec961]);
              _0x43098b.GConfig.addEnemyConData(_0x1d9c19);
            }
          });
        },
        'loadMapPause': function () {
          this.loadJson('config/pause', function (_0x4de3ff) {
            var _0x2d9860 = _0x4de3ff.json;
            for (var _0x58addc = 0x0; _0x58addc < _0x2d9860.length; _0x58addc++) {
              var _0x11450a = new _0x491b00.ConfigPauseData();
              _0x11450a.loadData(_0x2d9860[_0x58addc]);
              _0x43098b.GConfig.addPauseData(_0x11450a);
            }
          });
        },
        'loadMapEnemy': function () {
          this.loadJson('config/handput', function (_0x49b9f0) {
            var _0x2a447a = _0x49b9f0.json;
            for (var _0x412819 = 0x0; _0x412819 < _0x2a447a.length; _0x412819++) {
              var _0x538bb0 = new _0x491b00.ConfigMapEnemyAreaData();
              _0x538bb0.loadData(_0x2a447a[_0x412819]);
              _0x43098b.GConfig.addMapAreaEnemyData(_0x538bb0);
            }
          });
        },
        'loadMapBoss': function () {
          this.loadJson("config/boss", function (_0x106d7e) {
            var _0x533923 = _0x106d7e.json;
            for (var _0x1a0094 = 0x0; _0x1a0094 < _0x533923.length; _0x1a0094++) {
              var _0x142986 = new _0x491b00.ConfigMapBossData();
              _0x142986.loadData(_0x533923[_0x1a0094]);
              _0x43098b.GConfig.addMapBossData(_0x142986);
            }
          });
        },
        'loadConfigKnifeBoss': function () {
          this.loadJson("config/boss_knife", function (_0x55aa6c) {
            var _0x5a20ac = _0x55aa6c.json;
            for (var _0x504e75 = 0x0; _0x504e75 < _0x5a20ac.length; _0x504e75++) {
              var _0x53ec27 = new _0x491b00.ConfigKnifeBossData();
              _0x53ec27.loadData(_0x5a20ac[_0x504e75]);
              _0x43098b.GConfig.addKnifeBossData(_0x53ec27);
            }
          });
        },
        'loadMapBossSnake': function () {
          this.loadJson('config/boss_snake', function (_0x36ce74) {
            var _0x4181f3 = _0x36ce74.json;
            for (var _0x10a6e7 = 0x0; _0x10a6e7 < _0x4181f3.length; _0x10a6e7++) {
              var _0x4a2d30 = new _0x491b00.ConfigMapBossSnakeData();
              _0x4a2d30.loadData(_0x4181f3[_0x10a6e7]);
              _0x43098b.GConfig.addMapBossSnakeData(_0x4a2d30);
            }
          });
        },
        'loadMapBossCircle': function () {
          this.loadJson("config/boss_ice", function (_0x27d1b5) {
            var _0x3182a2 = _0x27d1b5.json;
            for (var _0x551ab9 = 0x0; _0x551ab9 < _0x3182a2.length; _0x551ab9++) {
              var _0x16938c = new _0x491b00.ConfigMapBossCircleData();
              _0x16938c.loadData(_0x3182a2[_0x551ab9]);
              _0x43098b.GConfig.addMapBossCircleData(_0x16938c);
            }
          });
        },
        'loadMapBossFire': function () {
          this.loadJson("config/boss_fire", function (_0x6e3195) {
            var _0x5b6316 = _0x6e3195.json;
            for (var _0x333392 = 0x0; _0x333392 < _0x5b6316.length; _0x333392++) {
              var _0x377056 = new _0x491b00.ConfigMapBossFireData();
              _0x377056.loadData(_0x5b6316[_0x333392]);
              _0x43098b.GConfig.addMapBossFireData(_0x377056);
            }
          });
        },
        'loadMapBossElectr': function () {
          this.loadJson("config/boss_electr", function (_0x54459d) {
            var _0xcd36cd = _0x54459d.json;
            for (var _0x41ee2a = 0x0; _0x41ee2a < _0xcd36cd.length; _0x41ee2a++) {
              var _0x365481 = new _0x491b00.ConfigMapBossElectrData();
              _0x365481.loadData(_0xcd36cd[_0x41ee2a]);
              _0x43098b.GConfig.addMapBossElectrData(_0x365481);
            }
          });
        },
        'loadPropertyArmsMain': function () {
          this.loadJson("config/main", function (_0xf642cf) {
            var _0x5be5f9 = _0xf642cf.json;
            for (var _0x2b61b7 = 0x0; _0x2b61b7 < _0x5be5f9.length; _0x2b61b7++) {
              var _0x3856c8 = new _0x491b00.ConfigPropertyArmsMainData();
              _0x3856c8.loadData(_0x5be5f9[_0x2b61b7]);
              _0x43098b.GConfig.addPropertyArmsMainData(_0x3856c8);
            }
            _0x442a3f.GFunc.getArmsMainChange();
          });
        },
        'loadPropertyArmsSub': function () {
          this.loadJson("config/sub", function (_0x147fa2) {
            var _0x483751 = _0x147fa2.json;
            for (var _0x1c7083 = 0x0; _0x1c7083 < _0x483751.length; _0x1c7083++) {
              var _0x39e94e = new _0x491b00.ConfigPropertyArmsSubData();
              _0x39e94e.loadData(_0x483751[_0x1c7083]);
              _0x43098b.GConfig.addPropertyArmsSubData(_0x39e94e);
            }
          });
        },
        'loadPropertyGoldKill': function () {
          this.loadJson("config/gold1", function (_0x30f83d) {
            var _0x289194 = _0x30f83d.json;
            for (var _0x58c52f = 0x0; _0x58c52f < _0x289194.length; _0x58c52f++) {
              var _0x508cec = new _0x491b00.ConfigPropertyGoldKillData();
              _0x508cec.loadData(_0x289194[_0x58c52f]);
              _0x43098b.GConfig.addPropertyGoldKillData(_0x508cec);
            }
          });
        },
        'loadPropertyGoldOffline': function () {
          this.loadJson("config/gold2", function (_0x498bb3) {
            var _0x5d23f1 = _0x498bb3.json;
            for (var _0x1ae439 = 0x0; _0x1ae439 < _0x5d23f1.length; _0x1ae439++) {
              var _0x378752 = new _0x491b00.ConfigPropertyGoldOfflineData();
              _0x378752.loadData(_0x5d23f1[_0x1ae439]);
              _0x43098b.GConfig.addPropertyGoldOfflineData(_0x378752);
            }
          });
        },
        'loadGb': function () {
          this.loadJson("config/global", function (_0x5c189c) {
            var _0x9d5850 = _0x5c189c.json;
            for (var _0x96c954 = 0x0; _0x96c954 < _0x9d5850.length; _0x96c954++) {
              var _0x4f1d76 = _0x9d5850[_0x96c954];
              _0x43098b.GConfig.addGbData(parseInt(_0x4f1d76.id), _0x4f1d76.ver);
            }
          });
        },
        'loadGuide': function () {
          this.loadJson("config/guide", function (_0x5ab985) {
            var _0x125091 = _0x5ab985.json;
            for (var _0x1f1e97 = 0x0; _0x1f1e97 < _0x125091.length; _0x1f1e97++) {
              var _0x295043 = new _0x491b00.GuideData();
              _0x295043.loadData(_0x125091[_0x1f1e97]);
              _0x43098b.GConfig.addGuideData(_0x295043.id, _0x295043);
            }
          });
        },
        'loadAdShare': function () {
          this.loadJson("config/advershare", function (_0x2cdeb3) {
            var _0x2c46eb = _0x2cdeb3.json;
            for (var _0x536e69 = 0x0; _0x536e69 < _0x2c46eb.length; _0x536e69++) {
              var _0x5ee6dc = new _0x491b00.ADShareData();
              _0x5ee6dc.loadData(_0x2c46eb[_0x536e69]);
              _0x2abcb9.ADShareMgr.addAdShareData(_0x5ee6dc);
            }
          });
        },
        'loadShare': function () {
          this.loadJson("config/share", function (_0x5d6171) {
            var _0x21ddb5 = _0x5d6171.json;
            for (var _0x23d4a0 = 0x0; _0x23d4a0 < _0x21ddb5.length; _0x23d4a0++) {
              var _0x38426a = new _0x491b00.ShareData();
              _0x38426a.loadData(_0x21ddb5[_0x23d4a0]);
              _0x2abcb9.ADShareMgr.addShareData(_0x38426a);
            }
          });
        },
        'loadJson': function (_0xf0098f, _0x7bf11c) {
          var _0x20eb62 = this;
          cc.loader.loadRes(_0xf0098f, function (_0x15e23c, _0x3dc830) {
            if (_0x15e23c) {
              _0x51d5fd.DYTools.error(_0x15e23c);
              _0x20eb62.loadJson(_0xf0098f, _0x7bf11c);
            } else {
              if (_0x7bf11c) {
                _0x7bf11c(_0x3dc830);
              }
              _0x20eb62._jsonCount++;
            }
          });
        },
        'checkArea': function () {
          var _0x4d9b60 = cc.loader.getXMLHttpRequest();
          _0x4d9b60.open("POST", 'https://wxgame.chiji-h5.com/wxgs_sdk/getcity.action', true);
          _0x4d9b60.timeout = 0x1388;
          _0x4d9b60.ontimeout = function () {
            _0x51d5fd.DYTools.error("checkArea--timeout");
          };
          _0x4d9b60.onreadystatechange = function () {
            var _0x3b1f0e = _0x4d9b60.readyState;
            var _0x4057e2 = _0x4d9b60.status;
            if (0x4 == _0x3b1f0e && 0xc8 == _0x4057e2) {
              var _0x2dcccb = _0x4d9b60.responseText;
              var _0x3a883b = JSON.parse(_0x2dcccb);
              _0x4cac81.GValue.curCity = _0x3a883b.city;
              _0x51d5fd.DYTools.log("checkArea = " + _0x3a883b + ", city = " + _0x4cac81.GValue.curCity);
              _0x4cac81.GValue.checkCity();
            }
          };
          _0x4d9b60.send();
        }
      });
      cc._RF.pop();
    }, {
      'ADShareManager': "ADShareManager",
      'AndroidManager': "AndroidManager",
      'CommonAudio': "CommonAudio",
      'CommonConfig': "CommonConfig",
      'CommonEnum': "CommonEnum",
      'CommonFunc': 'CommonFunc',
      'CommonSdk': "CommonSdk",
      'CommonValue': "CommonValue",
      'ConfigData': "ConfigData",
      'GameData': "GameData",
      'GuideUI': "GuideUI",
      'NetUp': "NetUp",
      'Tools': "Tools"
    }],
    'LoadingData': [function (_0x4afe50, _0x50264f, _0x21cf5f) {
      'use strict';
  
      cc._RF.push(_0x50264f, '74a18KaWRVIMqXKc/I6le1G', "LoadingData");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.load_force = true;
          this.list_res_pf = [];
          this.list_res_atlas = [];
          this.list_res_image = [];
          this.list_res_spine = [];
          this.list_res_webtexture = [];
          this.list_res_json = [];
          this.len_pf = 0x0;
          this.len_atlas = 0x0;
          this.len_image = 0x0;
          this.len_spine = 0x0;
          this.len_webtexture = 0x0;
          this.len_json = 0x0;
          this.list_release_res_pf = [];
          this.list_release_res_atlas = [];
          this.list_release_res_image = [];
          this.list_release_res_spine = [];
          this.list_release_res_webtexture = [];
          this.list_release_res_json = [];
          this.callback_loadres_success = null;
          this.callback_progress_change = null;
          this.reload_count_cur = 0x0;
          this.reload_count_total = 0x5;
          this.load_number_cur = 0x0;
          this.load_number_total = 0x0;
        },
        'setLoadForce': function (_0x58c5e4) {
          this.load_force = _0x58c5e4;
        },
        'addListResPf': function (_0x237d0f, _0x4f725c) {
          if (undefined === _0x4f725c) {
            _0x4f725c = true;
          }
          this.list_res_pf.push(_0x237d0f);
          if (_0x4f725c) {
            this.list_release_res_pf.push(_0x237d0f);
          }
        },
        'addListResAtlas': function (_0x2fdb9c, _0x1b0ec0) {
          if (undefined === _0x1b0ec0) {
            _0x1b0ec0 = true;
          }
          this.list_res_atlas.push(_0x2fdb9c);
          if (_0x1b0ec0) {
            this.list_release_res_atlas.push(_0x2fdb9c);
          }
        },
        'addListResImage': function (_0x4faf2f, _0x584ec5) {
          if (undefined === _0x584ec5) {
            _0x584ec5 = true;
          }
          this.list_res_image.push(_0x4faf2f);
          if (_0x584ec5) {
            this.list_release_res_image.push(_0x4faf2f);
          }
        },
        'addListResSpine': function (_0x464b60, _0x40c92f) {
          if (undefined === _0x40c92f) {
            _0x40c92f = true;
          }
          this.list_res_spine.push(_0x464b60);
          if (_0x40c92f) {
            this.list_release_res_spine.push(_0x464b60);
          }
        },
        'addListResWebTexture': function (_0x2f00dd, _0x163735) {
          if (undefined === _0x163735) {
            _0x163735 = true;
          }
          this.list_res_webtexture.push(_0x2f00dd);
          if (_0x163735) {
            this.list_release_res_webtexture.push(_0x2f00dd);
          }
        },
        'addListResJson': function (_0x80e66, _0x3a9305) {
          if (undefined === _0x3a9305) {
            _0x3a9305 = true;
          }
          this.list_res_json.push(_0x80e66);
          if (_0x3a9305) {
            this.list_release_res_json.push(_0x80e66);
          }
        },
        'loadResPf': function (_0x4ffe9a) {
          if (_0x4ffe9a >= this.len_pf) {
            this.loadResAtlas(0x0);
          } else {
            var _0x7e57fd = this;
            var _0x558f26 = this.list_res_pf[_0x4ffe9a];
            cc.loader.loadRes(_0x558f26, cc.Prefab, function (_0x16803d, _0x501256) {
              if (_0x16803d && _0x7e57fd.load_force) {
                _0x7e57fd.reloadResTip(_0x7e57fd.loadResPf.bind(_0x7e57fd), _0x4ffe9a);
              } else {
                _0x7e57fd.addProgress(0x1);
                _0x7e57fd.loadResPf(_0x4ffe9a + 0x1);
              }
            });
          }
        },
        'loadResAtlas': function (_0x5f2c9e) {
          if (_0x5f2c9e >= this.len_atlas) {
            this.loadResImage(0x0);
          } else {
            var _0x46edac = this;
            var _0x51322f = this.list_res_atlas[_0x5f2c9e];
            cc.loader.loadRes(_0x51322f, cc.SpriteAtlas, function (_0x3201f9, _0x21ddc1) {
              if (_0x3201f9) {
                if (_0x46edac.load_force) {
                  _0x46edac.reloadResTip(_0x46edac.loadResAtlas.bind(_0x46edac), _0x5f2c9e);
                } else {
                  _0x46edac.addProgress(0x1);
                  _0x46edac.loadResAtlas(_0x5f2c9e + 0x1);
                }
              } else {
                _0x46edac.set_success_resource(_0x51322f, _0x21ddc1);
                _0x46edac.addProgress(0x1);
                _0x46edac.loadResAtlas(_0x5f2c9e + 0x1);
              }
            });
          }
        },
        'loadResImage': function (_0x280ec5) {
          if (_0x280ec5 >= this.len_image) {
            this.loadResSpine(0x0);
          } else {
            var _0xd26365 = this;
            var _0xb2eb42 = this.list_res_image[_0x280ec5];
            cc.loader.loadRes(_0xb2eb42, cc.SpriteFrame, function (_0x51cce2, _0x490c53) {
              if (_0x51cce2 && _0xd26365.load_force) {
                _0xd26365.reloadResTip(_0xd26365.loadResImage.bind(_0xd26365), _0x280ec5);
              } else {
                _0xd26365.addProgress(0x1);
                _0xd26365.loadResImage(_0x280ec5 + 0x1);
              }
            });
          }
        },
        'loadResSpine': function (_0x42164a) {
          if (_0x42164a >= this.len_spine) {
            this.loadResWebTexture(0x0);
          } else {
            var _0x3595cc = this;
            var _0xa29db1 = this.list_res_spine[_0x42164a];
            cc.loader.loadRes(_0xa29db1, sp.SkeletonData, function (_0x3af9f9, _0x457528) {
              if (_0x3af9f9 && _0x3595cc.load_force) {
                _0x3595cc.reloadResTip(_0x3595cc.loadResSpine.bind(_0x3595cc), _0x42164a);
              } else {
                _0x3595cc.addProgress(0x1);
                _0x3595cc.loadResSpine(_0x42164a + 0x1);
              }
            });
          }
        },
        'loadResWebTexture': function (_0x27cd22) {
          if (_0x27cd22 >= this.len_webtexture) {
            this.loadResJson(0x0);
          } else {
            var _0x10993b = this;
            var _0x42d244 = this.list_res_webtexture[_0x27cd22];
            cc.loader.load(_0x42d244, function (_0x256866, _0x114053) {
              if (_0x256866 && _0x10993b.load_force) {
                _0x10993b.reloadResTip(_0x10993b.loadResWebTexture.bind(_0x10993b), _0x27cd22);
              } else {
                _0x10993b.addProgress(0x1);
                _0x10993b.loadResWebTexture(_0x27cd22 + 0x1);
              }
            });
          }
        },
        'loadResJson': function (_0x542fed) {
          if (_0x542fed >= this.len_json) {
            this.loadResSuccess();
          } else {
            var _0x238ba3 = this;
            var _0x583ad9 = this.list_res_json[_0x542fed];
            cc.loader.loadRes(_0x583ad9, function (_0x583b01, _0x550803) {
              if (_0x583b01 && _0x238ba3.load_force) {
                _0x238ba3.reloadResTip(_0x238ba3.loadResJson.bind(_0x238ba3), _0x542fed);
              } else {
                _0x238ba3.addProgress(0x1);
                _0x238ba3.loadResJson(_0x542fed + 0x1);
              }
            });
          }
        },
        'reloadResTip': function (_0x2370fa, _0x13ee06) {
          if (this.reload_count_cur >= this.reload_count_total) {
            this.showReloginUI();
          } else {
            this.reload_count_cur++;
            _0x2370fa(_0x13ee06);
          }
        },
        'set_success_resource': function (_0x147364, _0x552029) {},
        'loadResSuccess': function () {
          if (this.callback_loadres_success) {
            this.callback_loadres_success();
          }
          this.list_res_pf.splice(0x0);
          this.list_res_atlas.splice(0x0);
          this.list_res_image.splice(0x0);
          this.list_res_spine.splice(0x0);
          this.list_res_webtexture.splice(0x0);
          this.list_res_json.splice(0x0);
          this.len_pf = 0x0;
          this.len_atlas = 0x0;
          this.len_image = 0x0;
          this.len_spine = 0x0;
          this.len_webtexture = 0x0;
          this.len_json = 0x0;
          this.callback_loadres_success = null;
          this.callback_progress_change = null;
          this.load_number_cur = 0x0;
          this.load_number_total = 0x0;
        },
        'loadRes': function (_0x4e5baf, _0x2332aa) {
          this.callback_loadres_success = _0x4e5baf;
          this.callback_progress_change = _0x2332aa;
          this.len_pf = this.list_res_pf.length;
          this.len_atlas = this.list_res_atlas.length;
          this.len_image = this.list_res_image.length;
          this.len_spine = this.list_res_spine.length;
          this.len_webtexture = this.list_res_webtexture.length;
          this.len_json = this.list_res_json.length;
          this.load_number_total = this.len_pf + this.len_atlas + this.len_image + this.len_spine + this.len_webtexture + this.len_json;
          this.loadResPf(0x0);
        },
        'releaseRes': function () {
          var _0x5de22a = this.list_release_res_pf.length;
          for (var _0x5b330a = 0x0; _0x5b330a < _0x5de22a; _0x5b330a++) {
            cc.loader.releaseRes(this.list_release_res_pf[_0x5b330a], cc.Prefab);
          }
          var _0x2d0466 = this.list_release_res_atlas.length;
          for (_0x5b330a = 0x0; _0x5b330a < _0x2d0466; _0x5b330a++) {
            ;
          }
          var _0x515b45 = this.list_release_res_image.length;
          for (_0x5b330a = 0x0; _0x5b330a < _0x515b45; _0x5b330a++) {
            ;
          }
          var _0xefed3e = this.list_release_res_spine.length;
          for (_0x5b330a = 0x0; _0x5b330a < _0xefed3e; _0x5b330a++) {
            ;
          }
          var _0x243a95 = this.list_release_res_webtexture.length;
          for (_0x5b330a = 0x0; _0x5b330a < _0x243a95; _0x5b330a++) {
            ;
          }
          var _0x1fde5d = this.list_release_res_json.length;
          for (_0x5b330a = 0x0; _0x5b330a < _0x1fde5d; _0x5b330a++) {
            ;
          }
        },
        'addProgress': function (_0x36cef7) {
          this.load_number_cur = this.load_number_cur + _0x36cef7;
          if (this.callback_progress_change) {
            this.callback_progress_change();
          }
        },
        'getProgress': function () {
          if (this.load_number_total <= 0x0) {
            return 0x0;
          }
          var _0x4afc25 = this.load_number_cur;
          var _0x4bc7a3 = this.load_number_total;
          return parseFloat(_0x4afc25.toString()) / _0x4bc7a3 * 0x64;
        },
        'getResNumTotal': function () {
          return this.load_number_total;
        },
        'getResNumCur': function () {
          return this.load_number_cur;
        },
        'showReloginUI': function () {}
      });
      cc._RF.pop();
    }, {}],
    'MapManager': [function (_0xb071db, _0xc366bc, _0x5e7224) {
      'use strict';
  
      cc._RF.push(_0xc366bc, "6cdecMfaktBKq/LyqOitKeS", 'MapManager');
      var _0x148150 = _0xb071db("Tools");
      var _0x19f9bd = _0xb071db('CommonValue');
      var _0x1a6fa4 = _0xb071db('CommonConfig');
      var _0x18d17d = _0xb071db("CommonFunc");
      var _0x522e11 = _0xb071db("CommonAudio");
      var _0x1727eb = _0xb071db('EntityBlock');
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'mapBottom': cc.Node,
          'mapTop': cc.Node,
          'bgShield': cc.Node,
          'skel_stone': sp.Skeleton,
          'pf_wall': cc.Prefab,
          'pf_wall1': cc.Prefab,
          'pf_wall2': cc.Prefab,
          'pf_wallC': cc.Prefab,
          'pf_wallD': cc.Prefab,
          'pf_wallS': cc.Prefab,
          'pf_block': cc.Prefab
        },
        'onLoad': function () {
          this._finishCall = null;
          this._lvData = null;
          this._mapData = null;
          this._wallList = [];
          this._addSys = null;
          this._bgNode = null;
          this._wallNode = null;
          this._loadStart = false;
          this._wayCount = 0x0;
          this._wayFinishCount = 0x0;
          this.gameStart = false;
          this.mapSpeedH = 0x64;
          this.mapSpeedV = 0x64;
          this.mapSpeed = 0x64;
          this.curSpeed = 0x0;
          this.acceleratedSpeed = 0x5;
          this.mapStop = false;
          this.blockArr = [];
          this.blockRectArr = [];
          this.wayVec = [];
          this.curDir = cc.Vec2.ZERO;
          this.curDirTag = 0x0;
          this.curDestVec = cc.Vec2.ZERO;
          this.curDirSpeed = cc.Vec2.ZERO;
          this.mapOver = false;
          this.mapEndStone = null;
          this.stoneBombCall = null;
          this.totalDistance = 0x0;
          this.curDistance = 0x0;
          this.enemyOutArr = [];
          this.curEnemyOut = [];
          this.conEnemyArr = [];
          this.curConOut = [];
          this.pauseArr = [];
          this.areaArr = [];
          this.areaEnemyArr = [];
          this.areaEnemyAwakeArr = [];
          this.bossData = null;
          this.bossPause = null;
          this.pauseDis = [];
          var _0x427962 = this;
          this.skel_stone.setCompleteListener(function (_0x3e1bfd, _0x18582f) {
            var _0x562db2 = _0x3e1bfd.animation ? _0x3e1bfd.animation.name : '';
            if (!("idle" == _0x562db2 || "light" == _0x562db2)) {
              if (_0x427962.skel_stone.node.active) {
                _0x427962.skel_stone.setAnimation(0x0, "idle", true);
              }
              if (_0x427962.stoneBombCall) {
                _0x427962.stoneBombCall();
              }
            }
          });
        },
        'clear': function () {
          this._wallNode.removeAllChildren();
        },
        'init': function (_0x854a13, _0x5732ff, _0x3756ae) {
          this._finishCall = _0x3756ae;
          this._lvData = _0x854a13;
          this._addSys = _0x5732ff;
          this._bgNode = _0x5732ff.mapBg;
          this._wallNode = _0x5732ff.mapWall;
          this._wayCount = 0x0;
          this._wayFinishCount = 0x0;
          this.mapSpeedV = _0x854a13.mapSpeedV;
          this.mapSpeedH = _0x854a13.mapSpeedH;
          this.mapOver = false;
          this.mapEndStone = null;
          this.stoneBombCall = null;
          this.enemyOutArr = [];
          this.curEnemyOut = [];
          this.conEnemyArr = [];
          this.curConOut = [];
          this.pauseArr = [];
          this.areaArr = [];
          this.areaEnemyArr = [];
          this.areaEnemyAwakeArr = [];
          this.pauseDis = [];
          this.loadAtlas(this._lvData.bgId);
        },
        'loadAtlas': function (_0x15b8b2) {
          var _0x5b03fd = this;
          cc.loader.loadRes('images/game/package_wall' + _0x15b8b2, cc.SpriteAtlas, function (_0x2ab865, _0x46aa21) {
            if (_0x2ab865) {
              _0x148150.DYTools.error("wall error");
              _0x5b03fd.loadAtlas(_0x15b8b2);
            } else {
              _0x19f9bd.GValue.Atlas_Wall = _0x46aa21;
              _0x5b03fd.loadData();
            }
          });
        },
        'loadData': function () {
          var _0x256be0 = this;
          this._mapData = _0x1a6fa4.GConfig.MapDict[this._lvData.level];
          var _0x40474d = function (_0x2c5baa) {
            for (var _0x7d2ba6 = 0x0; _0x7d2ba6 < _0x2c5baa.eL.length; _0x7d2ba6++) {
              _0x256be0.enemyOutArr.push(_0x2c5baa.eL[_0x7d2ba6]);
            }
            for (_0x7d2ba6 = 0x0; _0x7d2ba6 < _0x2c5baa.vL.length; _0x7d2ba6++) {
              _0x256be0.wayVec.push(_0x2c5baa.vL[_0x7d2ba6].clone());
            }
            for (_0x7d2ba6 = 0x0; _0x7d2ba6 < _0x2c5baa.cL.length; _0x7d2ba6++) {
              _0x256be0.conEnemyArr.push(_0x2c5baa.cL[_0x7d2ba6]);
            }
            for (_0x7d2ba6 = 0x0; _0x7d2ba6 < _0x2c5baa.pL.length; _0x7d2ba6++) {
              _0x256be0.pauseArr.push(_0x2c5baa.pL[_0x7d2ba6]);
            }
            for (_0x7d2ba6 = 0x0; _0x7d2ba6 < _0x2c5baa.aL.length; _0x7d2ba6++) {
              _0x256be0.areaArr.push(_0x2c5baa.aL[_0x7d2ba6]);
            }
            _0x256be0.bossData = _0x2c5baa.boss;
            _0x256be0.bossPause = _0x2c5baa.bP;
            _0x256be0._loadStart = true;
          };
          if (this._mapData) {
            _0x40474d(_0x256be0._mapData);
          } else {
            _0x18d17d.GFunc.preLoadMap(this._lvData.level, function (_0x418f7a) {
              _0x256be0._mapData = _0x418f7a;
              _0x40474d(_0x256be0._mapData);
            });
          }
        },
        'createMap': function () {
          var _0x1a7744 = this._bgNode.getComponent(cc.Sprite);
          _0x1a7744.type = cc.Sprite.Type.TILED;
          _0x1a7744.spriteFrame = _0x19f9bd.GValue.Atlas_Wall.getSpriteFrame('bg' + this._lvData.bgId);
          this._bgNode.setContentSize(this._mapData.bgW, this._mapData.bgH);
          for (var _0x53b4aa = 0x0; _0x53b4aa < this._mapData.bL.length; _0x53b4aa++) {
            this.createBlock(this._mapData.bL[_0x53b4aa]);
          }
          for (_0x53b4aa = 0x0; _0x53b4aa < this._mapData.wL.length; _0x53b4aa++) {
            this.createWall(this._mapData.wL[_0x53b4aa]);
          }
          for (_0x53b4aa = 0x0; _0x53b4aa < this._mapData.aL.length; _0x53b4aa++) {
            this.createAreaEnemys(this._mapData.aL[_0x53b4aa]);
          }
          this.skel_stone.node.active = true;
          this.skel_stone.node.position = cc.v2(-0x2710, -0x2710);
          this.skel_stone.node.zIndex = cc.macro.MAX_ZINDEX;
          this.calculateMoveDis();
          this.mapReady();
          if (this._finishCall) {
            this._finishCall();
          }
        },
        'createWall': function (_0x18d583) {
          var _0x509ddd = null;
          switch (_0x18d583.dr) {
            case 0x0:
            case 0x1:
            case 0x2:
            case 0x3:
              if (0x0 == _0x18d583.ty) {
                _0x509ddd = cc.instantiate(this.pf_wall);
              } else if (0x1 == _0x18d583.ty) {
                _0x509ddd = cc.instantiate(this.pf_wallD);
              } else if (0x2 == _0x18d583.ty) {
                _0x509ddd = cc.instantiate(this.pf_wallS);
                this.mapEndStone = _0x509ddd;
              }
              break;
            case 0x4:
              (_0x509ddd = cc.instantiate(this.pf_wall1)).zIndex = 0x1;
              break;
            case 0x5:
              (_0x509ddd = cc.instantiate(this.pf_wallC)).zIndex = 0x1;
              break;
            case 0x6:
              _0x509ddd = cc.instantiate(this.pf_wall2);
              break;
            default:
              return void _0x148150.DYTools.error('墙壁tag错误', _0x18d583);
          }
          _0x509ddd.position = cc.v2(_0x18d583.x, _0x18d583.y);
          _0x509ddd.getComponent("CEntityWall").init(_0x18d583, this._lvData.bgId);
          _0x509ddd.parent = this._wallNode;
          this._wallList.push(_0x509ddd);
        },
        'createBlock': function (_0x9326ed) {
          var _0x1789fe = cc.instantiate(this.pf_block);
          _0x1789fe.position = cc.v2(_0x9326ed.x, _0x9326ed.y);
          var _0x430479 = _0x1789fe.getComponent(_0x1727eb);
          _0x430479.init(_0x9326ed, this._lvData.bgId);
          _0x1789fe.parent = this._wallNode;
          this.blockArr.push(_0x430479);
          var _0x1db19c = _0x1789fe.position.add(_0x430479.colCollider.node.position);
          var _0x1c7f67 = _0x430479.width;
          var _0x5b3ca3 = _0x430479.height;
          var _0xbf6ab9 = cc.rect(_0x1db19c.x - _0x1c7f67 / 0x2 - 0x0, _0x1db19c.y - _0x5b3ca3 / 0x2 - 0x0, _0x1c7f67 + 0x0, _0x5b3ca3 + 0x0);
          this.blockRectArr.push(_0xbf6ab9);
        },
        'createAreaEnemys': function (_0x333207) {
          var _0x2e33c1 = _0x1a6fa4.GConfig.getMapAreaEnemyData(_0x333207.oId);
          if (_0x2e33c1) {
            var _0x477d74 = [];
            var _0x4a990d = [];
            var _0x5bca58 = cc.v2(_0x333207.x, _0x333207.y);
            for (var _0x2b2a1c = 0x0; _0x2b2a1c < _0x2e33c1.enemys.length; _0x2b2a1c++) {
              var _0x3f35b7 = _0x2e33c1.enemys[_0x2b2a1c];
              _0x477d74.push(this._addSys.addSleepEnemys(_0x3f35b7.id, _0x3f35b7.pos.add(_0x5bca58), _0x3f35b7.rotate));
              _0x4a990d.push(_0x3f35b7.awakePos.add(_0x5bca58));
            }
            this.areaEnemyArr.push(_0x477d74);
            this.areaEnemyAwakeArr.push(_0x4a990d);
          } else {
            _0x148150.DYTools.error("地图区域怪无该配置:" + _0x333207.id, _0x333207.oId);
          }
        },
        'mapReady': function () {
          this.setMoveDir(true);
          var _0x501369 = this._mapData.vL[0x0];
          var _0x49c8f0 = this.mapBottom.parent;
          var _0x5bc240 = cc.Vec2.ZERO;
          switch (this.curDirTag) {
            case 0x1:
              _0x5bc240 = _0x49c8f0.convertToNodeSpaceAR(cc.v2(_0x19f9bd.GValue.ViewCenter.x, 0x0));
              break;
            case 0x2:
              _0x5bc240 = _0x49c8f0.convertToNodeSpaceAR(cc.v2(_0x19f9bd.GValue.ViewCenter.x, _0x19f9bd.GValue.Size_View.height));
              break;
            case 0x3:
              _0x5bc240 = _0x49c8f0.convertToNodeSpaceAR(cc.v2(_0x19f9bd.GValue.Size_View.width, _0x19f9bd.GValue.ViewCenter.y));
              break;
            case 0x4:
              _0x5bc240 = _0x49c8f0.convertToNodeSpaceAR(cc.v2(0x0, _0x19f9bd.GValue.ViewCenter.y));
          }
          this.mapBottom.position = _0x5bc240.sub(_0x501369);
          this.mapTop.position = _0x5bc240.sub(_0x501369);
          this.mapTop.opacity = 0x0;
        },
        'update': function (_0x2a86ac) {
          if (this._loadStart && this._wayFinishCount >= this._wayCount) {
            this.createMap();
            this._loadStart = false;
          }
        },
        'updateMap': function (_0x3956db) {
          if (this.gameStart && this.curSpeed >= 0x0 && !this.curDir.equals(cc.Vec2.ZERO) && (this.mapStop ? (this.curSpeed > 0x0 && (this.curSpeed -= this.acceleratedSpeed), this.curSpeed < 0x0 && (this.curSpeed = 0x0)) : (this.curSpeed < this.mapSpeed && (this.curSpeed += this.acceleratedSpeed), this.curSpeed > this.mapSpeed && (this.curSpeed = this.mapSpeed)), this.curSpeed > 0x0)) {
            if (this.wayVec.length > 0x1) {
              var _0x8d65a8 = this.curSpeed * _0x3956db;
              var _0x2f208 = this.mapBottom.position.add(cc.v2(this.curDir.x * _0x8d65a8, this.curDir.y * _0x8d65a8));
              if ((_0x5be4c5 = this.checkMoveDest())[0x0]) {
                _0x2f208 = this.mapBottom.position.add(_0x5be4c5[0x1]);
                this.wayVec.splice(0x0, 0x1);
                this.setMoveDir();
                this.setSpeed();
                this.curDistance += _0x2f208.sub(this.mapBottom.position).mag();
              } else {
                this.curDistance += _0x8d65a8;
              }
              this.mapBottom.position = _0x2f208;
              this.mapTop.position = _0x2f208;
            } else {
              if (0x1 == this.wayVec.length) {
                var _0x5be4c5;
                _0x8d65a8 = this.curSpeed * _0x3956db;
                _0x2f208 = this.mapBottom.position.add(cc.v2(this.curDir.x * _0x8d65a8, this.curDir.y * _0x8d65a8));
                if ((_0x5be4c5 = this.checkMoveDest(true))[0x0]) {
                  _0x2f208 = this.mapBottom.position.add(_0x5be4c5[0x1]);
                  this.wayVec.splice(0x0, 0x1);
                  this.setMoveDir();
                  this.setSpeed();
                  this.curDistance += _0x2f208.sub(this.mapBottom.position).mag();
                } else {
                  this.curDistance += _0x8d65a8;
                }
                this.mapBottom.position = _0x2f208;
                this.mapTop.position = _0x2f208;
              }
            }
            this.refreshDistance();
          }
        },
        'calculateMoveDis': function () {
          var _0x5da9b7 = 0x0;
          var _0x48dafe = this._mapData.vL;
          var _0x403386 = [];
          var _0x114939 = 0x0;
          for (var _0xb223a3 = 0x1; _0xb223a3 < _0x48dafe.length; _0xb223a3++) {
            var _0x338681 = this.pauseArr[_0x114939];
            var _0x344ea9 = false;
            var _0x15a32e = false;
            if (_0x338681 || this.bossData) {
              var _0x3026ac = _0x48dafe[_0xb223a3 - 0x1];
              var _0x102c91 = _0x48dafe[_0xb223a3];
              var _0x1245e0 = Math.min(_0x3026ac.x, _0x102c91.x);
              var _0x5a49ba = Math.min(_0x3026ac.y, _0x102c91.y);
              var _0x44e135 = 0x0;
              var _0xcbc030 = 0x0;
              if (_0x148150.DYTools.isNumberDiffRange(_0x3026ac.x, _0x102c91.x, 0xa)) {
                _0x44e135 = 0x64;
                _0xcbc030 = _0x148150.DYTools.numberDiffAbs(_0x3026ac.y, _0x102c91.y) + 0x4;
                _0x1245e0 -= 0x32;
              } else {
                _0x44e135 = _0x148150.DYTools.numberDiffAbs(_0x3026ac.x, _0x102c91.x) + 0x4;
                _0xcbc030 = 0x64;
                _0x5a49ba -= 0x32;
              }
              var _0x11e04b = cc.rect(_0x1245e0, _0x5a49ba, _0x44e135, _0xcbc030);
              if (_0x338681) {
                if (_0x11e04b.contains(cc.v2(_0x338681.x, _0x338681.y))) {
                  _0x114939++;
                  _0x344ea9 = true;
                }
              } else if (_0x11e04b.contains(cc.v2(this.bossData.x, this.bossData.y))) {
                _0x15a32e = true;
              }
            }
            var _0x40ef7b;
            var _0x3c7354 = 0x0;
            if (0x1 == _0xb223a3) {
              if ((_0x40ef7b = _0x48dafe[_0xb223a3].sub(_0x48dafe[_0xb223a3 - 0x1])).x > 0x1) {
                _0x40ef7b.x -= _0x19f9bd.GValue.ViewCenter.x / _0x19f9bd.GValue.MapScale;
              } else if (_0x40ef7b.x < -0x1) {
                _0x40ef7b.x += _0x19f9bd.GValue.ViewCenter.x / _0x19f9bd.GValue.MapScale;
              }
              if (_0x40ef7b.y > 0x1) {
                _0x40ef7b.y -= _0x19f9bd.GValue.ViewCenter.y / _0x19f9bd.GValue.MapScale;
              } else if (_0x40ef7b.y < -0x1) {
                _0x40ef7b.y += _0x19f9bd.GValue.ViewCenter.y / _0x19f9bd.GValue.MapScale;
              }
              _0x3c7354 = _0x40ef7b.mag();
              if (_0x344ea9) {
                if ((_0x3c9e4a = cc.v2(_0x338681.x, _0x338681.y).sub(_0x48dafe[_0xb223a3 - 0x1])).x > 0x1) {
                  _0x3c9e4a.x -= _0x19f9bd.GValue.ViewCenter.x / _0x19f9bd.GValue.MapScale;
                } else if (_0x3c9e4a.x < -0x1) {
                  _0x3c9e4a.x += _0x19f9bd.GValue.ViewCenter.x / _0x19f9bd.GValue.MapScale;
                }
                if (_0x3c9e4a.y > 0x1) {
                  _0x3c9e4a.y -= _0x19f9bd.GValue.ViewCenter.y / _0x19f9bd.GValue.MapScale;
                } else if (_0x3c9e4a.y < -0x1) {
                  _0x3c9e4a.y += _0x19f9bd.GValue.ViewCenter.y / _0x19f9bd.GValue.MapScale;
                }
                _0x403386.push(cc.v2(_0x5da9b7 + _0x3c9e4a.mag(), 0x0));
              } else if (_0x15a32e) {
                if ((_0x3c9e4a = cc.v2(this.bossData.x, this.bossData.y).sub(_0x48dafe[_0xb223a3 - 0x1])).x > 0x1) {
                  _0x3c9e4a.x -= _0x19f9bd.GValue.ViewCenter.x / _0x19f9bd.GValue.MapScale;
                } else if (_0x3c9e4a.x < -0x1) {
                  _0x3c9e4a.x += _0x19f9bd.GValue.ViewCenter.x / _0x19f9bd.GValue.MapScale;
                }
                if (_0x3c9e4a.y > 0x1) {
                  _0x3c9e4a.y -= _0x19f9bd.GValue.ViewCenter.y / _0x19f9bd.GValue.MapScale;
                } else if (_0x3c9e4a.y < -0x1) {
                  _0x3c9e4a.y += _0x19f9bd.GValue.ViewCenter.y / _0x19f9bd.GValue.MapScale;
                }
                _0x403386.push(cc.v2(_0x5da9b7 + _0x3c9e4a.mag(), 0x1));
              }
            } else {
              _0x3c7354 = (_0x40ef7b = (_0x40ef7b = cc.v2(_0x48dafe[_0xb223a3].x, _0x48dafe[_0xb223a3].y)).sub(_0x48dafe[_0xb223a3 - 0x1])).mag();
              if (_0x344ea9) {
                var _0x3c9e4a = cc.v2(_0x338681.x, _0x338681.y).sub(_0x48dafe[_0xb223a3 - 0x1]);
                _0x403386.push(cc.v2(_0x5da9b7 + _0x3c9e4a.mag(), 0x0));
              } else if (_0x15a32e) {
                _0x3c9e4a = cc.v2(this.bossData.x, this.bossData.y).sub(_0x48dafe[_0xb223a3 - 0x1]);
                _0x403386.push(cc.v2(_0x5da9b7 + _0x3c9e4a.mag(), 0x1));
              }
            }
            _0x5da9b7 += _0x3c7354;
          }
          this.totalDistance = _0x5da9b7;
          this.pauseDis = _0x403386;
        },
        'refreshDistance': function () {
          _0x19f9bd.GValue.EntityWorld.gameUI.refreshDisPro(this.curDistance / this.totalDistance);
        },
        'playEnterAct': function () {
          this.mapTop.runAction(cc.fadeIn(0x5 * _0x1a6fa4.GConfig.actionFrameTime));
        },
        'startGame': function () {
          this.bgShield.scale = 0x1 / _0x19f9bd.GValue.MapScale;
          this.setSpeed();
          this.gameStart = true;
        },
        'playMapEndStoneBlink': function () {},
        'playMapEndStoneAct': function (_0x303920) {
          this.stoneBombCall = _0x303920;
          this.skel_stone.setAnimation(0x0, "play" + _0x19f9bd.GValue.EntityWorld.levelData.bgId, false);
          this.mapEndStone.active = false;
          _0x522e11.GAudio.playSound(_0x522e11.Enum_Audio.stoneBomb);
        },
        'setMapStop': function (_0x39f8fa) {
          this.mapStop = _0x39f8fa;
        },
        'checkEnemyOut': function (_0x36b67c) {
          if (undefined === _0x36b67c) {
            _0x36b67c = true;
          }
          if (this.enemyOutArr.length > 0x0) {
            var _0x10a0c6 = this.enemyOutArr[0x0];
            var _0x24e044 = this._wallNode.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
            _0x24e044 = _0x24e044.add(cc.v2(_0x10a0c6.x, _0x10a0c6.y).mul(_0x19f9bd.GValue.MapScale));
            if (_0x19f9bd.GValue.WorldRect.contains(_0x24e044)) {
              if (_0x36b67c) {
                this.enemyOutArr.splice(0x0, 0x1);
              }
              return _0x10a0c6;
            }
          }
          return null;
        },
        'checkContinuumEnemy': function () {
          if (this.conEnemyArr.length > 0x0) {
            var _0x46bd46 = this.conEnemyArr[0x0];
            var _0x381545 = this._wallNode.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
            _0x381545 = _0x381545.add(cc.v2(_0x46bd46.x, _0x46bd46.y).mul(_0x19f9bd.GValue.MapScale));
            if (_0x19f9bd.GValue.WorldRect.contains(_0x381545)) {
              this.conEnemyArr.splice(0x0, 0x1);
              this.curConOut.push(_0x46bd46);
              return _0x46bd46;
            }
          }
          return null;
        },
        'checkMapPause': function () {
          if (this.pauseArr.length > 0x0) {
            var _0x5f0b24 = this.pauseArr[0x0];
            var _0xc86e53 = this._wallNode.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
            _0xc86e53 = _0xc86e53.add(cc.v2(_0x5f0b24.x, _0x5f0b24.y).mul(_0x19f9bd.GValue.MapScale));
            if (_0x148150.DYTools.isInSreen(_0xc86e53)) {
              var _0x4ccdeb = _0x148150.DYTools.subScreen(0x0, _0xc86e53);
              if (_0x148150.DYTools.isNumberDiffRange(_0x4ccdeb.x, 0x0, 0xf) && _0x148150.DYTools.isNumberDiffRange(_0x4ccdeb.y, 0x0, 0xf)) {
                this.pauseArr.splice(0x0, 0x1);
                if (!(0x0 != this.pauseArr.length || this.bossData)) {
                  this.mapOver = true;
                }
                return _0x5f0b24;
              }
            }
          }
          return null;
        },
        'checkAreaEnemy': function () {
          if (this.areaEnemyArr.length > 0x0) {
            var _0x1c9564 = this._addSys.enemyNode.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
            var _0x2af618 = this.areaEnemyArr[0x0];
            var _0x2edf22 = this.areaEnemyAwakeArr[0x0];
            for (var _0x5bcbe8 = 0x0; _0x5bcbe8 < _0x2edf22.length; _0x5bcbe8++) {
              var _0x2b53f7 = _0x2edf22[_0x5bcbe8];
              _0x2b53f7 = _0x1c9564.add(_0x2b53f7);
              if (_0x148150.DYTools.isInSreen(_0x2b53f7)) {
                var _0x1c9430 = _0x2af618[_0x5bcbe8];
                _0x1c9430.awake(_0x19f9bd.GValue.EntityWorld.player);
                _0x19f9bd.GValue.EntityWorld.addEnemy(_0x1c9430);
                _0x2af618.splice(_0x5bcbe8, 0x1);
                _0x2edf22.splice(_0x5bcbe8, 0x1);
                _0x5bcbe8--;
              }
            }
            if (0x0 == _0x2af618.length) {
              this.areaEnemyArr.splice(0x0, 0x1);
              this.areaEnemyAwakeArr.splice(0x0, 0x1);
            }
          }
        },
        'checkBoss': function () {
          if (this.bossData) {
            var _0x530f99 = this._wallNode.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
            _0x530f99 = _0x530f99.add(cc.v2(this.bossData.x, this.bossData.y).mul(_0x19f9bd.GValue.MapScale));
            if (_0x148150.DYTools.isInSreen(_0x530f99)) {
              var _0x551465 = _0x148150.DYTools.subScreen(0x0, _0x530f99);
              if (_0x148150.DYTools.isNumberDiffRange(_0x551465.x, 0x0, 0xf) && _0x148150.DYTools.isNumberDiffRange(_0x551465.y, 0x0, 0xf)) {
                this.mapOver = true;
                return this.bossData;
              }
            }
          }
          return null;
        },
        'setSpeed': function () {
          switch (this.curDirTag) {
            case 0x1:
            case 0x2:
              this.mapSpeed = this.mapSpeedV;
              break;
            case 0x3:
            case 0x4:
              this.mapSpeed = this.mapSpeedH;
              break;
            default:
              _0x148150.DYTools.error("地图方向错误", this.curDir);
              this.mapSpeed = this.mapSpeedV;
          }
        },
        'setMoveDir': function (_0x42b2d0) {
          if (undefined === _0x42b2d0) {
            _0x42b2d0 = false;
          }
          if (0x0 != this.wayVec.length) {
            var _0x91bec7 = cc.v2(0x0, 0x0);
            var _0x5ada5c = cc.v2(0x0, 0x0);
            if (_0x42b2d0) {
              _0x91bec7 = this.wayVec[0x0].mul(_0x19f9bd.GValue.MapScale);
              this.wayVec.splice(0x0, 0x1);
            } else {
              _0x91bec7 = this.curDestVec;
            }
            _0x5ada5c = this.wayVec[0x0];
            this.curDestVec = _0x5ada5c.mul(_0x19f9bd.GValue.MapScale);
            var _0x5b0725 = this.curDestVec.sub(_0x91bec7);
            this.curDir = _0x5b0725.neg().normalize();
            this.curDirSpeed = this.curDir.mul(this.mapSpeed);
            if (Math.abs(_0x5b0725.x) - 0.5 < 0x0) {
              if (_0x5b0725.y > 0x0) {
                this.curDirTag = 0x1;
              } else {
                this.curDirTag = 0x2;
              }
            } else if (Math.abs(_0x5b0725.y) - 0.5 < 0x0) {
              if (_0x5b0725.x > 0x0) {
                this.curDirTag = 0x4;
              } else {
                this.curDirTag = 0x3;
              }
            } else if (_0x5b0725.x > 0x0) {
              if (_0x5b0725.y > 0x0) {
                this.curDirTag = 0x8;
              } else {
                this.curDirTag = 0x7;
              }
            } else if (_0x5b0725.y > 0x0) {
              this.curDirTag = 0x5;
            } else {
              this.curDirTag = 0x6;
            }
            if (0x1 == this.wayVec.length) {
              var _0x8e5f85 = cc.Vec2.ZERO;
              var _0x527a9a = 0x0;
              switch (this.curDirTag) {
                case 0x1:
                  _0x8e5f85 = cc.v2(0x0, 0x14);
                  break;
                case 0x2:
                  _0x8e5f85 = cc.v2(0x0, -0x14);
                  _0x527a9a = 0xb4;
                  break;
                case 0x3:
                  _0x8e5f85 = cc.v2(-0x14, 0x0);
                  _0x527a9a = -0x5a;
                  break;
                case 0x4:
                  _0x8e5f85 = cc.v2(0x14, 0x0);
                  _0x527a9a = 0x5a;
              }
              this.skel_stone.node.angle = _0x527a9a;
              this.skel_stone.node.position = this.mapEndStone.position.add(_0x8e5f85);
              this.skel_stone.setAnimation(0x0, "light", true);
            }
          } else {
            this.mapOver = true;
            this.curDir = cc.Vec2.ZERO;
          }
        },
        'checkMoveDest': function (_0x32205f) {
          if (undefined === _0x32205f) {
            _0x32205f = false;
          }
          var _0x333434 = false;
          var _0xf9d40f = this.mapBottom.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
          _0xf9d40f = _0xf9d40f.add(this.curDestVec);
          var _0x57b74a = _0x148150.DYTools.subScreen(0x0, _0xf9d40f);
          switch (this.curDirTag) {
            case 0x1:
              if (_0x57b74a.y <= 0x0) {
                _0x333434 = true;
              }
              break;
            case 0x2:
              if (_0x57b74a.y >= 0x0) {
                _0x333434 = true;
              }
              break;
            case 0x3:
              if (_0x57b74a.x >= 0x0) {
                _0x333434 = true;
              }
              break;
            case 0x4:
              if (_0x57b74a.x <= 0x0) {
                _0x333434 = true;
              }
              break;
            case 0x5:
              if (_0x57b74a.y <= 0x0 && _0x57b74a.x >= 0x0) {
                _0x333434 = true;
              }
              break;
            case 0x6:
              if (_0x57b74a.y >= 0x0 && _0x57b74a.x >= 0x0) {
                _0x333434 = true;
              }
              break;
            case 0x7:
              if (_0x57b74a.y >= 0x0 && _0x57b74a.x <= 0x0) {
                _0x333434 = true;
              }
              break;
            case 0x8:
              if (_0x57b74a.y <= 0x0 && _0x57b74a.x <= 0x0) {
                _0x333434 = true;
              }
          }
          var _0x16545b = [];
          _0x16545b[0x0] = _0x333434;
          _0x16545b[0x1] = _0x57b74a;
          return _0x16545b;
        },
        'getMapSpeedDir': function () {
          return this.mapStop || this.mapOver ? cc.Vec2.ZERO : this.curDirSpeed;
        }
      });
      cc._RF.pop();
    }, {
      'CommonAudio': 'CommonAudio',
      'CommonConfig': "CommonConfig",
      'CommonFunc': "CommonFunc",
      'CommonValue': "CommonValue",
      'EntityBlock': 'EntityBlock',
      'Tools': "Tools"
    }],
    'NetBase': [function (_0x5d64fa, _0x664823, _0x315158) {
      'use strict';
  
      cc._RF.push(_0x664823, 'e6a58ou0+5J2YFd9Irl0yga', 'NetBase');
      var _0x186ff4 = _0x664823.exports;
      Object.defineProperty(_0x186ff4, '__esModule', {
        'value': true
      });
      var _0x5e01a7 = _0x5d64fa("CommonFunc");
      var _0x50fa78 = _0x5d64fa("CommonConfig");
      var _0x245507 = _0x5d64fa('NetDown');
      var _0x4e0a8e = _0x5d64fa("Tools");
      var _0x11bdc4 = _0x5d64fa("GameData");
      var _0x322f38 = function () {
        function _0x84b02e() {
          this.userName_login = '';
          this.list_request = [];
          this.is_request = false;
          this._start_game = false;
          this._resend = false;
        }
        _0x84b02e.prototype.sendData = function (_0x175d05) {
          _0x175d05.openId = _0x11bdc4.TData.userId;
          var _0x30a1a5 = JSON.stringify(_0x175d05);
          _0x30a1a5 = _0x5e01a7.GFunc.encode(_0x30a1a5);
          this.sendMsg(_0x30a1a5);
        };
        _0x84b02e.prototype.sendMsg = function (_0x44ab57) {
          var _0x1e935b = cc.loader.getXMLHttpRequest();
          _0x1e935b.open("POST", _0x50fa78.GConfig.Url_Login, true);
          _0x1e935b.timeout = 0x1388;
          _0x1e935b.ontimeout = function () {
            _0x4e0a8e.DYTools.error('send_data--timeout');
          }.bind(this);
          _0x1e935b.onreadystatechange = function () {
            var _0x15589e = _0x1e935b.readyState;
            var _0x7c9ddb = _0x1e935b.status;
            if (0x4 == _0x15589e) {
              if (0xc8 == _0x7c9ddb) {
                this.list_request.splice(0x0, 0x1);
                var _0x2d5185 = _0x1e935b.responseText;
                _0x2d5185 = _0x5e01a7.GFunc.decode(_0x2d5185);
                var _0x3d9e0d = JSON.parse(_0x2d5185);
                var _0x3cb864 = _0x3d9e0d.msgId;
                if (_0x3cb864 == _0x245507.Enum_Net_MsgId.Error_D) {
                  _0x245507.GNetDown.f_deal_error(_0x3d9e0d);
                } else {
                  _0x245507.GNetDown.f_deal_msg(_0x3cb864, _0x3d9e0d);
                }
              } else if (!this._resend) {
                this.list_request.splice(0x0, 0x1);
              }
              this.is_request = false;
            }
          }.bind(this);
          _0x1e935b.send(_0x44ab57);
        };
        _0x84b02e.instance = new _0x84b02e();
        return _0x84b02e;
      }();
      _0x186ff4.NetBase = _0x322f38;
      _0x186ff4.GNet = _0x322f38.instance;
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'CommonFunc': "CommonFunc",
      'GameData': 'GameData',
      'NetDown': 'NetDown',
      'Tools': 'Tools'
    }],
    'NetDown': [function (_0x37cbb7, _0x43aa99, _0x339f47) {
      'use strict';
  
      cc._RF.push(_0x43aa99, "3462bqx6xBFZochOiyuN9cS", "NetDown");
      var _0x9f0559 = _0x43aa99.exports;
      Object.defineProperty(_0x9f0559, '__esModule', {
        'value': true
      });
      var _0x3da208 = _0x37cbb7('CommonFunc');
      var _0x4654e4 = _0x37cbb7("NetUp");
      var _0x4aa0e6 = _0x37cbb7("GameData");
      _0x9f0559.Enum_Net_MsgId = cc.Enum({
        'Error_D': 0x3e8,
        'Login_U': 0x44c,
        'Login_D': 0x44d,
        'UserInfo_U': 0x44e,
        'UserInfo_D': 0x44f,
        'Form_U': 0x450,
        'Form_D': 0x451,
        'Rank_U': 0x4b6,
        'Rank_D': 0x4b7,
        'Score_U': 0x4b8,
        'Score_D': 0x4b9,
        'ADShare_U': 0x4ba,
        'ADShare_D': 0x4bb
      });
      var _0x1a7b4c = function () {
        function _0x41a762() {}
        _0x41a762.prototype.f_deal_msg = function (_0x4f6082, _0x52df65) {
          switch (_0x4f6082) {
            case _0x9f0559.Enum_Net_MsgId.Login_D:
              if (_0x52df65.hasOwnProperty("openId")) {
                _0x4aa0e6.TData.saveUserID(_0x52df65.openId);
              }
              if (_0x52df65.hasOwnProperty("isNew")) {
                _0x4aa0e6.TData.isNewPlayer = 0x1 == parseInt(_0x52df65.isNew);
              }
              _0x52df65.hasOwnProperty('now');
              if (_0x4654e4.GNetUp.loginCallback) {
                _0x4654e4.GNetUp.loginCallback();
                _0x4654e4.GNetUp.loginCallback = null;
              }
              break;
            case _0x9f0559.Enum_Net_MsgId.UserInfo_D:
            case _0x9f0559.Enum_Net_MsgId.Form_D:
            case _0x9f0559.Enum_Net_MsgId.Rank_D:
            case _0x9f0559.Enum_Net_MsgId.Score_D:
          }
        };
        _0x41a762.prototype.f_deal_error = function (_0x5c1209) {
          var _0x4ee8e3 = '';
          if (_0x5c1209.hasOwnProperty("requestId")) {
            parseInt(_0x5c1209.requestId);
          }
          if (_0x5c1209.hasOwnProperty('errorId')) {
            parseInt(_0x5c1209.errorId);
          }
          if (_0x5c1209.hasOwnProperty("errorMsg")) {
            _0x4ee8e3 = _0x5c1209.errorMsg;
          }
          if ('' != _0x4ee8e3) {
            _0x3da208.GFunc.showFloatTips(_0x4ee8e3);
          }
        };
        _0x41a762.instance = new _0x41a762();
        return _0x41a762;
      }();
      _0x9f0559.GNetDown = _0x1a7b4c.instance;
      cc._RF.pop();
    }, {
      'CommonFunc': "CommonFunc",
      'GameData': 'GameData',
      'NetUp': "NetUp"
    }],
    'NetUp': [function (_0x2c7f91, _0x477208, _0x5a5fe1) {
      'use strict';
  
      cc._RF.push(_0x477208, "4d4a8O1JWhA1oRVfKiCRHPy", "NetUp");
      var _0x5440ac = _0x477208.exports;
      _0x2c7f91("CommonSdk");
      _0x2c7f91('NetBase');
      _0x2c7f91('CommonConfig');
      _0x2c7f91("ADShareManager");
      _0x2c7f91("GameData");
      var _0x3aa109 = function () {
        function _0x27e6c9() {
          this.loginCallback = null;
          this.userInfoCallback = null;
          this.rankCall = null;
        }
        _0x27e6c9.prototype.checkLogin = function (_0x346d7a) {};
        _0x27e6c9.prototype.sendLogin = function (_0x1b9661, _0x5e093a) {
          if (undefined === _0x5e093a) {
            _0x5e093a = null;
          }
          this.loginCallback = _0x5e093a;
        };
        _0x27e6c9.prototype.sendForm = function (_0x58560e) {};
        _0x27e6c9.prototype.sendUserInfo = function (_0x4991ad, _0x18df93) {
          this.userInfoCallback = _0x18df93;
        };
        _0x27e6c9.prototype.sendRank = function (_0x27e239) {
          if (undefined === _0x27e239) {
            _0x27e239 = null;
          }
          this.rankCall = _0x27e239;
        };
        _0x27e6c9.prototype.sendAdShare = function (_0x2ac3e5) {};
        _0x27e6c9.instance = new _0x27e6c9();
        return _0x27e6c9;
      }();
      _0x5440ac.GNetUp = _0x3aa109.instance;
      cc._RF.pop();
    }, {
      'ADShareManager': 'ADShareManager',
      'CommonConfig': 'CommonConfig',
      'CommonSdk': "CommonSdk",
      'GameData': 'GameData',
      'NetBase': 'NetBase'
    }],
    'PanelAddProgram': [function (_0x99e766, _0x5a7977, _0x162eff) {
      'use strict';
  
      cc._RF.push(_0x5a7977, "0dac6S0gLpKUIreAWsR7x7r", "PanelAddProgram");
      var _0x578d1d = _0x99e766('GameData');
      var _0x257ed2 = _0x99e766("CommonFunc");
      var _0x5dcba5 = _0x99e766("CommonValue");
      var _0x305c68 = _0x99e766("PfNum");
      var _0x5f2857 = _0x99e766("CommonEnum");
      _0x99e766("CommonSdk");
      var _0x2cd20c = _0x99e766("CommonConfig");
      var _0x451aac = _0x99e766("Tools");
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'node_gray': cc.Node,
          'node_count_gold': cc.Node,
          'node_count_power': cc.Node,
          'btn_get': cc.Node,
          'btn_unfinish': cc.Node,
          'node_arrow': cc.Node,
          'btn_close': cc.Node,
          'atlas_gameui': cc.SpriteAtlas,
          'node_gold': cc.Node,
          'node_power': cc.Node
        },
        'onLoad': function () {
          this.reward_gold = 0x0;
          this.reward_power = 0x0;
          var _0x36451c = this;
          _0x257ed2.GFunc.adjustScreen(this.node);
          _0x257ed2.GFunc.set_click(this.node_gray, function () {}, this);
          _0x257ed2.GFunc.set_click(this.btn_get, function () {
            _0x36451c.click_get();
          }, this);
          _0x257ed2.GFunc.set_click(this.btn_unfinish, function () {
            _0x36451c.click_unfinish();
          }, this);
          _0x257ed2.GFunc.set_click(this.btn_close, function () {
            _0x36451c.close();
          }, this);
        },
        'init': function () {
          var _0x40e409 = this;
          var _0x53d55b = _0x2cd20c.GConfig.getGbData(_0x5f2857.Enum_Gb.addMyProgram);
          if (_0x53d55b) {
            var _0x4ecc08 = _0x53d55b.split('#');
            for (var _0x599eaa = 0x0; _0x599eaa < _0x4ecc08.length; _0x599eaa++) {
              var _0x44cd8c = _0x451aac.DYTools.stringToNumber(_0x4ecc08[_0x599eaa], '*');
              if (0x2 == _0x44cd8c.length) {
                var _0x57d5f8 = _0x44cd8c[0x0];
                var _0xa158f2 = _0x44cd8c[0x1];
                if (_0x57d5f8 == _0x5f2857.Enum_Reward.Gold) {
                  this.reward_gold = _0xa158f2;
                } else if (_0x57d5f8 == _0x5f2857.Enum_Reward.Power) {
                  this.reward_power = _0xa158f2;
                }
              }
            }
          }
          var _0x2d37b8 = function () {
            if (_0x578d1d.TData.get_addProgram_enter()) {
              _0x40e409.btn_get.active = true;
              _0x40e409.btn_unfinish.active = false;
              _0x40e409.node_arrow.active = false;
            } else {
              _0x40e409.btn_get.active = false;
              _0x40e409.btn_unfinish.active = true;
              _0x40e409.node_arrow.active = true;
            }
          };
          _0x2d37b8();
          this.schedule(_0x2d37b8, 0x1, cc.macro.REPEAT_FOREVER, 0x1);
          var _0x5dd491 = cc.instantiate(_0x5dcba5.GValue.pf_num);
          this.node_count_gold.addChild(_0x5dd491);
          var _0x585628 = _0x5dd491.getComponent(_0x305c68['default']);
          _0x585628.setParam(_0x5f2857.Enum_Num.Blood, cc.v2(0.5, 0.5), 0x2, this.atlas_gameui);
          _0x585628.setString(_0x257ed2.GFunc.getNumK(this.reward_gold));
          _0x5dd491.scale = 0.5;
          var _0x5c9af1 = cc.instantiate(_0x5dcba5.GValue.pf_num);
          this.node_count_power.addChild(_0x5c9af1);
          var _0x58c028 = _0x5c9af1.getComponent(_0x305c68['default']);
          _0x58c028.setParam(_0x5f2857.Enum_Num.Blood, cc.v2(0.5, 0.5), 0x2, this.atlas_gameui);
          _0x58c028.setString(_0x257ed2.GFunc.getNumK(this.reward_power));
          _0x5c9af1.scale = 0.5;
          if (this.reward_gold <= 0x0) {
            this.node_gold.active = false;
            this.node_power.x = 0x0;
          }
          if (this.reward_power <= 0x0) {
            this.node_power.active = false;
            this.node_gold.x = 0x0;
          }
        },
        'click_get': function () {
          if (_0x578d1d.TData.get_addProgram_hasGet()) {
            _0x257ed2.GFunc.showFloatTips("不能重复领取奖励");
          } else {
            _0x578d1d.TData.set_addProgram_hasGet(0x1);
            var _0x32cf3a = _0x578d1d.TData.getGold() + this.reward_gold;
            var _0x41619c = _0x578d1d.TData.getPower() + this.reward_power;
            _0x578d1d.TData.setGold(_0x32cf3a);
            _0x578d1d.TData.setPower(_0x41619c);
            _0x257ed2.GFunc.showFloatTips("领取成功");
            this.close();
            if (_0x5dcba5.GValue.HomeUI) {
              _0x5dcba5.GValue.HomeUI.refresh_addprogram();
              _0x5dcba5.GValue.HomeUI.refreshGold();
              _0x5dcba5.GValue.HomeUI.refreshPower();
            }
          }
        },
        'click_unfinish': function () {
          _0x257ed2.GFunc.showFloatTips("从\"我的小程序\"进入后领取");
        },
        'close': function () {
          this.node.destroy();
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'CommonEnum': "CommonEnum",
      'CommonFunc': "CommonFunc",
      'CommonSdk': 'CommonSdk',
      'CommonValue': 'CommonValue',
      'GameData': "GameData",
      'PfNum': 'PfNum',
      'Tools': 'Tools'
    }],
    'PanelBase': [function (_0x596343, _0x1dac59, _0x17ad72) {
      'use strict';
  
      cc._RF.push(_0x1dac59, 'ab2030GaRdLKq+w2knx8MPu', "PanelBase");
      cc.Class({
        'extends': cc.Component,
        'ctor': function () {
          this._btnAble = true;
          this._btnTime = 0.3;
        },
        'start': function () {},
        'btnClickAble': function () {
          return !!this._btnAble && (this.scheduleOnce(function () {
            this._btnAble = true;
          }.bind(this), this._btnTime), true);
        },
        'onEnter': function () {},
        'onExit': function () {
          this.node.removeFromParent();
        }
      });
      cc._RF.pop();
    }, {}],
    "PanelCheat copy": [function (_0x4efa4c, _0x1263c4, _0x338c08) {
      'use strict';
  
      cc._RF.push(_0x1263c4, '0606dUGgatGbqUgSExpBvXp', "PanelCheat copy");
      _0x4efa4c("Tools");
      _0x4efa4c("CommonConfig");
      _0x4efa4c("CommonValue");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.load_force = true;
          this.list_res_pf = [];
          this.list_res_atlas = [];
          this.list_res_image = [];
          this.list_res_spine = [];
          this.list_res_webtexture = [];
          this.list_res_json = [];
          this.len_pf = 0x0;
          this.len_atlas = 0x0;
          this.len_image = 0x0;
          this.len_spine = 0x0;
          this.len_webtexture = 0x0;
          this.len_json = 0x0;
          this.list_release_res_pf = [];
          this.list_release_res_atlas = [];
          this.list_release_res_image = [];
          this.list_release_res_spine = [];
          this.list_release_res_webtexture = [];
          this.list_release_res_json = [];
          this.callback_loadres_success = null;
          this.callback_progress_change = null;
          this.reload_count_cur = 0x0;
          this.reload_count_total = 0x5;
          this.load_number_cur = 0x0;
          this.load_number_total = 0x0;
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'CommonValue': 'CommonValue',
      'Tools': "Tools"
    }],
    'PanelCheat': [function (_0xf523f3, _0x590769, _0x326c1d) {
      'use strict';
  
      cc._RF.push(_0x590769, "deb42zu4BtLxr0/c4qGBmk1", "PanelCheat");
      var _0x4f1a00 = _0xf523f3("GameData");
      var _0x502e08 = _0xf523f3('AndroidManager');
      var _0x4baff7 = _0xf523f3("CommonValue");
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'energyInput': cc.EditBox,
          'goldInput': cc.EditBox,
          'levelInput': cc.EditBox,
          'is_checkmark': cc.Toggle,
          'not_checkmark': cc.Toggle
        },
        'onLoad': function () {
          this.energyInput.string = String(_0x4f1a00.TData.getPower());
          this.goldInput.string = String(_0x4f1a00.TData.getGold());
          this.levelInput.string = String(_0x4f1a00.TData.getStage());
          if (0x1 == _0x502e08.AndroidMgr.getAfStatus()) {
            this.is_checkmark.isChecked = true;
          } else {
            this.not_checkmark.isChecked = true;
          }
        },
        'start': function () {},
        'onBtnCancelClicked': function () {
          this.onBtnClicked(0x0);
        },
        'onBtnSureClicked': function () {
          this.onBtnClicked(0x1);
        },
        'onBtnIsBuyFb': function () {
          this.onBtnClicked(0x2);
        },
        'onBtnNotBuyFb': function () {
          this.onBtnClicked(0x3);
        },
        'onBtnClicked': function (_0x435ad5) {
          switch (_0x435ad5) {
            case 0x0:
              this.removeSelf();
              break;
            case 0x1:
              this.change();
              if (_0x4baff7.GValue.DDSDK) {
                _0x4baff7.GValue.DDSDK.parent = null;
              }
              _0x4baff7.GValue.HomeUI = null;
              cc.director.loadScene('Game');
              break;
            case 0x2:
              _0x502e08.AndroidMgr.setAfStatus(0x1);
              break;
            case 0x3:
              _0x502e08.AndroidMgr.setAfStatus(0x0);
          }
        },
        'removeSelf': function () {
          this.node.destroy();
        },
        'change': function () {
          var _0x26cdca = Number(this.energyInput.string);
          var _0x598926 = Number(this.goldInput.string);
          var _0x29bd28 = Number(this.levelInput.string);
          _0x4f1a00.TData.setPower(_0x26cdca);
          _0x4f1a00.TData.setGold(_0x598926);
          _0x4f1a00.TData.setStage(_0x29bd28);
          this.node.destroy();
        }
      });
      cc._RF.pop();
    }, {
      'AndroidManager': 'AndroidManager',
      'CommonValue': "CommonValue",
      'GameData': "GameData"
    }],
    'PanelGold': [function (_0xbf7f7c, _0x30605d, _0x208530) {
      'use strict';
  
      cc._RF.push(_0x30605d, "3ad8eBlxwBPorhi25IBoyS4", 'PanelGold');
      var _0x153d8e = _0xbf7f7c("CommonFunc");
      var _0x2a008b = _0xbf7f7c('CommonValue');
      var _0x3f2b56 = _0xbf7f7c('GameData');
      var _0x487157 = _0xbf7f7c("ADShareManager");
      var _0x2a2d6d = _0xbf7f7c('CommonEnum');
      var _0x38aae4 = _0xbf7f7c("PfNum");
      var _0x1cf301 = _0xbf7f7c("CommonSdk");
      var _0x36849d = _0xbf7f7c("AndroidManager");
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'node_gray': cc.Node,
          'node_ui': cc.Node,
          'node_num': cc.Node,
          'btn_get': cc.Node,
          'sp_get': cc.Sprite,
          'font_collect': cc.Sprite,
          'skel_btn_shine_get': sp.Skeleton,
          'btn_close': cc.Node,
          'btn_no': cc.Node,
          'atlas_offline': cc.SpriteAtlas,
          'atlas_gameui': cc.SpriteAtlas
        },
        'onLoad': function () {
          this.adShare = 0x1;
          this.count = 0x0;
          this.com_num = null;
          this.successCall = null;
          var _0x1f549c = this;
          _0x153d8e.GFunc.set_click(this.node_gray, function () {}, this);
          _0x153d8e.GFunc.set_click(this.btn_get, function () {
            _0x1f549c.get_normal();
          }, this);
          _0x153d8e.GFunc.set_click(this.btn_close, function () {
            _0x1f549c.close();
          }, this);
          _0x153d8e.GFunc.set_click(this.btn_no, function () {
            _0x1f549c.close();
          }, this);
          _0x153d8e.GFunc.set_action_btn(this.btn_get, this.skel_btn_shine_get);
        },
        'init': function (_0x7711b0, _0x316034, _0x5e5167) {
          if (undefined === _0x5e5167) {
            _0x5e5167 = null;
          }
          this.adShare = _0x316034;
          this.count = _0x7711b0;
          this.successCall = _0x5e5167;
          this.initUI();
          if (_0x2a2d6d.Enum_AdShareType.Ad == _0x316034) {
            _0x1cf301.GSDK.sendVideoShow(_0x2a2d6d.Enum_ADShare.AS_Gold);
          } else if (_0x2a2d6d.Enum_AdShareType.Share == _0x316034) {
            _0x487157.ADShareMgr.clearShareProbCount(_0x2a2d6d.Enum_ADShare.AS_Gold);
          }
        },
        'initUI': function () {
          var _0x24b724 = cc.instantiate(_0x2a008b.GValue.pf_num);
          this.node_num.addChild(_0x24b724);
          this.com_num = _0x24b724.getComponent(_0x38aae4);
          this.com_num.setParam(_0x2a2d6d.Enum_Num.Blood, cc.v2(0.5, 0.5), 0x2, this.atlas_gameui);
          this.com_num.setString(_0x153d8e.GFunc.getNumK(this.count));
          if (0x1 == _0x36849d.AndroidMgr.getAfStatus()) {
            this.sp_get.node.active = false;
            this.font_collect.node.x = 0x0;
          } else if (this.adShare == _0x2a2d6d.Enum_AdShareType.Share) {
            _0x153d8e.GFunc.changeAtlasSprite(this.atlas_offline, this.sp_get, 'icon_share');
          }
        },
        'get_normal': function () {
          var _0x44b5dd = this;
          var _0x508313 = function () {
            _0x44b5dd.close();
            var _0x5a4f64 = _0x3f2b56.TData.getGold();
            _0x3f2b56.TData.setGold(_0x5a4f64 + _0x44b5dd.count);
            _0x2a008b.GValue.HomeUI.playGoldEffect(_0x44b5dd.count, null);
            _0x2a008b.GValue.HomeUI.refreshGold();
            _0x2a008b.GValue.HomeUI.refresh_sys_lvuptip(true);
            _0x3f2b56.TData.setHasGiftGold(false);
            _0x2a008b.GValue.HomeUI.refresh_gift_gold();
            if (_0x44b5dd.successCall) {
              _0x44b5dd.successCall();
            }
          };
          _0x487157.ADShareMgr.adShare(_0x2a2d6d.Enum_ADShare.AS_Gold, _0x508313, _0x508313);
        },
        'close': function () {
          this.node.destroy();
        }
      });
      cc._RF.pop();
    }, {
      'ADShareManager': "ADShareManager",
      'AndroidManager': 'AndroidManager',
      'CommonEnum': 'CommonEnum',
      'CommonFunc': "CommonFunc",
      'CommonSdk': "CommonSdk",
      'CommonValue': "CommonValue",
      'GameData': "GameData",
      'PfNum': "PfNum"
    }],
    'PanelLevelGuide': [function (_0x4f3057, _0x27f5c2, _0x21f938) {
      'use strict';
  
      cc._RF.push(_0x27f5c2, '7dbd4/wFgpDzYn899QSdSii', "PanelLevelGuide");
      var _0x5384fd = _0x4f3057("CommonFunc");
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'node_gray': cc.Node,
          'node_ui': cc.Node,
          'node_close': cc.Node,
          'skel_levelguide': sp.Skeleton
        },
        'onLoad': function () {
          this.canClose = false;
          var _0x467cd5 = this;
          _0x5384fd.GFunc.set_click(this.node_gray, function () {}, this);
          _0x5384fd.GFunc.set_click(this.node_close, function () {
            _0x467cd5.close();
          }, this);
        },
        'init': function (_0x10075e) {
          this.callback_close = _0x10075e;
          this.play_action();
        },
        'play_action': function () {
          var _0xde765e = this;
          this.skel_levelguide.setAnimation(0x0, "play", true);
          this.skel_levelguide.setCompleteListener(function (_0x4b19e4, _0x554ec2) {
            if ("play" == (_0x4b19e4.animation ? _0x4b19e4.animation.name : '') && !_0xde765e.canClose) {
              _0xde765e.canClose = true;
              _0xde765e.node_close.active = true;
              _0xde765e.node_close.opacity = 0x0;
              var _0x1f14bc = cc.fadeIn(0x1);
              _0xde765e.node_close.runAction(_0x1f14bc);
            }
          });
        },
        'close': function () {
          if (this.canClose) {
            if (this.callback_close) {
              this.callback_close();
              this.callback_close = null;
            }
            this.node.destroy();
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonFunc': "CommonFunc"
    }],
    'PanelLoading': [function (_0x231c6d, _0xb173ae, _0x4a6ec8) {
      'use strict';
  
      cc._RF.push(_0xb173ae, "9c0b5yXgrdFHKPViwX+prJj", 'PanelLoading');
      var _0x1dad96 = _0x231c6d('PanelBase');
      var _0x27b525 = _0x231c6d("AndroidManager");
      cc.Class({
        'extends': _0x1dad96,
        'properties': {},
        'statics': {
          'prefabPath': "prefab/Panel/Modal/PanelLoading"
        },
        'start': function () {
          this.scheduleOnce(function () {
            _0x27b525.AndroidMgr.hideAdLoading();
          }, 0xf);
        }
      });
      cc._RF.pop();
    }, {
      'AndroidManager': "AndroidManager",
      'PanelBase': "PanelBase"
    }],
    'PanelModal': [function (_0x470c2e, _0x82fa06, _0x337bcf) {
      'use strict';
  
      cc._RF.push(_0x82fa06, '2d5d6d1qXdM3JOOPKkfTgqL', 'PanelModal');
      var _0x3300c0 = _0x470c2e('PanelBase');
      cc.Class({
        'extends': _0x3300c0,
        'properties': {
          'l_title': cc.Label,
          'l_content': cc.Label,
          'n_btn_cancle': cc.Node,
          'n_btn_sure': cc.Node
        },
        'ctor': function () {
          this.l_title = null;
          this.l_content = null;
          this.n_btn_cancle = null;
          this.n_btn_sure = null;
          this._sureCall = null;
          this._cancelCall = null;
          this._titleStr = '';
        },
        'start': function () {},
        'onBtnCancelClicked': function () {
          this.onBtnClicked(0x0);
        },
        'onBtnSureClicked': function () {
          this.onBtnClicked(0x1);
        },
        'onBtnClicked': function (_0x579ec3) {
          if (this.btnClickAble()) {
            switch (_0x579ec3) {
              case 0x0:
                if (this._cancelCall) {
                  this._cancelCall();
                }
                this.removeSelf();
                break;
              case 0x1:
                if (this._sureCall) {
                  this._sureCall();
                }
                if ('0' != this._titleStr) {
                  this.removeSelf();
                }
            }
          }
        },
        'removeSelf': function () {
          this.onExit();
        },
        'create': function (_0x1ea211, _0x1f136d, _0x225898, _0x2e3f2e) {
          this._sureCall = _0x225898;
          this._cancelCall = _0x2e3f2e;
          this._titleStr = _0x1ea211;
          this.l_content.string = _0x1f136d;
          if ('1' == _0x1ea211) {
            this.n_btn_cancle.active = false;
            this.n_btn_sure.x = 0x0;
          } else if ('2' == _0x1ea211) {
            this.n_btn_cancle.active = false;
            this.n_btn_sure.x = 0x0;
          } else {
            this.l_title.node.active = '' != _0x1ea211;
            this.l_title.string = _0x1ea211;
          }
        }
      });
      cc._RF.pop();
    }, {
      'PanelBase': "PanelBase"
    }],
    'PanelNew': [function (_0x28eaf7, _0x1df6ab, _0x9da222) {
      'use strict';
  
      cc._RF.push(_0x1df6ab, "21bd0k1MAlEeYrOZ07uKOO/", "PanelNew");
      var _0x5c7b91 = _0x28eaf7('PanelBase');
      var _0xbc2d7d = _0x28eaf7("CommonConfig");
      var _0x493d2b = _0x28eaf7("CommonFunc");
      var _0x366fa4 = _0x28eaf7('CommonValue');
      var _0xf8c71 = _0x28eaf7("GameData");
      var _0x1cef49 = _0x28eaf7("CommonAudio");
      var _0x306fea = _0x28eaf7("Types");
      cc.Class({
        'extends': _0x5c7b91,
        'properties': {
          'uiNode': cc.Node,
          'btnSureNode': cc.Node,
          'rewardNode': cc.Node,
          'lightNode': cc.Node,
          'fontNode': cc.Node,
          'rewradSpr': cc.Sprite,
          'playerSpr': cc.Sprite,
          'weaponNode': cc.Node,
          'shieldNode': cc.Node,
          'atlas_ui': cc.SpriteAtlas
        },
        'statics': {
          'prefabPath': "prefab/ui/PanelNew"
        },
        'onLoad': function () {
          this._dwId = 0x0;
          this._startPos = cc.Vec2.ZERO;
          this._callBack = null;
        },
        'start': function () {
          _0x493d2b.GFunc.adjustScreen(this.uiNode);
          this.playEnterAction();
          this.weaponNode.runAction(cc.repeatForever(cc.rotateBy(0x1, -_0xf8c71.TData.HRotateSpeedIn)));
        },
        'onBtnSureClicked': function () {
          this.shieldNode.active = true;
          var _0x123ec3 = this;
          var _0x1a6012 = cc.scaleTo(0x3 * _0xbc2d7d.GConfig.actionFrameTime, 0.45, 0.9);
          var _0x2168f2 = cc.callFunc(function () {
            if (_0x123ec3._callBack) {
              _0x123ec3._callBack();
            }
            _0x123ec3.onExit();
          });
          this.lightNode.runAction(cc.sequence(_0x1a6012, _0x2168f2));
        },
        'create': function (_0x3d0056, _0x217a78, _0xeb302a) {
          this._dwId = _0x3d0056;
          this._startPos = _0x217a78;
          this._callBack = _0xeb302a;
          this.initReward();
          this.initAction();
        },
        'initReward': function () {
          this.rewradSpr.spriteFrame = this.atlas_ui.getSpriteFrame("dwi" + this._dwId);
          switch (this._dwId) {
            case _0x306fea.DWType.Knife:
            case _0x306fea.DWType.Fire:
            case _0x306fea.DWType.Ice:
              this.playerSpr.spriteFrame = _0x366fa4.GValue.Atlas_Game.getSpriteFrame('h' + this._dwId);
              for (var _0xb3e04d = 0x0; _0xb3e04d < this.weaponNode.childrenCount; _0xb3e04d++) {
                this.weaponNode.children[_0xb3e04d].getComponent(cc.Sprite).spriteFrame = _0x366fa4.GValue.Atlas_Game.getSpriteFrame('dw' + this._dwId);
              }
              break;
            case _0x306fea.DWType.Laser:
              this.playerSpr.spriteFrame = _0x366fa4.GValue.Atlas_Game.getSpriteFrame('h' + this._dwId);
              this.weaponNode.removeAllChildren();
              var _0x2ed588 = new cc.Node();
              this.weaponNode.addChild(_0x2ed588);
              _0x2ed588.addComponent(cc.Sprite).spriteFrame = _0x366fa4.GValue.Atlas_Game.getSpriteFrame("dw2_0");
              for (_0xb3e04d = 0x0; _0xb3e04d < 0x6; _0xb3e04d++) {
                (_0x2ed588 = new cc.Node()).anchorX = 0x1;
                _0x2ed588.angle = 0x3c * _0xb3e04d;
                this.weaponNode.addChild(_0x2ed588);
                _0x2ed588.addComponent(cc.Sprite).spriteFrame = _0x366fa4.GValue.Atlas_Game.getSpriteFrame('dw2');
              }
          }
        },
        'initAction': function () {
          this.lightNode.active = false;
          this.btnSureNode.active = false;
          this.fontNode.opacity = 0x0;
        },
        'playEnterAction': function () {
          _0x1cef49.GAudio.playSound(_0x1cef49.Enum_Audio.newDW);
          var _0x5a3276 = this;
          var _0x198022 = _0xbc2d7d.GConfig.actionFrameTime;
          var _0x12774d = this.rewardNode.scale;
          var _0x5b3169 = this.rewardNode.position;
          var _0x29e067 = this.rewardNode.parent.convertToNodeSpaceAR(this._startPos);
          this.rewardNode.scale = 0.58;
          this.rewardNode.position = _0x29e067;
          var _0x40e133 = cc.moveTo(0x3 * _0x198022, _0x29e067.add(cc.v2(0x2, 0x49)));
          var _0x414d51 = cc.moveTo(0x3 * _0x198022, _0x29e067.add(cc.v2(0x4, 0xf0)));
          var _0x45e2ed = cc.scaleTo(0x3 * _0x198022, _0x12774d);
          var _0x38117d = cc.spawn(_0x414d51, _0x45e2ed);
          var _0x52a8da = cc.moveTo(0x5 * _0x198022, _0x5b3169.add(cc.v2(0x0, -0x18)));
          var _0x53096f = cc.moveTo(0x5 * _0x198022, _0x5b3169.add(cc.v2(0x0, 0x5)));
          var _0x3d87d = cc.moveTo(0x5 * _0x198022, _0x5b3169);
          var _0x390d44 = cc.scaleTo(0x2 * _0x198022, _0x12774d);
          var _0x3c7d67 = cc.sequence(_0x40e133, _0x38117d, _0x52a8da, _0x53096f, _0x3d87d, _0x390d44);
          this.rewardNode.runAction(_0x3c7d67);
          this.scheduleOnce(function () {
            _0x5a3276.lightNode.active = true;
            _0x5a3276.lightNode.scaleX = 0.2;
            _0x5a3276.lightNode.scaleY = 0.19;
            var _0x1ebd1a = cc.scaleTo(_0x198022, 0.24, 0.7);
            var _0x183fa0 = cc.scaleTo(0x2 * _0x198022, 1.03, 1.08);
            var _0x1a21b9 = cc.scaleTo(0x4 * _0x198022, 0x1, 0x1);
            var _0x552f11 = cc.sequence(_0x1ebd1a, _0x183fa0, _0x1a21b9);
            _0x5a3276.lightNode.runAction(_0x552f11);
          }, 0x1a * _0x198022);
          this.scheduleOnce(function () {
            _0x5a3276.fontNode.runAction(cc.fadeIn(0x5 * _0x198022));
          }, 0x21 * _0x198022);
          this.scheduleOnce(function () {
            _0x5a3276.btnSureNode.active = true;
            _0x5a3276.btnSureNode.scale = 0.7;
            var _0x4f7edf = cc.scaleTo(0x3 * _0x198022, 1.1);
            var _0x52c42b = cc.scaleTo(0x3 * _0x198022, 0.95);
            var _0x30ff3c = cc.scaleTo(0x3 * _0x198022, 0x1);
            var _0x28584d = cc.sequence(_0x4f7edf, _0x52c42b, _0x30ff3c);
            _0x5a3276.btnSureNode.runAction(_0x28584d);
          }, 0x27 * _0x198022);
        }
      });
      cc._RF.pop();
    }, {
      'CommonAudio': "CommonAudio",
      'CommonConfig': 'CommonConfig',
      'CommonFunc': "CommonFunc",
      'CommonValue': "CommonValue",
      'GameData': "GameData",
      'PanelBase': "PanelBase",
      'Types': "Types"
    }],
    'PanelOffline': [function (_0x31853d, _0x166104, _0x2c3c30) {
      'use strict';
  
      cc._RF.push(_0x166104, "37ca7ZWhddNk6jaeJLp6j2K", "PanelOffline");
      var _0x20a016 = _0x31853d('CommonFunc');
      var _0x13a473 = _0x31853d("CommonValue");
      var _0x1f105d = _0x31853d("GameData");
      var _0x337ca8 = _0x31853d("ADShareManager");
      var _0x1357d3 = _0x31853d("CommonEnum");
      var _0x2ceda8 = _0x31853d("PfNum");
      var _0x2a85f2 = _0x31853d("CommonSdk");
      var _0x51e0dd = _0x31853d('AndroidManager');
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'node_gray': cc.Node,
          'node_ui': cc.Node,
          'node_num': cc.Node,
          'btn_normal': cc.Node,
          'btn_2': cc.Node,
          'sp_2': cc.Sprite,
          'skel_btn_shine_2': sp.Skeleton,
          'btn_3': cc.Node,
          'sp_3': cc.Sprite,
          'skel_btn_shine_3': sp.Skeleton,
          'btn_close': cc.Node,
          'btn_no': cc.Node,
          'atlas_offline': cc.SpriteAtlas,
          'atlas_gameui': cc.SpriteAtlas
        },
        'onLoad': function () {
          this.factor = 0x2;
          this.adShare = 0x1;
          this.count = 0x0;
          this.com_num = null;
          var _0x4691c7 = this;
          _0x20a016.GFunc.set_click(this.node_gray, function () {}, this);
          _0x20a016.GFunc.set_click(this.btn_normal, function () {
            _0x4691c7.get_normal();
          }, this);
          _0x20a016.GFunc.set_click(this.btn_2, function () {
            _0x4691c7.get_factor();
          }, this);
          _0x20a016.GFunc.set_click(this.btn_3, function () {
            _0x4691c7.get_factor();
          }, this);
          _0x20a016.GFunc.set_click(this.btn_close, function () {
            _0x4691c7.close();
          }, this);
          _0x20a016.GFunc.set_click(this.btn_no, function () {
            _0x4691c7.close();
          }, this);
          this.btn_normal.active = false;
          _0x20a016.GFunc.set_action_btn(this.btn_2, this.skel_btn_shine_2);
          _0x20a016.GFunc.set_action_btn(this.btn_3, this.skel_btn_shine_3);
        },
        'init': function (_0x39af06, _0xf27c7, _0x1a767f) {
          var _0x4edb3d = this;
          this.factor = _0xf27c7;
          this.adShare = _0x1a767f;
          this.count = _0x39af06;
          this.initUI();
          if (_0x1357d3.Enum_AdShareType.Ad == _0x1a767f) {
            _0x2a85f2.GSDK.sendVideoShow(_0x1357d3.Enum_ADShare.AS_Offline);
          } else if (_0x1357d3.Enum_AdShareType.Share == _0x1a767f) {
            _0x337ca8.ADShareMgr.clearShareProbCount(_0x1357d3.Enum_ADShare.AS_Offline);
          }
          this.scheduleOnce(function () {
            _0x4edb3d.btn_normal.active = true;
            _0x4edb3d.btn_normal.opacity = 0x0;
            var _0x1e6353 = cc.fadeTo(0x0, 0x0);
            var _0x476a53 = cc.fadeTo(0.5, 0xff);
            var _0x4c5d3b = cc.sequence(_0x1e6353, _0x476a53);
            _0x4edb3d.btn_normal.runAction(_0x4c5d3b);
          }, 0x2);
        },
        'initUI': function () {
          var _0x4ce2df = this;
          var _0x4ca653 = cc.instantiate(_0x13a473.GValue.pf_num);
          this.node_num.addChild(_0x4ca653);
          this.com_num = _0x4ca653.getComponent(_0x2ceda8);
          this.com_num.setParam(_0x1357d3.Enum_Num.Blood, cc.v2(0.5, 0.5), 0x2, this.atlas_gameui);
          this.com_num.setString(_0x20a016.GFunc.getNumK(this.count));
          if (0x2 == this.factor) {
            this.btn_2.active = true;
            this.btn_3.active = false;
            if (0x1 == _0x51e0dd.AndroidMgr.getAfStatus()) {
              this.sp_2.node.active = false;
            } else if (this.adShare == _0x1357d3.Enum_AdShareType.Share) {
              _0x20a016.GFunc.changeAtlasSprite(this.atlas_offline, this.sp_2, 'icon_share');
            }
          } else {
            this.btn_2.active = false;
            this.btn_3.active = true;
            if (0x1 == _0x51e0dd.AndroidMgr.getAfStatus()) {
              this.sp_3.node.active = false;
            } else if (this.adShare == _0x1357d3.Enum_AdShareType.Share) {
              _0x20a016.GFunc.changeAtlasSprite(this.atlas_offline, this.sp_3, "icon_share");
            }
          }
          this.schedule(function () {
            var _0x1a8d00 = _0x1f105d.TData.getOfflineGold();
            _0x4ce2df.refresh_count(_0x1a8d00);
          }, 0x1, cc.macro.REPEAT_FOREVER);
        },
        'refresh_count': function (_0x15539c) {
          this.count = _0x15539c;
          if (this.com_num) {
            this.com_num.setString(_0x20a016.GFunc.getNumK(this.count));
          }
        },
        'get_normal': function () {
          var _0x1d6208 = _0x1f105d.TData.getOfflineGold();
          _0x13a473.GValue.HomeUI.getOfflineGoldValue(_0x1d6208);
          this.close();
        },
        'get_factor': function () {
          var _0xcbacb5 = this;
          var _0x1129c9 = function () {
            _0xcbacb5.close();
            var _0x56cda3 = _0x1f105d.TData.getOfflineGold();
            _0x13a473.GValue.HomeUI.getOfflineGoldValue(_0x56cda3 * _0xcbacb5.factor);
          };
          _0x337ca8.ADShareMgr.adShare(_0x1357d3.Enum_ADShare.AS_Offline, _0x1129c9, _0x1129c9);
        },
        'close': function () {
          this.node.destroy();
        }
      });
      cc._RF.pop();
    }, {
      'ADShareManager': 'ADShareManager',
      'AndroidManager': 'AndroidManager',
      'CommonEnum': "CommonEnum",
      'CommonFunc': "CommonFunc",
      'CommonSdk': "CommonSdk",
      'CommonValue': 'CommonValue',
      'GameData': "GameData",
      'PfNum': "PfNum"
    }],
    'PanelOver': [function (_0x3ab519, _0x5d94a5, _0x5850e6) {
      'use strict';
  
      cc._RF.push(_0x5d94a5, "4da6bFgfDZB0bvc4zbsgY1+", "PanelOver");
      var _0x2e0b6f = _0x3ab519("PanelBase");
      var _0x31b9e8 = _0x3ab519("Tools");
      var _0xf7e9da = _0x3ab519("CommonValue");
      var _0x5d2d12 = _0x3ab519("CommonEnum");
      var _0x78ddf7 = _0x3ab519("CommonConfig");
      var _0x517d4d = _0x3ab519("CommonFunc");
      var _0x55a7b4 = _0x3ab519("GameData");
      var _0x2c9bff = _0x3ab519('CEntityKnife');
      var _0x21aa5b = _0x3ab519("CommonAudio");
      var _0x185226 = _0x3ab519("CommonSdk");
      var _0x5dc2de = _0x3ab519("ADShareManager");
      var _0x2547d1 = _0x3ab519("AndroidManager");
      cc.Class({
        'extends': _0x2e0b6f,
        'properties': {
          'layerNode': cc.Node,
          'uiNode': cc.Node,
          'levelNode': cc.Node,
          'levelNum': cc.Node,
          'passNode': cc.Node,
          'lvList': [cc.Node],
          'lvIconList': [cc.Sprite],
          'successNode': cc.Node,
          'sucFontNode': cc.Node,
          'sucRewardNode': cc.Node,
          'sucPowerNum': cc.Node,
          'faildNode': cc.Node,
          'rewardNode': cc.Node,
          'rewardBgNode': cc.Node,
          'goldFont': cc.Node,
          'goldIcon': cc.Node,
          'goldNum': cc.Node,
          'addNode': cc.Node,
          'addNum': cc.Node,
          'btnGetNode': cc.Node,
          'btnGet3Node': cc.Node,
          'times3Node': cc.Node,
          'type3Spr': cc.Sprite,
          'skel3Light': sp.Skeleton,
          'shieldNode': cc.Node,
          'pf_num': cc.Prefab,
          'atlas_ui': cc.SpriteAtlas
        },
        'statics': {
          'prefabPath': "prefab/ui/PanelOver"
        },
        'onLoad': function () {
          this.goldCount = 0x0;
          this.addGoldCount = 0x0;
          this.initGold = false;
          this.addGold = false;
          this.goldDelta = 0x0;
          this.curGoldCount = 0x0;
          this.rewardPower = 0x0;
          this.totalGold = 0x0;
          this._goldNum = null;
          this.layerNode.zIndex = -0x1;
          this.uiNode.zIndex = 0xa;
          this.shieldNode.zIndex = 0x64;
          this.isClickedOver = false;
        },
        'start': function () {
          _0x517d4d.GFunc.adjustScreen(this.uiNode);
          this.initAction();
          this.doEnterAction();
        },
        'update': function (_0x1722ef) {
          if (this.initGold) {
            _0x1448aa = (_0x1448aa = Math.floor(this.goldDelta * _0x1722ef)) < 0x1 ? 0x1 : _0x1448aa;
            this.curGoldCount += _0x1448aa;
            if (this.curGoldCount > this.goldCount) {
              this.curGoldCount = this.goldCount;
              this.initGold = false;
            }
            this._goldNum.setString(_0x31b9e8.DYTools.numberToString(this.curGoldCount));
            this.goldNum.width = this._goldNum.size.width * this._goldNum.node.scale;
          } else {
            if (this.addGold) {
              var _0x1448aa;
              _0x1448aa = (_0x1448aa = Math.floor(this.goldDelta * _0x1722ef)) < 0x1 ? 0x1 : _0x1448aa;
              this.curGoldCount += Math.floor(this.goldDelta * _0x1722ef);
              if (this.curGoldCount > this.goldCount + this.addGoldCount) {
                this.curGoldCount = this.goldCount + this.addGoldCount;
                this.addGold = false;
              }
              this._goldNum.setString(_0x31b9e8.DYTools.numberToString(this.curGoldCount));
              this.goldNum.width = this._goldNum.size.width * this._goldNum.node.scale;
            }
          }
        },
        'onBtnGetClicked': function () {
          // this.onBtnClicked(0x0);
          // if (typeof wsdk !== "undefined" && typeof wsdk.showAd !== "undefined") {
          //   wsdk.showAd();
          // }
          cc.game.pause()
          wop.trigger("inter",{
            callback:()=>{
              setTimeout(()=>{

                cc.game.resume()
                this.onBtnClicked(0x0);
              },200)
            }
          })
        },
        'onBtnGet3Clicked': function () {
          this.onBtnClicked(0x1);
        },
        'onBtnClicked': function (_0xa333b6) {
          if (0x0 == _0xa333b6) {
            _0xf7e9da.GValue.GameOverGold = this.totalGold;
            this.clickOver();
          } else {
            var _0x2308a9 = this;
            _0x5dc2de.ADShareMgr.adShare(_0x5d2d12.Enum_ADShare.AS_Over, function () {
              _0x2308a9.AdverSuccess(false);
            }, function () {
              _0x2308a9.AdverSuccess();
            });
          }
        },
        'AdverSuccess': function (_0x3efa37) {
          if (undefined === _0x3efa37) {
            _0x3efa37 = true;
          }
          _0xf7e9da.GValue.GameOverGold = 0x3 * this.totalGold;
          this.totalGold *= 0x2;
          _0x55a7b4.TData.setGold(_0x55a7b4.TData.getGold() + this.totalGold);
          this.clickOver();
        },
        'clickOver': function () {
          if (!this.isClickedOver) {
            this.isClickedOver = true;
            // setTimeout(function () {
              _0x517d4d.GFunc.preLoadMap(_0x55a7b4.TData.getStage());
              if (_0xf7e9da.GValue.DDSDK) {
                _0xf7e9da.GValue.DDSDK.parent = null;
              }
              _0xf7e9da.GValue.HomeUI = null;
              cc.director.loadScene('Game');
            // }, 50);
          }
        },
        'setGoldDelta': function (_0x455e3b) {
          _0x455e3b = _0x455e3b < 0x1 ? 0x1 : _0x455e3b;
          this.goldDelta = _0x455e3b;
        },
        'create': function (_0x314fb3, _0x234cfb, _0x395cf4) {
          _0xf7e9da.GValue.ArmsSub_TryWill = 0x0;
          _0xf7e9da.GValue.ArmsSub_TryFinish = 0x0;
          this.totalGold = _0x234cfb;
          this.goldCount = _0x234cfb;
          this.rewardPower = _0x395cf4;
          if (_0x314fb3) {
            var _0x4b84bd = _0xf7e9da.GValue.EntityWorld.player.getKnivesCount() - _0x55a7b4.TData.WeaponCount + _0xf7e9da.GValue.EntityWorld.landKnifes.length;
            if (_0x4b84bd > 0x0) {
              this.totalGold += _0x4b84bd * _0xf7e9da.GValue.EntityWorld.levelData.knifeGold;
            }
            this.initLevelPass();
            if (_0xf7e9da.GValue.EntityWorld.levelData.fun > 0x0) {
              _0x55a7b4.TData.addListSub(_0xf7e9da.GValue.EntityWorld.levelData.fun);
            }
            if (_0x55a7b4.TData.getMaxPassStage() < _0x55a7b4.TData.getStage() && this.rewardPower > 0x0) {
              _0x55a7b4.TData.setPower(_0x55a7b4.TData.getPower() + this.rewardPower);
            }
            _0x55a7b4.TData.setMaxPassStage(_0x55a7b4.TData.getStage());
            if (_0x55a7b4.TData.getStage() < _0x78ddf7.GConfig.MaxLevel && _0x55a7b4.TData.setStage(_0x55a7b4.TData.getStage() + 0x1, true)) {
              _0xf7e9da.GValue.ChangeStage = true;
            }
            if (this.totalGold > 0x3e7) {
              this.addNode.x = 0x8c;
            }
            _0xf7e9da.GValue.Level_FailCount = 0x0;
          } else {
            _0xf7e9da.GValue.Level_FailCount++;
            var _0x5a746a = parseInt(_0x78ddf7.GConfig.getGbData(_0x5d2d12.Enum_Gb.SubTryDie));
            var _0x9d32af = _0x55a7b4.TData.getTodayArmsSubTryCount();
            var _0x1f18dc = parseInt(_0x78ddf7.GConfig.getGbData(_0x5d2d12.Enum_Gb.SubTryMaxCount));
            var _0x3a490c = _0x55a7b4.TData.getStage();
            var _0x11cb92 = _0x78ddf7.GConfig.getLevelData(_0x3a490c);
            var _0x3c8e18 = parseInt(_0x78ddf7.GConfig.getGbData(_0x5d2d12.Enum_Gb.SubTryStage));
            if (_0x5dc2de.ADShareMgr.getActualAdShare(_0x5d2d12.Enum_ADShare.AS_TrySub) == _0x5d2d12.Enum_AdShareType.Ad && _0x11cb92 && !_0x11cb92.boss && _0x3a490c >= _0x3c8e18 && _0xf7e9da.GValue.Level_FailCount >= _0x5a746a && _0x9d32af < _0x1f18dc) {
              _0x517d4d.GFunc.randomTrySub(_0x11cb92.subTryLv);
            }
          }
          _0x55a7b4.TData.setGold(_0x55a7b4.TData.getGold() + this.totalGold);
          this.shieldNode.active = true;
          this.successNode.active = _0x314fb3;
          this.faildNode.active = !_0x314fb3;
          if (_0x395cf4 > 0x0) {
            var _0x4f49bd = _0x31b9e8.DYTools.createPrefabCom(this.sucPowerNum, this.pf_num, "PfNum");
            _0x4f49bd.setParam(_0x5d2d12.Enum_Num.Blood, cc.v2(0.5, 0.5), 0x2, this.atlas_ui);
            _0x4f49bd.setString('+' + _0x395cf4);
            _0x4f49bd.node.scale = 0.68;
            this.sucPowerNum.width = _0x4f49bd.size.width * _0x4f49bd.node.scale;
          } else {
            this.sucRewardNode.active = false;
          }
          var _0x3b0e32 = _0x31b9e8.DYTools.createPrefabCom(this.levelNum, this.pf_num, "PfNum");
          _0x3b0e32.setParam(_0x5d2d12.Enum_Num.Level, cc.v2(0.5, 0.5), 0x0, this.atlas_ui);
          _0x3b0e32.setNum(_0xf7e9da.GValue.EntityWorld.curLevel);
          this.levelNum.width = _0x3b0e32.size.width * _0x3b0e32.node.scale;
          this._goldNum = _0x31b9e8.DYTools.createPrefabCom(this.goldNum, this.pf_num, 'PfNum');
          this._goldNum.setParam(_0x5d2d12.Enum_Num.Blood, cc.v2(0.5, 0.5), 0x2, this.atlas_ui);
          this._goldNum.setString(_0x31b9e8.DYTools.numberToString(_0x234cfb));
          this._goldNum.node.scale = 0.68;
          this.goldNum.width = this._goldNum.size.width * this._goldNum.node.scale;
          var _0x566e52 = parseInt(_0x78ddf7.GConfig.getGbData(_0x5d2d12.Enum_Gb.GiftGoldStage));
          if (_0x234cfb > 0x0 && _0xf7e9da.GValue.EntityWorld.curLevel > _0x566e52) {
            this.type3Spr.spriteFrame = this.atlas_ui.getSpriteFrame("video");
            _0x185226.GSDK.sendVideoShow(_0x5d2d12.Enum_ADShare.AS_Over);
          } else {
            this.btnGet3Node.active = true;
          }
          if (0x1 == _0x2547d1.AndroidMgr.getAfStatus()) {
            this.type3Spr.node.active = false;
          }
        },
        'initLevelPass': function () {
          var _0x38a180 = _0x55a7b4.TData.getStage();
          if (0x1 == _0x38a180) {
            for (var _0x46be90 = 0x1; _0x46be90 < this.lvList.length; _0x46be90++) {
              (_0x233f47 = this.lvList[_0x46be90]).active = true;
              this.createLvNum(_0x233f47, _0x38a180 + _0x46be90 - 0x1);
              if (_0x46be90 == this.lvList.length - 0x1) {
                _0x233f47.opacity = 0x0;
              }
            }
            for (_0x46be90 = 0x1; _0x46be90 < this.lvIconList.length; _0x46be90++) {
              (_0x3d0f33 = this.lvIconList[_0x46be90]).node.active = true;
              if (_0x46be90 == this.lvIconList.length - 0x1) {
                _0x3d0f33.node.opacity = 0x0;
              }
            }
          } else {
            if (_0x38a180 == _0x78ddf7.GConfig.MaxLevel - 0x1) {
              for (_0x46be90 = 0x0; _0x46be90 < this.lvList.length - 0x1; _0x46be90++) {
                var _0x233f47 = this.lvList[_0x46be90];
                this.createLvNum(_0x233f47, _0x38a180 + _0x46be90 - 0x1);
                _0x233f47.active = true;
              }
              for (_0x46be90 = 0x0; _0x46be90 < this.lvIconList.length - 0x1; _0x46be90++) {
                (_0x3d0f33 = this.lvIconList[_0x46be90]).node.active = true;
              }
            } else {
              if (_0x38a180 == _0x78ddf7.GConfig.MaxLevel) {
                for (_0x46be90 = 0x0; _0x46be90 < this.lvList.length - 0x2; _0x46be90++) {
                  _0x233f47 = this.lvList[_0x46be90];
                  this.createLvNum(_0x233f47, _0x38a180 + _0x46be90 - 0x1);
                  _0x233f47.active = true;
                }
                for (_0x46be90 = 0x0; _0x46be90 < this.lvIconList.length - 0x2; _0x46be90++) {
                  (_0x3d0f33 = this.lvIconList[_0x46be90]).node.active = true;
                }
              } else {
                for (_0x46be90 = 0x0; _0x46be90 < this.lvList.length; _0x46be90++) {
                  (_0x233f47 = this.lvList[_0x46be90]).active = true;
                  this.createLvNum(_0x233f47, _0x38a180 + _0x46be90 - 0x1);
                  if (_0x46be90 == this.lvList.length - 0x1) {
                    _0x233f47.opacity = 0x0;
                  }
                }
                for (_0x46be90 = 0x0; _0x46be90 < this.lvIconList.length; _0x46be90++) {
                  var _0x3d0f33;
                  (_0x3d0f33 = this.lvIconList[_0x46be90]).node.active = true;
                  if (_0x46be90 == this.lvIconList.length - 0x1) {
                    _0x3d0f33.node.opacity = 0x0;
                  }
                }
              }
            }
          }
        },
        'createLvNum': function (_0x15a71f, _0x31299d) {
          var _0x5397db = _0x78ddf7.GConfig.getLevelData(_0x31299d);
          if (_0x5397db && 0x1 == _0x5397db.boss) {
            var _0x5ce56d = new cc.Node();
            _0x5ce56d.parent = _0x15a71f;
            var _0x141d61 = _0x5ce56d.addComponent(cc.Sprite);
            _0x141d61.spriteFrame = this.atlas_ui.getSpriteFrame("boss");
            return _0x141d61;
          }
          var _0x23b938 = _0x31b9e8.DYTools.createPrefabCom(_0x15a71f, this.pf_num, "PfNum");
          _0x23b938.setParam(_0x5d2d12.Enum_Num.Blood, cc.v2(0.5, 0.5), 0x0, this.atlas_ui);
          _0x23b938.setNum(_0x31299d);
          _0x23b938.node.scale = 0.5;
          return _0x23b938;
        },
        'initAction': function () {
          this.shieldNode.active = true;
          this.levelNode.active = false;
          this.rewardNode.active = false;
          this.goldNum.parent.parent.active = false;
          this.btnGet3Node.opacity = 0x0;
          this.times3Node.opacity = 0x0;
          this.btnGetNode.opacity = 0x0;
          this.btnGetNode.active = false;
          if (this.successNode.active) {
            this.sucRewardNode.opacity = 0x0;
            this.sucFontNode.active = false;
            this.layerNode.opacity = 0x1;
          } else {
            this.faildNode.opacity = 0x0;
          }
        },
        'doEnterAction': function () {
          var _0x5de4b3 = this;
          var _0x1a5333 = _0x78ddf7.GConfig.actionFrameTime;
          _0xf7e9da.GValue.GameUI.playGameOverAction();
          if (this.successNode.active) {
            _0x21aa5b.GAudio.playSound(_0x21aa5b.Enum_Audio.overSuccess);
            _0x5de4b3.sucFontNode.active = true;
            _0x5de4b3.sucFontNode.scale = 2.8;
            var _0x4365fc = cc.scaleTo(0x5 * _0x1a5333, 0.85);
            var _0xcbbde4 = cc.callFunc(function () {
              var _0x5447a7 = new cc.Node();
              _0x5de4b3.sucFontNode.parent.addChild(_0x5447a7);
              _0x5447a7.position = _0x5de4b3.sucFontNode.position;
              _0x5447a7.scale = 0.85;
              _0x5447a7.addComponent(cc.Sprite).spriteFrame = _0x5de4b3.sucFontNode.getComponent(cc.Sprite).spriteFrame;
              _0x5447a7.runAction(cc.sequence(cc.spawn(cc.scaleTo(0x5 * _0x1a5333, 1.65), cc.fadeOut(0x5 * _0x1a5333)), cc.removeSelf()));
            });
            var _0x3f962c = cc.scaleTo(0x3 * _0x1a5333, 0x1);
            var _0x4bfd33 = cc.callFunc(function () {});
            var _0x259d46 = cc.sequence(_0x4365fc, _0xcbbde4, _0x3f962c, _0x4bfd33);
            _0x5de4b3.sucFontNode.runAction(_0x259d46);
            this.scheduleOnce(function () {
              _0x5de4b3.levelNode.active = true;
            }, 0x5 * _0x1a5333);
            this.scheduleOnce(function () {
              _0x5de4b3.sucRewardNode.runAction(cc.fadeIn(0x5 * _0x1a5333));
            }, 0xd * _0x1a5333);
            this.scheduleOnce(function () {
              _0xf7e9da.GValue.EntityWorld.gamePass(function () {
                _0x5de4b3.scheduleOnce(function () {
                  _0x5de4b3.successNode.active = false;
                  _0x5de4b3.levelNode.active = false;
                  _0x5de4b3.layerNode.opacity = 0xff;
                  _0x5de4b3.playPassLevelAct();
                }, 0xa * _0x1a5333);
              });
            }, 0x15 * _0x1a5333);
          } else {
            if (_0xf7e9da.GValue.DDSDKUI) {
              _0xf7e9da.GValue.DDSDKUI.showFavGame(true);
            }
            this.levelNode.active = true;
            this.layerNode.opacity = 0x1;
            var _0x1765fa = this.levelNode.position;
            this.levelNode.position = _0xf7e9da.GValue.GameUI.curLevNum.parent.position;
            this.levelNode.runAction(cc.moveTo(0xb * _0x1a5333, _0x1765fa));
            this.scheduleOnce(function () {
              _0x21aa5b.GAudio.playSound(_0x21aa5b.Enum_Audio.overFailed);
              _0x5de4b3.faildNode.scale = 2.8;
              _0x5de4b3.faildNode.opacity = 0xff;
              var _0x3ff564 = cc.scaleTo(0x5 * _0x1a5333, 0.85);
              var _0x4d0e7a = cc.scaleTo(0x3 * _0x1a5333, 0x1);
              var _0x117ef7 = cc.sequence(_0x3ff564, _0x4d0e7a);
              _0x5de4b3.faildNode.runAction(_0x117ef7);
            }, 0x5 * _0x1a5333);
            this.scheduleOnce(function () {
              _0x5de4b3.layerNode.runAction(cc.fadeIn(0x6 * _0x1a5333));
            }, 0xa * _0x1a5333);
            this.scheduleOnce(function () {
              _0x5de4b3.levelNum.parent.active = true;
              _0x5de4b3.rewardNode.active = true;
              _0x5de4b3.rewardNode.y -= 0x49;
              _0x5de4b3.rewardNode.runAction(cc.moveBy(0x4 * _0x1a5333, cc.v2(0x0, 0x49)));
              _0x5de4b3.rewardBgNode.scaleY = 0.06;
              _0x5de4b3.rewardBgNode.runAction(cc.scaleTo(0x4 * _0x1a5333, 0x1, 0.3));
            }, 0x12 * _0x1a5333);
            this.scheduleOnce(function () {
              _0x21aa5b.GAudio.playSound(_0x21aa5b.Enum_Audio.overGoldChange);
              _0x5de4b3.goldNum.parent.parent.active = true;
              _0x5de4b3.goldFont.runAction(cc.sequence(cc.scaleTo(0x5 * _0x1a5333, 1.65), cc.scaleTo(0x4 * _0x1a5333, 0x1)));
              _0x5de4b3.goldNum.scale = 0.6;
              var _0x55e48a = cc.scaleTo(0x8 * _0x1a5333, 2.05);
              var _0x31ee57 = cc.scaleTo(0x6 * _0x1a5333, 1.85);
              var _0xd13812 = cc.scaleTo(0x2 * _0x1a5333, 0.95);
              var _0xb3baa5 = cc.scaleTo(0x4 * _0x1a5333, 0x1);
              var _0x49a9fd = cc.sequence(_0x55e48a, _0x31ee57, _0xd13812, _0xb3baa5);
              _0x5de4b3.goldNum.runAction(_0x49a9fd);
              _0x5de4b3.initGold = true;
              _0x5de4b3.setGoldDelta(_0x5de4b3.goldCount / (0x6 * _0x1a5333));
            }, 0x16 * _0x1a5333);
            this.scheduleOnce(function () {
              _0x5de4b3.rewardBgNode.runAction(cc.sequence(cc.scaleTo(0x4 * _0x1a5333, 0x1, 1.05), cc.scaleTo(0x3 * _0x1a5333, 0x1, 0x1)));
            }, 0x2a * _0x1a5333);
            this.scheduleOnce(function () {
              var _0x2487bf = cc.scaleTo(0x3 * _0x1a5333, 1.05);
              var _0x51d198 = cc.fadeIn(0x3 * _0x1a5333);
              var _0xd5f79d = cc.spawn(_0x2487bf, _0x51d198);
              var _0x556c7f = cc.scaleTo(0x3 * _0x1a5333, 0.95);
              var _0x30b91a = cc.scaleTo(0x3 * _0x1a5333, 0x1);
              var _0xaf03bd = cc.sequence(_0xd5f79d, _0x556c7f, _0x30b91a);
              _0x5de4b3.btnGetNode.runAction(cc.sequence(_0xaf03bd, cc.callFunc(function () {
                _0x5de4b3.shieldNode.active = false;
              })));
              _0x5de4b3.scheduleOnce(function () {
                _0x5de4b3.btnGetNode.active = true;
                _0x5de4b3.btnGetNode.scale = 0.75;
                _0x5de4b3.btnGetNode.opacity = 0x0;
                _0x5de4b3.btnGetNode.runAction(cc.sequence(_0xaf03bd, cc.callFunc(function () {
                  _0x5de4b3.shieldNode.active = false;
                })));
              }, 0x2);
              _0x5de4b3.btnGet3Node.scale = 0.75;
              _0x5de4b3.btnGet3Node.runAction(cc.sequence(_0xaf03bd.clone(), cc.callFunc(function () {
                _0x5de4b3.shieldNode.active = false;
                _0x5de4b3.times3Node.opacity = 0xff;
              }), cc.delayTime(0.2), cc.callFunc(function () {
                _0x5de4b3.btnGet3Node.stopAllActions();
                _0x5de4b3.btnGet3Node.scale = 0x1;
                _0x5de4b3.skel3Light.node.active = true;
                _0x517d4d.GFunc.set_action_btn(_0x5de4b3.btnGet3Node, _0x5de4b3.skel3Light);
              })));
            }, 0x32 * _0x1a5333);
          }
        },
        'playPassLevelAct': function () {
          var _0x5a59bd = this;
          _0xf7e9da.GValue.PlayerSlowRatio = 0.2;
          var _0x39c235 = this;
          var _0x43a956 = _0x78ddf7.GConfig.actionFrameTime;
          this.passNode.active = true;
          var _0x573b9a = this.passNode.position;
          this.passNode.y = _0x573b9a.y + 0x3c;
          var _0x5d7402 = cc.moveTo(0x6 * _0x43a956, _0x573b9a);
          this.passNode.runAction(_0x5d7402);
          var _0x53d37e = 0x0;
          if (this.lvList[0x2].active) {
            this.scheduleOnce(function () {
              var _0x478c14 = _0x39c235.lvList[0x0].position.add(cc.v2(-0x28, 0x0));
              var _0x4428e8 = _0x39c235.lvList[0x0].position;
              var _0x34716a = _0x39c235.lvList[0x1].position;
              var _0x12cbde = _0x39c235.lvList[0x2].position;
              var _0x11f63b = _0x39c235.lvList[0x2].position.add(cc.v2(0x28, 0x0));
              var _0x27f349 = [];
              _0x27f349.push(_0x478c14.sub(_0x4428e8));
              _0x27f349.push(_0x4428e8.sub(_0x34716a));
              _0x27f349.push(_0x34716a.sub(_0x12cbde));
              _0x27f349.push(_0x12cbde.sub(_0x11f63b));
              var _0xc67ac6 = _0x39c235.lvList[0x0].active ? 0x0 : 0x1;
              for (var _0x17d287 = _0xc67ac6; _0x17d287 < _0x39c235.lvList.length; _0x17d287++) {
                var _0x4b05fe = _0x39c235.lvList[_0x17d287];
                _0x4b05fe.zIndex = 0xa;
                var _0x4d387b = cc.moveBy(0x7 * _0x43a956, _0x27f349[_0x17d287]);
                if (0x0 == _0x17d287) {
                  _0x4b05fe.zIndex = 0x0;
                  var _0x2b53ce = cc.fadeOut(0x7 * _0x43a956);
                  var _0x113e6b = cc.scaleTo(0x7 * _0x43a956, 0.8);
                  _0x4b05fe.runAction(cc.spawn(_0x2b53ce, _0x4d387b, _0x113e6b));
                } else if (0x3 == _0x17d287) {
                  _0x4b05fe.scale = 0.8;
                  _0x4b05fe.position = _0x11f63b;
                  _0x4b05fe.zIndex = 0x0;
                  _0x2b53ce = cc.fadeIn(0x7 * _0x43a956);
                  _0x113e6b = cc.scaleTo(0x7 * _0x43a956, 0x1);
                  _0x4b05fe.runAction(cc.spawn(_0x2b53ce, _0x4d387b, _0x113e6b));
                } else if (0x1 == _0x17d287) {
                  _0x4b05fe.runAction(cc.spawn(_0x4d387b, cc.scaleTo(0x7 * _0x43a956, 0x1)));
                } else if (0x2 == _0x17d287) {
                  _0x4b05fe.runAction(cc.spawn(_0x4d387b, cc.scaleTo(0x7 * _0x43a956, 1.5)));
                }
              }
              _0x478c14 = _0x39c235.lvIconList[0x0].node.position.add(cc.v2(-0x32, 0x0));
              _0x4428e8 = _0x39c235.lvIconList[0x0].node.position;
              _0x34716a = _0x39c235.lvIconList[0x1].node.position;
              _0x12cbde = _0x34716a.add(cc.v2(0x32, 0x0));
              _0x27f349.splice(0x0);
              _0x27f349.push(_0x478c14.sub(_0x4428e8));
              _0x27f349.push(_0x4428e8.sub(_0x34716a));
              _0x27f349.push(_0x34716a.sub(_0x12cbde));
              var _0x22b6c0 = function (_0x4ad17c) {
                var _0x2d432f = _0x39c235.lvIconList[_0x4ad17c];
                var _0x5d0360 = _0x2d432f.node;
                var _0x562015 = cc.moveBy(0x7 * _0x43a956, _0x27f349[_0x4ad17c]);
                if (0x0 == _0x4ad17c) {
                  var _0x23f656 = cc.fadeOut(0x7 * _0x43a956);
                  var _0x56b4b0 = cc.scaleTo(0x7 * _0x43a956, 0.8);
                  _0x5d0360.runAction(cc.spawn(_0x23f656, _0x562015, _0x56b4b0));
                } else if (0x2 == _0x4ad17c) {
                  _0x5d0360.scale = 0.8;
                  _0x5d0360.position = _0x12cbde;
                  _0x23f656 = cc.fadeIn(0x7 * _0x43a956);
                  _0x56b4b0 = cc.scaleTo(0x7 * _0x43a956, 0x1);
                  _0x5d0360.runAction(cc.spawn(_0x23f656, _0x562015, _0x56b4b0));
                } else if (0x1 == _0x4ad17c) {
                  _0x5d0360.zIndex = 0xa;
                  _0x5d0360.runAction(cc.spawn(_0x562015, cc.scaleTo(0x7 * _0x43a956, 0x1), cc.callFunc(function () {
                    _0x2d432f.spriteFrame = _0x39c235.atlas_ui.getSpriteFrame("pass");
                  })));
                }
              };
              for (_0x17d287 = _0xc67ac6; _0x17d287 < _0x39c235.lvIconList.length; _0x17d287++) {
                _0x22b6c0(_0x17d287);
              }
              _0x21aa5b.GAudio.playSound(_0x21aa5b.Enum_Audio.overLevelChange);
            }, 0x15 * _0x43a956);
            _0x53d37e = 0x26 * _0x43a956;
          } else {
            _0x53d37e = 0x11 * _0x43a956;
          }
          this.scheduleOnce(function () {
            _0x39c235.rewardNode.active = true;
            _0x39c235.rewardNode.y -= 0x49;
            _0x39c235.rewardNode.runAction(cc.moveBy(0x4 * _0x43a956, cc.v2(0x0, 0x49)));
            _0x39c235.rewardBgNode.scaleY = 0.06;
            _0x39c235.rewardBgNode.runAction(cc.scaleTo(0x4 * _0x43a956, 0x1, 0.3));
            _0x39c235.scheduleOnce(function () {
              _0x21aa5b.GAudio.playSound(_0x21aa5b.Enum_Audio.overGoldChange);
              _0x39c235.goldNum.parent.parent.active = true;
              _0x39c235.goldFont.runAction(cc.sequence(cc.scaleTo(0x5 * _0x43a956, 1.65), cc.scaleTo(0x4 * _0x43a956, 0x1)));
              _0x39c235.goldNum.scale = 0.6;
              var _0x1b92b2 = cc.scaleTo(0x8 * _0x43a956, 2.05);
              var _0x5e9161 = cc.scaleTo(0x6 * _0x43a956, 1.85);
              var _0x463b2c = cc.scaleTo(0x2 * _0x43a956, 0.95);
              var _0x5c56b3 = cc.scaleTo(0x4 * _0x43a956, 0x1);
              var _0x4319e6 = cc.sequence(_0x1b92b2, _0x5e9161, _0x463b2c, _0x5c56b3);
              _0x39c235.goldNum.runAction(_0x4319e6);
              _0x39c235.initGold = true;
              _0x39c235.setGoldDelta(_0x39c235.goldCount / (0xe * _0x43a956));
            }, 0x2 * _0x43a956);
            _0x39c235.scheduleOnce(function () {
              _0x517d4d.GFunc.changePlayerParentToUI(_0x39c235.node);
              _0x39c235.layerNode.runAction(cc.fadeIn(0x6 * _0x43a956));
              _0xf7e9da.GValue.EntityWorld.player.playMoveAct(cc.v2(0x0, 0.5 * -_0xf7e9da.GValue.Size_View.height / _0xf7e9da.GValue.MapScale - 0x64), cc.v2(0x0, 0.3 * -_0xf7e9da.GValue.Size_View.height), null);
            }, 0x14 * _0x43a956);
            var _0x4197f6 = _0xf7e9da.GValue.EntityWorld.player.getKnivesCount() - _0x55a7b4.TData.WeaponCount;
            var _0x2cf127 = 0x0;
            if (_0x4197f6 > 0x0) {
              var _0x2811e5 = _0xf7e9da.GValue.EntityWorld.player.followPlayerOut.knivesCmp.knives;
              var _0x42582b = [];
              _0x39c235.addGoldCount = _0x4197f6 * _0xf7e9da.GValue.EntityWorld.levelData.knifeGold;
              _0x39c235.scheduleOnce(function () {
                _0x21aa5b.GAudio.playSound(_0x21aa5b.Enum_Audio.overWGold);
                var _0x47db97 = _0x39c235.goldIcon.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
                _0x47db97 = _0x39c235.node.convertToNodeSpaceAR(_0x47db97);
                var _0x5ba78e = function (_0x243699) {
                  var _0x23bac9 = _0x31b9e8.DYTools.random_int(0x0, _0x2811e5.length - 0x1);
                  var _0x28b305 = _0x2811e5[_0x23bac9];
                  _0x42582b.push(_0x28b305);
                  _0x2811e5.splice(_0x23bac9, 0x1);
                  _0x39c235.knifeToGold(_0x28b305.convertToWorldSpaceAR(cc.v2(0x0, 0x0)), _0x47db97, function () {
                    _0x28b305.runAction(cc.sequence(cc.fadeOut(0x3 * _0x43a956), cc.callFunc(function () {
                      _0xf7e9da.GValue.EntityWorld.player.followPlayerOut.node.emit("reduceKnife", _0x28b305);
                    }), cc.callFunc(function () {
                      _0x28b305.getComponent(_0x2c9bff).removeSelf();
                    })));
                  });
                };
                for (var _0x5c4cd6 = 0x0; _0x5c4cd6 < _0x4197f6; _0x5c4cd6++) {
                  _0x5ba78e();
                }
              }, 0x29 * _0x43a956);
              _0x39c235.scheduleOnce(function () {
                _0x39c235.addNode.active = true;
                _0x39c235.addNode.scale = 0.7;
                var _0x386b4b = cc.scaleTo(0x4 * _0x43a956, 0x1);
                var _0x3a89d9 = cc.delayTime(0x1e * _0x43a956);
                var _0x26ac60 = cc.fadeOut(0x2 * _0x43a956);
                var _0x5eee74 = cc.callFunc(function () {
                  _0x21aa5b.GAudio.playSound(_0x21aa5b.Enum_Audio.overGoldChange);
                  _0x39c235.addGold = true;
                  _0x39c235.setGoldDelta(_0x39c235.addGoldCount / (0x7 * _0x43a956));
                });
                _0x39c235.addNode.runAction(cc.sequence(_0x386b4b, _0x3a89d9, _0x26ac60, _0x5eee74));
                var _0x4432af = _0x31b9e8.DYTools.createPrefabCom(_0x39c235.addNum, _0x5a59bd.pf_num, "PfNum");
                _0x4432af.setParam(_0x5d2d12.Enum_Num.Blood, cc.v2(0.5, 0.5), 0x2, _0x39c235.atlas_ui);
                _0x4432af.setString('+' + _0x4197f6 * _0x78ddf7.GConfig.getLevelData(_0x55a7b4.TData.getStage() - 0x1).knifeGold);
                _0x4432af.color = cc.color(0xff, 0xcc, 0x0);
                _0x4432af.node.scale = 0.6;
                _0x39c235.addNum.width = _0x4432af.size.width * _0x4432af.node.scale;
              }, 0x38 * _0x43a956);
              _0x2cf127 = 0x14 * _0x43a956;
            }
            _0x39c235.scheduleOnce(function () {
              _0x517d4d.GFunc.changePlayerParentToMap();
              _0x39c235.rewardBgNode.runAction(cc.sequence(cc.scaleTo(0x4 * _0x43a956, 0x1, 1.05), cc.scaleTo(0x3 * _0x43a956, 0x1, 0x1)));
              if (_0xf7e9da.GValue.DDSDKUI) {
                _0xf7e9da.GValue.DDSDKUI.showFavGame(true);
              }
            }, 0x38 * _0x43a956 + _0x2cf127);
            _0x39c235.scheduleOnce(function () {
              var _0x331961 = cc.scaleTo(0x3 * _0x43a956, 1.05);
              var _0x3fb0dc = cc.fadeIn(0x3 * _0x43a956);
              var _0x1ac12e = cc.spawn(_0x331961, _0x3fb0dc);
              var _0x386497 = cc.scaleTo(0x3 * _0x43a956, 0.95);
              var _0x5895e8 = cc.scaleTo(0x3 * _0x43a956, 0x1);
              var _0x466fa0 = cc.sequence(_0x1ac12e, _0x386497, _0x5895e8, cc.callFunc(function () {
                _0x39c235.shieldNode.active = false;
              }));
              _0x39c235.scheduleOnce(function () {
                _0x39c235.btnGetNode.active = true;
                _0x39c235.btnGetNode.scale = 0.75;
                _0x39c235.btnGetNode.opacity = 0x0;
                _0x39c235.btnGetNode.runAction(_0x466fa0);
              }, 0x2);
              _0x39c235.btnGet3Node.scale = 0.75;
              _0x39c235.btnGet3Node.runAction(cc.sequence(cc.delayTime(0x4 * _0x43a956), _0x466fa0.clone(), cc.callFunc(function () {
                _0x39c235.shieldNode.active = false;
                _0x39c235.times3Node.opacity = 0xff;
              }), cc.delayTime(0.2), cc.callFunc(function () {
                _0x39c235.btnGet3Node.stopAllActions();
                _0x39c235.btnGet3Node.scale = 0x1;
                _0x39c235.skel3Light.node.active = true;
                _0x517d4d.GFunc.set_action_btn(_0x39c235.btnGet3Node, _0x39c235.skel3Light);
              })));
            }, 0x3f * _0x43a956 + _0x2cf127);
          }, _0x53d37e);
        },
        'knifeToGold': function (_0x4a251b, _0x20e671, _0x4d158e) {
          var _0x2e170a = _0x78ddf7.GConfig.actionFrameTime;
          _0x4a251b = this.node.convertToNodeSpaceAR(_0x4a251b);
          var _0x3369ea = new cc.Node();
          _0x3369ea.position = _0x4a251b;
          this.node.addChild(_0x3369ea, 0xb);
          var _0x59bd50 = new cc.Node();
          _0x3369ea.addChild(_0x59bd50);
          _0x59bd50.addComponent(cc.Sprite).spriteFrame = this.atlas_ui.getSpriteFrame('gold');
          _0x59bd50.setContentSize(0x20, 0x20);
          _0x59bd50.runAction(cc.repeatForever(cc.sequence(cc.scaleTo(0x3 * _0x2e170a, -0x1, 0x1), cc.scaleTo(0x3 * _0x2e170a, 0x1, 0x1))));
          _0x59bd50.scale = 0.6;
          var _0x3273cc = cc.scaleTo(_0x2e170a * _0x31b9e8.DYTools.random_int(0x2, 0x4), 1.2);
          var _0x555295 = cc.scaleTo(_0x2e170a * _0x31b9e8.DYTools.random_int(0x2, 0x4), 0x1);
          var _0x9591f5 = cc.moveTo(0x5 * _0x2e170a, _0x4a251b.add(cc.v2(0x10, -0x28)));
          var _0x8a489d = cc.moveTo(0x8 * _0x2e170a, _0x20e671);
          var _0xe33119 = cc.sequence(_0x3273cc, cc.callFunc(function () {
            if (_0x4d158e) {
              _0x4d158e();
            }
          }), _0x555295, _0x9591f5, _0x8a489d, cc.removeSelf());
          _0x3369ea.runAction(_0xe33119);
        }
      });
      cc._RF.pop();
    }, {
      'ADShareManager': "ADShareManager",
      'AndroidManager': "AndroidManager",
      'CEntityKnife': "CEntityKnife",
      'CommonAudio': "CommonAudio",
      'CommonConfig': "CommonConfig",
      'CommonEnum': "CommonEnum",
      'CommonFunc': "CommonFunc",
      'CommonSdk': 'CommonSdk',
      'CommonValue': "CommonValue",
      'GameData': "GameData",
      'PanelBase': "PanelBase",
      'Tools': "Tools"
    }],
    'PanelPower': [function (_0x5244b1, _0x53d659, _0x3a4ad3) {
      'use strict';
  
      cc._RF.push(_0x53d659, "764eckNWxhIA7JZKF0dlakg", "PanelPower");
      var _0x5c0859 = _0x5244b1("CommonFunc");
      var _0x3e5eae = _0x5244b1("CommonValue");
      var _0x28bf7f = _0x5244b1("GameData");
      var _0x40ae5f = _0x5244b1("ADShareManager");
      var _0x471010 = _0x5244b1("CommonEnum");
      var _0x2f82ec = _0x5244b1('PfNum');
      var _0xc4ac = _0x5244b1('CommonSdk');
      var _0x114377 = _0x5244b1('AndroidManager');
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'node_gray': cc.Node,
          'node_ui': cc.Node,
          'node_num': cc.Node,
          'btn_get': cc.Node,
          'sp_get': cc.Sprite,
          'font_collect': cc.Sprite,
          'skel_btn_shine_get': sp.Skeleton,
          'btn_close': cc.Node,
          'btn_no': cc.Node,
          'atlas_offline': cc.SpriteAtlas,
          'atlas_gameui': cc.SpriteAtlas
        },
        'onLoad': function () {
          this.adShare = 0x1;
          this.count = 0x0;
          this.com_num = null;
          var _0x27240f = this;
          _0x5c0859.GFunc.set_click(this.node_gray, function () {}, this);
          _0x5c0859.GFunc.set_click(this.btn_get, function () {
            _0x27240f.get_normal();
          }, this);
          _0x5c0859.GFunc.set_click(this.btn_close, function () {
            _0x27240f.close();
          }, this);
          _0x5c0859.GFunc.set_click(this.btn_no, function () {
            _0x27240f.close();
          }, this);
          _0x5c0859.GFunc.set_action_btn(this.btn_get, this.skel_btn_shine_get);
        },
        'init': function (_0x1f77ce, _0x5ce436) {
          this.adShare = _0x5ce436;
          this.count = _0x1f77ce;
          this.initUI();
          if (_0x471010.Enum_AdShareType.Ad == _0x5ce436) {
            _0xc4ac.GSDK.sendVideoShow(_0x471010.Enum_ADShare.AS_Power);
          } else if (_0x471010.Enum_AdShareType.Share == _0x5ce436) {
            _0x40ae5f.ADShareMgr.clearShareProbCount(_0x471010.Enum_ADShare.AS_Power);
          }
        },
        'initUI': function () {
          var _0x471f4a = cc.instantiate(_0x3e5eae.GValue.pf_num);
          this.node_num.addChild(_0x471f4a);
          this.com_num = _0x471f4a.getComponent(_0x2f82ec);
          this.com_num.setParam(_0x471010.Enum_Num.Blood, cc.v2(0.5, 0.5), 0x2, this.atlas_gameui);
          this.com_num.setString(_0x5c0859.GFunc.getNumK(this.count));
          if (0x1 == _0x114377.AndroidMgr.getAfStatus()) {
            this.sp_get.node.active = false;
            this.font_collect.node.x = 0x0;
          } else if (this.adShare == _0x471010.Enum_AdShareType.Share) {
            _0x5c0859.GFunc.changeAtlasSprite(this.atlas_offline, this.sp_get, 'icon_share');
          }
        },
        'get_normal': function () {
          var _0x133f26 = this;
        //   window.xmgame.showVideo(function () {
        //     _0x133f26.close();
        //     var _0x31c1fa = _0x28bf7f.TData.getPower();
        //     _0x3e5eae.GValue.HomeUI.reducePowerAction(_0x133f26.count, false);
        //     _0x28bf7f.TData.setPower(_0x31c1fa + _0x133f26.count);
        //     _0x3e5eae.GValue.HomeUI.refreshPower();
        //     _0x28bf7f.TData.setHasGiftPower(false);
        //     _0x3e5eae.GValue.HomeUI.refresh_gift_power();
        //   }, function () {});
        cc.game.pause()
        wop.trigger("rewarded",{
          callback:()=>{
            cc.game.resume()
            var _0x31c1fa = _0x28bf7f.TData.getPower();
            _0x3e5eae.GValue.HomeUI.reducePowerAction(_0x133f26.count, false);
            _0x28bf7f.TData.setPower(_0x31c1fa + _0x133f26.count);
            _0x3e5eae.GValue.HomeUI.refreshPower();
            _0x28bf7f.TData.setHasGiftPower(false);
            _0x3e5eae.GValue.HomeUI.refresh_gift_power();
          }
        })
          _0x133f26.close();
        },
        'close': function () {
          this.node.destroy();
        }
      });
      cc._RF.pop();
    }, {
      'ADShareManager': "ADShareManager",
      'AndroidManager': "AndroidManager",
      'CommonEnum': 'CommonEnum',
      'CommonFunc': 'CommonFunc',
      'CommonSdk': "CommonSdk",
      'CommonValue': "CommonValue",
      'GameData': "GameData",
      'PfNum': "PfNum"
    }],
    'PanelRevive': [function (_0x2e67f1, _0x4289dd, _0x518bfc) {
      'use strict';
  
      cc._RF.push(_0x4289dd, "9bc09NYkAhMGIop8So085JW", "PanelRevive");
      var _0x388e58 = _0x2e67f1("PanelBase");
      var _0x457a12 = _0x2e67f1("Tools");
      var _0x52df3c = _0x2e67f1("CommonEnum");
      var _0x4c6ccd = _0x2e67f1("CommonFunc");
      var _0x1ecda9 = _0x2e67f1('GameData');
      var _0x37b06e = _0x2e67f1("ADShareManager");
      var _0x431e3c = _0x2e67f1("CommonValue");
      var _0x3a5bc9 = _0x2e67f1('CommonConfig');
      var _0x39630b = _0x2e67f1("CommonSdk");
      var _0x42a20a = _0x2e67f1("AndroidManager");
      cc.Class({
        'extends': _0x388e58,
        'properties': {
          'uiNode': cc.Node,
          'node_time': cc.Node,
          'node_btn': cc.Node,
          'node_tips': cc.Node,
          'spr_type': cc.Sprite,
          'skel_light': sp.Skeleton,
          'num_time': cc.Node,
          'node_shield': cc.Node,
          's_time': cc.Sprite,
          'pf_num': cc.Prefab,
          'atlas_ui': cc.SpriteAtlas
        },
        'statics': {
          'prefabPath': "prefab/ui/PanelRevive"
        },
        'onLoad': function () {
          this._recoverDuration = 0x3;
          this._recoverTime = 0x3;
          this._recoverAble = true;
          this._recoverType = 0x0;
          this._timeNum = null;
          this._curTime = 0x3;
          this._isVideo = false;
          this._isFree = false;
          this._closeCall = null;
          this._okCall = null;
        },
        'start': function () {
          this._btnTime = 0x1;
          _0x4c6ccd.GFunc.adjustScreen(this.uiNode);
        },
        'update': function (_0x5970ed) {
          if (!this._isVideo && this._recoverAble && this._timeNum) {
            this._recoverTime -= 0.016666666666666666;
            if (this._recoverTime <= 0x0) {
              this._recoverAble = false;
              this.removeSelf();
            } else {
              if (this._timeNum) {
                var _0x1a85df = Math.ceil(this._recoverTime);
                if (this._curTime != _0x1a85df) {
                  this._curTime = _0x1a85df;
                }
                this._timeNum.setNum(_0x1a85df);
              }
              this.s_time.fillRange = this._recoverTime / this._recoverDuration;
            }
          }
        },
        'removeSelf': function (_0x3a931d) {
          if (undefined === _0x3a931d) {
            _0x3a931d = 0x0;
          }
          var _0x32fc98 = function () {
            if (this._closeCall) {
              this._closeCall();
            }
            this.onExit();
          }.bind(this);
          if (_0x3a931d > 0x0) {
            this.scheduleOnce(_0x32fc98, _0x3a931d);
          } else {
            _0x32fc98();
          }
        },
        'onBtnRecoverClicked': function () {
          if (this.btnClickAble()) {
            var _0x3579c9 = this;
            if (_0x3579c9._isFree) {
              _0x3579c9.AdverSuccess();
            } else {
              _0x3579c9._isVideo = true;
              _0x37b06e.ADShareMgr.adShare(_0x52df3c.Enum_ADShare.AS_Over, function () {
                _0x3579c9._isVideo = false;
                _0x3579c9.AdverSuccess();
              }, function () {
                _0x3579c9._isVideo = false;
              }, null, function () {
                _0x3579c9._isVideo = false;
              });
            }
          }
        },
        'create': function (_0x3d97e7, _0x25a560, _0x272cab) {
          if (undefined === _0x272cab) {
            _0x272cab = null;
          }
          this._closeCall = _0x25a560;
          this._okCall = _0x272cab;
          if (_0x3d97e7) {
            this.node_time.active = false;
            this.node_btn.active = false;
            this.node_tips.active = true;
            var _0x4c49ad = this;
            this.scheduleOnce(function () {
              _0x4c49ad.node_btn.active = true;
              _0x4c49ad.node_btn.opacity = 0x1;
              _0x4c49ad.node_btn.runAction(cc.sequence(cc.fadeIn(0.2), cc.callFunc(function () {
                _0x4c6ccd.GFunc.set_action_btn(_0x4c49ad.node_btn, _0x4c49ad.skel_light);
              })));
            }, 0x1);
          } else {
            this.node_time.active = true;
            this.node_btn.active = true;
            this.node_tips.active = false;
            _0x4c6ccd.GFunc.set_action_btn(this.node_btn, this.skel_light);
            this._timeNum = _0x457a12.DYTools.createPrefabCom(this.num_time, this.pf_num, "PfNum");
            this._timeNum.setParam(_0x52df3c.Enum_Num.Blood, cc.v2(0.5, 0.5), 0x2, this.atlas_ui);
          }
          if (this.node_tips.active || parseInt(_0x3a5bc9.GConfig.getGbData(_0x52df3c.Enum_Gb.ReviveFree)) >= _0x431e3c.GValue.EntityWorld.curLevel) {
            this._isFree = true;
          } else {
            this._isFree = false;
          }
          if (this._isFree) {
            this.spr_type.node.active = false;
          } else if (_0x431e3c.GValue.AdShareSwitch) {
            this.spr_type.spriteFrame = this.atlas_ui.getSpriteFrame('video');
            _0x39630b.GSDK.sendVideoShow(_0x52df3c.Enum_ADShare.AS_Revive);
          }
          if (0x1 == _0x42a20a.AndroidMgr.getAfStatus()) {
            this.spr_type.node.active = false;
          }
        },
        'doRecover': function () {
          var _0x5a4684 = this;
          this.scheduleOnce(function () {
            if (_0x5a4684._okCall) {
              if (_0x1ecda9.TData.isFirstRevive()) {
                _0x1ecda9.TData.setFirstRevive();
              }
              _0x5a4684._okCall();
              _0x5a4684.onExit();
            }
            _0x5a4684.node_shield.active = false;
          }, 0.1);
        },
        'AdverSuccess': function () {
          this._recoverAble = false;
          this.node_shield.active = true;
          this.doRecover();
        }
      });
      cc._RF.pop();
    }, {
      'ADShareManager': "ADShareManager",
      'AndroidManager': "AndroidManager",
      'CommonConfig': "CommonConfig",
      'CommonEnum': "CommonEnum",
      'CommonFunc': "CommonFunc",
      'CommonSdk': "CommonSdk",
      'CommonValue': "CommonValue",
      'GameData': "GameData",
      'PanelBase': "PanelBase",
      'Tools': "Tools"
    }],
    'PanelSetting': [function (_0x3b8fd1, _0x530465, _0x528d9b) {
      'use strict';
  
      cc._RF.push(_0x530465, '59425QaDWJNYZV4M3Ok25Zs', "PanelSetting");
      var _0x477af3 = _0x3b8fd1("PanelBase");
      var _0xdcadb4 = _0x3b8fd1("CommonAudio");
      var _0x33f557 = _0x3b8fd1('GameData');
      var _0x35fae6 = _0x3b8fd1('CommonConfig');
      var _0xe71bcc = _0x3b8fd1('CommonSdk');
      cc.Class({
        'extends': _0x477af3,
        'properties': {
          'spr_sound': cc.Sprite,
          'spr_vibrate': cc.Sprite,
          'lab_version': cc.Label,
          'atlas_ui': cc.SpriteAtlas
        },
        'statics': {
          'prefabPath': "prefab/ui/PanelSetting"
        },
        'onLoad': function () {},
        'start': function () {
          this.lab_version.string = 'V' + _0x35fae6.GConfig.Version_Num;
          this.refreshSound();
          this.refreshVibrate();
        },
        'onBtnSoundClicked': function () {
          this.onBtnClicked(0x1);
        },
        'onBtnVibrateClicked': function () {
          this.onBtnClicked(0x2);
        },
        'onBtnCloseClicked': function () {
          this.onBtnClicked(0x0);
        },
        'onBtnGgClicked': function () {
          this.onBtnClicked(0x3);
        },
        'onBtnFbClicked': function () {
          this.onBtnClicked(0x4);
        },
        'onBtnPPClicked': function () {
          this.onBtnClicked(0x5);
        },
        'onBtnTSClicked': function () {
          this.onBtnClicked(0x6);
        },
        'onBtnClicked': function (_0x4135f2) {
          if (this.btnClickAble()) {
            switch (_0x4135f2) {
              case 0x0:
                this.onExit();
                break;
              case 0x1:
                _0xdcadb4.GAudio.musicOn = !_0xdcadb4.GAudio.musicOn;
                _0xdcadb4.GAudio.soundOn = _0xdcadb4.GAudio.musicOn;
                this.refreshSound();
                break;
              case 0x2:
                if (0x1 == _0x33f557.TData.SettingData.shake) {
                  _0x33f557.TData.setSettingShake(0x0);
                } else {
                  _0x33f557.TData.setSettingShake(0x1);
                }
                this.refreshVibrate();
                break;
              case 0x3:
                _0xe71bcc.GSDK.openUrl("https://play.google.com/store/apps/details?id=com.gameley.blademaster.spinning.en");
                break;
              case 0x4:
                _0xe71bcc.GSDK.openUrl('https://www.facebook.com/Blade-Master-2171609006411569');
                break;
              case 0x5:
                _0xe71bcc.GSDK.openUrl("https://docs.google.com/document/d/e/2PACX-1vSe03ILolzBI5Zro4dqOoqtsML8374TRd0gOzSTUWlgl8oqD1NQIDhipLh_8A14GdoxPB7CSJJyfmcL/pub");
                break;
              case 0x6:
                _0xe71bcc.GSDK.openUrl('https://docs.google.com/document/d/e/2PACX-1vTjpxjPfJUt5J_W2Cz30TqbOBG9hFMxPsDyOq9Im8cgiTj4rAWmks5qXsVWhW2DGFkzOPegHuKcclXl/pub');
            }
          }
        },
        'refreshSound': function () {
          if (_0xdcadb4.GAudio.musicOn) {
            this.spr_sound.spriteFrame = this.atlas_ui.getSpriteFrame('sy');
          } else {
            this.spr_sound.spriteFrame = this.atlas_ui.getSpriteFrame("sy2");
          }
        },
        'refreshVibrate': function () {
          var _0x5520f7 = _0x33f557.TData.SettingData.shake;
          this.spr_vibrate.spriteFrame = 0x1 == _0x5520f7 ? this.atlas_ui.getSpriteFrame('zd') : this.atlas_ui.getSpriteFrame("zd2");
        }
      });
      cc._RF.pop();
    }, {
      'CommonAudio': "CommonAudio",
      'CommonConfig': "CommonConfig",
      'CommonSdk': "CommonSdk",
      'GameData': 'GameData',
      'PanelBase': "PanelBase"
    }],
    'PfFrameAnim': [function (_0x5257e9, _0x2f424f, _0x184793) {
      'use strict';
  
      cc._RF.push(_0x2f424f, "a8cfef4AVRLk53b1u4Z4+JA", "PfFrameAnim");
      var _0x53741e = _0x5257e9("CommonValue");
      var _0xb05903 = _0x5257e9("CommonConfig");
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'sprite': cc.Sprite
        },
        'ctor': function () {
          this.imageSrc = '';
          this.count = 0x0;
          this.duration = 0x0;
          this.imageArr = [];
          this.time = 0x0;
          this.index = 0x0;
          this.selfUpdate = true;
        },
        'init': function (_0x4f46fe, _0x2f7398, _0x4c58ac, _0x14fca2, _0x5f1253, _0x352e1e, _0x2b8347) {
          if (undefined === _0x5f1253) {
            _0x5f1253 = null;
          }
          if (undefined === _0x352e1e) {
            _0x352e1e = null;
          }
          if (undefined === _0x2b8347) {
            _0x2b8347 = null;
          }
          this.node.opacity = 0x0;
          this.atlas = _0x4f46fe;
          this.imageSrc = _0x2f7398;
          this.count = _0x4c58ac;
          this.duration = _0x14fca2;
          this.call = _0x5f1253;
          this.resetCall = _0x2b8347;
          this.stopCall = _0x352e1e;
          for (var _0x25b0f9 = 0x0; _0x25b0f9 < _0x4c58ac; _0x25b0f9++) {
            this.imageArr.push(this.atlas.getSpriteFrame(_0x2f7398 + _0x25b0f9));
          }
        },
        'reset': function () {
          this.time = 0x0;
          this.index = 0x0;
          this.sprite.spriteFrame = this.imageArr[0x0];
          this.node.opacity = 0xff;
          if (this.resetCall) {
            this.resetCall();
          }
        },
        'stop': function (_0x5473b4) {
          if (undefined === _0x5473b4) {
            _0x5473b4 = false;
          }
          if (this.stopCall) {
            this.stopCall();
          }
          if (_0x5473b4) {
            this.node.runAction(cc.fadeOut(0x4 * _0xb05903.GConfig.actionFrameTime));
          } else {
            this.node.opacity = 0x0;
          }
        },
        'isPlaying': function () {
          return this.node.opacity > 0x64;
        },
        'update': function (_0x29d9b2) {
          if (this.selfUpdate) {
            _0x29d9b2 *= _0x53741e.GValue.PauseSlowRatio;
            this.updateGameLogic(_0x29d9b2);
          }
        },
        'updateGameLogic': function (_0x1ee017) {
          if (this.node.opacity > 0x0) {
            this.time += _0x1ee017;
            if (this.time >= this.duration) {
              this.index++;
              if (this.index >= this.count) {
                this.index = 0x0;
                if (this.call) {
                  this.call();
                }
              }
              this.time = 0x0;
              this.sprite.spriteFrame = this.imageArr[this.index];
            }
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'CommonValue': "CommonValue"
    }],
    'PfNum': [function (_0x3b0355, _0x340acb, _0x37bf5e) {
      'use strict';
  
      cc._RF.push(_0x340acb, '9bd6b8Uuv1BCYI9pzrwWETt', "PfNum");
      var _0x358bf1 = _0x3b0355("CommonEnum");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this._type = _0x358bf1.Enum_Num.Blood;
          this._anchor = cc.v2(0.5, 0.5);
          this._diffX = 0x0;
          this.m_signOffsetY = 0x5;
          this._add_after = false;
          this._sem_diffY = 0x0;
          this.g_diffY = 0x0;
          this.add_diffY = 0x0;
          this.sub_diffY = 0x0;
          this._width = 0x0;
          this._height = 0x0;
          this._value = 0x0;
          this._atlas = null;
          this._path = '';
          this.numNode = null;
          this._color = cc.Color.WHITE;
          Object.defineProperty(this, "color", {
            'set': function (_0x32f348) {
              this._color = _0x32f348;
              var _0x188555 = this.node.children;
              for (var _0x557c2d = 0x0; _0x557c2d < _0x188555.length; _0x557c2d++) {
                var _0x391abb = _0x188555[_0x557c2d];
                _0x391abb.color = _0x32f348;
                var _0x54a324 = _0x391abb.children;
                for (var _0x560b7d = 0x0; _0x560b7d < _0x54a324.length; _0x560b7d++) {
                  _0x54a324[_0x560b7d].color = _0x32f348;
                }
              }
            },
            'enumerable': true,
            'configurable': true
          });
          Object.defineProperty(this, "value", {
            'get': function () {
              return this._value;
            },
            'enumerable': true,
            'configurable': true
          });
          Object.defineProperty(this, "size", {
            'get': function () {
              return cc.size(this._width, this._height);
            },
            'enumerable': true,
            'configurable': true
          });
        },
        'setParam': function (_0x40cf10, _0x25f14d, _0x11cda3, _0x1acab1) {
          this.dict = {};
          this._type = _0x40cf10;
          this._anchor = _0x25f14d;
          this._diffX = _0x11cda3;
          this._path = 'n_' + this._type + '_';
          this._atlas = _0x1acab1;
          this.numNode = new cc.Node();
          this.node.addChild(this.numNode);
          for (var _0x4011e3 = 0x0; _0x4011e3 < 0xa; _0x4011e3++) {
            this.dict[_0x4011e3.toString()] = this._path + _0x4011e3;
          }
          var _0x443fad = 'a'.charCodeAt(0x0);
          for (_0x4011e3 = 0x0; _0x4011e3 < 0x1a; _0x4011e3++) {
            var _0x3902de = String.fromCharCode(_0x443fad + _0x4011e3);
            this.dict[_0x3902de] = this._path + _0x3902de;
          }
          this.dict['.'] = this._path + 'pt';
          this.dict.k = this._path + 'k';
          this.dict['+'] = this._path + "add";
          this.dict['-'] = this._path + "sub";
        },
        'f_set_sem_diffY': function (_0x47521d) {
          this._sem_diffY = _0x47521d;
        },
        'setString': function (_0x572aef) {
          this._width = 0x0;
          this._height = 0x0;
          if (this._atlas) {
            for (var _0x39ff14 = 0x0; _0x39ff14 < _0x572aef.length; _0x39ff14++) {
              if (_0x3d1928 = this.numNode.children[_0x39ff14]) {
                _0x3d1928.opacity = 0xff;
              } else {
                (_0x3d1928 = new cc.Node()).addComponent(cc.Sprite);
                _0x3d1928.setAnchorPoint(0x0, 0x0);
                _0x3d1928.color = _0x572aef;
                this.numNode.addChild(_0x3d1928);
              }
              var _0x351c19 = 0x0;
              var _0x516b46 = _0x572aef[_0x39ff14];
              var _0x1ef8c = this.dict[_0x516b46];
              if ('-' == _0x516b46) {
                _0x351c19 += this.sub_diffY;
              }
              _0x3d1928.getComponent(cc.Sprite).spriteFrame = this._atlas.getSpriteFrame(_0x1ef8c);
              var _0x19b1a7 = _0x3d1928.getContentSize();
              _0x3d1928.x = this._width + this._diffX;
              _0x3d1928.y = _0x351c19;
              this._width = this._width + this._diffX + _0x19b1a7.width;
              this._height = _0x19b1a7.height;
            }
            for (_0x39ff14 = this.numNode.childrenCount - 0x1; _0x39ff14 >= _0x572aef.length; _0x39ff14--) {
              var _0x3d1928;
              (_0x3d1928 = this.numNode.children[_0x39ff14]).opacity = 0x0;
            }
            var _0x18be4d = -this._width * this._anchor.x;
            var _0x16892e = -this._height * this._anchor.y;
            this.numNode.position = cc.v2(_0x18be4d, _0x16892e);
          }
        },
        'setNum': function (_0x54ab85) {
          this._value = _0x54ab85;
          this.setString(_0x54ab85.toString());
        }
      });
      cc._RF.pop();
    }, {
      'CommonEnum': "CommonEnum"
    }],
    'PfTip': [function (_0x3003aa, _0x322071, _0x36a278) {
      'use strict';
  
      cc._RF.push(_0x322071, 'c90ecIvwoxCCKVuRESxOQWD', "PfTip");
      var _0x344e4a = _0x3003aa("CommonFunc");
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'label_font': cc.Label,
          'sp_font': cc.Sprite
        },
        'onLoad': function () {},
        'start': function () {
          _0x344e4a.GFunc.adjustScreen(this.node);
        },
        'show': function (_0x4c23e1, _0x5b88d4, _0x4beffc, _0x34bf0e) {
          if (undefined === _0x34bf0e) {
            _0x34bf0e = null;
          }
          this.node.y = null == _0x34bf0e ? 0x0 : -0x96;
          if (_0x4c23e1.length > 0x0) {
            this.label_font.node.active = true;
            this.sp_font.node.active = false;
            this.label_font.string = _0x4c23e1;
          } else {
            this.label_font.node.active = false;
            this.sp_font.node.active = true;
            _0x344e4a.GFunc.changeAtlasSprite(_0x5b88d4, this.sp_font, _0x4beffc);
          }
          var _0x2d7bb6 = cc.moveBy(1.5, cc.v2(0x0, 0x64));
          var _0x1fca07 = cc.fadeOut(0.2);
          var _0x3b817e = cc.sequence(_0x2d7bb6, _0x1fca07, cc.removeSelf());
          this.node.runAction(_0x3b817e);
        }
      });
      cc._RF.pop();
    }, {
      'CommonFunc': "CommonFunc"
    }],
    'PlayerAnimComponent': [function (_0x46d864, _0x3faae1, _0x528a10) {
      'use strict';
  
      cc._RF.push(_0x3faae1, "6ec4cAezphIXakTEIo8j3pD", 'PlayerAnimComponent');
      var _0x3c99cd = _0x46d864("PfFrameAnim");
      var _0x5302d5 = _0x46d864("CommonValue");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.uiNode = null;
          this.xuliFrameAnim = null;
          this.xuliCall = null;
        },
        'init': function (_0x5eba6a) {
          this.uiNode = _0x5eba6a;
          var _0x2c4552 = this;
          var _0x442ea9 = cc.instantiate(_0x5302d5.GValue.pf_anim);
          _0x442ea9.scale = 0x2;
          this.xuliFrameAnim = _0x442ea9.getComponent(_0x3c99cd);
          this.xuliFrameAnim.init(_0x5302d5.GValue.Atlas_Game, 'adw0_', 0x6, 0.02, function () {
            _0x2c4552.onXuliAnimFinished();
          });
          this.uiNode.addChild(_0x442ea9);
        },
        'onXuliAnimFinished': function () {
          if (this.xuliCall) {
            this.xuliCall();
          }
          this.xuliFrameAnim.stop();
        },
        'playXuliAnim': function (_0xcabf1e) {
          this.xuliCall = _0xcabf1e;
          this.xuliFrameAnim.reset();
        }
      });
      cc._RF.pop();
    }, {
      'CommonValue': "CommonValue",
      'PfFrameAnim': "PfFrameAnim"
    }],
    'PlayerCollisionEnemyComponent': [function (_0x426ef6, _0x2bdbaf, _0x45c235) {
      'use strict';
  
      cc._RF.push(_0x2bdbaf, "2fea4JpduRHe4yF3vKci+nn", "PlayerCollisionEnemyComponent");
      var _0x13e7d2 = _0x426ef6("CommonValue");
      var _0x333800 = _0x426ef6("EntityEnemy");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.player = null;
          this.enemys = [];
          this.radius = 0x0;
        },
        'init': function (_0x406df4) {
          this.player = _0x406df4;
          this.enemys = _0x13e7d2.GValue.EntityWorld.Enemys;
          this.radius = 0x14;
        },
        'updateGameLogic': function (_0x857e88) {
          if (!this.player.isDead && !this.player.invincible) {
            var _0x1a2569 = false;
            var _0x6cec04 = this.player.getPositionForMap();
            var _0x5ca5be = 0x0;
            for (var _0x44aeb5 = this.enemys; _0x5ca5be < _0x44aeb5.length; _0x5ca5be++) {
              var _0x430e2f = (_0x10dadf = _0x44aeb5[_0x5ca5be]).radius + this.radius;
              var _0x3568f1 = cc.rect(_0x6cec04.x - _0x430e2f, _0x6cec04.y - _0x430e2f, 0x2 * _0x430e2f, 0x2 * _0x430e2f);
              var _0x341b46 = _0x10dadf.node.position;
              if (_0x3568f1.contains(_0x341b46) && _0x6cec04.sub(_0x341b46).mag() <= _0x430e2f) {
                this.node.emit("die", _0x10dadf);
                _0x1a2569 = true;
                break;
              }
            }
            if (!_0x1a2569) {
              _0x6cec04 = cc.v2(0x0, 0x0);
              for (var _0x237646 in _0x13e7d2.GValue.EntityWorld.SnakeEnemys) {
                var _0x5329f0 = _0x13e7d2.GValue.EntityWorld.SnakeEnemys[_0x237646];
                if (_0x5329f0) {
                  var _0x204386 = _0x5329f0.list_snake;
                  for (var _0x3d14e7 = 0x0; _0x3d14e7 < _0x204386.length; _0x3d14e7++) {
                    var _0x36d7d8 = _0x204386[_0x3d14e7];
                    _0x430e2f = _0x5329f0.dic_radius[_0x3d14e7] + this.radius;
                    _0x3568f1 = cc.rect(_0x6cec04.x - _0x430e2f, _0x6cec04.y - _0x430e2f, 0x2 * _0x430e2f, 0x2 * _0x430e2f);
                    _0x341b46 = _0x36d7d8.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
                    _0x341b46 = this.node.convertToNodeSpaceAR(_0x341b46);
                    if (_0x3568f1.contains(_0x341b46) && _0x6cec04.sub(_0x341b46).mag() <= _0x430e2f) {
                      _0x13e7d2.GValue.EntityWorld.player.dieBySnake();
                      _0x1a2569 = true;
                      break;
                    }
                  }
                }
              }
            }
            if (!_0x1a2569) {
              _0x6cec04 = cc.v2(0x0, 0x0);
              for (var _0x237646 in _0x13e7d2.GValue.EntityWorld.CircleEnemys) {
                var _0x369ef8 = _0x13e7d2.GValue.EntityWorld.CircleEnemys[_0x237646];
                if (_0x369ef8) {
                  var _0x1e65d5 = _0x369ef8.dic_node;
                  for (var _0xa6d41c in _0x1e65d5) {
                    var _0x10dadf;
                    if ((_0x10dadf = (_0x36d7d8 = _0x1e65d5[_0xa6d41c]).getComponent(_0x333800)) && (_0x430e2f = _0x10dadf.radius + this.radius, _0x3568f1 = cc.rect(_0x6cec04.x - _0x430e2f, _0x6cec04.y - _0x430e2f, 0x2 * _0x430e2f, 0x2 * _0x430e2f), _0x341b46 = _0x36d7d8.convertToWorldSpaceAR(cc.v2(0x0, 0x0)), _0x341b46 = this.node.convertToNodeSpaceAR(_0x341b46), _0x3568f1.contains(_0x341b46) && _0x6cec04.sub(_0x341b46).mag() <= _0x430e2f)) {
                      this.node.emit("die", _0x10dadf);
                      _0x1a2569 = true;
                      break;
                    }
                  }
                }
              }
            }
            if (!_0x1a2569) {
              _0x6cec04 = cc.v2(0x0, 0x0);
              for (var _0x237646 in _0x13e7d2.GValue.EntityWorld.FireEnemys) {
                var _0x2992a9 = _0x13e7d2.GValue.EntityWorld.FireEnemys[_0x237646];
                if (!_0x2992a9.isDead && _0x2992a9) {
                  _0x36d7d8 = _0x2992a9.node_collider;
                  _0x430e2f = _0x2992a9.radius + this.radius;
                  _0x3568f1 = cc.rect(_0x6cec04.x - _0x430e2f, _0x6cec04.y - _0x430e2f, 0x2 * _0x430e2f, 0x2 * _0x430e2f);
                  _0x341b46 = _0x36d7d8.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
                  _0x341b46 = this.node.convertToNodeSpaceAR(_0x341b46);
                  if (_0x3568f1.contains(_0x341b46) && _0x6cec04.sub(_0x341b46).mag() <= _0x430e2f) {
                    _0x13e7d2.GValue.EntityWorld.player.dieBySnake();
                    _0x1a2569 = true;
                    break;
                  }
                  if (!_0x1a2569) {
                    var _0x4328c7 = _0x2992a9.list_hand_collider;
                    for (_0x3d14e7 = 0x0; _0x3d14e7 < _0x4328c7.length; _0x3d14e7++) {
                      var _0x279a70 = _0x4328c7[_0x3d14e7];
                      var _0x449e47 = _0x279a70.getComponent(cc.CircleCollider);
                      if (_0x449e47) {
                        var _0x48848b = _0x449e47.radius + this.radius;
                        var _0x764358 = cc.rect(_0x6cec04.x - _0x48848b, _0x6cec04.y - _0x48848b, 0x2 * _0x48848b, 0x2 * _0x48848b);
                        var _0x1638d0 = _0x279a70.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
                        _0x1638d0 = this.node.convertToNodeSpaceAR(_0x1638d0);
                        if (_0x764358.contains(_0x1638d0) && _0x6cec04.sub(_0x1638d0).mag() <= _0x48848b) {
                          _0x13e7d2.GValue.EntityWorld.player.dieBySnake();
                          _0x1a2569 = true;
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
            if (!_0x1a2569) {
              _0x6cec04 = cc.v2(0x0, 0x0);
              for (var _0x1b51ff in _0x13e7d2.GValue.DicBossEnemy) {
                var _0x155c44 = _0x13e7d2.GValue.DicBossEnemy[_0x1b51ff];
                for (var _0x237646 in _0x155c44) if (_0x155c44[_0x237646].isPlayerDie(this.node, _0x6cec04, this.radius)) {
                  _0x13e7d2.GValue.EntityWorld.player.dieBySnake();
                  _0x1a2569 = true;
                  break;
                }
                if (_0x1a2569) {
                  break;
                }
              }
            }
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonValue': "CommonValue",
      'EntityEnemy': "EntityEnemy"
    }],
    'PlayerDWElectricityComponent': [function (_0x5aaf08, _0x421014, _0xed1736) {
      'use strict';
  
      cc._RF.push(_0x421014, 'ef1c17YoiBM3Zg1/2O7XG6U', 'PlayerDWElectricityComponent');
      var _0x640fdb = _0x5aaf08("CommonValue");
      var _0x4bc7b6 = _0x5aaf08("GameData");
      var _0x1c70bf = _0x5aaf08('Types');
      var _0x4dd4d5 = _0x5aaf08('Tools');
      _0x5aaf08("PlayerDeputyWeaponBase");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.uiNode = null;
          this.atkNode = null;
          this.knives = [];
          this.heroRotate = null;
          this.duration = 0x0;
          this.atkRadius = 0x0;
          this.atkCount = 0x0;
          this.atkHurt = 0x0;
          this.curAtkHurt = 0x0;
          this.time = 0x0;
        },
        'init': function (_0x346d00) {
          this.followEntity = _0x346d00;
          this.initUI();
          this.heroRotate = _0x4dd4d5.DYTools.addScript(this.uiNode, "CHRotate");
        },
        'initUI': function () {
          this.uiNode = new cc.Node();
          this.node.addChild(this.uiNode);
          this.atkNode = new cc.Node();
          this.node.addChild(this.atkNode);
          var _0x22b774 = new cc.Node();
          this.uiNode.addChild(_0x22b774, -0x1);
          _0x22b774.addComponent(cc.Sprite).spriteFrame = _0x640fdb.GValue.Atlas_Game.getSpriteFrame("dw5_0");
          var _0x2ee69a = _0x640fdb.GValue.EntityWorld.addEntitySys.addDWKnife(_0x4bc7b6.TData.HWeaponCountIn, _0x1c70bf.DWType.Electricity);
          var _0x4f43af = cc.v2(0x0, _0x4bc7b6.TData.HeroRaduisIn);
          var _0x3d0030 = 0x168 / _0x2ee69a.length;
          for (var _0x3c3728 = 0x0; _0x3c3728 < _0x2ee69a.length; _0x3c3728++) {
            var _0x298985 = _0x2ee69a[_0x3c3728].node;
            var _0x339e6c = _0x3d0030 * _0x3c3728;
            _0x298985.parent = this.uiNode;
            _0x298985.angle = _0x339e6c;
            _0x298985.position = _0x4f43af.rotate(cc.misc.degreesToRadians(-_0x339e6c));
            this.knives.push(_0x298985);
          }
        },
        'updateGameLogic': function (_0x3f5ede) {
          var _0x3da2e2 = this;
          this.heroRotate.updateGameLogic(_0x3f5ede);
          this.time += _0x3f5ede;
          if (this.time > this.duration) {
            var _0x2654a6 = this.node.convertToWorldSpaceAR(cc.Vec2.ZERO);
            var _0x4cc976 = _0x640fdb.GValue.EntityWorld.getRangeEnemys(_0x2654a6, this.atkRadius);
            if ((_0x4cc976 = _0x640fdb.GValue.EntityWorld.getFarthestEnemys(_0x4cc976, _0x2654a6, 0x1)).length > 0x0) {
              var _0x148607 = _0x4cc976[0x0];
              this.followEntity.player.playEleAct(function () {
                _0x148607.node.emit("hurt", 0x2, _0x3da2e2.curAtkHurt, function () {});
              });
            } else {
              this.time -= 0.5;
            }
          }
        },
        'checkEleTarget': function (_0x328235) {
          var _0x38bb98 = _0x328235.convertToWorldSpaceAR(cc.Vec2.ZERO);
          var _0x4af736 = _0x640fdb.GValue.EntityWorld.getRangeEnemys(_0x38bb98, this.atkRadius);
          _0x4af736 = _0x640fdb.GValue.EntityWorld.getFarthestEnemys(_0x4af736, _0x38bb98, 0x1);
        },
        'setRotateSpeed': function (_0x5364de) {
          if (this.heroRotate) {
            this.heroRotate.setRotateSpeed(_0x5364de);
          }
        },
        'setHurtRatio': function (_0xd97f66) {
          this.curAtkHurt = this.atkHurt * _0xd97f66;
        },
        'removeSelf': function () {
          this.node.removeComponent(this.heroRotate);
          this.uiNode.removeFromParent();
          this.atkNode.removeFromParent();
          this.knives.splice(0x0);
          this.destroy();
        }
      });
      cc._RF.pop();
    }, {
      'CommonValue': "CommonValue",
      'GameData': "GameData",
      'PlayerDeputyWeaponBase': "PlayerDeputyWeaponBase",
      'Tools': 'Tools',
      'Types': 'Types'
    }],
    'PlayerDWFireComponent': [function (_0x52835a, _0x254587, _0xcbf022) {
      'use strict';
  
      cc._RF.push(_0x254587, '9ab11hl3zBJZITeNlZYUvVS', "PlayerDWFireComponent");
      var _0x4b8c4b = _0x52835a("Tools");
      var _0x272cdf = _0x52835a("CommonValue");
      var _0x176736 = _0x52835a("GameData");
      var _0x51f01f = _0x52835a('CommonFunc');
      var _0x4332e0 = _0x52835a("PlayerDWNormalBase");
      cc.Class({
        'extends': _0x4332e0,
        'properties': {},
        'ctor': function () {
          this.landKnives = [];
          this.knivesAcce = [];
          this.knivesFinalPos = [];
        },
        'init': function (_0x15af9a, _0x24a9b6, _0x3cd696) {
          if (undefined === _0x3cd696) {
            _0x3cd696 = false;
          }
          _0x4332e0.prototype.init.call(this, _0x15af9a, _0x24a9b6);
          this.heroRotate = _0x4b8c4b.DYTools.addScript(this.node, 'CHRotate');
          if (!_0x3cd696) {
            this.initKnives();
          }
        },
        'updateGameLogic': function (_0x91baee) {
          _0x4332e0.prototype.updateGameLogic.call(this, _0x91baee);
          if (this.landKnives.length > 0x0) {
            _0x91baee *= _0x272cdf.GValue.PauseSlowRatio;
            for (var _0x53e019 = 0x0; _0x53e019 < this.landKnives.length; _0x53e019++) {
              var _0x5da64a = this.landKnives[_0x53e019];
              var _0x55aa34 = this.knivesFinalPos[_0x53e019];
              if (_0x55aa34.x === _0x5da64a.position.x && _0x55aa34.y === _0x5da64a.position.y) {
                return;
              }
              var _0x1887a3 = _0x55aa34.sub(_0x5da64a.position);
              var _0x6b07c2 = _0x1887a3.mag();
              var _0x4b4d9f = 0x1f4 * _0x91baee;
              this.knivesAcce[_0x53e019] += 0x1e * _0x91baee;
              if ((_0x4b4d9f += this.knivesAcce[_0x53e019]) < _0x6b07c2) {
                _0x5da64a.position = _0x5da64a.position.add(_0x1887a3.mul(_0x4b4d9f / _0x6b07c2));
              } else {
                _0x5da64a.position = _0x55aa34;
                this.landKnives.splice(_0x53e019, 0x1);
                this.knivesFinalPos.splice(_0x53e019, 0x1);
                this.knivesAcce.splice(_0x53e019, 0x1);
                _0x53e019--;
              }
            }
          }
        },
        'getFinalPosition': function (_0x293a8e) {
          var _0x2f1fdf = this.knives.indexOf(_0x293a8e);
          var _0xe32709 = cc.v2(0x0, _0x176736.TData.HeroRaduisIn);
          var _0x4605fe = 0x168 / this.knives.length * _0x2f1fdf;
          _0x293a8e.angle = _0x4605fe;
          _0x51f01f.GFunc.changeParent(_0x293a8e, this.node);
          return _0xe32709.rotate(cc.misc.degreesToRadians(-_0x4605fe));
        },
        'addKnife': function (_0x16ba06) {
          this.knives.push(_0x16ba06);
          this.landKnives.push(_0x16ba06);
          this.knivesAcce.push(0x0);
          this.knivesFinalPos.splice(0x0);
          for (var _0xa9c900 = 0x0; _0xa9c900 < this.landKnives.length; _0xa9c900++) {
            this.knivesFinalPos.push(this.getFinalPosition(this.landKnives[_0xa9c900]));
          }
          var _0xa49e4e = cc.v2(0x0, _0x176736.TData.HeroRaduisIn);
          var _0x550935 = 0x168 / this.knives.length;
          for (_0xa9c900 = 0x0; _0xa9c900 < this.knives.length - this.landKnives.length; _0xa9c900++) {
            var _0x53f749 = this.knives[_0xa9c900];
            var _0x10d329 = _0x550935 * _0xa9c900;
            _0x53f749.parent = this.node;
            _0x53f749.angle = _0x10d329;
            _0x53f749.position = _0xa49e4e.rotate(cc.misc.degreesToRadians(-_0x10d329));
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonFunc': "CommonFunc",
      'CommonValue': 'CommonValue',
      'GameData': "GameData",
      'PlayerDWNormalBase': "PlayerDWNormalBase",
      'Tools': "Tools"
    }],
    'PlayerDWIceComponent': [function (_0x261341, _0x2e5a54, _0x83556b) {
      'use strict';
  
      cc._RF.push(_0x2e5a54, "a8989C9zk9P9JNgq676fScF", "PlayerDWIceComponent");
      var _0x489a66 = _0x261341('PlayerDWNormalBase');
      cc.Class({
        'extends': _0x489a66,
        'properties': {},
        'ctor': function () {},
        'init': function (_0x5e8a10, _0x59ef61) {
          _0x489a66.prototype.init.call(this, _0x5e8a10, _0x59ef61);
          this.initKnives();
        }
      });
      cc._RF.pop();
    }, {
      'PlayerDWNormalBase': "PlayerDWNormalBase"
    }],
    'PlayerDWKnifeComponent': [function (_0x341a0e, _0x4f45ed, _0x504480) {
      'use strict';
  
      cc._RF.push(_0x4f45ed, "37116DMqHpJXo8LPnp6q7V/", 'PlayerDWKnifeComponent');
      var _0x52b0f4 = _0x341a0e('Tools');
      var _0x573bd4 = _0x341a0e("CommonValue");
      var _0xdd94c8 = _0x341a0e("GameData");
      var _0x382b97 = _0x341a0e("CommonFunc");
      var _0x302fda = _0x341a0e("PlayerDWNormalBase");
      cc.Class({
        'extends': _0x302fda,
        'properties': {},
        'ctor': function () {
          this.landKnives = [];
          this.knivesAcce = [];
          this.knivesFinalPos = [];
        },
        'init': function (_0x49e53b, _0x53b14b, _0x38d897) {
          if (undefined === _0x38d897) {
            _0x38d897 = false;
          }
          _0x302fda.prototype.init.call(this, _0x49e53b, _0x53b14b);
          this.heroRotate = _0x52b0f4.DYTools.addScript(this.node, 'CHRotate');
          if (!_0x38d897) {
            this.initKnives();
          }
        },
        'updateGameLogic': function (_0x51a6ae) {
          _0x302fda.prototype.updateGameLogic.call(this, _0x51a6ae);
          if (this.landKnives.length > 0x0) {
            _0x51a6ae *= _0x573bd4.GValue.PauseSlowRatio;
            for (var _0x30f101 = 0x0; _0x30f101 < this.landKnives.length; _0x30f101++) {
              var _0x4d4823 = this.landKnives[_0x30f101];
              var _0x54268 = this.knivesFinalPos[_0x30f101];
              if (_0x54268.x === _0x4d4823.position.x && _0x54268.y === _0x4d4823.position.y) {
                return;
              }
              var _0x598f79 = _0x54268.sub(_0x4d4823.position);
              var _0x362c1d = _0x598f79.mag();
              var _0x53834d = 0x1f4 * _0x51a6ae;
              this.knivesAcce[_0x30f101] += 0x1e * _0x51a6ae;
              if ((_0x53834d += this.knivesAcce[_0x30f101]) < _0x362c1d) {
                _0x4d4823.position = _0x4d4823.position.add(_0x598f79.mul(_0x53834d / _0x362c1d));
              } else {
                _0x4d4823.position = _0x54268;
                this.landKnives.splice(_0x30f101, 0x1);
                this.knivesFinalPos.splice(_0x30f101, 0x1);
                this.knivesAcce.splice(_0x30f101, 0x1);
                _0x30f101--;
              }
            }
          }
        },
        'getFinalPosition': function (_0xa2b1c3) {
          var _0xc0c2e = this.knives.indexOf(_0xa2b1c3);
          var _0x370cb0 = cc.v2(0x0, _0xdd94c8.TData.HeroRaduisIn);
          var _0x2493ef = 0x168 / this.knives.length * _0xc0c2e;
          _0xa2b1c3.angle = _0x2493ef;
          _0x382b97.GFunc.changeParent(_0xa2b1c3, this.node);
          return _0x370cb0.rotate(cc.misc.degreesToRadians(-_0x2493ef));
        },
        'addKnife': function (_0x184e49) {
          this.knives.push(_0x184e49);
          this.landKnives.push(_0x184e49);
          this.knivesAcce.push(0x0);
          this.knivesFinalPos.splice(0x0);
          for (var _0xf5254d = 0x0; _0xf5254d < this.landKnives.length; _0xf5254d++) {
            this.knivesFinalPos.push(this.getFinalPosition(this.landKnives[_0xf5254d]));
          }
          var _0x279f5c = cc.v2(0x0, _0xdd94c8.TData.HeroRaduisIn);
          var _0xa813c4 = 0x168 / this.knives.length;
          for (_0xf5254d = 0x0; _0xf5254d < this.knives.length - this.landKnives.length; _0xf5254d++) {
            var _0x530ed9 = this.knives[_0xf5254d];
            var _0x5a389d = _0xa813c4 * _0xf5254d;
            _0x530ed9.parent = this.node;
            _0x530ed9.angle = _0x5a389d;
            _0x530ed9.position = _0x279f5c.rotate(cc.misc.degreesToRadians(-_0x5a389d));
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonFunc': "CommonFunc",
      'CommonValue': 'CommonValue',
      'GameData': 'GameData',
      'PlayerDWNormalBase': 'PlayerDWNormalBase',
      'Tools': "Tools"
    }],
    'PlayerDWLaserComponent': [function (_0x140b67, _0x27463a, _0x4d64eb) {
      'use strict';
  
      cc._RF.push(_0x27463a, "5d9533tMMxDpodb2AieMT7h", "PlayerDWLaserComponent");
      var _0x20257d = _0x140b67("PlayerDeputyWeaponBase");
      var _0x48444e = _0x140b67('CommonValue');
      var _0x563443 = _0x140b67("Tools");
      var _0x3b9097 = _0x140b67("GameData");
      var _0x411d1d = _0x140b67("CommonConfig");
      var _0x24634b = _0x140b67("LaserComponent");
      var _0x2309ac = _0x140b67("Types");
      var _0x5c5385 = _0x140b67("CommonAudio");
      cc.Class({
        'extends': _0x20257d,
        'properties': {},
        'ctor': function () {
          this.radius = 0x0;
          this.knives = [];
          this.atkEnemys = [];
          this.lightList = [];
          this.durationList = [];
          this.timeList = [];
          this.atkCount = 0x0;
          this.atkDuration = 0.1;
          this.atkTime = 0x0;
          this.atkHurt = 0x0;
          this.curAtkHurt = 0x0;
          this.lightPool = null;
          this.lightUIList = [];
          this.strongNode = null;
        },
        'init': function (_0x597e2b) {
          this.followEntity = _0x597e2b;
          this.radius = 0x44;
          var _0x4b33b8 = null;
          if (_0x48444e.GValue.ArmsSub_TryFinish > 0x0 && _0x3b9097.TData.getCurSubFun() == _0x48444e.GValue.ArmsSub_TryFinish) {
            var _0x2dd158 = _0x411d1d.GConfig.getLevelData(_0x3b9097.TData.getStage());
            _0x4b33b8 = _0x411d1d.GConfig.getPropertyArmsSubData(_0x48444e.GValue.ArmsSub_TryFinish, _0x2dd158.subTryLv);
          } else {
            _0x4b33b8 = _0x411d1d.GConfig.getPropertyData_Sub(_0x3b9097.TData.getCurSubFun());
          }
          this.atkHurt = _0x4b33b8.atk;
          var _0x48c436 = _0x563443.DYTools.stringToNumber(_0x4b33b8["var"], _0x411d1d.GConfig.SeparatorII);
          this.atkRadius = _0x48c436[0x0];
          this.atkCount = _0x48c436[0x1];
          this.atkTime = _0x48c436[0x2];
          this.atkHurt = _0x48c436[0x3] * this.atkDuration;
          this.curAtkHurt = this.atkHurt;
          this.initUI();
          this.heroRotate = _0x563443.DYTools.addScript(this.uiNode, 'CHRotate');
        },
        'initUI': function () {
          this.uiNode = new cc.Node();
          this.node.addChild(this.uiNode);
          this.atkNode = new cc.Node();
          this.node.addChild(this.atkNode);
          var _0x330833 = new cc.Node();
          this.uiNode.addChild(_0x330833, -0x1);
          _0x330833.addComponent(cc.Sprite).spriteFrame = _0x48444e.GValue.Atlas_Game.getSpriteFrame("dw2_0");
          this.lightPool = new cc.NodePool();
          for (var _0x19e536 = 0x0; _0x19e536 < this.atkCount; _0x19e536++) {
            (_0x330833 = new cc.Node()).anchorY = 0x0;
            var _0x1abf11 = _0x563443.DYTools.addScript(_0x330833, _0x24634b);
            _0x1abf11.init(this.followEntity, _0x3b9097.TData.getCurSubFun());
            this.lightPool.put(_0x330833);
            this.lightUIList.push(_0x1abf11);
          }
          var _0x5aad89 = _0x48444e.GValue.EntityWorld.addEntitySys.addDWKnife(_0x3b9097.TData.HWeaponCountIn, _0x2309ac.DWType.Laser);
          var _0x54d87c = 0x168 / _0x5aad89.length;
          var _0x25d927 = cc.v2(0x0, 0x25);
          for (_0x19e536 = 0x0; _0x19e536 < _0x5aad89.length; _0x19e536++) {
            var _0x4e7fe5 = _0x5aad89[_0x19e536].node;
            var _0x52c130 = _0x54d87c * _0x19e536;
            _0x4e7fe5.parent = this.uiNode;
            _0x4e7fe5.angle = _0x52c130;
            _0x4e7fe5.position = _0x25d927.rotate(cc.misc.degreesToRadians(-_0x52c130));
            this.knives.push(_0x4e7fe5);
          }
        },
        'setRotateSpeed': function (_0xf2576f) {
          if (this.heroRotate) {
            this.heroRotate.setRotateSpeed(_0xf2576f);
          }
        },
        'setHurtRatio': function (_0x49bacf) {
          this.curAtkHurt = this.atkHurt * _0x49bacf;
        },
        'updateGameLogic': function (_0x524ffc) {
          this.heroRotate.updateGameLogic(_0x524ffc);
          if (this.strongNode) {
            this.strongNode.angle = this.uiNode.angle;
          }
          for (var _0x2a0639 = this.atkEnemys.length - 0x1; _0x2a0639 >= 0x0; _0x2a0639--) {
            if ((_0x15b7f3 = this.atkEnemys[_0x2a0639]).isDead) {
              this.enemyRemoveLaser(_0x15b7f3);
              this.atkEnemys.splice(_0x2a0639, 0x1);
              this.durationList.splice(_0x2a0639, 0x1);
              this.timeList.splice(_0x2a0639, 0x1);
              var _0x557912 = this.lightList[_0x2a0639];
              this.lightPool.put(_0x557912.node);
              this.lightList.splice(_0x2a0639, 0x1);
            } else {
              var _0x11c6b4 = cc.Vec2.ZERO;
              _0x11c6b4 = _0x15b7f3.isSnake ? _0x15b7f3.node_tail.convertToWorldSpaceAR(cc.Vec2.ZERO) : _0x15b7f3.isFire ? _0x15b7f3.node_collider.convertToWorldSpaceAR(cc.Vec2.ZERO) : _0x15b7f3.node.convertToWorldSpaceAR(cc.Vec2.ZERO);
              var _0x18ce2b = this.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
              _0x11c6b4 = _0x11c6b4.sub(_0x18ce2b);
              var _0x4f3046 = this.atkRadius + _0x15b7f3.radius;
              if (Math.abs(_0x11c6b4.x) > _0x4f3046 || Math.abs(_0x11c6b4.y) > _0x4f3046) {
                this.enemyRemoveLaser(_0x15b7f3);
                this.atkEnemys.splice(_0x2a0639, 0x1);
                this.durationList.splice(_0x2a0639, 0x1);
                this.timeList.splice(_0x2a0639, 0x1);
                _0x557912 = this.lightList[_0x2a0639];
                this.lightPool.put(_0x557912.node);
                this.lightList.splice(_0x2a0639, 0x1);
              } else if (this.timeList[_0x2a0639] >= this.atkTime) {
                this.enemyRemoveLaser(_0x15b7f3);
                this.atkEnemys.splice(_0x2a0639, 0x1);
                this.durationList.splice(_0x2a0639, 0x1);
                this.timeList.splice(_0x2a0639, 0x1);
                _0x557912 = this.lightList[_0x2a0639];
                this.lightPool.put(_0x557912.node);
                this.lightList.splice(_0x2a0639, 0x1);
              }
            }
          }
          if (this.atkEnemys.length < this.atkCount) {
            var _0x330308 = this.node.convertToWorldSpaceAR(cc.Vec2.ZERO);
            var _0x155e30 = _0x48444e.GValue.EntityWorld.getRangeEnemys(_0x330308, this.atkRadius);
            var _0x13af9e = 0x0;
            for (var _0x2dbc2f = _0x155e30 = _0x48444e.GValue.EntityWorld.getNeareastEnemys(_0x155e30, _0x330308, this.atkCount - this.atkEnemys.length); _0x13af9e < _0x2dbc2f.length; _0x13af9e++) {
              var _0x15b7f3 = _0x2dbc2f[_0x13af9e];
              if (!_0x563443.DYTools.arrContains(this.atkEnemys, _0x15b7f3)) {
                this.atkEnemys.push(_0x15b7f3);
                this.durationList.push(0xa);
                this.timeList.push(0x0);
                _0x557912 = this.lightPool.get();
                this.atkNode.addChild(_0x557912);
                this.lightList.push(_0x557912.getComponent(_0x24634b));
                _0x557912.opacity = 0x0;
              }
            }
          }
          for (_0x2a0639 = 0x0; _0x2a0639 < this.atkEnemys.length; _0x2a0639++) {
            this.durationList[_0x2a0639] = this.durationList[_0x2a0639] + _0x524ffc;
            this.timeList[_0x2a0639] += _0x524ffc;
            _0x15b7f3 = this.atkEnemys[_0x2a0639];
            var _0x1390f9 = (_0x557912 = this.lightList[_0x2a0639]).setEnemy(_0x15b7f3, this.radius);
            _0x557912.updateGameLogic(_0x524ffc);
            if (this.durationList[_0x2a0639] >= this.atkDuration) {
              this.durationList[_0x2a0639] = 0x0;
              if (_0x15b7f3.isSnake) {
                _0x15b7f3.laserAtkTail(this.curAtkHurt, _0x1390f9);
              } else if (_0x15b7f3.isFire) {
                _0x15b7f3.laserAttack(this.curAtkHurt, _0x1390f9);
              } else {
                _0x15b7f3.node.emit("hurt", 0x2, this.curAtkHurt);
              }
            }
          }
          if (this.atkEnemys.length > 0x0) {
            var _0x5e8320 = _0x5c5385.GAudio.soundIdDict[_0x5c5385.Enum_Audio.laserAtk];
            if (!_0x5e8320 || _0x5e8320 < 0x0) {
              _0x5c5385.GAudio.playSound(_0x5c5385.Enum_Audio.laserAtk, true);
            }
          } else {
            _0x5c5385.GAudio.stopSoundByName(_0x5c5385.Enum_Audio.laserAtk);
          }
        },
        'enemyRemoveLaser': function (_0x49ffbb) {
          if (!(_0x49ffbb.isSnake || _0x49ffbb.isFire)) {
            _0x49ffbb.removeAnim(_0x2309ac.EnemyAnim.HurtLaser);
          }
        },
        'enterStrong': function (_0x2cdd7f) {
          if (0x0 == _0x2cdd7f) {
            if (this.strongNode) {
              this.strongNode.removeFromParent();
              this.strongNode = null;
            }
          } else if (!this.strongNode) {
            this.strongNode = new cc.Node();
            this.node.addChild(this.strongNode, -0x1);
            this.strongNode.scale = 1.1;
            this.strongNode.addComponent(cc.Sprite).spriteFrame = _0x48444e.GValue.Atlas_Game.getSpriteFrame("strongDW");
          }
          var _0x242311 = 0x0;
          for (var _0xe365d5 = this.lightUIList; _0x242311 < _0xe365d5.length; _0x242311++) {
            _0xe365d5[_0x242311].enterStrong(_0x2cdd7f);
          }
        },
        'die': function () {
          for (var _0x301741 = 0x0; _0x301741 < this.atkEnemys.length; _0x301741++) {
            var _0x58953e = this.atkEnemys[_0x301741];
            this.enemyRemoveLaser(_0x58953e);
          }
          this.atkEnemys.splice(0x0);
        },
        'removeSelf': function () {
          this.node.removeComponent(this.heroRotate);
          this.uiNode.removeFromParent();
          this.atkNode.removeFromParent();
          this.lightPool.clear();
          this.knives.splice(0x0);
          this.destroy();
        }
      });
      cc._RF.pop();
    }, {
      'CommonAudio': "CommonAudio",
      'CommonConfig': "CommonConfig",
      'CommonValue': 'CommonValue',
      'GameData': "GameData",
      'LaserComponent': "LaserComponent",
      'PlayerDeputyWeaponBase': "PlayerDeputyWeaponBase",
      'Tools': "Tools",
      'Types': "Types"
    }],
    'PlayerDWNormalBase': [function (_0x329e3b, _0x333667, _0x56f36f) {
      'use strict';
  
      cc._RF.push(_0x333667, '4df4eiOg+lDfqyOaRVoIkqE', "PlayerDWNormalBase");
      var _0xbdc771 = _0x329e3b('PlayerDeputyWeaponBase');
      var _0x2f2441 = _0x329e3b("Tools");
      var _0x4c667a = _0x329e3b("CEntityKnife");
      var _0x52a1b4 = _0x329e3b("CommonValue");
      var _0x4f7c77 = _0x329e3b("GameData");
      var _0x35a45e = _0x329e3b("EntityDWKnife");
      cc.Class({
        'extends': _0xbdc771,
        'properties': {},
        'ctor': function () {
          this.knives = [];
          this.heroRotate = null;
          this.dwId = 0x0;
          this.strongNode = null;
        },
        'init': function (_0xb71f4c, _0xa9d4e5) {
          this.followEntity = _0xb71f4c;
          this.dwId = _0xa9d4e5;
          this.heroRotate = _0x2f2441.DYTools.addScript(this.node, "CHRotate");
        },
        'initKnives': function () {
          var _0x221443 = _0x52a1b4.GValue.EntityWorld.addEntitySys.addDWKnife(_0x4f7c77.TData.HWeaponCountIn, this.dwId);
          var _0x2fa007 = cc.v2(0x0, _0x4f7c77.TData.HeroRaduisIn);
          var _0x27ef36 = 0x168 / _0x221443.length;
          for (var _0x3da89c = 0x0; _0x3da89c < _0x221443.length; _0x3da89c++) {
            var _0x4abb9f = _0x221443[_0x3da89c].node;
            var _0x18c698 = _0x27ef36 * _0x3da89c;
            _0x4abb9f.parent = this.node;
            _0x4abb9f.angle = _0x18c698;
            _0x4abb9f.position = _0x2fa007.rotate(cc.misc.degreesToRadians(-_0x18c698));
            this.knives.push(_0x4abb9f);
          }
        },
        'updateGameLogic': function (_0x6022ed) {
          this.heroRotate.updateGameLogic(_0x6022ed);
        },
        'enterStrong': function (_0x212ab8) {
          _0xbdc771.prototype.enterStrong.call(this, _0x212ab8);
          if (0x0 == _0x212ab8) {
            if (this.strongNode) {
              this.strongNode.removeFromParent();
              this.strongNode = null;
            }
          } else if (!this.strongNode) {
            this.strongNode = new cc.Node();
            this.node.addChild(this.strongNode, 0x1);
            this.strongNode.scale = 1.1;
            this.strongNode.addComponent(cc.Sprite).spriteFrame = _0x52a1b4.GValue.Atlas_Game.getSpriteFrame("strongDW");
          }
        },
        'die': function () {
          var _0x48f3c8 = 0x0;
          for (var _0x32e0cd = this.knives; _0x48f3c8 < _0x32e0cd.length; _0x48f3c8++) {
            var _0xebbd41 = _0x32e0cd[_0x48f3c8].getComponent(_0x35a45e);
            if (_0xebbd41 && _0xebbd41.shadow) {
              _0xebbd41.shadow.active = false;
            }
          }
        },
        'revive': function () {
          var _0x181049 = 0x0;
          for (var _0x1f30b3 = this.knives; _0x181049 < _0x1f30b3.length; _0x181049++) {
            var _0x44cd23 = _0x1f30b3[_0x181049].getComponent(_0x4c667a);
            if (_0x44cd23 && _0x44cd23.shadow) {
              _0x44cd23.shadow.active = true;
            }
          }
        },
        'setRotateSpeed': function (_0x5d73f7) {
          _0xbdc771.prototype.setRotateSpeed.call(this, _0x5d73f7);
          this.heroRotate.setRotateSpeed(_0x5d73f7);
        },
        'setShadowOpacity': function (_0x31b7b9) {
          for (var _0xb30b52 = 0x0; _0xb30b52 < this.knives.length; _0xb30b52++) {
            this.knives[_0xb30b52].getComponent(_0x35a45e).shadow.opacity = _0x31b7b9;
          }
        },
        'removeSelf': function () {
          this.node.removeComponent(this.heroRotate);
          for (var _0x56cc39 = 0x0; _0x56cc39 < this.knives.length; _0x56cc39++) {
            this.knives[_0x56cc39].getComponent(_0x35a45e).shadow.removeFromParent();
            this.knives[_0x56cc39].removeFromParent();
          }
          this.knives.splice(0x0);
          this.destroy();
        }
      });
      cc._RF.pop();
    }, {
      'CEntityKnife': "CEntityKnife",
      'CommonValue': "CommonValue",
      'EntityDWKnife': 'EntityDWKnife',
      'GameData': "GameData",
      'PlayerDeputyWeaponBase': "PlayerDeputyWeaponBase",
      'Tools': "Tools"
    }],
    'PlayerDeputyWeaponBase': [function (_0x382574, _0x26dafd, _0x1a3241) {
      'use strict';
  
      cc._RF.push(_0x26dafd, "8aacdOuWG9Fs5PLbrBahmZb", "PlayerDeputyWeaponBase");
      var _0x129a5c = _0x382574("GameData");
      var _0x9a5e1a = _0x382574("CommonEnum");
      var _0x28e5b0 = _0x382574("CommonConfig");
      var _0xb68c7 = _0x382574("CommonValue");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.followEntity = null;
          this.rtSpeed = 0x0;
        },
        'enterStrong': function (_0x1bbbb9) {
          if (0x0 == _0x1bbbb9) {
            this.setRotateSpeed(-_0x129a5c.TData.HRotateSpeedIn);
            this.setHurtRatio(0x1);
          } else {
            this.setRotateSpeed(-_0x129a5c.TData.HRotateSpeedIn * _0xb68c7.GValue.StrongRT);
            this.setHurtRatio(Number(_0x28e5b0.GConfig.getGbData(_0x9a5e1a.Enum_Gb.StrongAtk)));
          }
        },
        'setHurtRatio': function (_0x2217fa) {},
        'setShadowOpacity': function (_0x4cb6a0) {},
        'setRotateSpeed': function (_0x50b93e) {
          this.rtSpeed = _0x50b93e;
        },
        'getKnives': function () {
          return [];
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': 'CommonConfig',
      'CommonEnum': "CommonEnum",
      'CommonValue': "CommonValue",
      'GameData': "GameData"
    }],
    'PlayerPickupComponent': [function (_0x414abc, _0xc9b323, _0x17d95a) {
      'use strict';
  
      cc._RF.push(_0xc9b323, '97661NhXrBDY70HDX5zgzEb', "PlayerPickupComponent");
      var _0x47a17c = _0x414abc("CommonValue");
      var _0x488a8a = _0x414abc("Tools");
      var _0x1aa897 = _0x414abc("Types");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this._entity = null;
          this._pickRadius = 0x0;
          this._pickRadiusSqr = 0x0;
        },
        'init': function (_0x3c8359) {
          this._entity = _0x3c8359;
        },
        'updateGameLoginc': function (_0x239a2e) {
          this._pickRadius = this._entity.radius + 0x14;
          this._pickRadiusSqr = this._pickRadius * this._pickRadius;
          var _0x2aba1f = 0x0;
          for (var _0x362c3c = _0x47a17c.GValue.EntityWorld.landKnifes; _0x2aba1f < _0x362c3c.length; _0x2aba1f++) {
            var _0x24c0bb = _0x362c3c[_0x2aba1f];
            var _0x38951e = _0x24c0bb.node.position.add(_0x47a17c.GValue.EntityWorld.mapMgr.mapTop.position).sub(this.node.position);
            if (Math.abs(_0x38951e.x) < this._pickRadius && Math.abs(_0x38951e.y) < this._pickRadius && _0x38951e.magSqr() < this._pickRadiusSqr) {
              _0x488a8a.DYTools.arrRemove(_0x47a17c.GValue.EntityWorld.landKnifes, _0x24c0bb);
              _0x24c0bb.removeDropUI();
              _0x24c0bb.node.emit("changeTag", this._entity.teamID);
              _0x24c0bb.node.emit("updateState", _0x1aa897.KnifeState.Capture);
              _0x24c0bb.node.emit("stopResetPos");
              _0x24c0bb.node.emit('changeKnifeAttackGroup', "knife");
              this.node.emit("addKnife", _0x24c0bb.node);
              _0x47a17c.GValue.EntityWorld.addKnife(_0x24c0bb);
            }
          }
        },
        'pickupAllKnives': function () {
          for (var _0x3376ae = _0x47a17c.GValue.EntityWorld.landKnifes.length - 0x1; _0x3376ae >= 0x0; _0x3376ae--) {
            var _0x2b96f6 = _0x47a17c.GValue.EntityWorld.landKnifes[_0x3376ae];
            _0x488a8a.DYTools.arrRemove(_0x47a17c.GValue.EntityWorld.landKnifes, _0x2b96f6);
            _0x2b96f6.removeDropUI();
            _0x2b96f6.node.emit("changeTag", this._entity.teamID);
            _0x2b96f6.node.emit("updateState", _0x1aa897.KnifeState.Capture);
            _0x2b96f6.node.emit("stopResetPos");
            _0x2b96f6.node.emit("changeKnifeAttackGroup", "knife");
            this.node.emit("addKnife", _0x2b96f6.node);
            _0x47a17c.GValue.EntityWorld.addKnife(_0x2b96f6);
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonValue': "CommonValue",
      'Tools': "Tools",
      'Types': "Types"
    }],
    'PlayerStateComponent': [function (_0x626ab2, _0x370d55, _0x310832) {
      'use strict';
  
      cc._RF.push(_0x370d55, '0a3ec2bT3dEzYa7p3duz64M', "PlayerStateComponent");
      var _0x59fa75 = _0x626ab2("Types");
      var _0x33a369 = _0x626ab2("CommonValue");
      var _0x9a61eb = _0x626ab2("CommonConfig");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this._player = null;
          this.state = _0x59fa75.HeroState.Normal;
        },
        'init': function (_0x64a6f) {
          this._player = _0x64a6f;
          this.state = _0x59fa75.HeroState.Normal;
          this.node.on("prop", this.getProp, this);
        },
        'updateGameLogic': function (_0x34a075) {
          if (!(_0x33a369.GValue.PropMgr.hasProp(_0x59fa75.PropType.Strong) || this.state != _0x59fa75.HeroState.StrongIII)) {
            this.state = _0x59fa75.HeroState.Normal;
            this.node.emit("updateState", this.state);
          }
        },
        'getProp': function (_0x1115fb) {
          var _0x4e76a7 = _0x1115fb.node.getComponent('EntityProp');
          if (_0x4e76a7) {
            _0x33a369.GValue.EntityWorld.removeProp(_0x4e76a7);
            switch (_0x4e76a7.propId) {
              case _0x59fa75.PropType.Strong:
                this.state = _0x59fa75.HeroState.StrongIII;
                this.node.emit("updateState", this.state);
                break;
              case _0x59fa75.PropType.Slow:
              case _0x59fa75.PropType.Gold:
            }
            _0x33a369.GValue.PropMgr.addProp(_0x4e76a7.propId);
            this.playGetPropAnim(_0x4e76a7.propId);
          }
        },
        'playGetPropAnim': function (_0x1435bf) {
          var _0x48896c = _0x9a61eb.GConfig.actionFrameTime;
          var _0x20d4f2 = this.node.getChildByName('blast');
          if (!_0x20d4f2) {
            (_0x20d4f2 = new cc.Node()).name = 'blast';
            _0x20d4f2.y = 0x46;
            this.node.addChild(_0x20d4f2);
          }
          var _0xa7d722 = new cc.Node();
          _0x20d4f2.addChild(_0xa7d722);
          _0xa7d722.addComponent(cc.Sprite).spriteFrame = _0x33a369.GValue.Atlas_Game.getSpriteFrame("prop_f_" + _0x1435bf);
          _0xa7d722.scale = 0.94;
          var _0x1cbcc0 = cc.moveTo(0x4 * _0x48896c, cc.v2(0x0, 0x3));
          var _0x46f5bb = cc.scaleTo(0x4 * _0x48896c, 1.2);
          var _0x39628a = cc.spawn(_0x1cbcc0, _0x46f5bb);
          var _0x2f8cf8 = cc.moveTo(0x8 * _0x48896c, cc.v2(0x0, 0x5));
          var _0x133418 = cc.scaleTo(0x8 * _0x48896c, 1.46);
          var _0x243d81 = cc.fadeOut(0x8 * _0x48896c);
          var _0xf0955c = cc.spawn(_0x2f8cf8, _0x133418, _0x243d81);
          var _0x2d0a2b = cc.sequence(_0x39628a, _0xf0955c, cc.removeSelf());
          _0xa7d722.runAction(_0x2d0a2b);
          _0xa7d722 = new cc.Node();
          _0x20d4f2.addChild(_0xa7d722);
          _0xa7d722.addComponent(cc.Sprite).spriteFrame = _0x33a369.GValue.Atlas_Game.getSpriteFrame('pa1_3');
          _0x46f5bb = cc.scaleTo(0xa * _0x48896c, 2.5, 0.36);
          var _0x5d1dda = cc.fadeOut(0xa * _0x48896c);
          _0x2d0a2b = cc.sequence(cc.spawn(_0x46f5bb, _0x5d1dda), cc.removeSelf());
          _0xa7d722.runAction(_0x2d0a2b);
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': 'CommonConfig',
      'CommonValue': "CommonValue",
      'Types': 'Types'
    }],
    'PropCollisionWallListener': [function (_0xeb849a, _0x2ed85a, _0x4dbb6f) {
      'use strict';
  
      cc._RF.push(_0x2ed85a, "a598cuOxyBGXYdenTvrBVUP", "PropCollisionWallListener");
      var _0x11c296 = _0xeb849a('Types');
      _0xeb849a('CommonValue');
      _0xeb849a("CommonConfig");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this._player = null;
          this.state = _0x11c296.HeroState.Normal;
        },
        'onCollisionExit': function (_0x44116d, _0x592403) {
          if (!(0x4 != _0x44116d.node.groupIndex && 0xa != _0x44116d.node.groupIndex)) {
            this.noticeWallLeave(_0x44116d);
          }
        },
        'onCollisionEnter': function (_0x22704e, _0x4a8537) {
          if (!(0x4 != _0x22704e.node.groupIndex && 0xa != _0x22704e.node.groupIndex)) {
            this.noticeWallCollision(_0x22704e);
          }
        },
        'noticeWallCollision': function (_0x14c6df) {
          this.node.emit("wallCollision", _0x14c6df);
        },
        'noticeWallLeave': function (_0x327c4f) {
          this.node.emit("wallLeave", _0x327c4f);
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': 'CommonConfig',
      'CommonValue': "CommonValue",
      'Types': 'Types'
    }],
    'PropManager': [function (_0x51f0fc, _0x23639d, _0x4eca9c) {
      'use strict';
  
      cc._RF.push(_0x23639d, "44ba4hQ4QRP0YvJwj3DwuOm", "PropManager");
      var _0x5e6a71 = _0x51f0fc("Tools");
      var _0x363f23 = _0x51f0fc("Types");
      var _0x2e7234 = _0x51f0fc("CommonValue");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.propArr = [];
          this.propTimeArr = [];
          this.propDurationArr = [];
          this.durationDict = {};
        },
        'init': function () {
          this.durationDict[_0x363f23.PropType.Strong] = _0x2e7234.GValue.StrongTime;
          this.durationDict[_0x363f23.PropType.Slow] = _0x2e7234.GValue.SlowTime;
          this.durationDict[_0x363f23.PropType.Gold] = _0x2e7234.GValue.GoldTime;
        },
        'clear': function () {
          this.propArr.splice(0x0);
          this.propTimeArr.splice(0x0);
          this.propDurationArr.splice(0x0);
        },
        'addProp': function (_0x1e670d) {
          var _0x494d66 = this.propArr.indexOf(_0x1e670d);
          if (_0x494d66 >= 0x0) {
            this.propTimeArr[_0x494d66] = 0x0;
          } else {
            this.propArr.push(_0x1e670d);
            this.propTimeArr.push(0x0);
            this.propDurationArr.push(this.durationDict[_0x1e670d]);
          }
        },
        'removeProp': function (_0x2ee151) {
          var _0x5ba065 = this.propArr.indexOf(_0x2ee151);
          if (_0x5ba065 >= 0x0) {
            this.propArr.splice(_0x5ba065, 0x1);
            this.propTimeArr.splice(_0x5ba065, 0x1);
            this.propDurationArr.splice(_0x5ba065, 0x1);
          }
        },
        'hasProp': function (_0x2e4b68) {
          return _0x5e6a71.DYTools.arrContain(this.propArr, _0x2e4b68);
        },
        'getProgress': function (_0x570288) {
          var _0x561572 = this.propArr.indexOf(_0x570288);
          return _0x561572 >= 0x0 ? 0x1 - this.propTimeArr[_0x561572] / this.propDurationArr[_0x561572] : 0x0;
        },
        'updateGameLogic': function (_0x144c7c) {
          for (var _0x988f4 = 0x0; _0x988f4 < this.propTimeArr.length; _0x988f4++) {
            this.propTimeArr[_0x988f4] += _0x144c7c;
            _0x2e7234.GValue.EntityWorld.gameUI.refreshPropProgress(this.propArr[_0x988f4], this.getProgress(this.propArr[_0x988f4]));
            if (this.propTimeArr[_0x988f4] > this.propDurationArr[_0x988f4]) {
              this.removeProp(this.propArr[_0x988f4]);
              _0x988f4--;
            }
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonValue': "CommonValue",
      'Tools': 'Tools',
      'Types': "Types"
    }],
    'PropMoveFix': [function (_0x399966, _0x545d79, _0x4d2c45) {
      'use strict';
  
      cc._RF.push(_0x545d79, "5d0e8Mmah1Iga4LHBP15tvq", "PropMoveFix");
      var _0x5213ce = _0x399966("CommonValue");
      var _0x8c4cea = _0x399966('Tools');
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this._entity = null;
          this._collider = null;
          this._radius = 0x0;
          this._speed = 0x0;
          this._dir = cc.Vec2.ZERO;
          this._time = -0x1;
          this._blinking = false;
          this._minViewX = 0x0;
          this._maxViewX = 0x0;
          this._minViewY = 0x0;
          this._maxViewY = 0x0;
          this._minX = null;
          this._maxX = null;
          this._minY = null;
          this._maxY = null;
          this._collisionWalls = [];
          this.colingWalls = [];
          this._dxDirty = false;
          this._dyDirty = false;
        },
        'init': function (_0x349506, _0x5d3eaa, _0x245ad8, _0xa4f508) {
          if (undefined === _0xa4f508) {
            _0xa4f508 = -0x1;
          }
          this._entity = _0x349506;
          this._collider = this._entity.node.getComponent(cc.CircleCollider);
          this._speed = _0x5d3eaa;
          this._dir = _0x245ad8.normalize();
          this._time = _0xa4f508;
          this._blinking = false;
          this._radius = this._collider.radius * this.node.scale;
          this._minViewX = this._radius + 0x0;
          this._maxViewX = _0x5213ce.GValue.Size_View.width - this._radius - 0x0;
          this._minViewY = this._radius + 0x0;
          this._maxViewY = _0x5213ce.GValue.Size_View.height - this._radius - 0x0;
          this.node.on("wallCollision", this.collisionWall, this);
          this.node.on("wallLeave", this.leaveWall, this);
        },
        'updateGameLogic': function (_0x2d4fd9) {
          if (this._collider) {
            this._time -= _0x2d4fd9;
            if (this._time <= 0x0) {
              this.node.stopAllActions();
              this.node.opacity = 0xff;
              _0x5213ce.GValue.EntityWorld.removeProp(this._entity);
            } else {
              if (this._time < 0x4 && !this._blinking) {
                this._blinking = true;
                this.node.runAction(cc.repeatForever(cc.sequence(cc.fadeTo(0.1, 0x32), cc.fadeTo(0.1, 0xff))));
              }
              var _0x2f9414 = this._speed * _0x2d4fd9;
              var _0x2f5736 = this._dir.mul(_0x2f9414);
              this.node.position = this.node.position.add(_0x2f5736);
              if (!this.fixPositionByWall()) {
                this.fixPositionByScreen();
              }
              if (this._dxDirty) {
                this._dir.x = -this._dir.x;
                this._dxDirty = false;
              }
              if (this._dyDirty) {
                this._dir.y = -this._dir.y;
                this._dyDirty = false;
              }
            }
          }
        },
        'fixPositionByScreen': function () {
          var _0x155cb3 = this.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
          if (_0x155cb3.x < this._minViewX) {
            this.node.x = this.node.parent.convertToNodeSpaceAR(cc.v2(this._minViewX, 0x0)).x;
            this._dxDirty = true;
          } else if (_0x155cb3.x > this._maxViewX) {
            this.node.x = this.node.parent.convertToNodeSpaceAR(cc.v2(this._maxViewX, 0x0)).x;
            this._dxDirty = true;
          }
          if (_0x155cb3.y < this._minViewY) {
            this.node.y = this.node.parent.convertToNodeSpaceAR(cc.v2(0x0, this._minViewY)).y;
            this._dyDirty = true;
          } else if (_0x155cb3.y > this._maxViewY) {
            this.node.y = this.node.parent.convertToNodeSpaceAR(cc.v2(0x0, this._maxViewY)).y;
            this._dyDirty = true;
          }
        },
        'fixPositionByWall': function () {
          if (0x0 == this._collisionWalls.length) {
            return false;
          }
          for (var _0x28f297 = 0x0; _0x28f297 < this._collisionWalls.length; _0x28f297++) {
            var _0x38b0a1 = this._collisionWalls[_0x28f297];
            var _0x5de829 = this._collider;
            var _0xbd1331 = _0x38b0a1.node.parent;
            var _0x2101f0 = this.node.parent;
            var _0x5d4a1d = _0xbd1331.position.add(_0x5213ce.GValue.EntityWorld.mapMgr.mapTop.position);
            switch (_0x38b0a1.tag) {
              case 0x0:
                var _0x2dddab = _0x38b0a1.size.height;
                this._maxY = _0x5d4a1d.y - _0x38b0a1.offset.y - 0.5 * _0x2dddab - _0x5de829.radius * _0x5de829.node.scale;
                if (this.node.y > this._maxY) {
                  this.node.y = this._maxY;
                  this._dyDirty = true;
                }
                break;
              case 0x1:
                _0x2dddab = _0x38b0a1.size.height;
                this._minY = _0x5d4a1d.y + _0x38b0a1.offset.y + 0.5 * _0x2dddab + _0x5de829.radius * _0x5de829.node.scale;
                if (this.node.y < this._minY) {
                  this.node.y = this._minY;
                  this._dyDirty = true;
                }
                break;
              case 0x2:
                _0x2dddab = _0x38b0a1.size.height;
                this._minX = _0x5d4a1d.x + _0x38b0a1.offset.y + 0.5 * _0x2dddab + _0x5de829.radius * _0x5de829.node.scale;
                if (this.node.x < this._minX) {
                  this.node.x = this._minX;
                  this._dxDirty = true;
                }
                break;
              case 0x3:
                _0x2dddab = _0x38b0a1.size.height;
                this._maxX = _0x5d4a1d.x - _0x38b0a1.offset.y - 0.5 * _0x2dddab - _0x5de829.radius * _0x5de829.node.scale;
                if (this.node.x > this._maxX) {
                  this.node.x = this._maxX;
                  this._dxDirty = true;
                }
                break;
              case 0x4:
                _0x5d4a1d = _0x5d4a1d.add(_0x38b0a1.node.position);
                if ((_0x2db0f9 = (_0xfd2411 = this.node.position.sub(_0x5d4a1d)).mag()) < (_0x4acb7c = this._radius + _0x38b0a1.radius - 0x6)) {
                  var _0x56a0eb = _0xfd2411.x / _0x2db0f9;
                  var _0x184e99 = _0xfd2411.y / _0x2db0f9;
                  var _0x95aa01 = _0x5d4a1d.add(cc.v2(_0x4acb7c * _0x56a0eb, _0x4acb7c * _0x184e99));
                  this.node.position = _0x95aa01;
                  this._dyDirty = true;
                  this._dxDirty = true;
                }
                break;
              case 0x5:
                _0x5d4a1d.addSelf(_0x38b0a1.node.position);
                if ((_0x2db0f9 = (_0xfd2411 = this.node.position.sub(_0x5d4a1d)).mag()) < (_0x4acb7c = this._radius + _0x38b0a1.radius - 0x6)) {
                  _0x56a0eb = _0xfd2411.x / _0x2db0f9;
                  _0x184e99 = _0xfd2411.y / _0x2db0f9;
                  _0x95aa01 = _0x5d4a1d.add(cc.v2(_0x4acb7c * _0x56a0eb, _0x4acb7c * _0x184e99));
                  this.node.position = _0x95aa01;
                  this._dyDirty = true;
                  this._dxDirty = true;
                }
                break;
              case 0x6:
                var _0xfd2411;
                var _0x2db0f9;
                _0x5d4a1d = _0x38b0a1.node.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
                _0x5d4a1d = _0x2101f0.convertToNodeSpaceAR(_0x5d4a1d);
                if ((_0x2db0f9 = (_0xfd2411 = this.node.position.sub(_0x5d4a1d)).mag()) < (_0x4acb7c = this._radius + 0.5 * _0x38b0a1.size.width - 0x6)) {
                  _0x56a0eb = _0xfd2411.x / _0x2db0f9;
                  _0x184e99 = _0xfd2411.y / _0x2db0f9;
                  _0x95aa01 = _0x5d4a1d.add(cc.v2(_0x4acb7c * _0x56a0eb, _0x4acb7c * _0x184e99));
                  this.node.position = _0x95aa01;
                  this._dyDirty = true;
                  this._dxDirty = true;
                }
                break;
              case 0x65:
                if (_0x8c4cea.DYTools.arrContain(this.colingWalls, _0x38b0a1)) {
                  break;
                }
                this.colingWalls.push(_0x38b0a1);
                var _0x4acb7c = _0x38b0a1.size.width;
                var _0x2a674b = _0x38b0a1.size.height;
                var _0x380c9c = Math.abs(_0xbd1331.angle);
                if (_0x380c9c > 0x50 && _0x380c9c < 0x64 || _0x380c9c > 0x104 && _0x380c9c < 0x118) {
                  _0x4acb7c = _0x38b0a1.size.height;
                  _0x2a674b = _0x38b0a1.size.width;
                }
                _0x5d4a1d.addSelf(_0x38b0a1.node.position);
                if (_0x8c4cea.DYTools.isNumberDiffRange(this.node.y, _0x5d4a1d.y, _0x2a674b / 0x2)) {
                  this._dxDirty = true;
                } else if (_0x8c4cea.DYTools.isNumberDiffRange(this.node.x, _0x5d4a1d.x, _0x4acb7c / 0x2)) {
                  this._dyDirty = true;
                } else if (this.node.x > _0x5d4a1d.x && this.node.y > _0x5d4a1d.y) {
                  if (this._dir.x < 0x0 && this._dir.y < 0x0) {
                    this._dyDirty = true;
                    this._dxDirty = true;
                  } else if (this._dir.x < 0x0) {
                    this._dxDirty = true;
                  } else if (this._dir.y < 0x0) {
                    this._dyDirty = true;
                  }
                } else if (this.node.x > _0x5d4a1d.x && this.node.y < _0x5d4a1d.y) {
                  if (this._dir.x < 0x0 && this._dir.y > 0x0) {
                    this._dyDirty = true;
                    this._dxDirty = true;
                  } else if (this._dir.x < 0x0) {
                    this._dxDirty = true;
                  } else if (this._dir.y > 0x0) {
                    this._dyDirty = true;
                  }
                } else if (this.node.x < _0x5d4a1d.x && this.node.y < _0x5d4a1d.y) {
                  if (this._dir.x > 0x0 && this._dir.y > 0x0) {
                    this._dyDirty = true;
                    this._dxDirty = true;
                  } else if (this._dir.x > 0x0) {
                    this._dxDirty = true;
                  } else if (this._dir.y > 0x0) {
                    this._dyDirty = true;
                  }
                } else if (this._dir.x > 0x0 && this._dir.y < 0x0) {
                  this._dyDirty = true;
                  this._dxDirty = true;
                } else if (this._dir.x > 0x0) {
                  this._dxDirty = true;
                } else if (this._dir.y < 0x0) {
                  this._dyDirty = true;
                }
            }
          }
          return true;
        },
        'collisionWall': function (_0x34c3a5) {
          if (!_0x8c4cea.DYTools.arrContains(this._collisionWalls, _0x34c3a5)) {
            this._collisionWalls.push(_0x34c3a5);
          }
        },
        'leaveWall': function (_0x1c0971) {
          _0x8c4cea.DYTools.arrRemove(this._collisionWalls, _0x1c0971);
          _0x8c4cea.DYTools.arrRemove(this.colingWalls, _0x1c0971);
        }
      });
      cc._RF.pop();
    }, {
      'CommonValue': "CommonValue",
      'Tools': "Tools"
    }],
    'PropertyUI': [function (_0x2d51f6, _0xaa5572, _0x4706e6) {
      'use strict';
  
      cc._RF.push(_0xaa5572, "372a6I+XxBB9LzvgTm+z2q4", "PropertyUI");
      var _0x2f4a78 = _0x2d51f6("CommonEnum");
      var _0x4734d5 = _0x2d51f6("ItemProperty");
      var _0x5bc351 = _0x2d51f6("CommonFunc");
      var _0x42b55b = _0x2d51f6('GameData');
      var _0x547234 = _0x2d51f6("CommonConfig");
      var _0x512dbe = _0x2d51f6("CommonValue");
      var _0x11ea07 = _0x2d51f6("Tools");
      var _0x4ade97 = _0x2d51f6("PfNum");
      var _0x235ab8 = _0x2d51f6("ADShareManager");
      var _0x47dac1 = _0x2d51f6("AndroidManager");
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'node_ui': cc.Node,
          'node_arms1': cc.Node,
          'node_show_arms1': cc.Node,
          'node_showlistmain': cc.Node,
          'node_arm1_arrowdown': cc.Node,
          'node_listmain': cc.Node,
          'node_arms2': cc.Node,
          'node_show_arms2': cc.Node,
          'node_gold': cc.Node,
          'node_show_gold_kill': cc.Node,
          'node_show_gold_offline': cc.Node,
          'node_showlistsub': cc.Node,
          'node_listsub': cc.Node,
          'btn_l': cc.Node,
          'btn_r': cc.Node,
          'node_shield': cc.Node,
          'pf_itemProperty': cc.Prefab,
          'atlas_property': cc.SpriteAtlas
        },
        'onLoad': function () {
          this.com_arms1 = null;
          this.com_arms2 = null;
          this.com_gold_kill = null;
          this.com_gold_offline = null;
          this.scrollView = null;
          this.scrollView_offset = cc.v2(0x0, 0x0);
          this.dic_main_icon = {};
          this.dic_main_lv = {};
          this.sp_line_gray = null;
          this.dic_listsub_scale = {};
          this.dic_listsub_pos = {};
          this.dic_listsub_node = {};
          this.dic_listsub_sp = {};
          this.selectsub_index = 0x0;
          var _0x3b949d = this;
          _0x5bc351.GFunc.set_click(this.node_shield, function () {}, this);
          _0x5bc351.GFunc.set_click(this.node_listsub, function () {}, this);
          _0x5bc351.GFunc.set_click(this.btn_l, function () {
            _0x3b949d.toR_listsub();
          }, this);
          _0x5bc351.GFunc.set_click(this.btn_r, function () {
            _0x3b949d.toL_listsub();
          }, this);
        },
        'init': function () {
          var _0x5591c0 = cc.instantiate(this.pf_itemProperty);
          this.node_show_arms1.addChild(_0x5591c0);
          this.com_arms1 = _0x5591c0.getComponent(_0x4734d5);
          this.com_arms1.init(_0x2f4a78.Enum_PropertyId.ArmsMain, 'font_attack', '');
          var _0x3d6127 = cc.instantiate(this.pf_itemProperty);
          this.node_show_arms2.addChild(_0x3d6127);
          this.com_arms2 = _0x3d6127.getComponent(_0x4734d5);
          this.com_arms2.init(_0x2f4a78.Enum_PropertyId.ArmsSub, "font_attack", '', 0x1);
          var _0x12b400 = cc.instantiate(this.pf_itemProperty);
          this.node_show_gold_kill.addChild(_0x12b400);
          this.com_gold_kill = _0x12b400.getComponent(_0x4734d5);
          this.com_gold_kill.init(_0x2f4a78.Enum_PropertyId.GoldKill, "font_goldkill", "icon_goldkill");
          var _0x588cd4 = cc.instantiate(this.pf_itemProperty);
          this.node_show_gold_offline.addChild(_0x588cd4);
          this.com_gold_offline = _0x588cd4.getComponent(_0x4734d5);
          this.com_gold_offline.init(_0x2f4a78.Enum_PropertyId.GoldOffline, "font_goldoffline", "icon_goldoffline");
          var _0x5d0c0d = this;
          this.scheduleOnce(function () {
            _0x5d0c0d.init_listmain();
          }, 0x1);
          this.selectsub_index = _0x42b55b.TData.getCurSubIndex();
          this.init_listsub();
          this.changeArmsSubEnd(true);
        },
        'get_listmainData': function () {
          var _0x4c0368 = _0x512dbe.GValue.List_Main_Change;
          var _0x976c7d = [];
          for (var _0x2e7d6d = 0x0; _0x2e7d6d < _0x4c0368.length; _0x2e7d6d++) {
            _0x976c7d.push(_0x4c0368[_0x2e7d6d]);
          }
          return _0x976c7d;
        },
        'moveArrowdown': function (_0x5cb0c1) {
          this.node_arm1_arrowdown.position = this.node_arm1_arrowdown.position.add(cc.v2(_0x5cb0c1, 0x0));
        },
        'init_listmain': function () {
          var _0x37967b = this.get_listmainData();
          var _0x35c6b6 = _0x5bc351.GFunc.getCurMainChange();
          this.node_listmain.destroyAllChildren();
          var _0x3b96a0 = new cc.Node();
          this.node_listmain.addChild(_0x3b96a0);
          var _0x4e145b = this.node_listmain.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
          var _0x450cb2 = _0x512dbe.GValue.Size_View.width - _0x4e145b.x;
          var _0x5036fe = this.node_listmain.getContentSize();
          _0x5036fe.width = _0x450cb2;
          var _0x38b4b2 = _0x37967b.length;
          var _0x17bc08 = 0x96 * _0x38b4b2;
          var _0x353260 = cc.v2(0x0, 0x0);
          var _0x3dbbc6 = new cc.Node();
          _0x3b96a0.addChild(_0x3dbbc6);
          _0x3dbbc6.setPosition(_0x353260);
          _0x3dbbc6.setContentSize(_0x5036fe);
          _0x3dbbc6.setAnchorPoint(0x0, 0.5);
          _0x3dbbc6.addComponent(cc.Mask);
          var _0x22b0f1 = new cc.Node();
          _0x22b0f1.setAnchorPoint(0x0, 0.5);
          _0x22b0f1.setContentSize(_0x5036fe);
          _0x3dbbc6.addChild(_0x22b0f1);
          this.scrollView = _0x22b0f1.addComponent(cc.ScrollView);
          this.scrollView.horizontal = true;
          this.scrollView.vertical = false;
          this.scrollView.elastic = false;
          var _0x447eeb = new cc.Node();
          _0x447eeb.setAnchorPoint(0x0, 0.5);
          _0x22b0f1.addChild(_0x447eeb);
          this.scrollView.content = _0x447eeb;
          this.scrollView.content.width = _0x17bc08;
          var _0x5397cc = new cc.Node();
          var _0xd4f5d2 = _0x5397cc.addComponent(cc.Sprite);
          _0x5bc351.GFunc.changeAtlasSprite(this.atlas_property, _0xd4f5d2, "main_line_white");
          _0x5397cc.anchorX = 0x0;
          _0x5397cc.setPosition(0x32, 0x0);
          _0x447eeb.addChild(_0x5397cc);
          _0x5397cc.width = _0x17bc08 - 0x96;
          var _0x4be371 = new cc.Node();
          this.sp_line_gray = _0x4be371.addComponent(cc.Sprite);
          _0x5bc351.GFunc.changeAtlasSprite(this.atlas_property, this.sp_line_gray, 'main_line_gray');
          _0x4be371.anchorX = 0x0;
          _0x4be371.setPosition(0x32, 0x0);
          _0x447eeb.addChild(_0x4be371);
          _0x4be371.width = _0x17bc08 - 0x96;
          for (var _0x520426 = 0x0; _0x520426 < _0x38b4b2; _0x520426++) {
            var _0x571128 = _0x37967b[_0x520426];
            var _0x5af15e = new cc.Node();
            _0x5af15e.setPosition(0x32 + 0x96 * _0x520426, 0x0);
            _0x447eeb.addChild(_0x5af15e);
            var _0x315fbe = 'k' + _0x571128.imageId;
            var _0x217900 = new cc.Node();
            var _0x32f67d = _0x217900.addComponent(cc.Sprite);
            _0x5bc351.GFunc.changeAtlasSprite(_0x512dbe.GValue.Atlas_Game, _0x32f67d, _0x315fbe);
            _0x5af15e.addChild(_0x217900);
            this.dic_main_icon[_0x571128.lv] = _0x217900;
            var _0x4619d9 = cc.instantiate(_0x512dbe.GValue.pf_num);
            var _0x10cf3b = _0x4619d9.getComponent(_0x4ade97);
            _0x10cf3b.setParam(_0x2f4a78.Enum_Num.SubLv, cc.v2(0.5, 0.5), 0x0, this.atlas_property);
            _0x10cf3b.setString('l' + _0x571128.lv);
            _0x4619d9.setPosition(0x0, 0x28);
            _0x5af15e.addChild(_0x4619d9);
            this.dic_main_lv[_0x571128.lv] = _0x4619d9;
            if (_0x571128.lv < _0x35c6b6.lv) {
              _0x217900.color = cc.Color.GRAY;
            } else if (_0x571128.lv > _0x35c6b6.lv) {
              _0x217900.opacity = 0x96;
            }
          }
          this.sp_line_gray.type = cc.Sprite.Type.FILLED;
          this.sp_line_gray.fillType = cc.Sprite.FillType.HORIZONTAL;
          this.sp_line_gray.fillCenter = cc.v2(0x0, 0.5);
          this.sp_line_gray.fillRange = this.getMainProgress();
          this.setMainScrollPos(0x0);
          this.setListMainVisible();
        },
        'setListMainVisible': function () {
          var _0xb802ae = this.get_listmainData();
          var _0x4cb528 = _0x5bc351.GFunc.getCurMainChange();
          if (_0xb802ae.length > 0x0 && _0x4cb528 != _0xb802ae[0x0]) {
            this.node_showlistmain.active = true;
          } else {
            this.node_showlistmain.active = false;
          }
        },
        'getMainProgress': function () {
          var _0x3530c2 = this.get_listmainData();
          var _0x5e300e = _0x5bc351.GFunc.getCurMainChange();
          var _0x274c4e = 0x0;
          for (var _0x1d83da = 0x0; _0x1d83da < _0x3530c2.length; _0x1d83da++) {
            if (_0x3530c2[_0x1d83da].lv < _0x5e300e.lv) {
              _0x274c4e++;
            }
          }
          var _0x517e83 = 0x0;
          if (_0x3530c2.length - 0x1 > 0x0) {
            _0x517e83 = _0x274c4e / (_0x3530c2.length - 0x1);
          }
          return _0x517e83;
        },
        'setMainScrollPos': function (_0x5b1d5d) {
          var _0x32d56e = this.scrollView.content.width;
          var _0x1ca0c7 = this.getMainProgress();
          this.scrollView.scrollToOffset(cc.v2(_0x32d56e * _0x1ca0c7 - 0xc8 - 0x3c * _0x1ca0c7, 0x0), _0x5b1d5d);
        },
        'changeMain': function (_0x2aee74, _0x41e1a7) {
          var _0xed9a6c = this;
          var _0x4cd3bf = this;
          var _0x2840ff = _0x547234.GConfig.actionFrameTime;
          this.setListMainVisible();
          this.setMainScrollPos(_0x2840ff);
          this.scheduleOnce(function () {
            var _0x5123d4 = _0x4cd3bf.dic_main_icon[_0x2aee74.lv];
            var _0x294987 = _0x4cd3bf.dic_main_icon[_0x41e1a7.lv];
            var _0x29041c = _0x294987.convertToWorldSpaceAR(cc.v2(0x0, 0x0)).x - _0x5123d4.convertToWorldSpaceAR(cc.v2(0x0, 0x0)).x;
            var _0x57aef2 = new cc.Node();
            _0x5123d4.addChild(_0x57aef2);
            var _0x2e7869 = _0x57aef2.addComponent(cc.Sprite);
            _0x5bc351.GFunc.changeAtlasSprite(_0xed9a6c.atlas_property, _0x2e7869, "main_shine_line");
            _0x57aef2.anchorX = 0x0;
            _0x57aef2.width = 0.3 * _0x29041c;
            _0x57aef2.scaleX = 0.47;
            _0x57aef2.scaleY = 1.95;
            var _0x2d96d3 = cc.scaleTo(0x3 * _0x2840ff, 2.51, 0x1);
            var _0x5e702d = cc.scaleTo(0x2 * _0x2840ff, 1.88, 0x1);
            var _0x4c273b = cc.moveBy(0x2 * _0x2840ff, cc.v2(0x58, 0x0));
            var _0x1e3e73 = cc.spawn(_0x5e702d, _0x4c273b);
            var _0x14e794 = cc.callFunc(function () {
              _0x5123d4.opacity = 0xff;
              _0x5123d4.color = cc.Color.GRAY;
              _0x294987.opacity = 0xff;
              _0x294987.color = cc.Color.WHITE;
              var _0x4bf5e1 = cc.instantiate(_0x294987);
              _0x294987.addChild(_0x4bf5e1);
              _0x4bf5e1.scale = 1.6;
              var _0x1ffee2 = cc.scaleTo(0x7 * _0x2840ff, 0x2);
              var _0x4ec942 = cc.fadeTo(0x7 * _0x2840ff, 0x0);
              var _0x395fe2 = cc.spawn(_0x1ffee2, _0x4ec942);
              var _0x2bab3b = cc.sequence(_0x395fe2, cc.removeSelf());
              _0x4bf5e1.runAction(_0x2bab3b);
              var _0x605a83 = _0x4cd3bf.dic_main_lv[_0x41e1a7.lv];
              if (_0x605a83) {
                var _0x4f44d7 = cc.scaleTo(0x3 * _0x2840ff, 1.8);
                var _0x2540d2 = cc.scaleTo(0x5 * _0x2840ff, 0x1);
                var _0xe0d6ad = cc.sequence(_0x4f44d7, _0x2540d2);
                _0x605a83.runAction(_0xe0d6ad);
              }
              _0x4cd3bf.sp_line_gray.fillRange = _0x4cd3bf.getMainProgress();
            });
            var _0x23f9e4 = cc.sequence(_0x2d96d3, _0x1e3e73, _0x14e794, cc.removeSelf());
            _0x57aef2.runAction(_0x23f9e4);
          }, 0.3);
        },
        'getFunByIndex': function (_0x2b0c7d) {
          var _0x19b353 = _0x42b55b.TData.getSubFunByIndex(_0x2b0c7d);
          if (_0x2b0c7d >= _0x42b55b.TData.getListSub().length) {
            var _0x50833b = _0x2b0c7d - _0x42b55b.TData.getListSub().length;
            var _0x3e5255 = _0x5bc351.GFunc.getUnGetArmsSubList();
            if (_0x50833b < _0x3e5255.length) {
              _0x19b353 = _0x3e5255[_0x50833b];
            }
          }
          return _0x19b353;
        },
        'init_listsub': function () {
          var _0xa16f48 = this;
          var _0xc0878d = _0x547234.GConfig.actionFrameTime;
          this.node_listsub.destroyAllChildren();
          this.dic_listsub_scale = {};
          this.dic_listsub_scale[0x0] = 0x1;
          this.dic_listsub_scale[0x1] = 0x1;
          this.dic_listsub_scale[0x2] = 0x1;
          this.dic_listsub_scale[0x3] = 1.2;
          this.dic_listsub_scale[0x4] = 0x1;
          this.dic_listsub_scale[0x5] = 0x1;
          this.dic_listsub_scale[0x6] = 0x1;
          var _0x5a3ef2 = cc.v2(0x32, 0x0);
          this.dic_listsub_pos = {};
          this.dic_listsub_pos[0x0] = cc.v2(-0x136, 0x0).add(_0x5a3ef2);
          this.dic_listsub_pos[0x1] = cc.v2(-0xd2, 0x0).add(_0x5a3ef2);
          this.dic_listsub_pos[0x2] = cc.v2(-0x6e, 0x0).add(_0x5a3ef2);
          this.dic_listsub_pos[0x3] = cc.v2(0x0, 0x0).add(_0x5a3ef2);
          this.dic_listsub_pos[0x4] = cc.v2(0x6e, 0x0).add(_0x5a3ef2);
          this.dic_listsub_pos[0x5] = cc.v2(0xd2, 0x0).add(_0x5a3ef2);
          this.dic_listsub_pos[0x6] = cc.v2(0x136, 0x0).add(_0x5a3ef2);
          this.dic_listsub_node = {};
          this.dic_listsub_sp = {};
          for (var _0x1d82ab in this.dic_listsub_pos) {
            var _0x14030b = new cc.Node();
            this.node_listsub.addChild(_0x14030b);
            var _0x53db47 = _0x14030b.addComponent(cc.Sprite);
            _0x5bc351.GFunc.changeAtlasSprite(this.atlas_property, _0x53db47, 'sub_board');
            this.dic_listsub_node[_0x1d82ab] = _0x14030b;
            var _0x3089a6 = new cc.Node();
            _0x14030b.addChild(_0x3089a6);
            var _0x540f17 = _0x3089a6.addComponent(cc.Sprite);
            this.dic_listsub_sp[_0x1d82ab] = _0x540f17;
            var _0x4cd1d5 = cc.instantiate(_0x512dbe.GValue.pf_num);
            _0x14030b.addChild(_0x4cd1d5);
            var _0x10afdd = _0x4cd1d5.getComponent(_0x4ade97);
            _0x10afdd.setParam(_0x2f4a78.Enum_Num.SubLv, cc.v2(0x1, 0x0), 0x0, this.atlas_property);
            _0x10afdd.setString('l1');
            _0x4cd1d5.setPosition(0x1e, -0x1e);
            _0x4cd1d5.name = 'lv';
            _0x4cd1d5.scale = 0.7;
            var _0x49d596 = new cc.Node();
            _0x14030b.addChild(_0x49d596, 0x1);
            _0x49d596.name = 'try';
            var _0x15bb26 = new cc.Node();
            var _0x3dfcbb = _0x15bb26.addComponent(cc.Sprite);
            _0x5bc351.GFunc.changeAtlasSprite(this.atlas_property, _0x3dfcbb, 'sub_box_try');
            _0x49d596.addChild(_0x15bb26);
            _0x5bc351.GFunc.set_click(_0x15bb26, function () {
              _0xa16f48.tryArmsSub();
            }, this);
            if (0x1 != _0x47dac1.AndroidMgr.getAfStatus()) {
              var _0x314259 = new cc.Node();
              var _0x44096a = _0x314259.addComponent(cc.Sprite);
              _0x5bc351.GFunc.changeAtlasSprite(this.atlas_property, _0x44096a, "try_video");
              _0x49d596.addChild(_0x314259);
              _0x314259.position = cc.v2(-0x13, -0x14);
            }
            var _0x4be976 = new cc.Node();
            var _0x1cd2da = _0x4be976.addComponent(cc.Sprite);
            _0x5bc351.GFunc.changeAtlasSprite(this.atlas_property, _0x1cd2da, "arms_sub_try");
            _0x49d596.addChild(_0x4be976);
            _0x4be976.anchorY = 0x0;
            _0x4be976.y = 0x1e;
            var _0x30718e = new cc.Node();
            _0x14030b.addChild(_0x30718e, 0x1);
            var _0x57ed7c = _0x30718e.addComponent(cc.Sprite);
            _0x5bc351.GFunc.changeAtlasSprite(this.atlas_property, _0x57ed7c, "sub_box_select");
            _0x30718e.scale = 0.8;
            _0x30718e.setPosition(0x0, -0x8);
            _0x30718e.name = "select";
            var _0x433e40 = cc.scaleTo(0xb * _0xc0878d, 0.664);
            var _0x576e0d = cc.scaleTo(0x6 * _0xc0878d, 0.8);
            var _0x2eb33d = cc.sequence(_0x433e40, _0x576e0d);
            var _0x1429eb = cc.repeatForever(_0x2eb33d);
            _0x30718e.runAction(_0x1429eb);
          }
          this.refresh_listsub();
        },
        'refresh_sublv': function () {
          for (var _0x5ed274 in this.dic_listsub_node) {
            var _0x1f1b4d = this.dic_listsub_node[_0x5ed274].getChildByName('lv');
            if (_0x1f1b4d) {
              var _0xec3fbf = _0x1f1b4d.getComponent(_0x4ade97);
              if (_0xec3fbf) {
                var _0x41b73c = parseInt(_0x5ed274) + this.selectsub_index - 0x3;
                var _0x55e4f8 = this.getFunByIndex(_0x41b73c);
                var _0x57f3d5 = _0x42b55b.TData.getPropertyLv_Sub(_0x55e4f8);
                if (_0x512dbe.GValue.ArmsSub_TryFinish == _0x55e4f8) {
                  _0xec3fbf.setString('m');
                } else {
                  _0xec3fbf.setString('l' + _0x57f3d5);
                }
              }
            }
          }
        },
        'refresh_listsub': function () {
          for (var _0x500d47 in this.dic_listsub_node) {
            var _0x1e14bc = this.dic_listsub_node[_0x500d47];
            var _0x553493 = _0x1e14bc.getComponent(cc.Sprite);
            _0x1e14bc.scale = this.dic_listsub_scale[_0x500d47];
            _0x1e14bc.setPosition(this.dic_listsub_pos[_0x500d47]);
            var _0x4d9702 = _0x1e14bc.getChildByName("select");
            var _0x37e289 = _0x1e14bc.getChildByName('lv');
            if (0x3 == parseInt(_0x500d47)) {
              if (_0x4d9702) {
                _0x4d9702.active = true;
              }
              var _0x12a461 = parseInt(_0x500d47) + this.selectsub_index - 0x3;
              var _0x1de5ab = this.getFunByIndex(_0x12a461);
              var _0x2f2c76 = _0x11ea07.DYTools.arrContain(_0x42b55b.TData.getListSub(), _0x1de5ab);
              if (_0x37e289 && _0x2f2c76) {
                _0x37e289.active = true;
              }
            } else {
              _0x5bc351.GFunc.changeAtlasSprite(this.atlas_property, _0x553493, "sub_board");
              if (_0x4d9702) {
                _0x4d9702.active = false;
              }
              if (_0x37e289) {
                _0x37e289.active = false;
              }
            }
          }
          for (var _0x500d47 in this.dic_listsub_node) {
            var _0x520b32 = this.dic_listsub_node[_0x500d47];
            _0x553493 = this.dic_listsub_sp[_0x500d47];
            _0x12a461 = parseInt(_0x500d47) + this.selectsub_index - 0x3;
            _0x1de5ab = this.getFunByIndex(_0x12a461);
            _0x2f2c76 = _0x11ea07.DYTools.arrContain(_0x42b55b.TData.getListSub(), _0x1de5ab);
            _0x37e289 = _0x42b55b.TData.getPropertyLv_Sub(_0x1de5ab);
            if (_0x547234.GConfig.getPropertyArmsSubData(_0x1de5ab, _0x37e289)) {
              _0x520b32.opacity = 0xff;
              _0x5bc351.GFunc.changeAtlasSprite(this.atlas_property, _0x553493, 'arms_sub_' + _0x1de5ab);
              if (!_0x2f2c76) {
                _0x520b32.color = cc.color(0x9b, 0x9b, 0x9b);
                _0x553493.node.color = cc.color(0x9b, 0x9b, 0x9b);
                var _0x3dac85 = new cc.Node();
                _0x3dac85.setPosition(-0x19, 0x19);
                _0x520b32.addChild(_0x3dac85);
                var _0x32be93 = _0x3dac85.addComponent(cc.Sprite);
                _0x5bc351.GFunc.changeAtlasSprite(this.atlas_property, _0x32be93, "arms_sub_lock");
              }
            } else {
              _0x520b32.opacity = 0x0;
            }
            var _0x540039 = false;
            var _0x52d9ce = _0x520b32.getChildByName('try');
            if (_0x52d9ce) {
              if (_0x512dbe.GValue.ArmsSub_TryWill == _0x1de5ab) {
                _0x52d9ce.active = true;
                _0x540039 = true;
              } else {
                _0x52d9ce.active = false;
              }
            }
            var _0x45f056 = _0x520b32.getChildByName("new");
            if (!_0x540039 && _0x11ea07.DYTools.arrContain(_0x42b55b.TData.getListNewSub(), _0x1de5ab)) {
              if (!_0x45f056) {
                _0x45f056 = new cc.Node();
                _0x520b32.addChild(_0x45f056);
                var _0x4dedb9 = _0x45f056.addComponent(cc.Sprite);
                _0x5bc351.GFunc.changeAtlasSprite(this.atlas_property, _0x4dedb9, "arms_sub_new");
                _0x45f056.setPosition(-0xf, 0x26);
                _0x45f056.name = 'new';
              }
              _0x45f056.opacity = 0xff;
            } else if (_0x45f056) {
              _0x45f056.opacity = 0x0;
            }
          }
          this.refresh_sublv();
        },
        'resetSub': function () {
          var _0x1aa68b = this.getFunByIndex(this.selectsub_index);
          this.selectsub_index = _0x42b55b.TData.getCurSubIndex();
          var _0x16ab58 = this.getFunByIndex(this.selectsub_index);
          if (_0x1aa68b != _0x16ab58) {
            this.init_listsub();
            this.changeArmsSubEnd();
            _0x512dbe.GValue.HomeUI.changeSubEffect(_0x16ab58);
          }
        },
        'toR_listsub': function () {
          if (0x0 != this.selectsub_index) {
            this.selectsub_index--;
            _0x512dbe.GValue.HomeUI.changeSubEffect(this.getFunByIndex(this.selectsub_index));
            var _0x1bab18 = this;
            for (var _0x3a9e2c = 0x0; _0x3a9e2c < 0x6; _0x3a9e2c++) {
              var _0xe567fd = null;
              if (0x5 == _0x3a9e2c) {
                this.node_shield.active = true;
                _0xe567fd = function () {
                  var _0x5adbd3 = _0x1bab18.dic_listsub_node[0x6];
                  _0x1bab18.dic_listsub_node[0x6] = _0x1bab18.dic_listsub_node[0x5];
                  _0x1bab18.dic_listsub_node[0x5] = _0x1bab18.dic_listsub_node[0x4];
                  _0x1bab18.dic_listsub_node[0x4] = _0x1bab18.dic_listsub_node[0x3];
                  _0x1bab18.dic_listsub_node[0x3] = _0x1bab18.dic_listsub_node[0x2];
                  _0x1bab18.dic_listsub_node[0x2] = _0x1bab18.dic_listsub_node[0x1];
                  _0x1bab18.dic_listsub_node[0x1] = _0x1bab18.dic_listsub_node[0x0];
                  _0x1bab18.dic_listsub_node[0x0] = _0x5adbd3;
                  var _0x158e81 = _0x1bab18.dic_listsub_sp[0x6];
                  _0x1bab18.dic_listsub_sp[0x6] = _0x1bab18.dic_listsub_sp[0x5];
                  _0x1bab18.dic_listsub_sp[0x5] = _0x1bab18.dic_listsub_sp[0x4];
                  _0x1bab18.dic_listsub_sp[0x4] = _0x1bab18.dic_listsub_sp[0x3];
                  _0x1bab18.dic_listsub_sp[0x3] = _0x1bab18.dic_listsub_sp[0x2];
                  _0x1bab18.dic_listsub_sp[0x2] = _0x1bab18.dic_listsub_sp[0x1];
                  _0x1bab18.dic_listsub_sp[0x1] = _0x1bab18.dic_listsub_sp[0x0];
                  _0x1bab18.dic_listsub_sp[0x0] = _0x158e81;
                  _0x1bab18.node_shield.active = false;
                  _0x1bab18.changeArmsSubEnd();
                };
              }
              this.action_sub(_0x3a9e2c, _0x3a9e2c + 0x1, _0xe567fd);
            }
            var _0x11e5c1 = this.dic_listsub_node[0x6];
            if (_0x11e5c1) {
              _0x11e5c1.setPosition(this.dic_listsub_pos[0x0]);
              _0x11e5c1.scale = this.dic_listsub_scale[0x0];
            }
          }
        },
        'toL_listsub': function () {
          if (this.selectsub_index != _0x42b55b.TData.getListSub().length - 0x1 + _0x5bc351.GFunc.getUnGetArmsSubList().length) {
            this.selectsub_index++;
            _0x512dbe.GValue.HomeUI.changeSubEffect(this.getFunByIndex(this.selectsub_index));
            var _0x58aa50 = this;
            for (var _0x4b1b87 = 0x1; _0x4b1b87 < 0x7; _0x4b1b87++) {
              var _0x33f239 = null;
              if (0x6 == _0x4b1b87) {
                this.node_shield.active = true;
                _0x33f239 = function () {
                  var _0x3bfe04 = _0x58aa50.dic_listsub_node[0x0];
                  _0x58aa50.dic_listsub_node[0x0] = _0x58aa50.dic_listsub_node[0x1];
                  _0x58aa50.dic_listsub_node[0x1] = _0x58aa50.dic_listsub_node[0x2];
                  _0x58aa50.dic_listsub_node[0x2] = _0x58aa50.dic_listsub_node[0x3];
                  _0x58aa50.dic_listsub_node[0x3] = _0x58aa50.dic_listsub_node[0x4];
                  _0x58aa50.dic_listsub_node[0x4] = _0x58aa50.dic_listsub_node[0x5];
                  _0x58aa50.dic_listsub_node[0x5] = _0x58aa50.dic_listsub_node[0x6];
                  _0x58aa50.dic_listsub_node[0x6] = _0x3bfe04;
                  var _0x1d1b2c = _0x58aa50.dic_listsub_sp[0x0];
                  _0x58aa50.dic_listsub_sp[0x0] = _0x58aa50.dic_listsub_sp[0x1];
                  _0x58aa50.dic_listsub_sp[0x1] = _0x58aa50.dic_listsub_sp[0x2];
                  _0x58aa50.dic_listsub_sp[0x2] = _0x58aa50.dic_listsub_sp[0x3];
                  _0x58aa50.dic_listsub_sp[0x3] = _0x58aa50.dic_listsub_sp[0x4];
                  _0x58aa50.dic_listsub_sp[0x4] = _0x58aa50.dic_listsub_sp[0x5];
                  _0x58aa50.dic_listsub_sp[0x5] = _0x58aa50.dic_listsub_sp[0x6];
                  _0x58aa50.dic_listsub_sp[0x6] = _0x1d1b2c;
                  _0x58aa50.node_shield.active = false;
                  _0x58aa50.changeArmsSubEnd();
                };
              }
              this.action_sub(_0x4b1b87, _0x4b1b87 - 0x1, _0x33f239);
            }
            var _0x4977d6 = this.dic_listsub_node[0x0];
            if (_0x4977d6) {
              _0x4977d6.setPosition(this.dic_listsub_pos[0x6]);
              _0x4977d6.scale = this.dic_listsub_scale[0x6];
            }
          }
        },
        'action_sub': function (_0x29687c, _0x4ab0dd, _0x269ac9) {
          var _0xcdd065 = this.dic_listsub_scale[_0x4ab0dd];
          var _0x2798c6 = this.dic_listsub_pos[_0x4ab0dd];
          var _0x3821f0 = cc.scaleTo(0.1, _0xcdd065);
          var _0x5ad4c0 = cc.moveTo(0.1, _0x2798c6);
          var _0xdcec1c = cc.spawn(_0x3821f0, _0x5ad4c0);
          var _0x2920bd = cc.sequence(_0xdcec1c, cc.callFunc(function () {
            if (_0x269ac9) {
              _0x269ac9();
            }
          }));
          var _0x110e63 = this.dic_listsub_node[_0x29687c];
          if (_0x110e63) {
            _0x110e63.runAction(_0x2920bd);
          }
        },
        'show': function (_0x309d62, _0x106049) {
          if (undefined === _0x106049) {
            _0x106049 = true;
          }
          var _0x2ae923 = this;
          var _0x188177 = _0x547234.GConfig.actionFrameTime;
          var _0x7d37b9 = null;
          if (_0x309d62 == _0x2f4a78.Enum_PropertySys.ArmsMain) {
            this.node_arms1.active = true;
            this.node_arms2.active = false;
            this.node_gold.active = false;
            this.com_arms1.refresh();
            this.com_arms1.checkGuide();
            if (_0x106049) {
              this.com_arms1.hide_op();
              _0x7d37b9 = function () {
                _0x2ae923.com_arms1.show_op();
              };
            }
          } else if (_0x309d62 == _0x2f4a78.Enum_PropertySys.ArmsSub) {
            this.node_arms1.active = false;
            this.node_arms2.active = true;
            this.node_gold.active = false;
            this.com_arms2.refresh();
            this.com_arms2.checkGuide();
            if (_0x106049) {
              this.com_arms2.hide_op();
              this.node_showlistsub.opacity = 0x0;
              _0x7d37b9 = function () {
                _0x2ae923.com_arms2.show_op();
                _0x2ae923.node_showlistsub.stopAllActions();
                var _0x1b56a3 = cc.fadeIn(0x3 * _0x188177);
                _0x2ae923.node_showlistsub.runAction(_0x1b56a3);
              };
            }
          } else if (_0x309d62 == _0x2f4a78.Enum_PropertySys.Gold) {
            this.node_arms1.active = false;
            this.node_arms2.active = false;
            this.node_gold.active = true;
            this.com_gold_kill.refresh();
            this.com_gold_offline.refresh();
            if (_0x106049) {
              this.com_gold_kill.hide_op();
              this.com_gold_offline.hide_op();
              _0x7d37b9 = function () {
                _0x2ae923.com_gold_kill.show_op();
                _0x2ae923.com_gold_offline.show_op();
              };
            }
          } else {
            this.node_arms1.active = false;
            this.node_arms2.active = false;
            this.node_gold.active = false;
          }
          if (_0x106049) {
            this.showAction(null);
          }
          if (_0x7d37b9) {
            setTimeout(function () {
              _0x7d37b9();
            }, 0x3e8 * _0x188177 * 0x6);
          }
        },
        'showAction': function (_0x45046e) {
          var _0x17c699 = _0x547234.GConfig.actionFrameTime;
          this.node_ui.stopAllActions();
          this.node_ui.opacity = 0x0;
          this.node_ui.scale = 0.9;
          this.node_ui.setPosition(-0xb4, -0x16);
          var _0x98659f = cc.delayTime(0x2 * _0x17c699);
          var _0x5a0be2 = cc.moveTo(0x4 * _0x17c699, cc.v2(0x0, 0x0));
          var _0x3c460d = cc.scaleTo(0x4 * _0x17c699, 0x1);
          var _0x13e96c = cc.fadeTo(0x4 * _0x17c699, 0xff);
          var _0x282d45 = cc.spawn(_0x5a0be2, _0x3c460d, _0x13e96c);
          var _0x2bbd2f = cc.callFunc(function () {
            if (_0x45046e) {
              _0x45046e();
            }
          });
          var _0x5d2f07 = cc.sequence(_0x98659f, _0x282d45, _0x2bbd2f);
          this.node_ui.runAction(_0x5d2f07);
        },
        'changeArmsSubEnd': function (_0x408da1) {
          if (undefined === _0x408da1) {
            _0x408da1 = false;
          }
          var _0x15c388 = this.getFunByIndex(this.selectsub_index);
          this.com_arms2.init(_0x2f4a78.Enum_PropertyId.ArmsSub, '', '', _0x15c388);
          this.com_arms2.refresh();
          this.refresh_listsub();
          if (!(_0x408da1 || _0x512dbe.GValue.ArmsSub_TryWill != _0x15c388)) {
            this.tryArmsSub();
          }
        },
        'tryArmsSub': function () {
          var _0x24c8b3 = this;
          var _0x4902d4 = function () {
            _0x512dbe.GValue.ArmsSub_TryFinish = _0x512dbe.GValue.ArmsSub_TryWill;
            _0x512dbe.GValue.ArmsSub_TryWill = 0x0;
            var _0x57d76b = _0x42b55b.TData.getTodayArmsSubTryCount();
            _0x42b55b.TData.setTodayArmsSubTryCount(_0x57d76b + 0x1);
            _0x24c8b3.refresh_listsub();
            _0x24c8b3.com_arms2.refresh();
          };
          _0x235ab8.ADShareMgr.adShare(_0x2f4a78.Enum_ADShare.AS_TrySub, _0x4902d4, _0x4902d4);
        }
      });
      cc._RF.pop();
    }, {
      'ADShareManager': 'ADShareManager',
      'AndroidManager': 'AndroidManager',
      'CommonConfig': "CommonConfig",
      'CommonEnum': "CommonEnum",
      'CommonFunc': "CommonFunc",
      'CommonValue': "CommonValue",
      'GameData': 'GameData',
      'ItemProperty': "ItemProperty",
      'PfNum': "PfNum",
      'Tools': "Tools"
    }],
    'ShadowOwnerComponent': [function (_0x5988cc, _0x1dea26, _0x53c309) {
      'use strict';
  
      cc._RF.push(_0x1dea26, "a0733kOmJ1CwpcKgqe0BpB6", "ShadowOwnerComponent");
      var _0x5c8fcf = _0x5988cc("CommonValue");
      _0x5988cc("Tools");
      cc.Class({
        'extends': cc.Component,
        'properties': {},
        'ctor': function () {
          this.ownerNode = null;
          this.shadowNode = null;
          this.posConvert = false;
          this.isKnife = false;
          this.rtDiff = 0x0;
        },
        'init': function (_0x28919f, _0x32a3fd, _0x4e59f5) {
          this.ownerNode = _0x28919f;
          this.shadowNode = _0x32a3fd;
          switch (_0x4e59f5) {
            case 0x0:
              this.posConvert = true;
              break;
            case 0x1:
              this.posConvert = true;
              this.isKnife = true;
              break;
            case 0x2:
              this.posConvert = true;
              this.isKnife = true;
              this.rtDiff = -0x46;
              break;
            case 0x3:
              break;
            case 0x4:
              this.posConvert = true;
          }
        },
        'lateUpdate': function () {
          var _0x10760b = this.ownerNode.position;
          if (this.posConvert) {
            _0x10760b = this.ownerNode.convertToWorldSpaceAR(cc.v2(0x0, 0x0));
            _0x10760b = (_0x10760b = _0x5c8fcf.GValue.EntityWorld.mapMgr.mapBottom.convertToNodeSpaceAR(_0x10760b)).add(cc.v2(0x14, -0x14));
          } else {
            _0x10760b.addSelf(cc.v2(0x14, -0x14));
          }
          this.shadowNode.position = _0x10760b;
          this.shadowNode.scaleX = 0x2 * this.ownerNode.scaleX;
          this.shadowNode.scaleY = 0x2 * this.ownerNode.scaleY;
          var _0x1fa753 = this.ownerNode.angle;
          if (this.isKnife && this.ownerNode.parent) {
            _0x1fa753 = this.ownerNode.angle + this.ownerNode.parent.angle;
          }
          this.shadowNode.angle = _0x1fa753 + this.rtDiff;
          if (!this.ownerNode.parent) {
            this.node.removeFromParent();
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonValue': "CommonValue",
      'Tools': "Tools"
    }],
    'StageUI': [function (_0x3316c3, _0x2e1e9d, _0x1d626a) {
      'use strict';
  
      cc._RF.push(_0x2e1e9d, "71b596aP6ZD0KhJuzDq8LGi", 'StageUI');
      var _0x2cf81a = _0x3316c3("PfNum");
      var _0x39392a = _0x3316c3("CommonEnum");
      var _0x31ff91 = _0x3316c3("CommonConfig");
      var _0x2e4622 = _0x3316c3('CommonFunc');
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'node_stages': cc.Node,
          'node_gray': cc.Node,
          'node_shield': cc.Node,
          'list_stage': [cc.Node],
          'pf_num': cc.Prefab,
          'atlas_game': cc.SpriteAtlas,
          'atlas_homeui': cc.SpriteAtlas
        },
        'onLoad': function () {
          _0x2e4622.GFunc.set_click(this.node_shield, function () {}, this);
        },
        'init': function (_0x1f43c3) {
          for (var _0x565471 = 0x0; _0x565471 < this.list_stage.length; _0x565471++) {
            var _0x1d18d1 = this.list_stage[_0x565471];
            var _0xed2625 = _0x1f43c3 - 0x2 + _0x565471;
            var _0x25a162 = _0x31ff91.GConfig.LevelDict[_0xed2625];
            if (_0xed2625 > 0x0 && _0x25a162 && _0xed2625 <= _0x31ff91.GConfig.MaxLevel) {
              if (_0x25a162.boss) {
                var _0x485103 = new cc.Node();
                _0x1d18d1.addChild(_0x485103);
                _0x485103.name = "boss";
                var _0x1816b4 = _0x485103.addComponent(cc.Sprite);
                _0x485103.setPosition(-0x5, 0x8);
                _0x2e4622.GFunc.changeAtlasSprite(this.atlas_homeui, _0x1816b4, "btn_stage_boss");
              } else {
                (_0x485103 = cc.instantiate(this.pf_num)).setPosition(-0x5, 0x8);
                _0x1d18d1.addChild(_0x485103);
                _0x485103.name = 'num';
                var _0x75108b = _0x485103.getComponent(_0x2cf81a);
                _0x75108b.setParam(_0x39392a.Enum_Num.Blood, cc.v2(0.5, 0.5), 0x1, this.atlas_game);
                _0x75108b.setNum(_0xed2625);
                if (_0xed2625 > 0x9 && _0xed2625 < 0x64) {
                  if (_0x75108b) {
                    _0x75108b.node.scale *= 0.75;
                  }
                } else if (_0xed2625 > 0x63 && _0x75108b) {
                  _0x75108b.node.scale *= 0.66;
                }
              }
            } else {
              _0x1d18d1.active = false;
            }
            if (_0x565471 == this.list_stage.length - 0x1) {
              _0x1d18d1.opacity = 0x0;
            }
          }
        },
        'showRound': function (_0x45b9a5, _0x4cbebc, _0x801f61, _0x5d9051, _0x42d369) {
          if (_0x4cbebc < _0x801f61) {
            if (_0x45b9a5) {
              _0x45b9a5.color = cc.color(0x4, 0x25, 0x42, 0xff);
              _0x45b9a5.node.scale = 0.45;
            }
            if (_0x42d369) {
              _0x42d369.color = cc.color(0x4, 0x25, 0x42, 0xff);
              _0x42d369.scale = 0.9;
            }
          } else if (_0x4cbebc == _0x801f61) {
            if (_0x45b9a5) {
              _0x45b9a5.node.scale = 0.62;
              _0x45b9a5.color = cc.color(0xff, 0xff, 0xff, 0xff);
            }
            if (_0x42d369) {
              _0x42d369.color = cc.color(0xff, 0xff, 0xff, 0xff);
              _0x42d369.scale = 0x1;
            }
          } else {
            if (_0x45b9a5) {
              _0x45b9a5.node.scale = 0.45;
              _0x45b9a5.color = cc.color(0xb4, 0xd8, 0xe3, 0xff);
            }
            if (_0x42d369) {
              _0x42d369.color = cc.color(0xb4, 0xd8, 0xe3, 0xff);
              _0x42d369.scale = 0.9;
            }
          }
          if (_0x5d9051 > 0x9 && _0x5d9051 < 0x64) {
            if (_0x45b9a5) {
              _0x45b9a5.node.scale *= 0.9;
            }
          } else if (_0x5d9051 > 0x63 && _0x45b9a5) {
            _0x45b9a5.node.scale *= 0.66;
          }
        },
        'showRoundSpecial': function () {
          var _0xe8cc90 = this.list_stage[0x3];
          var _0x31562a = cc.instantiate(_0xe8cc90);
          _0xe8cc90.parent.addChild(_0x31562a);
          var _0x5ed2cd = cc.fadeTo(_0x31ff91.GConfig.actionFrameTime, 0xff);
          var _0x5226ac = cc.fadeTo(0x6 * _0x31ff91.GConfig.actionFrameTime, 0x0);
          var _0x2c91af = cc.scaleTo(_0x31ff91.GConfig.actionFrameTime, 1.5);
          var _0x4eaf81 = cc.scaleTo(0x6 * _0x31ff91.GConfig.actionFrameTime, 0x4);
          var _0x18f746 = cc.spawn(_0x5ed2cd, _0x2c91af);
          var _0x56e55e = cc.spawn(_0x5226ac, _0x4eaf81);
          var _0xde7c1f = cc.sequence(_0x18f746, _0x56e55e, cc.removeSelf());
          _0x31562a.runAction(_0xde7c1f);
        },
        'showNext': function () {
          this.changeStage();
        },
        'changeStage': function () {
          for (var _0x1dfdbb = 0x0; _0x1dfdbb < this.list_stage.length; _0x1dfdbb++) {
            var _0x2f08f3 = this.list_stage[_0x1dfdbb];
            if (0x0 == _0x1dfdbb) {
              _0x2f08f3.opacity = 0x0;
            } else {
              if (_0x1dfdbb == this.list_stage.length - 0x1) {
                var _0x19ec12 = this.list_stage[_0x1dfdbb - 0x1];
                _0x2f08f3.opacity = 0xff;
                _0x2f08f3.setPosition(_0x19ec12.getPosition());
                _0x2f08f3.scale = _0x19ec12.scale;
              } else {
                _0x19ec12 = this.list_stage[_0x1dfdbb - 0x1];
                _0x2f08f3.setPosition(_0x19ec12.getPosition());
                if (0x2 == _0x1dfdbb) {
                  var _0x5f15a7 = _0x2f08f3.getComponent(cc.Sprite);
                  _0x2e4622.GFunc.changeAtlasSprite(this.atlas_homeui, _0x5f15a7, "btn_stage_finish");
                } else if (0x3 == _0x1dfdbb) {
                  _0x5f15a7 = _0x2f08f3.getComponent(cc.Sprite);
                  _0x2e4622.GFunc.changeAtlasSprite(this.atlas_homeui, _0x5f15a7, "btn_stage_cur");
                }
              }
            }
          }
        }
      });
      cc._RF.pop();
    }, {
      'CommonConfig': "CommonConfig",
      'CommonEnum': 'CommonEnum',
      'CommonFunc': "CommonFunc",
      'PfNum': "PfNum"
    }],
    'Test': [function (_0x38635c, _0x341471, _0x3e9d9b) {
      'use strict';
  
      cc._RF.push(_0x341471, '81c24uI3WVGf4Qr9NFE0Q9+', "Test");
      var _0x220341 = _0x38635c('GameData');
      var _0x4fc4d1 = _0x38635c('CommonFunc');
      var _0xdbdcb2 = _0x38635c("CommonValue");
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'theme': cc.EditBox,
          'moveType': cc.EditBox,
          'mapStop': cc.EditBox,
          'editArr': [cc.EditBox]
        },
        'ctor': function () {},
        'onLoad': function () {
          this.theme.string = _0x220341.TData.ThemeId + '';
          this.editArr[0x0].string = _0x220341.TData.WeaponCount + '';
          this.editArr[0x2].string = _0x220341.TData.HeroRotateSpeed + '';
          this.editArr[0x4].string = _0x220341.TData.HeroRaduis + '';
          this.editArr[0x11].string = _0x220341.TData.HWeaponCountIn + '';
          this.editArr[0x12].string = _0x220341.TData.HRotateSpeedIn + '';
          this.editArr[0x13].string = _0x220341.TData.HeroAttackIn + '';
          this.editArr[0x14].string = _0x220341.TData.HeroRaduisIn + '';
          this.editArr[0x15].string = _0x220341.TData.EnemyOffset + '';
        },
        'start': function () {
          _0x4fc4d1.GFunc.adjustScreen(this.node);
        },
        'onBtnClicked': function () {
          _0x220341.TData.ThemeId = parseInt(this.theme.string);
          _0x220341.TData.WeaponCount = parseInt(this.editArr[0x0].string);
          _0x220341.TData.HeroRotateSpeed = parseInt(this.editArr[0x2].string);
          _0x220341.TData.HeroRaduis = parseInt(this.editArr[0x4].string);
          _0x220341.TData.HWeaponCountIn = parseInt(this.editArr[0x11].string);
          _0x220341.TData.HRotateSpeedIn = parseInt(this.editArr[0x12].string);
          _0x220341.TData.HeroAttackIn = parseInt(this.editArr[0x13].string);
          _0x220341.TData.HeroRaduisIn = parseInt(this.editArr[0x14].string);
          _0x220341.TData.EnemyOffset = Number(this.editArr[0x15].string);
          this.node.active = false;
          _0xdbdcb2.GValue.EntityWorld.gameStart(_0x220341.TData.ThemeId);
        }
      });
      cc._RF.pop();
    }, {
      'CommonFunc': "CommonFunc",
      'CommonValue': 'CommonValue',
      'GameData': "GameData"
    }],
    'Tools': [function (_0xf3a415, _0x4ed22a, _0x5d26de) {
      'use strict';
  
      cc._RF.push(_0x4ed22a, "f8143EsQ8ZDkLEmvJuGuuy5", "Tools");
      var _0x1ebd5f = _0x4ed22a.exports;
      var _0x2a4e4c = _0xf3a415('CommonConfig');
      var _0x2b08a1 = _0xf3a415("CommonValue");
      var _0x41c616 = _0xf3a415("GameData");
      var _0x562189 = function () {
        function _0x436675() {
          this.charArr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
        }
        _0x436675.prototype.getCurTimestamp = function () {
          var _0x46d81b = new Date();
          return Date.parse(_0x46d81b.toString());
        };
        _0x436675.prototype.log = function (_0x3d6ceb) {
          var _0x21b99b = [];
          for (var _0x4588bf = 0x1; _0x4588bf < arguments.length; _0x4588bf++) {
            _0x21b99b[_0x4588bf - 0x1] = arguments[_0x4588bf];
          }
          if (_0x2a4e4c.GConfig.hasLog) {
            console.log.apply(console, [_0x3d6ceb].concat(_0x21b99b));
          }
        };
        _0x436675.prototype.error = function (_0x5474ea) {
          var _0x356a88 = [];
          for (var _0x3b3bba = 0x1; _0x3b3bba < arguments.length; _0x3b3bba++) {
            _0x356a88[_0x3b3bba - 0x1] = arguments[_0x3b3bba];
          }
          console.error.apply(console, [_0x5474ea].concat(_0x356a88));
        };
        _0x436675.prototype.warn = function (_0x60647c) {
          var _0x544f28 = [];
          for (var _0xbda3d6 = 0x1; _0xbda3d6 < arguments.length; _0xbda3d6++) {
            _0x544f28[_0xbda3d6 - 0x1] = arguments[_0xbda3d6];
          }
          console.warn.apply(console, [_0x60647c].concat(_0x544f28));
        };
        _0x436675.prototype.random_int = function (_0x40e8bb, _0x4de900) {
          var _0x2b03de = _0x40e8bb + (_0x4de900 - _0x40e8bb + 0x1) * Math.random();
          var _0x46325f = Math.floor(_0x2b03de);
          if (_0x46325f < _0x40e8bb) {
            _0x46325f = _0x40e8bb;
          } else if (_0x46325f > _0x4de900) {
            _0x46325f = _0x4de900;
          }
          return _0x46325f;
        };
        _0x436675.prototype.isLaterDay = function (_0x584336) {
          var _0x599ba4 = false;
          var _0x34c7a5 = new Date(_0x584336);
          var _0x5e281d = _0x34c7a5.getFullYear();
          var _0x52d780 = _0x34c7a5.getMonth();
          var _0x43889a = _0x34c7a5.getDate();
          var _0x19e2bd = new Date();
          var _0x3cb61e = _0x19e2bd.getFullYear();
          var _0x2f0d04 = _0x19e2bd.getMonth();
          var _0x53c508 = _0x19e2bd.getDate();
          if (_0x5e281d != _0x3cb61e) {
            if (_0x5e281d < _0x3cb61e) {
              _0x599ba4 = true;
            }
          } else if (_0x52d780 != _0x2f0d04) {
            if (_0x52d780 < _0x2f0d04) {
              _0x599ba4 = true;
            }
          } else if (_0x43889a < _0x53c508) {
            _0x599ba4 = true;
          }
          return _0x599ba4;
        };
        _0x436675.prototype.stringToPoint = function (_0x160a4c, _0x2d91b8) {
          var _0x307a95 = cc.Vec2.ZERO;
          if ('' != _0x160a4c) {
            var _0x352926 = _0x160a4c.split(_0x2d91b8);
            if (_0x352926.length > 0x1) {
              _0x307a95 = cc.v2(Number(_0x352926[0x0]), Number(_0x352926[0x1]));
            }
          }
          return _0x307a95;
        };
        _0x436675.prototype.stringToSize = function (_0xeb5d30, _0x426f12) {
          var _0x2ca929 = cc.Size.ZERO;
          if ('' != _0xeb5d30) {
            var _0x2298aa = _0xeb5d30.split(_0x426f12);
            if (_0x2298aa.length > 0x1) {
              _0x2ca929 = cc.size(Number(_0x2298aa[0x0]), Number(_0x2298aa[0x1]));
            }
          }
          return _0x2ca929;
        };
        _0x436675.prototype.stringToNumber = function (_0x257225, _0x5a68cc) {
          var _0x2446b6 = [];
          var _0x50baf0 = _0x257225.split(_0x5a68cc);
          for (var _0x4364ed = 0x0; _0x4364ed < _0x50baf0.length; _0x4364ed++) {
            var _0xf1f62c = _0x50baf0[_0x4364ed];
            if ('' != _0xf1f62c) {
              _0x2446b6.push(Number(_0xf1f62c));
            }
          }
          return _0x2446b6;
        };
        _0x436675.prototype.getPosDis = function (_0x52b5b9, _0x123c53) {
          var _0x2e527b = _0x123c53.x - _0x52b5b9.x;
          var _0x16b13d = _0x123c53.y - _0x52b5b9.y;
          return Math.sqrt(_0x2e527b * _0x2e527b + _0x16b13d * _0x16b13d);
        };
        _0x436675.prototype.setUrlFrame = function (_0x5529f8, _0x48fe54, _0x223236) {
          if (undefined === _0x223236) {
            _0x223236 = null;
          }
          if (undefined != _0x5529f8 && null != _0x5529f8 && '' != _0x5529f8) {
            cc.loader.load({
              'url': _0x5529f8,
              'type': "png"
            }, function (_0x4e1221, _0x306bc2) {
              if (_0x4e1221) {
                this.error(_0x4e1221.message || _0x4e1221);
              } else {
                var _0x119cc9 = new cc.SpriteFrame(_0x306bc2);
                _0x48fe54.spriteFrame = _0x119cc9;
                if (_0x223236) {
                  _0x223236();
                }
              }
            }.bind(this));
          }
        };
        _0x436675.prototype.loadResSprite = function (_0x22cfab, _0x450d79, _0x215bb5) {
          var _0x1196bf = this;
          if (undefined === _0x215bb5) {
            _0x215bb5 = null;
          }
          cc.loader.loadRes(_0x22cfab, cc.SpriteFrame, function (_0x309bb2, _0x133bed) {
            if (_0x309bb2) {
              _0x1196bf.error(_0x309bb2);
            } else {
              if (_0x450d79) {
                _0x450d79.spriteFrame = _0x133bed;
              }
              if (_0x215bb5) {
                _0x215bb5(_0x133bed);
              }
            }
          });
        };
        _0x436675.prototype.getConstructor = function (_0xfcfc40) {
          return _0xfcfc40 ? "string" == typeof _0xfcfc40 ? cc.js.getClassByName(_0xfcfc40) : _0xfcfc40 : null;
        };
        _0x436675.prototype.createPrefab = function (_0x484f2e, _0x4668fd) {
          var _0x42c41a = cc.instantiate(_0x4668fd);
          _0x42c41a.parent = _0x484f2e;
          return _0x42c41a;
        };
        _0x436675.prototype.createPrefabCom = function (_0x5f26c8, _0x12dcc6, _0x56ebf1) {
          return this.createPrefab(_0x5f26c8, _0x12dcc6).getComponent(_0x56ebf1);
        };
        _0x436675.prototype.timedat = function (_0x30b957) {
          var _0x3ae59e = new Date(_0x30b957);
          return _0x3ae59e.getFullYear() + '-' + (_0x3ae59e.getMonth() + 0x1) + '-' + _0x3ae59e.getDate() + '-' + _0x3ae59e.getHours();
        };
        _0x436675.prototype.getWeek = function (_0x2fa50e) {
          var _0x435e2a = '';
          if (0x0 == _0x2fa50e.getDay()) {
            _0x435e2a = "星期日";
          }
          if (0x1 == _0x2fa50e.getDay()) {
            _0x435e2a = "星期一";
          }
          if (0x2 == _0x2fa50e.getDay()) {
            _0x435e2a = '星期二';
          }
          if (0x3 == _0x2fa50e.getDay()) {
            _0x435e2a = "星期三";
          }
          if (0x4 == _0x2fa50e.getDay()) {
            _0x435e2a = "星期四";
          }
          if (0x5 == _0x2fa50e.getDay()) {
            _0x435e2a = "星期五";
          }
          if (0x6 == _0x2fa50e.getDay()) {
            _0x435e2a = "星期六";
          }
          return _0x435e2a;
        };
        _0x436675.prototype.getLimitStr = function (_0x4f8099, _0x264fa4) {
          return this.getStringCharacterLength(_0x4f8099) > _0x264fa4 ? this.subStrByCharacter(_0x4f8099, _0x264fa4) + "..." : _0x4f8099;
        };
        _0x436675.prototype.getStringCharacterLength = function (_0x31912d) {
          var _0x464684 = 0x0;
          var _0x39f7cd = -0x1;
          if (_0x31912d) {
            for (var _0x369d0c = 0x0; _0x369d0c < _0x31912d.length; _0x369d0c++) {
              _0x464684 += (_0x39f7cd = _0x31912d.charCodeAt(_0x369d0c)) >= 0x0 && _0x39f7cd <= 0x80 ? 0x1 : 0x2;
            }
          }
          return _0x464684;
        };
        _0x436675.prototype.subStrByCharacter = function (_0x3d1d6c, _0x1459ed) {
          var _0x249711 = 0x0;
          var _0x1e7f54 = 0x0;
          var _0x42350a = -0x1;
          for (var _0x1f8b48 = 0x0; _0x1f8b48 < _0x3d1d6c.length && !((_0x1e7f54 += (_0x42350a = _0x3d1d6c.charCodeAt(_0x1f8b48)) >= 0x0 && _0x42350a <= 0x80 ? 0x1 : 0x2) > _0x1459ed); _0x1f8b48++) {
            _0x249711 += 0x1;
          }
          return _0x3d1d6c.substring(0x0, _0x249711);
        };
        _0x436675.prototype.version_compare = function (_0x1438a4, _0xe2b5cc) {
          if (_0x1438a4 === _0xe2b5cc) {
            return 0x0;
          }
          var _0xd9c82 = _0x1438a4.split('.');
          var _0x1e5254 = _0xe2b5cc.split('.');
          var _0x58fd61 = Math.min(_0xd9c82.length, _0x1e5254.length);
          for (var _0x13bfd7 = 0x0; _0x13bfd7 < _0x58fd61; _0x13bfd7++) {
            if (parseInt(_0xd9c82[_0x13bfd7]) > parseInt(_0x1e5254[_0x13bfd7])) {
              return 0x1;
            }
            if (parseInt(_0xd9c82[_0x13bfd7]) < parseInt(_0x1e5254[_0x13bfd7])) {
              return -0x1;
            }
          }
          return _0xd9c82.length > _0x1e5254.length ? 0x1 : _0xd9c82.length < _0x1e5254.length ? -0x1 : 0x0;
        };
        _0x436675.prototype.numberDiffAbs = function (_0x4064b1, _0x3542a1) {
          return Math.abs(_0x4064b1 - _0x3542a1);
        };
        _0x436675.prototype.numberDiff = function (_0x553730, _0x145356) {
          return _0x553730 - _0x145356;
        };
        _0x436675.prototype.isNumberDiffRange = function (_0xbd652c, _0x2212a3, _0x4bdb24) {
          return this.numberDiffAbs(_0xbd652c, _0x2212a3) <= _0x4bdb24;
        };
        _0x436675.prototype.isAbsNumDiffRange = function (_0x3d7449, _0x25b6ba, _0x376eeb) {
          var _0xf70d97 = Math.abs(_0x3d7449);
          var _0x43c4f2 = Math.abs(_0x3d7449);
          return Math.abs(_0xf70d97 - _0x43c4f2) <= _0x376eeb;
        };
        _0x436675.prototype.isVec2DiffRange = function (_0xf26c6d, _0x1f6246, _0x4936a8) {
          var _0x179f49 = _0xf26c6d.sub(_0x1f6246);
          return Math.abs(_0x179f49.x) <= _0x4936a8 && Math.abs(_0x179f49.y) <= _0x4936a8;
        };
        _0x436675.prototype.getRandomUserId = function () {
          var _0x2cc3f7 = this.charArr.length - 0x1;
          var _0x5f2294 = '';
          for (var _0x45db5f = 0x0; _0x45db5f < 0x20; _0x45db5f++) {
            var _0x104a20 = this.random_int(0x0, _0x2cc3f7);
            _0x5f2294 += this.charArr[_0x104a20];
          }
          return _0x5f2294;
        };
        _0x436675.prototype.numberToString = function (_0x383bb2) {
          var _0x56e02a = '';
          var _0x10c4d3 = '';
          if (_0x383bb2 < 0x3e8) {
            _0x56e02a = _0x383bb2.toString();
          } else {
            var _0x5eaa89 = 0x0;
            var _0x22c45c = 0x0;
            var _0x19c63d = 0x0;
            if (_0x383bb2 >= 0xf4240) {
              _0x5eaa89 = Math.floor(_0x383bb2 / 0xf4240);
              _0x22c45c = Math.floor(_0x383bb2 % 0xf4240 / 0x186a0);
              _0x19c63d = Math.floor(_0x383bb2 % 0x186a0 / 0x2710);
              _0x10c4d3 = 'm';
            } else if (_0x383bb2 >= 0x3e8) {
              _0x5eaa89 = Math.floor(_0x383bb2 / 0x3e8);
              _0x22c45c = Math.floor(_0x383bb2 % 0x3e8 / 0x64);
              _0x19c63d = Math.floor(_0x383bb2 % 0x64 / 0xa);
              _0x10c4d3 = 'k';
            }
            _0x56e02a = _0x5eaa89 > 0x63 ? _0x5eaa89.toString() : _0x5eaa89 > 0x9 ? _0x5eaa89 + '.' + _0x22c45c : _0x5eaa89 + '.' + _0x22c45c + _0x19c63d;
          }
          return _0x56e02a + _0x10c4d3;
        };
        _0x436675.prototype.getRandomVec2 = function (_0x39893d, _0x400c7a) {
          return cc.v2(this.random_int(_0x39893d.x, _0x39893d.y), this.random_int(_0x400c7a.x, _0x400c7a.y));
        };
        _0x436675.prototype.subScreen = function (_0x4e5339, _0x383571) {
          var _0x16502f = cc.Vec2.ZERO;
          switch (_0x4e5339) {
            case 0x0:
              _0x16502f = cc.v2(0.5 * _0x2b08a1.GValue.Size_View.width, 0.5 * _0x2b08a1.GValue.Size_View.height);
              break;
            case 0x1:
              _0x16502f = cc.v2(0.5 * _0x2b08a1.GValue.Size_View.width, _0x2b08a1.GValue.Size_View.height);
              break;
            case 0x2:
              _0x16502f = cc.v2(0.5 * _0x2b08a1.GValue.Size_View.width, 0x0);
              break;
            case 0x3:
              _0x16502f = cc.v2(0x0, 0.5 * _0x2b08a1.GValue.Size_View.height);
              break;
            case 0x4:
              _0x16502f = cc.v2(_0x2b08a1.GValue.Size_View.width, 0.5 * _0x2b08a1.GValue.Size_View.height);
          }
          return _0x383571.sub(_0x16502f);
        };
        _0x436675.prototype.isInSreen = function (_0x36541c, _0x5a088c) {
          if (undefined === _0x5a088c) {
            _0x5a088c = 0x0;
          }
          return cc.rect(_0x5a088c, _0x5a088c, _0x2b08a1.GValue.Size_View.width - 0x2 * _0x5a088c, _0x2b08a1.GValue.Size_View.height - 0x2 * _0x5a088c).contains(_0x36541c);
        };
        _0x436675.prototype.getEnemyDropAble = function () {
          return _0x2b08a1.GValue.EntityWorld.enemyDropNumber < _0x2b08a1.GValue.EntityWorld.levelData.dropKCount;
        };
        _0x436675.prototype.getRadiusByKnifeInCount = function (_0x37593e) {
          if (undefined === _0x37593e) {
            _0x37593e = 0x0;
          }
          return _0x41c616.TData.HeroRaduisIn;
        };
        _0x436675.prototype.getRadiusByKnifeCount = function (_0x10e323) {
          var _0x151db2 = _0x41c616.TData.HeroRaduis + 0x23 * (_0x10e323 - _0x41c616.TData.WeaponCount) / 0x7;
          return _0x151db2 < _0x41c616.TData.HeroRaduis ? _0x41c616.TData.HeroRaduis : _0x151db2;
        };
        _0x436675.prototype.getRadioByCount = function (_0x36f4b2) {
          return (_0x36f4b2 < 0x8 ? 0x0 : _0x36f4b2 > 0x14 ? 0xc : _0x36f4b2 - 0x8) / 0xc + 0x1;
        };
        _0x436675.prototype.getIntervalByCount = function (_0xe7a234) {
          return _0xe7a234 < 0x32 ? 0xa : 0x1f4 / _0xe7a234;
        };
        _0x436675.prototype.cleanUp = function (_0x353714) {
          if (_0x353714 && _0x353714.node) {
            if (cc.game.isPersistRootNode(_0x353714.node)) {
              cc.game.removePersistRootNode(_0x353714.node);
            }
            _0x353714.node.destroy();
          }
        };
        _0x436675.prototype.arrContains = function (_0x3c5d93, _0x4d0342) {
          if (_0x3c5d93) {
            for (var _0x5038ed = 0x0; _0x5038ed < _0x3c5d93.length; _0x5038ed++) {
              if (_0x3c5d93[_0x5038ed] === _0x4d0342) {
                return true;
              }
            }
          }
          return false;
        };
        _0x436675.prototype.arrRemove = function (_0x4bf76a, _0x38ac9a) {
          for (var _0x1a830a = 0x0; _0x1a830a < _0x4bf76a.length; _0x1a830a++) {
            if (_0x4bf76a[_0x1a830a] === _0x38ac9a) {
              _0x4bf76a.splice(_0x1a830a, 0x1);
              return true;
            }
          }
          return false;
        };
        _0x436675.prototype.arrContain = function (_0x17d7f3, _0x1cc88e) {
          return !(!_0x17d7f3 || !_0x1cc88e) && _0x17d7f3.indexOf(_0x1cc88e) >= 0x0;
        };
        _0x436675.prototype.addScript = function (_0x113ba0, _0xcc8c1a) {
          if (_0x113ba0 && _0xcc8c1a) {
            var _0x13c9f0 = _0x113ba0.getComponent(_0xcc8c1a);
            if (!_0x13c9f0) {
              _0x13c9f0 = _0x113ba0.addComponent(_0xcc8c1a);
            }
            return _0x13c9f0;
          }
          return null;
        };
        _0x436675.prototype.removeChildByName = function (_0x186895, _0x356736) {
          if (_0x186895) {
            var _0x454d1a = _0x186895.getChildByName(_0x356736);
            if (_0x454d1a) {
              _0x454d1a.removeFromParent();
            }
          }
        };
        _0x436675.prototype.isRectInterectLine = function (_0x50a99b, _0x4893bd, _0x2ff2f1) {
          if (_0x50a99b.contains(_0x4893bd) || _0x50a99b.contains(_0x2ff2f1)) {
            return true;
          }
          var _0x5e4c6b = new cc.Vec2(_0x50a99b.x, _0x50a99b.y);
          var _0x2e72ad = new cc.Vec2(_0x50a99b.x, _0x50a99b.yMax);
          var _0x2934a0 = new cc.Vec2(_0x50a99b.xMax, _0x50a99b.yMax);
          var _0x10c515 = new cc.Vec2(_0x50a99b.xMax, _0x50a99b.y);
          return !!this.isLineLine(_0x4893bd, _0x2ff2f1, _0x5e4c6b, _0x2934a0) || !!this.isLineLine(_0x4893bd, _0x2ff2f1, _0x2e72ad, _0x10c515);
        };
        _0x436675.prototype.isLineLine = function (_0x2c665c, _0x370f3d, _0x4bda45, _0x382b26) {
          var _0x35f3ce = (_0x382b26.x - _0x4bda45.x) * (_0x2c665c.y - _0x4bda45.y) - (_0x382b26.y - _0x4bda45.y) * (_0x2c665c.x - _0x4bda45.x);
          var _0x198708 = (_0x370f3d.x - _0x2c665c.x) * (_0x2c665c.y - _0x4bda45.y) - (_0x370f3d.y - _0x2c665c.y) * (_0x2c665c.x - _0x4bda45.x);
          var _0x481121 = (_0x382b26.y - _0x4bda45.y) * (_0x370f3d.x - _0x2c665c.x) - (_0x382b26.x - _0x4bda45.x) * (_0x370f3d.y - _0x2c665c.y);
          if (0x0 !== _0x481121) {
            var _0x2e53fb = _0x35f3ce / _0x481121;
            var _0x58d689 = _0x198708 / _0x481121;
            if (0x0 <= _0x2e53fb && _0x2e53fb <= 0x1 && 0x0 <= _0x58d689 && _0x58d689 <= 0x1) {
              return true;
            }
          }
          return false;
        };
        _0x436675.prototype.clamp = function (_0x1c5732, _0x22bf90, _0x3bd11b) {
          return Math.max(_0x1c5732, Math.min(_0x22bf90, _0x3bd11b));
        };
        _0x436675.prototype.smoothDamp = function (_0x426dbb, _0x167d1e, _0x8b6fda, _0x4e0bf5, _0x37e9a8, _0x12c6b7) {
          var _0x304d53 = 0x2 / (_0x4e0bf5 = Math.max(0.0001, _0x4e0bf5));
          var _0x1d3ffd = _0x304d53 * _0x12c6b7;
          var _0x1f3450 = 0x1 / (0x1 + _0x1d3ffd + 0.48 * _0x1d3ffd * _0x1d3ffd + 0.235 * _0x1d3ffd * _0x1d3ffd * _0x1d3ffd);
          var _0x9ae5d3 = _0x426dbb - _0x167d1e;
          var _0x528a16 = _0x167d1e;
          var _0x3426b4 = _0x37e9a8 * _0x4e0bf5;
          var _0xb09935 = (_0x8b6fda + _0x304d53 * (_0x9ae5d3 = this.clamp(_0x9ae5d3, -_0x3426b4, _0x3426b4))) * _0x12c6b7;
          _0x8b6fda = (_0x8b6fda - _0x304d53 * _0xb09935) * _0x1f3450;
          var _0x56eac7 = (_0x167d1e = _0x426dbb - _0x9ae5d3) + (_0x9ae5d3 + _0xb09935) * _0x1f3450;
          if (_0x528a16 - _0x426dbb > 0x0 == _0x56eac7 > _0x528a16) {
            _0x8b6fda = ((_0x56eac7 = _0x528a16) - _0x528a16) / _0x12c6b7;
          }
          return [_0x56eac7, _0x8b6fda];
        };
        _0x436675.prototype.isFloatEqual = function (_0x3e232a, _0xaa02e2) {
          return Math.abs(_0x3e232a - _0xaa02e2) < 0.01;
        };
        _0x436675.instance = new _0x436675();
        return _0x436675;
      }();
      _0x1ebd5f.DYTools = _0x562189.instance;
      cc._RF.pop();
    }, {
      'CommonConfig': 'CommonConfig',
      'CommonValue': "CommonValue",
      'GameData': "GameData"
    }],
    'Types': [function (_0x5c8ff2, _0x5a7c9a, _0x121326) {
      'use strict';
  
      cc._RF.push(_0x5a7c9a, "0be014Q8BJOLYJkjSh9j3Ie", 'Types');
      var _0x5b5d2e = _0x5a7c9a.exports;
      Object.defineProperty(_0x5b5d2e, "__esModule", {
        'value': true
      });
      _0x5b5d2e.EntityTag = cc.Enum({
        'None': -0x1,
        'Player': 0x1,
        'Enemy': 0x2
      });
      _0x5b5d2e.DWType = cc.Enum({
        'Knife': 0x1,
        'Laser': 0x2,
        'Fire': 0x3,
        'Ice': 0x4,
        'Electricity': 0x5
      });
      _0x5b5d2e.KnifeState = cc.Enum({
        'Drop': -0x1,
        'Normal': -0x1,
        'Capture': -0x1,
        'CaptureFinish': -0x1,
        'Attack': -0x1,
        'Defence': -0x1,
        'Release': -0x1,
        'Init': -0x1
      });
      _0x5b5d2e.ActionState = cc.Enum({
        'Begin': -0x1,
        'Ing': -0x1,
        'End': -0x1
      });
      _0x5b5d2e.AIMoveState = cc.Enum({
        'Normal': -0x1,
        'Moving': -0x1,
        'Thinking': -0x1
      });
      _0x5b5d2e.EnemyType = cc.Enum({
        'Normal': 0x1,
        'Special': 0x2,
        'Connect': 0xb,
        'Knife': 0x64,
        'Snake': 0x65,
        'Circle': 0x66,
        'Fire': 0x67
      });
      _0x5b5d2e.EnemyAttr = cc.Enum({
        'Normal': 0x1,
        'Sleep': 0x2,
        'Gold': 0x3,
        'RanDir': 0x4,
        'Thron': 0x5,
        'bulScreen': 0x6,
        'Doctor': 0x7,
        'Connect': 0x8,
        'Split': 0x9,
        'Vomit': 0xa,
        'Enter': 0xb,
        'Track': 0xc,
        'InitDir': 0xd,
        'SplitMin': 0x2711
      });
      _0x5b5d2e.EnemyAction = cc.Enum({
        'None': -0x1,
        'Action': 0x0,
        'Sleep': 0x1,
        'Awaking': 0x2,
        'Dead': 0x3
      });
      _0x5b5d2e.EnemyMoveType = cc.Enum({
        'Follow': 0x1,
        'Elastic': 0x2,
        'SpeedUp': 0x3
      });
      _0x5b5d2e.EnemyBuff = cc.Enum({
        'SlowDown': 0x1,
        'Frozen': 0x2,
        'Firing': 0x3,
        'Treat': 0x4
      });
      _0x5b5d2e.EnemyHurtState = cc.Enum({
        'None': -0x1,
        'Normal': 0x0,
        'Knife': 0x1,
        'Laser': 0x2,
        'Frozen': 0x3,
        'Fire': 0x4,
        'Ele': 0x5
      });
      _0x5b5d2e.EnemyAnim = cc.Enum({
        'Idle': 0x0,
        'HurtNormal': 0x1,
        'HurtLaser': 0x2,
        'Die': 0x3
      });
      _0x5b5d2e.BossType = cc.Enum({
        'Knife': 0x1,
        'Snake': 0x2,
        'Circle': 0x3,
        'Fire': 0x4,
        'Electr': 0x5
      });
      _0x5b5d2e.HeroState = cc.Enum({
        'Normal': 0x1,
        'StrongIII': 0x4,
        'Dead': 0x5
      });
      _0x5b5d2e.DropType = cc.Enum({
        'Weapon': 0x1,
        'Prop': 0x2
      });
      _0x5b5d2e.PropType = cc.Enum({
        'Strong': 0x1,
        'Slow': 0x2,
        'Gold': 0x3
      });
      _0x5b5d2e.PoolType = cc.Enum({
        'PLAYER': 0x0,
        'PLAYER_MAIN_FOLLOW': 0x1,
        'PLAYER_DW_FOLLOW': 0x2,
        'KNIFE': 0x3,
        'ENEMY': 0x4,
        'PROP': 0x5,
        'FOLLOW_ENEMY': 0x6,
        'EFFECT': 0x7,
        'DW_KNIFE': 0x8,
        'WALL': 0x9,
        'COUNT': 0xf
      });
      _0x5b5d2e.ShareType = cc.Enum({
        'NONE': -0x2,
        'HOME': 0x0,
        'WIN': 0x1
      });
      _0x5b5d2e.AdverType = cc.Enum({
        'Revive': -0x1
      });
      cc._RF.pop();
    }, {}],
    'aes': [function (_0x29b54b, _0x78dc47, _0x16d9e1) {
      'use strict';
  
      cc._RF.push(_0x78dc47, "113f4EatRFGB5803VZ8Lrwo", "aes");
      var _0x5ae716 = _0x78dc47.exports.CryptoJS = _0x5ae716 || function (_0x2ac367, _0x52fbf0) {
        var _0x4e9ab1 = {};
        var _0x2340d6 = _0x4e9ab1.lib = {};
        var _0x1e4a77 = function () {};
        var _0x2d787d = _0x2340d6.Base = {
          'extend': function (_0x200db7) {
            _0x1e4a77.prototype = this;
            var _0x59a519 = new _0x1e4a77();
            if (_0x200db7) {
              _0x59a519.mixIn(_0x200db7);
            }
            if (!_0x59a519.hasOwnProperty("init")) {
              _0x59a519.init = function () {
                _0x59a519.$super.init.apply(this, arguments);
              };
            }
            _0x59a519.init.prototype = _0x59a519;
            _0x59a519.$super = this;
            return _0x59a519;
          },
          'create': function () {
            var _0x23c510 = this.extend();
            _0x23c510.init.apply(_0x23c510, arguments);
            return _0x23c510;
          },
          'init': function () {},
          'mixIn': function (_0x326211) {
            for (var _0x4be802 in _0x326211) if (_0x326211.hasOwnProperty(_0x4be802)) {
              this[_0x4be802] = _0x326211[_0x4be802];
            }
            if (_0x326211.hasOwnProperty("toString")) {
              this.toString = _0x326211.toString;
            }
          },
          'clone': function () {
            return this.init.prototype.extend(this);
          }
        };
        var _0x16631b = _0x2340d6.WordArray = _0x2d787d.extend({
          'init': function (_0x15ac8b, _0x20eb11) {
            _0x15ac8b = this.words = _0x15ac8b || [];
            this.sigBytes = undefined != _0x20eb11 ? _0x20eb11 : 0x4 * _0x15ac8b.length;
          },
          'toString': function (_0x58fe16) {
            return (_0x58fe16 || _0x14cce3).stringify(this);
          },
          'concat': function (_0xcc5862) {
            var _0x5c8149 = this.words;
            var _0x5557a3 = _0xcc5862.words;
            var _0x139827 = this.sigBytes;
            _0xcc5862 = _0xcc5862.sigBytes;
            this.clamp();
            if (_0x139827 % 0x4) {
              for (var _0xa5016e = 0x0; _0xa5016e < _0xcc5862; _0xa5016e++) {
                _0x5c8149[_0x139827 + _0xa5016e >>> 0x2] |= (_0x5557a3[_0xa5016e >>> 0x2] >>> 0x18 - _0xa5016e % 0x4 * 0x8 & 0xff) << 0x18 - (_0x139827 + _0xa5016e) % 0x4 * 0x8;
              }
            } else {
              if (0xffff < _0x5557a3.length) {
                for (_0xa5016e = 0x0; _0xa5016e < _0xcc5862; _0xa5016e += 0x4) {
                  _0x5c8149[_0x139827 + _0xa5016e >>> 0x2] = _0x5557a3[_0xa5016e >>> 0x2];
                }
              } else {
                _0x5c8149.push.apply(_0x5c8149, _0x5557a3);
              }
            }
            this.sigBytes += _0xcc5862;
            return this;
          },
          'clamp': function () {
            var _0x57a02c = this.words;
            var _0x3669df = this.sigBytes;
            _0x57a02c[_0x3669df >>> 0x2] &= 0xffffffff << 0x20 - _0x3669df % 0x4 * 0x8;
            _0x57a02c.length = _0x2ac367.ceil(_0x3669df / 0x4);
          },
          'clone': function () {
            var _0x9d6b37 = _0x2d787d.clone.call(this);
            _0x9d6b37.words = this.words.slice(0x0);
            return _0x9d6b37;
          },
          'random': function (_0x376d4d) {
            var _0x3397f0 = [];
            for (var _0x5a559d = 0x0; _0x5a559d < _0x376d4d; _0x5a559d += 0x4) {
              _0x3397f0.push(0x100000000 * _0x2ac367.random() | 0x0);
            }
            return new _0x16631b.init(_0x3397f0, _0x376d4d);
          }
        });
        var _0x3df4a6 = _0x4e9ab1.enc = {};
        var _0x14cce3 = _0x3df4a6.Hex = {
          'stringify': function (_0x7e15fa) {
            var _0x311a7f = _0x7e15fa.words;
            _0x7e15fa = _0x7e15fa.sigBytes;
            var _0x437989 = [];
            for (var _0x668f40 = 0x0; _0x668f40 < _0x7e15fa; _0x668f40++) {
              var _0x534606 = _0x311a7f[_0x668f40 >>> 0x2] >>> 0x18 - _0x668f40 % 0x4 * 0x8 & 0xff;
              _0x437989.push((_0x534606 >>> 0x4).toString(0x10));
              _0x437989.push((0xf & _0x534606).toString(0x10));
            }
            return _0x437989.join('');
          },
          'parse': function (_0x8bb5a9) {
            var _0x16e657 = _0x8bb5a9.length;
            var _0x5cb487 = [];
            for (var _0xdb4ec = 0x0; _0xdb4ec < _0x16e657; _0xdb4ec += 0x2) {
              _0x5cb487[_0xdb4ec >>> 0x3] |= parseInt(_0x8bb5a9.substr(_0xdb4ec, 0x2), 0x10) << 0x18 - _0xdb4ec % 0x8 * 0x4;
            }
            return new _0x16631b.init(_0x5cb487, _0x16e657 / 0x2);
          }
        };
        var _0x5d073b = _0x3df4a6.Latin1 = {
          'stringify': function (_0x1f68a9) {
            var _0x2fcbbb = _0x1f68a9.words;
            _0x1f68a9 = _0x1f68a9.sigBytes;
            var _0x1351aa = [];
            for (var _0x1fee27 = 0x0; _0x1fee27 < _0x1f68a9; _0x1fee27++) {
              _0x1351aa.push(String.fromCharCode(_0x2fcbbb[_0x1fee27 >>> 0x2] >>> 0x18 - _0x1fee27 % 0x4 * 0x8 & 0xff));
            }
            return _0x1351aa.join('');
          },
          'parse': function (_0x3f3dea) {
            var _0x11e356 = _0x3f3dea.length;
            var _0x9c4015 = [];
            for (var _0x10fe68 = 0x0; _0x10fe68 < _0x11e356; _0x10fe68++) {
              _0x9c4015[_0x10fe68 >>> 0x2] |= (0xff & _0x3f3dea.charCodeAt(_0x10fe68)) << 0x18 - _0x10fe68 % 0x4 * 0x8;
            }
            return new _0x16631b.init(_0x9c4015, _0x11e356);
          }
        };
        var _0x1fe5a6 = _0x3df4a6.Utf8 = {
          'stringify': function (_0x275425) {
            try {
              return decodeURIComponent(escape(_0x5d073b.stringify(_0x275425)));
            } catch (_0x1b26ed) {
              throw Error("Malformed UTF-8 data===" + _0x1b26ed);
            }
          },
          'parse': function (_0x238083) {
            return _0x5d073b.parse(unescape(encodeURIComponent(_0x238083)));
          }
        };
        var _0x520049 = _0x2340d6.BufferedBlockAlgorithm = _0x2d787d.extend({
          'reset': function () {
            this._data = new _0x16631b.init();
            this._nDataBytes = 0x0;
          },
          '_append': function (_0x505cd2) {
            if ("string" == typeof _0x505cd2) {
              _0x505cd2 = _0x1fe5a6.parse(_0x505cd2);
            }
            this._data.concat(_0x505cd2);
            this._nDataBytes += _0x505cd2.sigBytes;
          },
          '_process': function (_0x2042f9) {
            var _0x4b9441 = this._data;
            var _0x252368 = _0x4b9441.words;
            var _0x2656aa = _0x4b9441.sigBytes;
            var _0x4f461c = this.blockSize;
            var _0x27ecc5 = _0x2656aa / (0x4 * _0x4f461c);
            _0x2042f9 = (_0x27ecc5 = _0x2042f9 ? _0x2ac367.ceil(_0x27ecc5) : _0x2ac367.max((0x0 | _0x27ecc5) - this._minBufferSize, 0x0)) * _0x4f461c;
            _0x2656aa = _0x2ac367.min(0x4 * _0x2042f9, _0x2656aa);
            if (_0x2042f9) {
              for (var _0x5c524a = 0x0; _0x5c524a < _0x2042f9; _0x5c524a += _0x4f461c) {
                this._doProcessBlock(_0x252368, _0x5c524a);
              }
              _0x5c524a = _0x252368.splice(0x0, _0x2042f9);
              _0x4b9441.sigBytes -= _0x2656aa;
            }
            return new _0x16631b.init(_0x5c524a, _0x2656aa);
          },
          'clone': function () {
            var _0x1751dd = _0x2d787d.clone.call(this);
            _0x1751dd._data = this._data.clone();
            return _0x1751dd;
          },
          '_minBufferSize': 0x0
        });
        _0x2340d6.Hasher = _0x520049.extend({
          'cfg': _0x2d787d.extend(),
          'init': function (_0x14fa24) {
            this.cfg = this.cfg.extend(_0x14fa24);
            this.reset();
          },
          'reset': function () {
            _0x520049.reset.call(this);
            this._doReset();
          },
          'update': function (_0x3cc82d) {
            this._append(_0x3cc82d);
            this._process();
            return this;
          },
          'finalize': function (_0x195ea9) {
            if (_0x195ea9) {
              this._append(_0x195ea9);
            }
            return this._doFinalize();
          },
          'blockSize': 0x10,
          '_createHelper': function (_0x3239bd) {
            return function (_0x70ae56, _0x39e50f) {
              return new _0x3239bd.init(_0x39e50f).finalize(_0x70ae56);
            };
          },
          '_createHmacHelper': function (_0x6121d2) {
            return function (_0x68b72b, _0x96f479) {
              return new _0x33f052.HMAC.init(_0x6121d2, _0x96f479).finalize(_0x68b72b);
            };
          }
        });
        var _0x33f052 = _0x4e9ab1.algo = {};
        return _0x4e9ab1;
      }(Math);
      (function () {
        var _0x15faac = _0x5ae716.lib.WordArray;
        _0x5ae716.enc.Base64 = {
          'stringify': function (_0x42da8b) {
            var _0x4811ec = _0x42da8b.words;
            var _0x3ab0d7 = _0x42da8b.sigBytes;
            var _0x1760c6 = this._map;
            _0x42da8b.clamp();
            _0x42da8b = [];
            for (var _0x4e1749 = 0x0; _0x4e1749 < _0x3ab0d7; _0x4e1749 += 0x3) {
              var _0x590ede = (_0x4811ec[_0x4e1749 >>> 0x2] >>> 0x18 - _0x4e1749 % 0x4 * 0x8 & 0xff) << 0x10 | (_0x4811ec[_0x4e1749 + 0x1 >>> 0x2] >>> 0x18 - (_0x4e1749 + 0x1) % 0x4 * 0x8 & 0xff) << 0x8 | _0x4811ec[_0x4e1749 + 0x2 >>> 0x2] >>> 0x18 - (_0x4e1749 + 0x2) % 0x4 * 0x8 & 0xff;
              for (var _0x153872 = 0x0; 0x4 > _0x153872 && _0x4e1749 + 0.75 * _0x153872 < _0x3ab0d7; _0x153872++) {
                _0x42da8b.push(_0x1760c6.charAt(_0x590ede >>> 0x6 * (0x3 - _0x153872) & 0x3f));
              }
            }
            if (_0x4811ec = _0x1760c6.charAt(0x40)) {
              for (; _0x42da8b.length % 0x4;) {
                _0x42da8b.push(_0x4811ec);
              }
            }
            return _0x42da8b.join('');
          },
          'parse': function (_0x4be29a) {
            var _0x576ac1 = _0x4be29a.length;
            var _0x334005 = this._map;
            if ((_0x3d4078 = _0x334005.charAt(0x40)) && -0x1 != (_0x3d4078 = _0x4be29a.indexOf(_0x3d4078))) {
              _0x576ac1 = _0x3d4078;
            }
            var _0x3d4078 = [];
            var _0x1d98d8 = 0x0;
            for (var _0x40373f = 0x0; _0x40373f < _0x576ac1; _0x40373f++) {
              if (_0x40373f % 0x4) {
                var _0x407052 = _0x334005.indexOf(_0x4be29a.charAt(_0x40373f - 0x1)) << _0x40373f % 0x4 * 0x2;
                var _0x27a3b1 = _0x334005.indexOf(_0x4be29a.charAt(_0x40373f)) >>> 0x6 - _0x40373f % 0x4 * 0x2;
                _0x3d4078[_0x1d98d8 >>> 0x2] |= (_0x407052 | _0x27a3b1) << 0x18 - _0x1d98d8 % 0x4 * 0x8;
                _0x1d98d8++;
              }
            }
            return _0x15faac.create(_0x3d4078, _0x1d98d8);
          },
          '_map': "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
      })();
      (function (_0x1e4b1f) {
        function _0x4abba8(_0x75afae, _0x4ab2b9, _0x81bf39, _0x319fd7, _0x90e91c, _0x4986d1, _0x584469) {
          return ((_0x75afae = _0x75afae + (_0x4ab2b9 & _0x81bf39 | ~_0x4ab2b9 & _0x319fd7) + _0x90e91c + _0x584469) << _0x4986d1 | _0x75afae >>> 0x20 - _0x4986d1) + _0x4ab2b9;
        }
        function _0x56ef37(_0xbfca0a, _0x199a45, _0x159950, _0x42c148, _0x475344, _0x11ae0d, _0x471dc1) {
          return ((_0xbfca0a = _0xbfca0a + (_0x199a45 & _0x42c148 | _0x159950 & ~_0x42c148) + _0x475344 + _0x471dc1) << _0x11ae0d | _0xbfca0a >>> 0x20 - _0x11ae0d) + _0x199a45;
        }
        function _0x14dd9d(_0x19f483, _0x2a4fee, _0x1ebbaf, _0x230ee9, _0x5f0f3c, _0x2c36e1, _0x2bd386) {
          return ((_0x19f483 = _0x19f483 + (_0x2a4fee ^ _0x1ebbaf ^ _0x230ee9) + _0x5f0f3c + _0x2bd386) << _0x2c36e1 | _0x19f483 >>> 0x20 - _0x2c36e1) + _0x2a4fee;
        }
        function _0x1d0419(_0x526922, _0x38fc33, _0x2c0af5, _0x5b394d, _0xe3d7a, _0x4e7aee, _0x49243a) {
          return ((_0x526922 = _0x526922 + (_0x2c0af5 ^ (_0x38fc33 | ~_0x5b394d)) + _0xe3d7a + _0x49243a) << _0x4e7aee | _0x526922 >>> 0x20 - _0x4e7aee) + _0x38fc33;
        }
        var _0x382019 = (_0x3d94b7 = _0x5ae716.lib).WordArray;
        var _0x464e4b = _0x3d94b7.Hasher;
        var _0x3d94b7 = _0x5ae716.algo;
        var _0x579f38 = [];
        for (var _0x16c076 = 0x0; 0x40 > _0x16c076; _0x16c076++) {
          _0x579f38[_0x16c076] = 0x100000000 * _0x1e4b1f.abs(_0x1e4b1f.sin(_0x16c076 + 0x1)) | 0x0;
        }
        _0x3d94b7 = _0x3d94b7.MD5 = _0x464e4b.extend({
          '_doReset': function () {
            this._hash = new _0x382019.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]);
          },
          '_doProcessBlock': function (_0x254274, _0x3297ea) {
            for (var _0x48fcb2 = 0x0; 0x10 > _0x48fcb2; _0x48fcb2++) {
              var _0x1636b1 = _0x254274[_0x4f91c6 = _0x3297ea + _0x48fcb2];
              _0x254274[_0x4f91c6] = 0xff00ff & (_0x1636b1 << 0x8 | _0x1636b1 >>> 0x18) | 0xff00ff00 & (_0x1636b1 << 0x18 | _0x1636b1 >>> 0x8);
            }
            _0x48fcb2 = this._hash.words;
            var _0x1b6eaa;
            var _0xd9eab3;
            var _0x4f91c6 = _0x254274[_0x3297ea + 0x0];
            _0x1636b1 = _0x254274[_0x3297ea + 0x1];
            var _0x18442d = _0x254274[_0x3297ea + 0x2];
            var _0x19d145 = _0x254274[_0x3297ea + 0x3];
            var _0x22f849 = _0x254274[_0x3297ea + 0x4];
            var _0x1d7937 = _0x254274[_0x3297ea + 0x5];
            var _0x23c089 = _0x254274[_0x3297ea + 0x6];
            var _0x361dbc = _0x254274[_0x3297ea + 0x7];
            var _0x14d8bf = _0x254274[_0x3297ea + 0x8];
            var _0x4a1093 = _0x254274[_0x3297ea + 0x9];
            var _0x358917 = _0x254274[_0x3297ea + 0xa];
            var _0x5209d8 = _0x254274[_0x3297ea + 0xb];
            var _0x5c238b = _0x254274[_0x3297ea + 0xc];
            var _0x4e49ac = _0x254274[_0x3297ea + 0xd];
            var _0x1e8618 = _0x254274[_0x3297ea + 0xe];
            var _0x52bd0c = _0x254274[_0x3297ea + 0xf];
            var _0x2a9b54 = _0x48fcb2[0x0];
            var _0x232433 = _0x1d0419(_0x232433 = _0x1d0419(_0x232433 = _0x1d0419(_0x232433 = _0x1d0419(_0x232433 = _0x14dd9d(_0x232433 = _0x14dd9d(_0x232433 = _0x14dd9d(_0x232433 = _0x14dd9d(_0x232433 = _0x56ef37(_0x232433 = _0x56ef37(_0x232433 = _0x56ef37(_0x232433 = _0x56ef37(_0x232433 = _0x4abba8(_0x232433 = _0x4abba8(_0x232433 = _0x4abba8(_0x232433 = _0x4abba8(_0x232433 = _0x48fcb2[0x1], _0xd9eab3 = _0x4abba8(_0xd9eab3 = _0x48fcb2[0x2], _0x1b6eaa = _0x4abba8(_0x1b6eaa = _0x48fcb2[0x3], _0x2a9b54 = _0x4abba8(_0x2a9b54, _0x232433, _0xd9eab3, _0x1b6eaa, _0x4f91c6, 0x7, _0x579f38[0x0]), _0x232433, _0xd9eab3, _0x1636b1, 0xc, _0x579f38[0x1]), _0x2a9b54, _0x232433, _0x18442d, 0x11, _0x579f38[0x2]), _0x1b6eaa, _0x2a9b54, _0x19d145, 0x16, _0x579f38[0x3]), _0xd9eab3 = _0x4abba8(_0xd9eab3, _0x1b6eaa = _0x4abba8(_0x1b6eaa, _0x2a9b54 = _0x4abba8(_0x2a9b54, _0x232433, _0xd9eab3, _0x1b6eaa, _0x22f849, 0x7, _0x579f38[0x4]), _0x232433, _0xd9eab3, _0x1d7937, 0xc, _0x579f38[0x5]), _0x2a9b54, _0x232433, _0x23c089, 0x11, _0x579f38[0x6]), _0x1b6eaa, _0x2a9b54, _0x361dbc, 0x16, _0x579f38[0x7]), _0xd9eab3 = _0x4abba8(_0xd9eab3, _0x1b6eaa = _0x4abba8(_0x1b6eaa, _0x2a9b54 = _0x4abba8(_0x2a9b54, _0x232433, _0xd9eab3, _0x1b6eaa, _0x14d8bf, 0x7, _0x579f38[0x8]), _0x232433, _0xd9eab3, _0x4a1093, 0xc, _0x579f38[0x9]), _0x2a9b54, _0x232433, _0x358917, 0x11, _0x579f38[0xa]), _0x1b6eaa, _0x2a9b54, _0x5209d8, 0x16, _0x579f38[0xb]), _0xd9eab3 = _0x4abba8(_0xd9eab3, _0x1b6eaa = _0x4abba8(_0x1b6eaa, _0x2a9b54 = _0x4abba8(_0x2a9b54, _0x232433, _0xd9eab3, _0x1b6eaa, _0x5c238b, 0x7, _0x579f38[0xc]), _0x232433, _0xd9eab3, _0x4e49ac, 0xc, _0x579f38[0xd]), _0x2a9b54, _0x232433, _0x1e8618, 0x11, _0x579f38[0xe]), _0x1b6eaa, _0x2a9b54, _0x52bd0c, 0x16, _0x579f38[0xf]), _0xd9eab3 = _0x56ef37(_0xd9eab3, _0x1b6eaa = _0x56ef37(_0x1b6eaa, _0x2a9b54 = _0x56ef37(_0x2a9b54, _0x232433, _0xd9eab3, _0x1b6eaa, _0x1636b1, 0x5, _0x579f38[0x10]), _0x232433, _0xd9eab3, _0x23c089, 0x9, _0x579f38[0x11]), _0x2a9b54, _0x232433, _0x5209d8, 0xe, _0x579f38[0x12]), _0x1b6eaa, _0x2a9b54, _0x4f91c6, 0x14, _0x579f38[0x13]), _0xd9eab3 = _0x56ef37(_0xd9eab3, _0x1b6eaa = _0x56ef37(_0x1b6eaa, _0x2a9b54 = _0x56ef37(_0x2a9b54, _0x232433, _0xd9eab3, _0x1b6eaa, _0x1d7937, 0x5, _0x579f38[0x14]), _0x232433, _0xd9eab3, _0x358917, 0x9, _0x579f38[0x15]), _0x2a9b54, _0x232433, _0x52bd0c, 0xe, _0x579f38[0x16]), _0x1b6eaa, _0x2a9b54, _0x22f849, 0x14, _0x579f38[0x17]), _0xd9eab3 = _0x56ef37(_0xd9eab3, _0x1b6eaa = _0x56ef37(_0x1b6eaa, _0x2a9b54 = _0x56ef37(_0x2a9b54, _0x232433, _0xd9eab3, _0x1b6eaa, _0x4a1093, 0x5, _0x579f38[0x18]), _0x232433, _0xd9eab3, _0x1e8618, 0x9, _0x579f38[0x19]), _0x2a9b54, _0x232433, _0x19d145, 0xe, _0x579f38[0x1a]), _0x1b6eaa, _0x2a9b54, _0x14d8bf, 0x14, _0x579f38[0x1b]), _0xd9eab3 = _0x56ef37(_0xd9eab3, _0x1b6eaa = _0x56ef37(_0x1b6eaa, _0x2a9b54 = _0x56ef37(_0x2a9b54, _0x232433, _0xd9eab3, _0x1b6eaa, _0x4e49ac, 0x5, _0x579f38[0x1c]), _0x232433, _0xd9eab3, _0x18442d, 0x9, _0x579f38[0x1d]), _0x2a9b54, _0x232433, _0x361dbc, 0xe, _0x579f38[0x1e]), _0x1b6eaa, _0x2a9b54, _0x5c238b, 0x14, _0x579f38[0x1f]), _0xd9eab3 = _0x14dd9d(_0xd9eab3, _0x1b6eaa = _0x14dd9d(_0x1b6eaa, _0x2a9b54 = _0x14dd9d(_0x2a9b54, _0x232433, _0xd9eab3, _0x1b6eaa, _0x1d7937, 0x4, _0x579f38[0x20]), _0x232433, _0xd9eab3, _0x14d8bf, 0xb, _0x579f38[0x21]), _0x2a9b54, _0x232433, _0x5209d8, 0x10, _0x579f38[0x22]), _0x1b6eaa, _0x2a9b54, _0x1e8618, 0x17, _0x579f38[0x23]), _0xd9eab3 = _0x14dd9d(_0xd9eab3, _0x1b6eaa = _0x14dd9d(_0x1b6eaa, _0x2a9b54 = _0x14dd9d(_0x2a9b54, _0x232433, _0xd9eab3, _0x1b6eaa, _0x1636b1, 0x4, _0x579f38[0x24]), _0x232433, _0xd9eab3, _0x22f849, 0xb, _0x579f38[0x25]), _0x2a9b54, _0x232433, _0x361dbc, 0x10, _0x579f38[0x26]), _0x1b6eaa, _0x2a9b54, _0x358917, 0x17, _0x579f38[0x27]), _0xd9eab3 = _0x14dd9d(_0xd9eab3, _0x1b6eaa = _0x14dd9d(_0x1b6eaa, _0x2a9b54 = _0x14dd9d(_0x2a9b54, _0x232433, _0xd9eab3, _0x1b6eaa, _0x4e49ac, 0x4, _0x579f38[0x28]), _0x232433, _0xd9eab3, _0x4f91c6, 0xb, _0x579f38[0x29]), _0x2a9b54, _0x232433, _0x19d145, 0x10, _0x579f38[0x2a]), _0x1b6eaa, _0x2a9b54, _0x23c089, 0x17, _0x579f38[0x2b]), _0xd9eab3 = _0x14dd9d(_0xd9eab3, _0x1b6eaa = _0x14dd9d(_0x1b6eaa, _0x2a9b54 = _0x14dd9d(_0x2a9b54, _0x232433, _0xd9eab3, _0x1b6eaa, _0x4a1093, 0x4, _0x579f38[0x2c]), _0x232433, _0xd9eab3, _0x5c238b, 0xb, _0x579f38[0x2d]), _0x2a9b54, _0x232433, _0x52bd0c, 0x10, _0x579f38[0x2e]), _0x1b6eaa, _0x2a9b54, _0x18442d, 0x17, _0x579f38[0x2f]), _0xd9eab3 = _0x1d0419(_0xd9eab3, _0x1b6eaa = _0x1d0419(_0x1b6eaa, _0x2a9b54 = _0x1d0419(_0x2a9b54, _0x232433, _0xd9eab3, _0x1b6eaa, _0x4f91c6, 0x6, _0x579f38[0x30]), _0x232433, _0xd9eab3, _0x361dbc, 0xa, _0x579f38[0x31]), _0x2a9b54, _0x232433, _0x1e8618, 0xf, _0x579f38[0x32]), _0x1b6eaa, _0x2a9b54, _0x1d7937, 0x15, _0x579f38[0x33]), _0xd9eab3 = _0x1d0419(_0xd9eab3, _0x1b6eaa = _0x1d0419(_0x1b6eaa, _0x2a9b54 = _0x1d0419(_0x2a9b54, _0x232433, _0xd9eab3, _0x1b6eaa, _0x5c238b, 0x6, _0x579f38[0x34]), _0x232433, _0xd9eab3, _0x19d145, 0xa, _0x579f38[0x35]), _0x2a9b54, _0x232433, _0x358917, 0xf, _0x579f38[0x36]), _0x1b6eaa, _0x2a9b54, _0x1636b1, 0x15, _0x579f38[0x37]), _0xd9eab3 = _0x1d0419(_0xd9eab3, _0x1b6eaa = _0x1d0419(_0x1b6eaa, _0x2a9b54 = _0x1d0419(_0x2a9b54, _0x232433, _0xd9eab3, _0x1b6eaa, _0x14d8bf, 0x6, _0x579f38[0x38]), _0x232433, _0xd9eab3, _0x52bd0c, 0xa, _0x579f38[0x39]), _0x2a9b54, _0x232433, _0x23c089, 0xf, _0x579f38[0x3a]), _0x1b6eaa, _0x2a9b54, _0x4e49ac, 0x15, _0x579f38[0x3b]), _0xd9eab3 = _0x1d0419(_0xd9eab3, _0x1b6eaa = _0x1d0419(_0x1b6eaa, _0x2a9b54 = _0x1d0419(_0x2a9b54, _0x232433, _0xd9eab3, _0x1b6eaa, _0x22f849, 0x6, _0x579f38[0x3c]), _0x232433, _0xd9eab3, _0x5209d8, 0xa, _0x579f38[0x3d]), _0x2a9b54, _0x232433, _0x18442d, 0xf, _0x579f38[0x3e]), _0x1b6eaa, _0x2a9b54, _0x4a1093, 0x15, _0x579f38[0x3f]);
            _0x48fcb2[0x0] = _0x48fcb2[0x0] + _0x2a9b54 | 0x0;
            _0x48fcb2[0x1] = _0x48fcb2[0x1] + _0x232433 | 0x0;
            _0x48fcb2[0x2] = _0x48fcb2[0x2] + _0xd9eab3 | 0x0;
            _0x48fcb2[0x3] = _0x48fcb2[0x3] + _0x1b6eaa | 0x0;
          },
          '_doFinalize': function () {
            var _0x3c3304 = this._data;
            var _0x4f4025 = _0x3c3304.words;
            var _0x551f31 = 0x8 * this._nDataBytes;
            var _0x393302 = 0x8 * _0x3c3304.sigBytes;
            _0x4f4025[_0x393302 >>> 0x5] |= 0x80 << 0x18 - _0x393302 % 0x20;
            var _0x55c766 = _0x1e4b1f.floor(_0x551f31 / 0x100000000);
            _0x4f4025[0xf + (_0x393302 + 0x40 >>> 0x9 << 0x4)] = 0xff00ff & (_0x55c766 << 0x8 | _0x55c766 >>> 0x18) | 0xff00ff00 & (_0x55c766 << 0x18 | _0x55c766 >>> 0x8);
            _0x4f4025[0xe + (_0x393302 + 0x40 >>> 0x9 << 0x4)] = 0xff00ff & (_0x551f31 << 0x8 | _0x551f31 >>> 0x18) | 0xff00ff00 & (_0x551f31 << 0x18 | _0x551f31 >>> 0x8);
            _0x3c3304.sigBytes = 0x4 * (_0x4f4025.length + 0x1);
            this._process();
            _0x4f4025 = (_0x3c3304 = this._hash).words;
            for (_0x551f31 = 0x0; 0x4 > _0x551f31; _0x551f31++) {
              _0x393302 = _0x4f4025[_0x551f31];
              _0x4f4025[_0x551f31] = 0xff00ff & (_0x393302 << 0x8 | _0x393302 >>> 0x18) | 0xff00ff00 & (_0x393302 << 0x18 | _0x393302 >>> 0x8);
            }
            return _0x3c3304;
          },
          'clone': function () {
            var _0x193efa = _0x464e4b.clone.call(this);
            _0x193efa._hash = this._hash.clone();
            return _0x193efa;
          }
        });
        _0x5ae716.MD5 = _0x464e4b._createHelper(_0x3d94b7);
        _0x5ae716.HmacMD5 = _0x464e4b._createHmacHelper(_0x3d94b7);
      })(Math);
      (function () {
        var _0x34f250;
        var _0x20334d = (_0x34f250 = _0x5ae716.lib).Base;
        var _0x96107c = _0x34f250.WordArray;
        var _0x197bb6 = (_0x34f250 = _0x5ae716.algo).EvpKDF = _0x20334d.extend({
          'cfg': _0x20334d.extend({
            'keySize': 0x4,
            'hasher': _0x34f250.MD5,
            'iterations': 0x1
          }),
          'init': function (_0x4a0b61) {
            this.cfg = this.cfg.extend(_0x4a0b61);
          },
          'compute': function (_0x4b1731, _0x367a6a) {
            var _0x140c3a = (_0x4ce619 = this.cfg).hasher.create();
            var _0x13f62c = _0x96107c.create();
            var _0x47d3ca = _0x13f62c.words;
            var _0x2aeac4 = _0x4ce619.keySize;
            for (var _0x4ce619 = _0x4ce619.iterations; _0x47d3ca.length < _0x2aeac4;) {
              if (_0x1ce406) {
                _0x140c3a.update(_0x1ce406);
              }
              var _0x1ce406 = _0x140c3a.update(_0x4b1731).finalize(_0x367a6a);
              _0x140c3a.reset();
              for (var _0x5552b3 = 0x1; _0x5552b3 < _0x4ce619; _0x5552b3++) {
                _0x1ce406 = _0x140c3a.finalize(_0x1ce406);
                _0x140c3a.reset();
              }
              _0x13f62c.concat(_0x1ce406);
            }
            _0x13f62c.sigBytes = 0x4 * _0x2aeac4;
            return _0x13f62c;
          }
        });
        _0x5ae716.EvpKDF = function (_0x4e4b16, _0x1164af, _0x24ad19) {
          return _0x197bb6.create(_0x24ad19).compute(_0x4e4b16, _0x1164af);
        };
      })();
      if (!_0x5ae716.lib.Cipher) {
        (function (_0x72be17) {
          var _0x1590d9 = (_0x27d4d0 = _0x5ae716).lib;
          var _0x18e765 = _0x1590d9.Base;
          var _0x10a736 = _0x1590d9.WordArray;
          var _0x2344a3 = _0x1590d9.BufferedBlockAlgorithm;
          var _0x3ad130 = _0x27d4d0.enc.Base64;
          var _0x412121 = _0x27d4d0.algo.EvpKDF;
          var _0x65e74 = _0x1590d9.Cipher = _0x2344a3.extend({
            'cfg': _0x18e765.extend(),
            'createEncryptor': function (_0x40e8ce, _0x1ce9d4) {
              return this.create(this._ENC_XFORM_MODE, _0x40e8ce, _0x1ce9d4);
            },
            'createDecryptor': function (_0x1a8a7d, _0x197339) {
              return this.create(this._DEC_XFORM_MODE, _0x1a8a7d, _0x197339);
            },
            'init': function (_0x4b2661, _0x378fd5, _0x1582ab) {
              this.cfg = this.cfg.extend(_0x1582ab);
              this._xformMode = _0x4b2661;
              this._key = _0x378fd5;
              this.reset();
            },
            'reset': function () {
              _0x2344a3.reset.call(this);
              this._doReset();
            },
            'process': function (_0x3ede1a) {
              this._append(_0x3ede1a);
              return this._process();
            },
            'finalize': function (_0x5b9fab) {
              if (_0x5b9fab) {
                this._append(_0x5b9fab);
              }
              return this._doFinalize();
            },
            'keySize': 0x4,
            'ivSize': 0x4,
            '_ENC_XFORM_MODE': 0x1,
            '_DEC_XFORM_MODE': 0x2,
            '_createHelper': function (_0x3f27fc) {
              return {
                'encrypt': function (_0x592006, _0x1dcad1, _0x14641a) {
                  return ("string" == typeof _0x1dcad1 ? _0x57b325 : _0x37c6ee).encrypt(_0x3f27fc, _0x592006, _0x1dcad1, _0x14641a);
                },
                'decrypt': function (_0x18e349, _0x471fae, _0x30a607) {
                  return ("string" == typeof _0x471fae ? _0x57b325 : _0x37c6ee).decrypt(_0x3f27fc, _0x18e349, _0x471fae, _0x30a607);
                }
              };
            }
          });
          _0x1590d9.StreamCipher = _0x65e74.extend({
            '_doFinalize': function () {
              return this._process(true);
            },
            'blockSize': 0x1
          });
          var _0xe24681 = _0x27d4d0.mode = {};
          var _0x4c79f3 = function (_0x1920bf, _0x4e07f2, _0x44d9fc) {
            var _0x59f00e = this._iv;
            if (_0x59f00e) {
              this._iv = undefined;
            } else {
              _0x59f00e = this._prevBlock;
            }
            for (var _0x5445c9 = 0x0; _0x5445c9 < _0x44d9fc; _0x5445c9++) {
              _0x1920bf[_0x4e07f2 + _0x5445c9] ^= _0x59f00e[_0x5445c9];
            }
          };
          var _0x5e4806 = (_0x1590d9.BlockCipherMode = _0x18e765.extend({
            'createEncryptor': function (_0x38ea97, _0x520065) {
              return this.Encryptor.create(_0x38ea97, _0x520065);
            },
            'createDecryptor': function (_0x4b9c75, _0x16168a) {
              return this.Decryptor.create(_0x4b9c75, _0x16168a);
            },
            'init': function (_0xe442b6, _0x32f560) {
              this._cipher = _0xe442b6;
              this._iv = _0x32f560;
            }
          })).extend();
          _0x5e4806.Encryptor = _0x5e4806.extend({
            'processBlock': function (_0x1d204a, _0x29b3ff) {
              var _0x4521a3 = this._cipher;
              var _0x291404 = _0x4521a3.blockSize;
              _0x4c79f3.call(this, _0x1d204a, _0x29b3ff, _0x291404);
              _0x4521a3.encryptBlock(_0x1d204a, _0x29b3ff);
              this._prevBlock = _0x1d204a.slice(_0x29b3ff, _0x29b3ff + _0x291404);
            }
          });
          _0x5e4806.Decryptor = _0x5e4806.extend({
            'processBlock': function (_0x274ba8, _0x57447a) {
              var _0x1da022 = this._cipher;
              var _0x109dfa = _0x1da022.blockSize;
              var _0x2c6b31 = _0x274ba8.slice(_0x57447a, _0x57447a + _0x109dfa);
              _0x1da022.decryptBlock(_0x274ba8, _0x57447a);
              _0x4c79f3.call(this, _0x274ba8, _0x57447a, _0x109dfa);
              this._prevBlock = _0x2c6b31;
            }
          });
          _0xe24681 = _0xe24681.CBC = _0x5e4806;
          _0x5e4806 = (_0x27d4d0.pad = {}).Pkcs7 = {
            'pad': function (_0x33664e, _0x1f6b0e) {
              var _0x38e474;
              var _0x20f30e = (_0x38e474 = (_0x38e474 = 0x4 * _0x1f6b0e) - _0x33664e.sigBytes % _0x38e474) << 0x18 | _0x38e474 << 0x10 | _0x38e474 << 0x8 | _0x38e474;
              var _0x1259e7 = [];
              for (var _0x2c680d = 0x0; _0x2c680d < _0x38e474; _0x2c680d += 0x4) {
                _0x1259e7.push(_0x20f30e);
              }
              _0x38e474 = _0x10a736.create(_0x1259e7, _0x38e474);
              _0x33664e.concat(_0x38e474);
            },
            'unpad': function (_0x365dcb) {
              _0x365dcb.sigBytes -= 0xff & _0x365dcb.words[_0x365dcb.sigBytes - 0x1 >>> 0x2];
            }
          };
          _0x1590d9.BlockCipher = _0x65e74.extend({
            'cfg': _0x65e74.cfg.extend({
              'mode': _0xe24681,
              'padding': _0x5e4806
            }),
            'reset': function () {
              _0x65e74.reset.call(this);
              var _0x2e14ef = (_0x309937 = this.cfg).iv;
              var _0x309937 = _0x309937.mode;
              if (this._xformMode == this._ENC_XFORM_MODE) {
                var _0x139390 = _0x309937.createEncryptor;
              } else {
                _0x139390 = _0x309937.createDecryptor;
                this._minBufferSize = 0x1;
              }
              this._mode = _0x139390.call(_0x309937, this, _0x2e14ef && _0x2e14ef.words);
            },
            '_doProcessBlock': function (_0x2012d0, _0x508b57) {
              this._mode.processBlock(_0x2012d0, _0x508b57);
            },
            '_doFinalize': function () {
              var _0x230f5d = this.cfg.padding;
              if (this._xformMode == this._ENC_XFORM_MODE) {
                _0x230f5d.pad(this._data, this.blockSize);
                var _0x262432 = this._process(true);
              } else {
                _0x262432 = this._process(true);
                _0x230f5d.unpad(_0x262432);
              }
              return _0x262432;
            },
            'blockSize': 0x4
          });
          var _0x310cc2 = _0x1590d9.CipherParams = _0x18e765.extend({
            'init': function (_0x174c14) {
              this.mixIn(_0x174c14);
            },
            'toString': function (_0x4cd8c9) {
              return (_0x4cd8c9 || this.formatter).stringify(this);
            }
          });
          _0xe24681 = (_0x27d4d0.format = {}).OpenSSL = {
            'stringify': function (_0x1a687c) {
              var _0x40594d = _0x1a687c.ciphertext;
              return ((_0x1a687c = _0x1a687c.salt) ? _0x10a736.create([0x53616c74, 0x65645f5f]).concat(_0x1a687c).concat(_0x40594d) : _0x40594d).toString(_0x3ad130);
            },
            'parse': function (_0x48500a) {
              var _0x294a31 = (_0x48500a = _0x3ad130.parse(_0x48500a)).words;
              if (0x53616c74 == _0x294a31[0x0] && 0x65645f5f == _0x294a31[0x1]) {
                var _0x10e73e = _0x10a736.create(_0x294a31.slice(0x2, 0x4));
                _0x294a31.splice(0x0, 0x4);
                _0x48500a.sigBytes -= 0x10;
              }
              return _0x310cc2.create({
                'ciphertext': _0x48500a,
                'salt': _0x10e73e
              });
            }
          };
          var _0x37c6ee = _0x1590d9.SerializableCipher = _0x18e765.extend({
            'cfg': _0x18e765.extend({
              'format': _0xe24681
            }),
            'encrypt': function (_0x5d30bf, _0x9db5bb, _0x2bdd31, _0x18a4aa) {
              _0x18a4aa = this.cfg.extend(_0x18a4aa);
              var _0x4bf96f = _0x5d30bf.createEncryptor(_0x2bdd31, _0x18a4aa);
              _0x9db5bb = _0x4bf96f.finalize(_0x9db5bb);
              _0x4bf96f = _0x4bf96f.cfg;
              return _0x310cc2.create({
                'ciphertext': _0x9db5bb,
                'key': _0x2bdd31,
                'iv': _0x4bf96f.iv,
                'algorithm': _0x5d30bf,
                'mode': _0x4bf96f.mode,
                'padding': _0x4bf96f.padding,
                'blockSize': _0x5d30bf.blockSize,
                'formatter': _0x18a4aa.format
              });
            },
            'decrypt': function (_0x1a5f9e, _0x1342c8, _0x395f1f, _0x371486) {
              _0x371486 = this.cfg.extend(_0x371486);
              _0x1342c8 = this._parse(_0x1342c8, _0x371486.format);
              return _0x1a5f9e.createDecryptor(_0x395f1f, _0x371486).finalize(_0x1342c8.ciphertext);
            },
            '_parse': function (_0x550ddd, _0x56b2d0) {
              return "string" == typeof _0x550ddd ? _0x56b2d0.parse(_0x550ddd, this) : _0x550ddd;
            }
          });
          var _0x27d4d0 = (_0x27d4d0.kdf = {}).OpenSSL = {
            'execute': function (_0x1c9e00, _0x470eea, _0x1118d6, _0x5543a7) {
              if (!_0x5543a7) {
                _0x5543a7 = _0x10a736.random(0x8);
              }
              _0x1c9e00 = _0x412121.create({
                'keySize': _0x470eea + _0x1118d6
              }).compute(_0x1c9e00, _0x5543a7);
              _0x1118d6 = _0x10a736.create(_0x1c9e00.words.slice(_0x470eea), 0x4 * _0x1118d6);
              _0x1c9e00.sigBytes = 0x4 * _0x470eea;
              return _0x310cc2.create({
                'key': _0x1c9e00,
                'iv': _0x1118d6,
                'salt': _0x5543a7
              });
            }
          };
          var _0x57b325 = _0x1590d9.PasswordBasedCipher = _0x37c6ee.extend({
            'cfg': _0x37c6ee.cfg.extend({
              'kdf': _0x27d4d0
            }),
            'encrypt': function (_0x2302f0, _0x30be15, _0x2042fa, _0x432734) {
              _0x2042fa = (_0x432734 = this.cfg.extend(_0x432734)).kdf.execute(_0x2042fa, _0x2302f0.keySize, _0x2302f0.ivSize);
              _0x432734.iv = _0x2042fa.iv;
              (_0x2302f0 = _0x37c6ee.encrypt.call(this, _0x2302f0, _0x30be15, _0x2042fa.key, _0x432734)).mixIn(_0x2042fa);
              return _0x2302f0;
            },
            'decrypt': function (_0x4ca63f, _0x796bae, _0x16ebc7, _0x2d4391) {
              _0x2d4391 = this.cfg.extend(_0x2d4391);
              _0x796bae = this._parse(_0x796bae, _0x2d4391.format);
              _0x16ebc7 = _0x2d4391.kdf.execute(_0x16ebc7, _0x4ca63f.keySize, _0x4ca63f.ivSize, _0x796bae.salt);
              _0x2d4391.iv = _0x16ebc7.iv;
              return _0x37c6ee.decrypt.call(this, _0x4ca63f, _0x796bae, _0x16ebc7.key, _0x2d4391);
            }
          });
        })();
      }
      (function () {
        var _0x2e138b = _0x5ae716.lib.BlockCipher;
        var _0x3debc5 = _0x5ae716.algo;
        var _0xbcac4b = [];
        var _0x41e587 = [];
        var _0x4ede18 = [];
        var _0x2512d2 = [];
        var _0x3b8c8a = [];
        var _0x16d2c5 = [];
        var _0x486bbc = [];
        var _0x5776c3 = [];
        var _0x228a24 = [];
        var _0x432c6a = [];
        var _0x17e13a = [];
        for (var _0x48423e = 0x0; 0x100 > _0x48423e; _0x48423e++) {
          _0x17e13a[_0x48423e] = 0x80 > _0x48423e ? _0x48423e << 0x1 : _0x48423e << 0x1 ^ 0x11b;
        }
        var _0x689777 = 0x0;
        var _0x119b28 = 0x0;
        for (_0x48423e = 0x0; 0x100 > _0x48423e; _0x48423e++) {
          var _0x417608 = (_0x417608 = _0x119b28 ^ _0x119b28 << 0x1 ^ _0x119b28 << 0x2 ^ _0x119b28 << 0x3 ^ _0x119b28 << 0x4) >>> 0x8 ^ 0xff & _0x417608 ^ 0x63;
          _0xbcac4b[_0x689777] = _0x417608;
          _0x41e587[_0x417608] = _0x689777;
          var _0x58f2db = _0x17e13a[_0x689777];
          var _0xa114af = _0x17e13a[_0x58f2db];
          var _0xb39cb0 = _0x17e13a[_0xa114af];
          var _0x639f01 = 0x101 * _0x17e13a[_0x417608] ^ 0x1010100 * _0x417608;
          _0x4ede18[_0x689777] = _0x639f01 << 0x18 | _0x639f01 >>> 0x8;
          _0x2512d2[_0x689777] = _0x639f01 << 0x10 | _0x639f01 >>> 0x10;
          _0x3b8c8a[_0x689777] = _0x639f01 << 0x8 | _0x639f01 >>> 0x18;
          _0x16d2c5[_0x689777] = _0x639f01;
          _0x639f01 = 0x1010101 * _0xb39cb0 ^ 0x10001 * _0xa114af ^ 0x101 * _0x58f2db ^ 0x1010100 * _0x689777;
          _0x486bbc[_0x417608] = _0x639f01 << 0x18 | _0x639f01 >>> 0x8;
          _0x5776c3[_0x417608] = _0x639f01 << 0x10 | _0x639f01 >>> 0x10;
          _0x228a24[_0x417608] = _0x639f01 << 0x8 | _0x639f01 >>> 0x18;
          _0x432c6a[_0x417608] = _0x639f01;
          if (_0x689777) {
            _0x689777 = _0x58f2db ^ _0x17e13a[_0x17e13a[_0x17e13a[_0xb39cb0 ^ _0x58f2db]]];
            _0x119b28 ^= _0x17e13a[_0x17e13a[_0x119b28]];
          } else {
            _0x689777 = _0x119b28 = 0x1;
          }
        }
        var _0x2c796c = [0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
        _0x3debc5 = _0x3debc5.AES = _0x2e138b.extend({
          '_doReset': function () {
            var _0x55d5cb = (_0x3db8e0 = this._key).words;
            var _0x104744 = _0x3db8e0.sigBytes / 0x4;
            var _0x3db8e0 = 0x4 * ((this._nRounds = _0x104744 + 0x6) + 0x1);
            var _0x53275b = this._keySchedule = [];
            for (var _0xe32d81 = 0x0; _0xe32d81 < _0x3db8e0; _0xe32d81++) {
              if (_0xe32d81 < _0x104744) {
                _0x53275b[_0xe32d81] = _0x55d5cb[_0xe32d81];
              } else {
                var _0x5bf8b4 = _0x53275b[_0xe32d81 - 0x1];
                if (_0xe32d81 % _0x104744) {
                  if (0x6 < _0x104744 && 0x4 == _0xe32d81 % _0x104744) {
                    _0x5bf8b4 = _0xbcac4b[_0x5bf8b4 >>> 0x18] << 0x18 | _0xbcac4b[_0x5bf8b4 >>> 0x10 & 0xff] << 0x10 | _0xbcac4b[_0x5bf8b4 >>> 0x8 & 0xff] << 0x8 | _0xbcac4b[0xff & _0x5bf8b4];
                  }
                } else {
                  _0x5bf8b4 = _0xbcac4b[(_0x5bf8b4 = _0x5bf8b4 << 0x8 | _0x5bf8b4 >>> 0x18) >>> 0x18] << 0x18 | _0xbcac4b[_0x5bf8b4 >>> 0x10 & 0xff] << 0x10 | _0xbcac4b[_0x5bf8b4 >>> 0x8 & 0xff] << 0x8 | _0xbcac4b[0xff & _0x5bf8b4];
                  _0x5bf8b4 ^= _0x2c796c[_0xe32d81 / _0x104744 | 0x0] << 0x18;
                }
                _0x53275b[_0xe32d81] = _0x53275b[_0xe32d81 - _0x104744] ^ _0x5bf8b4;
              }
            }
            _0x55d5cb = this._invKeySchedule = [];
            for (_0x104744 = 0x0; _0x104744 < _0x3db8e0; _0x104744++) {
              _0xe32d81 = _0x3db8e0 - _0x104744;
              _0x5bf8b4 = _0x104744 % 0x4 ? _0x53275b[_0xe32d81] : _0x53275b[_0xe32d81 - 0x4];
              _0x55d5cb[_0x104744] = 0x4 > _0x104744 || 0x4 >= _0xe32d81 ? _0x5bf8b4 : _0x486bbc[_0xbcac4b[_0x5bf8b4 >>> 0x18]] ^ _0x5776c3[_0xbcac4b[_0x5bf8b4 >>> 0x10 & 0xff]] ^ _0x228a24[_0xbcac4b[_0x5bf8b4 >>> 0x8 & 0xff]] ^ _0x432c6a[_0xbcac4b[0xff & _0x5bf8b4]];
            }
          },
          'encryptBlock': function (_0x35373a, _0x409181) {
            this._doCryptBlock(_0x35373a, _0x409181, this._keySchedule, _0x4ede18, _0x2512d2, _0x3b8c8a, _0x16d2c5, _0xbcac4b);
          },
          'decryptBlock': function (_0x58972d, _0x3f27cf) {
            var _0x51e98d = _0x58972d[_0x3f27cf + 0x1];
            _0x58972d[_0x3f27cf + 0x1] = _0x58972d[_0x3f27cf + 0x3];
            _0x58972d[_0x3f27cf + 0x3] = _0x51e98d;
            this._doCryptBlock(_0x58972d, _0x3f27cf, this._invKeySchedule, _0x486bbc, _0x5776c3, _0x228a24, _0x432c6a, _0x41e587);
            _0x51e98d = _0x58972d[_0x3f27cf + 0x1];
            _0x58972d[_0x3f27cf + 0x1] = _0x58972d[_0x3f27cf + 0x3];
            _0x58972d[_0x3f27cf + 0x3] = _0x51e98d;
          },
          '_doCryptBlock': function (_0x1212ca, _0x356ffc, _0x48504a, _0x2cef6f, _0x5173f1, _0x7b99b3, _0x3ccbbd, _0x5a6f02) {
            var _0x521a10 = this._nRounds;
            var _0x48d874 = _0x1212ca[_0x356ffc] ^ _0x48504a[0x0];
            var _0x506234 = _0x1212ca[_0x356ffc + 0x1] ^ _0x48504a[0x1];
            var _0x4a956e = _0x1212ca[_0x356ffc + 0x2] ^ _0x48504a[0x2];
            var _0x37ff19 = _0x1212ca[_0x356ffc + 0x3] ^ _0x48504a[0x3];
            var _0x385dc0 = 0x4;
            for (var _0x5d6938 = 0x1; _0x5d6938 < _0x521a10; _0x5d6938++) {
              var _0x551ad4 = _0x2cef6f[_0x48d874 >>> 0x18] ^ _0x5173f1[_0x506234 >>> 0x10 & 0xff] ^ _0x7b99b3[_0x4a956e >>> 0x8 & 0xff] ^ _0x3ccbbd[0xff & _0x37ff19] ^ _0x48504a[_0x385dc0++];
              var _0x24770f = _0x2cef6f[_0x506234 >>> 0x18] ^ _0x5173f1[_0x4a956e >>> 0x10 & 0xff] ^ _0x7b99b3[_0x37ff19 >>> 0x8 & 0xff] ^ _0x3ccbbd[0xff & _0x48d874] ^ _0x48504a[_0x385dc0++];
              var _0x4f1034 = _0x2cef6f[_0x4a956e >>> 0x18] ^ _0x5173f1[_0x37ff19 >>> 0x10 & 0xff] ^ _0x7b99b3[_0x48d874 >>> 0x8 & 0xff] ^ _0x3ccbbd[0xff & _0x506234] ^ _0x48504a[_0x385dc0++];
              _0x37ff19 = _0x2cef6f[_0x37ff19 >>> 0x18] ^ _0x5173f1[_0x48d874 >>> 0x10 & 0xff] ^ _0x7b99b3[_0x506234 >>> 0x8 & 0xff] ^ _0x3ccbbd[0xff & _0x4a956e] ^ _0x48504a[_0x385dc0++];
              _0x48d874 = _0x551ad4;
              _0x506234 = _0x24770f;
              _0x4a956e = _0x4f1034;
            }
            _0x551ad4 = (_0x5a6f02[_0x48d874 >>> 0x18] << 0x18 | _0x5a6f02[_0x506234 >>> 0x10 & 0xff] << 0x10 | _0x5a6f02[_0x4a956e >>> 0x8 & 0xff] << 0x8 | _0x5a6f02[0xff & _0x37ff19]) ^ _0x48504a[_0x385dc0++];
            _0x24770f = (_0x5a6f02[_0x506234 >>> 0x18] << 0x18 | _0x5a6f02[_0x4a956e >>> 0x10 & 0xff] << 0x10 | _0x5a6f02[_0x37ff19 >>> 0x8 & 0xff] << 0x8 | _0x5a6f02[0xff & _0x48d874]) ^ _0x48504a[_0x385dc0++];
            _0x4f1034 = (_0x5a6f02[_0x4a956e >>> 0x18] << 0x18 | _0x5a6f02[_0x37ff19 >>> 0x10 & 0xff] << 0x10 | _0x5a6f02[_0x48d874 >>> 0x8 & 0xff] << 0x8 | _0x5a6f02[0xff & _0x506234]) ^ _0x48504a[_0x385dc0++];
            _0x37ff19 = (_0x5a6f02[_0x37ff19 >>> 0x18] << 0x18 | _0x5a6f02[_0x48d874 >>> 0x10 & 0xff] << 0x10 | _0x5a6f02[_0x506234 >>> 0x8 & 0xff] << 0x8 | _0x5a6f02[0xff & _0x4a956e]) ^ _0x48504a[_0x385dc0++];
            _0x1212ca[_0x356ffc] = _0x551ad4;
            _0x1212ca[_0x356ffc + 0x1] = _0x24770f;
            _0x1212ca[_0x356ffc + 0x2] = _0x4f1034;
            _0x1212ca[_0x356ffc + 0x3] = _0x37ff19;
          },
          'keySize': 0x8
        });
        _0x5ae716.AES = _0x2e138b._createHelper(_0x3debc5);
      })();
      cc._RF.pop();
    }, {}],
    'ddsdk_ui': [function (_0x3e0d3b, _0x186fe, _0x299a10) {
      'use strict';
  
      cc._RF.push(_0x186fe, '63d3bQDsj1BGbaYcrYpDO6C', "ddsdk_ui");
      var _0xf70ac9 = _0x3e0d3b("CommonValue");
      var _0x33533d = _0x3e0d3b("GameData");
      var _0x8725e5 = _0x3e0d3b("CommonFunc");
      var _0x10a660 = _0x3e0d3b("ADShareManager");
      var _0x300ca5 = _0x3e0d3b("CommonEnum");
      cc.Class({
        'extends': cc.Component,
        'properties': {
          'city': '',
          'tryShow': false,
          'bkShow': false,
          'adShow': false,
          'favShow': false
        },
        'onLoad': function () {
          if (!window._loadDDSDK) {
            this.sdk = window.DDSDK;
            window._loadDDSDK = true;
            this.sdk.init(this.sdkLoaded.bind(this));
            console.log("lingjing init");
            if (DDSDK.isWx()) {
              window.wx.showShareMenu({
                'withShareTicket': false,
                'success': function (_0x15d34e) {
                  console.log("showShareMenu success");
                },
                'fail': function (_0x366921) {
                  console.log(_0x366921);
                  console.log("showShareMenu fail" + _0x366921);
                },
                'complete': function (_0x22da59) {
                  console.log("showShareMenu complete-------");
                }
              });
            }
            DDSDK.OnShareAppMessage(function () {
              var _0x5dd251 = _0x10a660.ADShareMgr.getAdShareData(_0x300ca5.Enum_ADShare.AS_Menu);
              var _0x4e68bf = _0x10a660.ADShareMgr.getShareData(_0x5dd251.id);
              var _0x14e991 = "shareID=" + _0x5dd251.id + "&imageId=" + _0x4e68bf.id + "&otherId=" + _0x33533d.TData.userId;
              return {
                'title': _0x4e68bf.title,
                'imageUrl': _0x4e68bf.imageUrl,
                'query': _0x14e991
              };
            });
            var _0x39f9da = cc.find("Canvas/share");
            if (_0x39f9da) {
              _0x39f9da.on(cc.Node.EventType.TOUCH_END, this.onTapBtn, this);
            }
            cc.game.addPersistRootNode(this.node);
          }
        },
        'onTapBtn': function (_0x3ce42b) {
          DDSDK.ShareAppMessage({
            'title': '转发标题',
            'imageUrl': "https://picconfig.chiji-h5.com/h5_pic/square_img_20190116164520.jpg"
          });
        },
        'onShare': function (_0x48efe3, _0x47dd6a, _0x37cebf) {
          DDSDK.ShareAppMessage({
            'title': _0x48efe3,
            'imageUrl': _0x47dd6a,
            'query': _0x37cebf
          });
        },
        'testLogEvent': function () {
          this.sdk.logEvent("start", {});
          this.sdk.logEvent("register", {});
          this.sdk.logEvent("startorder", {});
          this.sdk.logEvent("completeorder", {});
        },
        'adjustUI': function () {
          console.log("lingjing adjustUI");
          var _0x293366 = this.node.getChildByName("favlist");
          var _0x198b57 = this.node.getChildByName("trydlg");
          _0x8725e5.GFunc.adjustScreen(_0x293366);
          _0x8725e5.GFunc.adjustScreen(_0x198b57);
        },
        'showSDKUI': function () {
          console.warn("lingjing showsdk");
          var _0x4f6855 = this.sdk.getRender();
          if (_0x4f6855) {
            var _0x282a76 = this.node.getChildByName('favlist');
            this.node.getChildByName('bkgame');
            this.node.getChildByName("list1");
            this.node.getChildByName("list2");
            var _0x133f0a = this.node.getChildByName('trybtn');
            var _0xd900b0 = this.node.getChildByName('trydlg');
            var _0x5c10b2 = this.node.getChildByName("aniad");
            var _0x1b5516 = this.node.getChildByName("hbtn1");
            var _0x48032e = this.node.getChildByName("hbtn2");
            var _0x211f63 = _0x4f6855.getAniAD();
            if (_0x211f63) {
              _0x5c10b2.addChild(_0x211f63.getNode());
            }
            var _0x38cf0a = _0x4f6855.getTryBtn();
            if (_0x38cf0a) {
              _0x133f0a.addChild(_0x38cf0a.getNode());
            }
            var _0x45dcc8 = _0x4f6855.getTryDlg();
            _0x45dcc8.setCloseCB(function () {
              console.log("trydlg close...");
            });
            if (_0x45dcc8) {
              var _0xd73582 = _0x45dcc8.getDlg();
              _0xd900b0.addChild(_0xd73582);
            }
            var _0x280c52 = _0x4f6855.getFavAD(0x4, 0x1);
            if (_0x280c52) {
              _0x282a76.addChild(_0x280c52.getNode());
            }
            var _0x450ba9;
            var _0x44fcf3 = _0x4f6855.getHotGames();
            if (_0x44fcf3) {
              _0x450ba9 = _0x44fcf3.getBtns();
              console.log("Btns length:", _0x450ba9.length);
              if (_0x450ba9.length > 0x0) {
                if (_0x1b5516) {
                  _0x1b5516.addChild(_0x450ba9[0x0].getNode());
                }
                if (_0x450ba9[0x1] && _0x48032e) {
                  _0x48032e.addChild(_0x450ba9[0x1].getNode());
                }
              }
              var _0x5cadce = _0x44fcf3.getDlg();
              _0xd900b0.addChild(_0x5cadce);
            }
          }
        },
        'sdkLoaded': function () {
          console.warn("----------------lingjing sdk onLoaded--------------");
          var _0x1285c8 = _0x33533d.TData.getUserID();
          console.error("abc = " + _0x1285c8);
          this.sdk.setAccount(_0x1285c8);
          this.sdk.setRewardCB(function (_0x3cc98a, _0x2cc15c) {
            console.log("give reward:", _0x3cc98a, "type:", _0x2cc15c);
            switch (_0x2cc15c) {
              case 0x1:
                _0x33533d.TData.setGold(Math.floor(_0x33533d.TData.getGold() + _0x3cc98a), true, true);
                break;
              case 0x2:
                _0x33533d.TData.setPower(Math.floor(_0x33533d.TData.getPower() + _0x3cc98a), true, true);
            }
          });
          var _0x5a1448 = this;
          DDSDK.getIPInfo(function (_0x1e0989) {
            if (0x0 == _0x1e0989.error_code) {
              _0x5a1448.city = _0x1e0989.result.city;
              console.warn("lingjing city = ", _0x5a1448.city);
              if (['广东', '深圳'].indexOf(_0x5a1448.city) < 0x0) {
                _0x5a1448.showSDKUI();
              }
            }
          });
        },
        'showFavGame': function (_0x66668d) {
          this.favShow = _0x66668d;
          var _0x581474 = this.node.getChildByName("favlist");
          if (_0xf70ac9.GValue.favGame) {
            if (_0x581474) {
              _0x581474.active = _0x66668d;
            }
          } else {
            _0x581474.active = false;
          }
        },
        'showMain': function (_0x135ee2) {
          this.tryShow = _0x135ee2;
          this.bkShow = _0x135ee2;
          this.adShow = _0x135ee2;
          var _0x75546b = this.node.getChildByName("trybtn");
          var _0x59b837 = this.node.getChildByName('aniad');
          var _0x4a2454 = this.node.getChildByName("hbtn1");
          var _0x4b64b2 = this.node.getChildByName("hbtn2");
          if (_0xf70ac9.GValue.tryGamme) {
            if (_0x75546b) {
              _0x75546b.active = _0x135ee2;
            }
          } else {
            _0x75546b.active = false;
          }
          if (_0xf70ac9.GValue.adImage) {
            if (_0x59b837) {
              _0x59b837.active = _0x135ee2;
            }
          } else {
            _0x59b837.active = false;
          }
          if (_0xf70ac9.GValue.moreGame) {
            if (_0x4a2454) {
              _0x4a2454.active = _0x135ee2;
            }
          } else {
            _0x4a2454.active = false;
          }
          if (_0xf70ac9.GValue.moreGame) {
            if (_0x4b64b2) {
              _0x4b64b2.active = _0x135ee2;
            }
          } else {
            _0x4b64b2.active = false;
          }
        },
        'refreshSDKShow': function () {
          console.warn("lingjing refreshsdk");
          this.showMain(this.bkShow);
          this.showFavGame(this.favShow);
        }
      });
      cc._RF.pop();
    }, {
      'ADShareManager': "ADShareManager",
      'CommonEnum': "CommonEnum",
      'CommonFunc': "CommonFunc",
      'CommonValue': "CommonValue",
      'GameData': "GameData"
    }],
    'pad-zeropadding': [function (_0xcb7c0b, _0x467caf, _0x524ef7) {
      'use strict';
  
      cc._RF.push(_0x467caf, "06896l8ao9JqKzAu1GwxMzd", "pad-zeropadding");
      _0xcb7c0b('aes').CryptoJS.pad.ZeroPadding = {
        'pad': function (_0x3fc77d, _0x37334d) {
          var _0x4634a5 = 0x4 * _0x37334d;
          _0x3fc77d.clamp();
          _0x3fc77d.sigBytes += _0x4634a5 - (_0x3fc77d.sigBytes % _0x4634a5 || _0x4634a5);
        },
        'unpad': function (_0x51013f) {
          var _0x557979 = _0x51013f.words;
          for (var _0x2c6b16 = _0x51013f.sigBytes - 0x1; !(_0x557979[_0x2c6b16 >>> 0x2] >>> 0x18 - _0x2c6b16 % 0x4 * 0x8 & 0xff);) {
            _0x2c6b16--;
          }
          _0x51013f.sigBytes = _0x2c6b16 + 0x1;
        }
      };
      cc._RF.pop();
    }, {
      'aes': "aes"
    }]
  }, {}, ["ADShareManager", 'AndroidManager', "BossKnivesComponent", 'BossKnivesCtrl', "BossKnivesDropCtrl", "CBaseCollisionHandleSystem", "CEnemyEffect", 'CEntityBase', "CEntityBoss", "CEntityBossCircle", "CEntityBossElectr", "CEntityBossFire", "CEntityFollowPlayer", "CEntityKnife", "CEntityPlayer", "CEntitySnake", "CEntityWall", "CEntityWorld", "CGameRuleSystem", "CHMove", "CHMoveFix", "CHRotate", "CHeroCollisionHandleSystem", "CHeroCollisionWallListener", 'CHeroKnifeCollisionWallListener', "CKnifeColliderListener", "CKnifeColliderNodeCtrl", "CKnifeCollisionHandleSystem", "CKnifeCountComponent", 'CKnifeFixByWallCtrl', "CKnifeInit", "CKnifeMoveCtrl", "CKnifeOwnerComponent", "CKnifeParentCtrl", "CKnifeSkinCtrl", "CKnifeStateComponent", "CLogicPlayer", "CLoginEnemy", "CMoveByTouch", 'CMoveWithOwnerNode', "CNodeCollider", "CPickKnifeCollisionHandleSystem", 'CPlayerKnivesComponent', "CPoolMgr", 'CollisionEventManager', "CommonAudio", "CommonConfig", "CommonEnum", "CommonFunc", "CommonSdk", "CommonUI", "CommonValue", 'ConfigData', 'DWK', "DeputyWeaponCollisionHandleSys", 'EnemyActionMoveComponent', "EnemyAnimComponent", "EnemyAttrBaseCom", "EnemyAttrComponent", "EnemyAttrDoctorCom", "EnemyAttrEnterCom", "EnemyAttrSplitCom", 'EnemyAttrThronCom', "EnemyAttrTrackCom", "EnemyAttrVomitCom", "EnemyBase", "EnemyBaseComponent", 'EnemyBuffComponent', "EnemyCollisionBlockListener", "EnemyCollisionWallListener", 'EnemyDropComponent', "EnemyMoveBaseComponent", "EnemyMoveFix", "EnemySpeedUpMoveComponent", "EnemyStateComponent", 'EnemyUIComponent', "EntityAddSys", 'EntityBlock', "EntityDWBase", "EntityDWKnife", "EntityEnemy", 'EntityFollowEnemy', "EntityPlayerDeputyFollow", "EntityProp", 'GameData', 'GameUI', "GuideUI", 'Hawkeye', "HomeUI", "ItemProperty", 'KnifeDropCollisionWallListener', 'KnifeRivalEffect', "KnifeThrowCtrl", "LaserComponent", "Launcherr", "LoadingData", "MapManager", "NetBase", "NetDown", 'NetUp', 'PanelAddProgram', "PanelBase", "PanelCheat copy", "PanelCheat", "PanelGold", "PanelLevelGuide", 'PanelLoading', "PanelModal", 'PanelNew', "PanelOffline", "PanelOver", "PanelPower", "PanelRevive", "PanelSetting", "PfFrameAnim", "PfNum", "PfTip", "PlayerAnimComponent", "PlayerCollisionEnemyComponent", "PlayerDWElectricityComponent", "PlayerDWFireComponent", "PlayerDWIceComponent", "PlayerDWKnifeComponent", "PlayerDWLaserComponent", "PlayerDWNormalBase", "PlayerDeputyWeaponBase", 'PlayerPickupComponent', "PlayerStateComponent", "PropCollisionWallListener", 'PropManager', "PropMoveFix", "PropertyUI", "ShadowOwnerComponent", 'StageUI', "Test", "Tools", "Types", "aes", "ddsdk_ui", 'pad-zeropadding']);
  window.xmgame = [];
  window.xmgame.showBanner = function () {};
  window.xmgame.showVideo = function (_0x2023ba, _0x2b1cd1) {
    if (typeof wsdk !== "undefined" && wsdk.showAd !== "undefined") {
      if (cc.sdkMgr) {
        cc.sdkMgr.rtVideo = _0x2023ba;
      }
      wsdk.showAd("rewarded").then(function () {})["catch"](function (_0x38be31) {
        if (_0x2b1cd1) {
          _0x2b1cd1();
        }
      });
    } else if (_0x2b1cd1) {
      _0x2b1cd1();
    }
    // _0x2b1cd1();
  };
  cc.sdkMgr = [];
  cc.sdkMgr.finishReward = function () {
    if (cc.sdkMgr.rtVideo) {
      cc.sdkMgr.rtVideo();
    }
    cc.sdkMgr.rtVideo = null;
  };